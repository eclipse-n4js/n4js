/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

function replacer(key: string, value: any) {
    if (value === undefined) {
        return '' + value;
    }
    if (typeof value === 'number' && (isNaN(value as number) || !isFinite(value as number))) {
        return (value as number).toString();
    }
    if (typeof value === 'function' || value instanceof RegExp) {
        return (value as RegExp).toString();
    }
    return value;
}

function truncate(s: string, n: number) {
    if (typeof s == 'string') {
        return s.length < n ? s: s.slice(0, n);
    } else {
        return s;
    }
}

export public class AssertionError extends Error {
    public actual?: any;
    public expected?: any;
    public operator?: string;
    public stackStartFunction?: Function;
    constructor (spec: ~Object with {
        stack?: Array<string>;
        actual?: any;
        expected?: any;
        operator?: string;
        stackStartFunction?: Function;
        message?: string;
    }) {
        spec = spec || {};
        let stackHolder: ~Object with {stack: string;} = {stack:""}
          , msg = spec.message ? spec.message: ""
        ;
        try {
            if (!(spec.actual == null && spec.expected == null && spec.operator == null)) {
                msg += ` (${String(spec.actual)} not ${String(spec.operator)} ${String(spec.expected)} )`;
            }
        } catch (e) {
            //ignore errors if actual, operator, or expected can't be stringified
        }
        super(msg);

        this.name = "AssertionError";
        const Er: any+ = Error;

        if (!spec.stack) {
            if (Er.captureStackTrace && spec.stackStartFunction) {
                Er.captureStackTrace(stackHolder, spec.stackStartFunction);
            } else {
        // try to throw an error now, and from the stack property
        // work out the line that called in to assert.js.
                try {
                    let err: Error+ = new Error();
                    stackHolder.stack = err.stack.toString();
                } catch (e) {}
            }
        }
        if (typeof stackHolder.stack === "string") {
            spec.stack = stackHolder.stack.split("\n");
        }
        this.stack = spec.stack.join("\n");
        this.actual = spec.actual;
        this.expected = spec.expected;
        this.operator = spec.operator;
        this.stackStartFunction = spec.stackStartFunction;
    }

    @Override
    public toString(): string {
        let str: string = "";
        try {
            str += this.name + ": ";
            if (this.message) {
                str += this.message;
            } else {
                str += [
                  truncate(JSON.stringify(this.actual, replacer), 128),
                  this.operator,
                  truncate(JSON.stringify(this.expected, replacer), 128)
                ].join(' ');
            }
        } catch(ex) {
            console.log("could not provide helpful assertion error message because of error", ex);
        }

        return str;
    }
}

