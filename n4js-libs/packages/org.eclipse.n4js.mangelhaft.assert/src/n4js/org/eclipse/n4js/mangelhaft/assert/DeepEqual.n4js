/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
/**
 * Tests given arguments for deep equality. If 'ignorePrototype' is true,
 * two objects will be deemed equal if they have the same properties with
 * equal values, even if they do not have the same prototype.
 *
 * The implementation is guarded against infinite recursion, so it is safe to
 * invoke this function with cyclic data structures.
 */
 export public function deepEqual(actual: any, expected: any, ignorePrototype: boolean=): boolean {
     const shouldIgnorePrototype = (ignorePrototype == undefined)? true : ignorePrototype;
     return deepEqualRec(actual, expected, new WeakMap<Object, any>(), shouldIgnorePrototype);
 }
 
function deepEqualRec(actual: any, expected: any, visited: WeakMap<Object, any>, ignorePrototype: boolean=): boolean {
    // Either one is primitive, compare directly
    if (!(actual instanceof Object) || !(expected instanceof Object)) {
        return actual === expected;
    }
    
    const actualObj: Object = actual;
    const expectedObj: Object = expected;
    
    if (!ignorePrototype) {
       const actualPrototype = Object.getPrototypeOf(actualObj);
       const expectedPrototype = Object.getPrototypeOf(expectedObj);
       
       if (actualPrototype !== expectedPrototype) {
           return false;
       }
    }

    const actualProperties = Object.keys(actualObj);
    const expectedProperties = Object.keys(expectedObj);
    if (actualProperties.length != expectedProperties.length) {
           return false;
    }
    
    // Sort properties because the order of properties may vary
    actualProperties.sort();
    expectedProperties.sort();
    
    // Check if the property names are equal
    for (var i = 0; i < actualProperties.length; i++) {
           if (actualProperties[i] !== expectedProperties[i]) {
               return false;
           }
    }

    // Handle circular case
    const elem = visited.get(actualObj);
    if (elem) {         
            return elem == expectedObj;
    }
    
    visited.set(actualObj, expectedObj);
    // Recursively check if each property's value is the same
    for (i = 0; i < actualProperties.length; i++) {
        const isEqual = deepEqualRec(actualObj[actualProperties[i]], expectedObj[actualProperties[i]], visited, ignorePrototype);
        if (!isEqual) {
                return false;
        }
    }
    
    visited.delete(actualObj);
    return true;
}
