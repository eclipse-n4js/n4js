/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {InstrumentedTest} from "org/eclipse/n4js/mangelhaft/InstrumentedTest";
import {AssertionError} from "org/eclipse/n4js/mangelhaft/assert/AssertionError";
import {PreconditionNotMet} from "org/eclipse/n4js/mangelhaft/precondition/PreconditionNotMet";
import {IInstrumentedTest} from "org/eclipse/n4js/mangelhaft/types/IInstrumentedTest";
import {ResultGroup} from "org/eclipse/n4js/mangelhaft/types/ResultGroup";
import {ResultGroups} from "org/eclipse/n4js/mangelhaft/types/ResultGroups";
import {TestMethodDescriptor} from "org/eclipse/n4js/mangelhaft/types/TestMethodDescriptor";
import {TestResult} from "org/eclipse/n4js/mangelhaft/types/TestResult";
import {TestSpy} from "org/eclipse/n4js/mangelhaft/types/TestSpy";
import {TestStatus} from "org/eclipse/n4js/mangelhaft/types/TestStatus";

export public class TestExecutor {

    @Inject
    public spy: TestSpy;

    public constext: string;
    public constructor(spy: TestSpy) {
        this.spy = spy;
    }

    private static getStringFromAbiguous(thing: any+): string {
        let str: string;
        if (thing === null) {
            str = "null";
        } else if (typeof thing === "object") {
            str = Object.prototype.hasOwnProperty.call(thing, "toString") ? "" + thing : "prototypeless object";
        } else {
            str = "" + thing;
        }
        return str;
    }

    /**
     * Creates an error test result from an exception (normally that was thrown during testing)
     */
    public static generateFailureTestResult(ex: any, description: string): TestResult {
        const status = this.getStatus(ex);
        const error = this.getError(ex, description);
        const reason = this.getReason(error, description);
        const trace = this.getTrace(error);
        const expected = this.getStringifiedOwnProperty(error, "expected");
        const actual = this.getStringifiedOwnProperty(error, "actual");
        let tr = new TestResult({
                testStatus: status,
                message: reason,
                trace: trace,
                description: description,
                expected: expected,
                actual: actual,
            });
        return tr;
    }

    private static getReason(error: Error, description: string): string {
        if (error.message) return String(error);

        let reason = error.toString();
        if (reason.charAt(0) === "[") reason = error.name ? `${ error.name } : ${ description }` : description;

        return reason;
    }

    private static getStringifiedOwnProperty(object: Object, name: string): string {
        if (!object.hasOwnProperty(name)) return undefined;

        const prop = object[name];
        const res = this.getStringFromAbiguous(prop);
        return res;
    }

    private static getError(ex: any, description: string): Error {
        if (!ex) return new Error("Unknown error: " + description);
        if (typeof ex === "string") return new Error(ex as string);
        if (ex instanceof AssertionError) return ex;
        return ex as Error;
    }

    private static getStatus(ex: any): TestStatus {
        if (ex instanceof AssertionError) return TestStatus.failed;
        if (ex instanceof PreconditionNotMet) return TestStatus.skipped_precondition;
        if (ex instanceof N4ApiNotImplementedError) return TestStatus.skipped_not_implemented;

        return TestStatus.error;
    }

    private static getTrace(e: Object): string[] {
        let trace: string[]; // undefined is valid return
        if (e['stack']) {
            const stack = e['stack'];
            if (typeof stack === "string") {
                trace = (stack as string).split("\n");
            } else if (Array.isArray(stack)) {
                trace = stack as string[];
            } else {
                trace = [(stack as Object).toString()];
            }
            trace = trace.map((line) => line.trim());
        }
        return trace;
    }

    /**
     * performs the fixme logic if there is a fixme invitation. Essentially reverses success and fail and gives a reason.
     */
    private handleFixme(testObject: TestMethodDescriptor, scope: string, testRes: TestResult): TestResult {
        if (testObject.fixme && (!testObject.fixmeScopes || testObject.fixmeScopes.has(scope))) {
            if (testRes.testStatus === TestStatus.passed) {
                testRes.testStatus = TestStatus.failed;
                testRes
                .message = "Test marked with @Fixme annotation but was successful. Issue blocking test has probably been fixed. Try removing annotation.";
                if (testObject.fixmeReason != null) {
                    testRes.message += " (reason was '" + testObject.fixmeReason + "')";
                }
                testRes.trace = [String(testRes)];
            } else if (testRes.testStatus === TestStatus.failed || testRes.testStatus === TestStatus.error) {
                testRes.testStatus = TestStatus.skipped_fixme;
                testRes.message = testObject.fixmeReason;
                testRes.actual = testRes.expected = testRes.trace = null;
            }
        }

        return testRes;
    }

    /** executes a list of groups of test methods, delegates to {@link callAll}*/
    private async callAllGrouped(instrumentedTest: IInstrumentedTest, testMethodDescriptors: TestMethodDescriptor[][]) {
        for (const batch of testMethodDescriptors) {
            await this.callAll(instrumentedTest, batch);
        }
    }

    /**
     * executes a list of test methods, i.e. methods annotated with {@code @BeforeAll}, {@code @Before}, {@code @AfterAll}, {@code @After}, {@code @Test}.
     */
    private async callAll(instrumentedTest: IInstrumentedTest, testMethodDescriptors: TestMethodDescriptor[]) {
        if (testMethodDescriptors) {
            const runTestMethod = getExecutingFunction(instrumentedTest);
            await Promise.all(testMethodDescriptors.map(runTestMethod));
        }
    }

    /**
     * Collects test methods from up the inheritance chain (as processed in InstrumentedTEst).
     */
    private getAncestorTestMethods(iTest: IInstrumentedTest, testMethodName): TestMethodDescriptor[][] {
        let testMethods: TestMethodDescriptor[][] = [];
        let node: IInstrumentedTest = iTest;
        // get head node
        while (node.parent) {
            node = node.parent;
        }
        // get all of the methods top down.
        do {
            let nodeObj: Object = node;
            const nodeTestMethods = nodeObj[testMethodName] as TestMethodDescriptor[];
            if (nodeTestMethods && nodeTestMethods.length) {
                testMethods.push(nodeTestMethods);
            }

        } while (node = node.child)
        return testMethods;
    }

    /**
     * helper to run just a single test
     */
    public async runTestAsync(instrumentedTest: InstrumentedTest): ResultGroups {
        return await this.runTestsAsync([instrumentedTest]);
    }

    /**
     * Runs an entire group of tests, reporting on the status.
     */
    private async runGroup(iTest: IInstrumentedTest, scope: string=): ResultGroup {
        let testResults: TestResult[] = [];

        await this.spy.groupStarted.dispatch([iTest]);
        if (!iTest.error) {
            try {
                // run {@code @BeforeAll} methods
                const beforeAlls = this.getAncestorTestMethods(iTest, "beforeAlls");
                await this.callAllGrouped(iTest, beforeAlls);
                // run {@code @Test} methods
                await this.runBeforesTestsAfters(testResults, iTest, scope);
                // TODO should {@code @AfterAll} methods go to {@code finally} block ?
                // run {@code @AfterAll} methods
                const afterAlls = this.getAncestorTestMethods(iTest, "afterAlls")
                    .reverse();
                await this.callAllGrouped(iTest, afterAlls);
            } catch (error) {
                let results = await this.errorTests(iTest, error);
                testResults = testResults.concat(results);
            }
        } else {
            testResults = await this.errorTests(iTest, iTest.error);
        }

        const result = new ResultGroup(testResults, `${ iTest.name }`);
        await this.spy.groupFinished.dispatch([iTest, result]);
        return result;
    }

    private async runBeforesTestsAfters(testResults: TestResult[], iTest: IInstrumentedTest, scope: string=) {
        const numTests = iTest.tests.length;
        for (let ii = 0; ii < numTests; ++ii) {
            let testMethod = iTest.tests[ii];
            let start: number, end: number;
            let testRes: TestResult;
            try {
                await this.spy.testStarted.dispatch([iTest, testMethod]);
                start = new Date().getTime();
                if (!testMethod.ignore) {
                    try {
                        const befores = this.getAncestorTestMethods(iTest, "befores");
                        await this.callAllGrouped(iTest, befores);
                        await this.callAll(iTest, [testMethod]);
                        testRes = new TestResult({testStatus: TestStatus.passed, description: testMethod.name});
                    } finally {
                        const afters = this.getAncestorTestMethods(iTest, "afters")
                            .reverse();
                        await this.callAllGrouped(iTest, afters);
                    }
                } else {
                    testRes = new TestResult({
                        testStatus: TestStatus.skipped_ignore,
                        message: testMethod.ignoreReason,
                        description: testMethod.name
                    });
                }
                end = new Date().getTime();
            } catch (er) {
                end = new Date().getTime();
                testRes = TestExecutor.generateFailureTestResult(er, testMethod.name);
            }
            testRes.elapsedTime = end - start;
            testRes = this.handleFixme(testMethod, scope, testRes);
            await this.spy.testFinished.dispatch([iTest, testMethod, testRes, async ()=>{
                            let allTests = iTest.tests;
                            iTest.tests = [testMethod];
                            try {await this.runTestsAsync([iTest])}
                                finally {iTest.tests = allTests}
                        }]);
            testResults.push(testRes);
        }
    }

    /**
     * Runs all test groups, collecting results and handling parameterized tests.
     */
    public async runTestsAsync(instrumentedTests: (? extends IInstrumentedTest)[], scope: string=): ResultGroups {
        let results: ResultGroup[] = [];

        for (let test of instrumentedTests) {
            if (test) {
                if (test.hasParameterizedTests) {
                    let pResults: ResultGroup[] = [];
                    await this.spy.parameterizedGroupsStarted.dispatch([test]);
                    for (let ptest of test.parameterizedTests) {
                        let testRes = await this.runGroup(ptest, scope);
                        pResults.push(testRes);
                        results.push(testRes);
                    }
                    await this.spy.parameterizedGroupsFinished.dispatch([new ResultGroups(pResults)]);
                } else {
                    let testRes = await this.runGroup(test, scope);
                    results.push(testRes);
                }
            }
        }
        let resultGroups = new ResultGroups(results);
        return resultGroups;
    }

    /**
     * Creates errors for the tests in an entire group. Used, for example, if there is a failure in a BeforeAll.
     */
    public async errorTests(instrumentedTest: IInstrumentedTest, error: any): TestResult[] {
        const testResults: TestResult[] = [];
        const len = instrumentedTest.tests.length;
        for (let ii = 0; ii < len; ++ii) {
            const test = instrumentedTest.tests[ii];
            await this.spy.testStarted.dispatch([instrumentedTest, test]);
            const testResult = TestExecutor.generateFailureTestResult(error, test.name);
            testResult.elapsedTime = 0;
            await this.spy.testFinished.dispatch([instrumentedTest, test, testResult]);
            testResults.push(testResult);
        }
        return testResults;
    }
}

//TODO refactor scoping of executor function
// We are passing data through closures of the functions,
// other approach would be classes with properties
// or functions with properties.
/** 
 * Factory creating  function that can execute given {@link TestMethodDescriptor}.
 * Created executor functions use {@link IInstrumentedTest} passed to the factory.
 */
function getExecutingFunction(instrumentedTest: IInstrumentedTest): (TestMethodDescriptor) => Promise<undefined, any> {
    return testMethodDescriptor => (new Promise<undefined, any>((resolve, reject) => {
        const pr = Promise.resolve(testMethodDescriptor.value.call(instrumentedTest.testObject));
        
        let timeoutId: int;
        if (!process.env.N4JS_RT_mangelhaft_timeout_disabled) {
            timeoutId = setTimeout(() => reject(new Error(`Test object ${testMethodDescriptor.name} timed out after ${testMethodDescriptor.timeout} milliseconds`)), testMethodDescriptor.timeout);
        }

        pr.then(res => {
            clearTimeout(timeoutId);
            resolve();
        }, err => {
            clearTimeout(timeoutId);
            reject(err);
        });
    }));
};
