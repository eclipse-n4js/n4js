/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {IInstrumentedTest} from "org/eclipse/n4js/mangelhaft/types/IInstrumentedTest"
import {TestFunctionType} from "org/eclipse/n4js/mangelhaft/types/TestFunctionType"
import {TestInfo} from "org/eclipse/n4js/mangelhaft/types/TestInfo"
import {TestMethodDescriptor} from "org/eclipse/n4js/mangelhaft/types/TestMethodDescriptor"
import {N4Injector} from "n4js/lang/N4Injector"

function getAllPropertyNames (objProt: constructor{? extends N4Object}, propNames: Map<string, boolean> =):Map<string, boolean> {
    propNames = propNames || new Map<string, boolean>;
    let  names = Object.getOwnPropertyNames(objProt);

    names.forEach(function (name) {
        propNames.set(name, true);
    })
    return propNames;
}

/**
 * Represents a test class which has been preprocessed to process test annotations and extract
 * tests, befores, afters, etc and any metadata needed to run the tests.
 */
export public class InstrumentedTest implements IInstrumentedTest{
    @Override public tests: Array<TestMethodDescriptor> = [];
    @Override public beforeAlls: Array<TestMethodDescriptor> = [];
    @Override public afterAlls: Array<TestMethodDescriptor> = [];
    @Override public befores: Array<TestMethodDescriptor> = [];
    @Override public afters: Array<TestMethodDescriptor> = [];
    @Override public fqn: string = "";
    /**
     * This is not a tree because we are only interested in the ancestors of a particular class
     * no siblings at any level.
     */
    @Override public child: IInstrumentedTest = null;
    @Override public error: any;
    private classIgnoreAnnotation: N4Annotation;
    @Override public filterTests(testNames: Array<string>) {
        this.tests = this.tests.filter(function(test) {
            return testNames.indexOf(test.name) !== -1
        })
    }

    public constructor(testClass: constructor{? extends N4Object}=, info: TestInfo=, testObject: N4Object=, 
        parameterizedName: string=, parameterizedTests: Array<? extends IInstrumentedTest> =
    ) {
        if (testClass) {
            this.load(testClass, info);
            this.parameterizedName = parameterizedName;
            this.setTestObject(testObject); //if no testObject supplied sets to undefined which is fine.
            if (info && info.testMethods) {
                this.filterTests(info.testMethods);
            }
        }
        if (parameterizedTests) {
            this.hasParameterizedTests = true;
            this.parameterizedTests = parameterizedTests;
        }
    }

    /**
     * Used for parameterized tests.
     * processes parameterized fields and sets which parameter gets set to which field.
     */
    private static getParameterizedFields(testClass: constructor{? extends N4Object}): Map<int, string> {
        let parameterizedFields = new Map<int, string>();

        for (let field of testClass.n4type.dataFieldsWithAnnotation("Parameter", true, true, false)) {
            let [indexStr: string] = field.anyAnnotation("Parameter").details || [""];
            let argNum = Number.parseInt(indexStr) || 0;
            parameterizedFields.set(argNum, field.name);
        }
        return parameterizedFields;
    }
    
    /**
     * Gets the fully instrumented, ready-to-run, parameterized tests for a test class.
     */
    private static getParameterizedInstrumentedTests(testClass:constructor{N4Object}, info: TestInfo,
        testInjector:N4Injector, parameterGroups:Array<Array<any>>, nameTemplate: string): Array<InstrumentedTest> {
        
        nameTemplate = nameTemplate || "{index}";
        let tests: Array<InstrumentedTest> = [];
        let parameterizedFields = this.getParameterizedFields(testClass);
        if (parameterGroups && parameterGroups.length) {
            let ii = 0;
            for (let pGroup of parameterGroups) {
                let testObject: Object = testInjector.create(testClass);
                let jj = 0;
                for (let parm of pGroup) {
                    if (parameterizedFields.has(jj)) {
                        (testObject)[parameterizedFields.get(jj)] = parm;
                    }
                    ++jj;
                }
                let parameterizedName = nameTemplate.replace(/{(index|[0-9]*)}/g, (match, item: string) => {
                    if (item === "index") {
                        return ii;
                    } else {
                        let paramNumber = Number.parseInt(item);
                        return pGroup[paramNumber] || "";
                    }
                });
                tests.push(new InstrumentedTest(testClass, info, testObject as N4Object, parameterizedName));
                ++ii
            }
        } else {
            tests.push(new InstrumentedTest(testClass, info, testInjector.create(testClass)));
        }
        return tests;
    }
    
    /**
     * processes a test class and gives a fully processed ready-to-run instrumented test group.
     */
    public static getInstrumentedTest(
        testClass:constructor{N4Object}, info: TestInfo, testInjector:N4Injector
    ): IInstrumentedTest {
        let parameters: Array<Array<any>> = null;
        let nameTemplate: string = null;
        let pMeth = testClass.n4type.methodsWithAnnotation("Parameters", true, true, true).pop();
        if (pMeth) {
            let anno = pMeth.anyAnnotation("Parameters");
            [nameTemplate] = anno.details || [""];
            parameters = pMeth.jsFunction.call(testClass) as Array<Array<any>>;
        }

        let parameterizedTests: Array<InstrumentedTest>;

        if (parameters) {
            parameterizedTests = this.getParameterizedInstrumentedTests(testClass, info, testInjector, parameters, nameTemplate);
        }
        return new InstrumentedTest(testClass, info, testInjector.create(testClass), null, parameterizedTests)
    }
    
    /**
     * gets the fixme scope(s) if any as a Set.
     */
    private getFixmeScope(fixme:N4Annotation): Set<string> {
        let scope: string;
        let scopes: Set<string>
        if (fixme) {
            if (fixme.details.length > 1) {
                scope = fixme.details[1];
            } 
            if (scope) {
                scopes = new Set<string>(scope.split(",").map(scope => scope.trim()));
            }
        }
        return scopes;
    }
    /**
     * Processes a test method and extracts info from annotations.
     */
    private getTestMethodDescriptors(meths: Array<? extends N4Method>, tftype: TestFunctionType): Array<TestMethodDescriptor> {
        return meths.map( (methodDescriptor: N4Method) => {
                const desc = methodDescriptor.anyAnnotation("Description")
                    , fixmeAnnotation = methodDescriptor.anyAnnotation("Fixme")
                    , ignoreAnnotation = this.classIgnoreAnnotation ? this.classIgnoreAnnotation: methodDescriptor.anyAnnotation("Ignore")
                    , timeoutAnnotation = methodDescriptor.anyAnnotation("Timeout")
                    , details: Array<?> = desc ? desc.details: []
                ;

                return new TestMethodDescriptor({
                      timeout: timeoutAnnotation && timeoutAnnotation.details? parseInt(timeoutAnnotation.details.pop()): 60 * 1000
                    , description: details.length ? details.join(" "): ""
                    , ignore: !!ignoreAnnotation
                    , ignoreReason: ignoreAnnotation? ignoreAnnotation.details.join(" "): ""
                    , fixme: !!fixmeAnnotation
                    , fixmeReason: fixmeAnnotation? fixmeAnnotation.details.join(" "): ""
                    , fixmeScopes: this.getFixmeScope(fixmeAnnotation)
                    , name: methodDescriptor.name
                    , value: methodDescriptor.jsFunction as {function()}
                    , type:tftype
                });
            }
        )
    }

    /**
     * Allows setting the actual instance of the test externally.
     */
    @Override
    public setTestObject(test: N4Object): this {
        this.testObject = test;
        return this;
    }
    
    /**
     * Allows setting error state externally.
     */
    @Override public setError(error: any): this {
        this.error = error;
        return this;
    }
    /**
     * Loads a new test class into existing instance of an InstrumentedTest
     */
    @Override public load(testClass: constructor{? extends N4Object}, info: TestInfo=): this {
        let parentClass = Object.getPrototypeOf(testClass) as constructor{? extends N4Object};

        this.classIgnoreAnnotation = testClass.n4type.allAnnotations("Ignore")[0];
        //console.log(testClass);
        this.beforeAlls = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("BeforeAll", true, false, false),
            TestFunctionType.BEFORE_ALL
        )
        this.afterAlls = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("AfterAll", true, false, false),
            TestFunctionType.AFTER_ALL
        )
        this.befores = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("Before", true, false, false),
            TestFunctionType.BEFORE_TEST
        )
        this.afters = this.getTestMethodDescriptors(
            testClass.n4type.methodsWithAnnotation("After", true, false, false),
            TestFunctionType.AFTER_TEST
        )

        this.tests = this.getTestMethodDescriptors(
            // only for tests we need inherited methods
            testClass.n4type.methodsWithAnnotation("Test", true, true, false),
            TestFunctionType.TEST
        )
        if (info) {
            this.fqn = info.fqn;
        }
        this.fqn = this.fqn || testClass.n4type.fqn;
        this.name = this.fqn;
        if (info && info.testMethods && info.testMethods.length) {
          this.tests = this.tests.filter(function(test) {
                return info.testMethods.indexOf(test.name) !== -1
            })
        }

        let parentClassFn: Function = parentClass; //avoid warning
        if (parentClassFn !== Object) {
            this.parent = new InstrumentedTest().load(parentClass);
            this.parent.child = this;
        }

        return this;
    }
}
/*
-*- mode: typescript;-*-
*/
