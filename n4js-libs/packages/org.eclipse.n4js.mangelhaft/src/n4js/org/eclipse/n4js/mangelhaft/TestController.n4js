/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {N4Injector} from "n4js/lang/N4Injector";
import {InstrumentedTest} from "org/eclipse/n4js/mangelhaft/InstrumentedTest";
import {TestExecutor} from "org/eclipse/n4js/mangelhaft/TestExecutor";
import {PreconditionNotMet} from "org/eclipse/n4js/mangelhaft/precondition/PreconditionNotMet";
import {IInstrumentedTest} from "org/eclipse/n4js/mangelhaft/types/IInstrumentedTest";
import {ITestReporter} from "org/eclipse/n4js/mangelhaft/types/ITestReporter";
import {ResultGroup} from "org/eclipse/n4js/mangelhaft/types/ResultGroup";
import {ResultGroups} from "org/eclipse/n4js/mangelhaft/types/ResultGroups";
import {TestFunctionType} from "org/eclipse/n4js/mangelhaft/types/TestFunctionType";
import {TestInfo} from "org/eclipse/n4js/mangelhaft/types/TestInfo";
import {TestInfos} from "org/eclipse/n4js/mangelhaft/types/TestInfos";
import {TestMethodDescriptor} from "org/eclipse/n4js/mangelhaft/types/TestMethodDescriptor";
import {TestResult} from "org/eclipse/n4js/mangelhaft/types/TestResult";
import {TestSpy} from "org/eclipse/n4js/mangelhaft/types/TestSpy";
import {readJsonFile} from "org/eclipse/n4js/mangelhaft/util/fs";
import {findPackageJson} from "org/eclipse/n4js/mangelhaft/util/npm";
import * as lib_path from "path";

const MAX_GROUPS_PER_TEST_BATCH = 10;

const notNull = (thing: any): boolean => thing !== null;

export public class TestController {

    // TODO GH-710 make private again, expose different API
    @Inject
    public spy: TestSpy;

    // TODO GH-710 make private again, expose different API
    @Inject
    public executor: TestExecutor;

    @Inject
    public injector: N4Injector;

    private reportersVal: (? extends ITestReporter)[] = [];

    // TODO GH-710 remove, expose different API
    public get reporters(): (? extends ITestReporter)[] {
        return this.reportersVal;
    }
    public set reporters(reporters: (? extends ITestReporter)[]) {
        reporters.forEach(function(reporter) {
                let dummy: Promise<any, ?> = reporter.register();
                dummy;
            });
        this.reportersVal = reporters;
    }

    /**
     * Entry point to running tests. Called from a test runner with the test meta information. Any configured reporters
     * will get updated with progress of tests.
     */
    public async runGroups(testCatalog: TestInfos, numTests: number=, scope: string=): ResultGroups {
        if (!testCatalog) {
            throw new Error("TestController::runGroups called with a null testCatalog");
        }
        const testInfos: TestInfo[] = testCatalog.testDescriptors.sort((x: TestInfo, y: TestInfo) => {
                let xVal = x.fqn ? x.fqn : x.module;
                let yVal = y.fqn ? y.fqn : y.module;
                return xVal.localeCompare(yVal);
            });

        if (numTests === undefined) {
            numTests = testInfos.reduce((acc, info) => acc + info.testMethods.length, 0);
        }
        try {
            await this.spy.testingStarted.dispatch([testInfos.length, testCatalog.sessionId, numTests]);
        } catch(ex) {
            console.log("testingStarted.dispatch is bad", ex);
        }

        const res = await this.runInBatches(testInfos, scope);
        await this.spy.testingFinished.dispatch([res]);
        return res;
    }

    /** Runs provided tests in batches,  */
    private async runInBatches(testInfos: TestInfo[], scope: string=): ResultGroups {
        let res: ResultGroups;

        // groups tests into batches to execute
        const batchedTestInfos: TestInfo[][] = [];
        for (let batchedCount = 0; batchedCount < testInfos.length; batchedCount += MAX_GROUPS_PER_TEST_BATCH) {
            const batch = testInfos.slice(batchedCount, batchedCount + MAX_GROUPS_PER_TEST_BATCH);
            batchedTestInfos.push(batch);
        }

        // utils
        const mapper: (TestInfo) => Promise<InstrumentedTest[], ?> = async (testInfo) => await this
            .instrument(testInfo);
        const flatten = (arr: InstrumentedTest[][]): InstrumentedTest[] => Array.prototype.concat.apply([],
            arr) as InstrumentedTest[];
        const instrumentBatch = async function(testInfosBatch: TestInfo[]): InstrumentedTest[] {
                const instrumentedBatches = testInfosBatch.map(mapper).filter(notNull);
                const instrumentedTestsBatch1d = await Promise.<InstrumentedTest[]>all(instrumentedBatches);
                const instrumentedTestsBatch2d = await Promise
                    .<InstrumentedTest[][],any>resolve(instrumentedTestsBatch1d);
                const instrumentedTestsBatch = flatten(instrumentedTestsBatch2d);

                return instrumentedTestsBatch;
            };

        const resultGroups: ResultGroups[] = [];
        // execute batched groups
        for (let numOfBatches = 0; numOfBatches < batchedTestInfos.length; ++numOfBatches) {
            try {
                const testInfosBatch = batchedTestInfos[numOfBatches];
                const instrumentedTestsBatch = await instrumentBatch(testInfosBatch);
                res = await this.executor.runTestsAsync(instrumentedTestsBatch, scope);
                resultGroups.push(res);
            } catch (er) {
                console.error(er);
                throw er;
            }
        }

        res = ResultGroups.concatArray(resultGroups);
        return res;
    }

    private async instrument(info: TestInfo): InstrumentedTest[] {
        let testClasses: constructor{N4Object}[];

        const parts = info.fqn.split("/");
        const ctorName = parts.pop();
        const moduleName = parts.join("/");
        try {
            let groupModule: Object;
            try {
                groupModule = await import(`${info.origin}/${moduleName}`);
            } catch (exc) { // find package.json
                const packageJsonPath = findPackageJson(process.cwd());
                if (!packageJsonPath || readJsonFile(packageJsonPath).name !== info.origin) {
                    throw exc;
                }
                const fpath = `${lib_path.dirname(packageJsonPath)}${lib_path.sep}${moduleName.split("/").join(lib_path.sep)}.js`;
                groupModule = await import(fpath);
            }
            testClasses = [groupModule[ctorName] as constructor{N4Object}];
        } catch (ex) {
            await this.errorGroup(info, info.origin + "/" + moduleName, null, ex);
            return null;
        }
        if (!testClasses) {
            await this.errorGroup(info, info.origin + "/" + parts.join("/"));
            return null;
        }
        let instrumentedTests: IInstrumentedTest[] = [];
        for (const testClass of testClasses) {
            if (!testClass) {
                await this.errorGroup(info, info.origin + "/" + moduleName, null,
                new Error("Empty object loaded (is the test class exported?)"));
                continue;
            }

            try {
                const testInjector = this.getTestInjector(testClass);
                // TODO GH-710 expose different API, do not pass `this`
                let classITO = InstrumentedTest.getInstrumentedTest(testClass, info, testInjector, this);
                instrumentedTests.push(classITO);
            } catch(ex2) {
                // stub instrumented test to have better reporting for user
                const stubTestInstrumentationError = new InstrumentedTest(testClass, info)
                    .setTestObject(new N4Object())
                    .setError(ex2);
                instrumentedTests.push(stubTestInstrumentationError);
            }
        }
        const result = (await Promise.all(instrumentedTests)).filter(notNull);
        return result as InstrumentedTest[];
    }

    /**
     * creates special group to show errors that occur prior to group being run
     */
    private async errorGroup(info: TestInfo, loadPath: string, testObject: InstrumentedTest=, originalError: any=) {
        if (!testObject) testObject = this.getInstrumentedTestStub(info);
        await this.spy.groupStarted.dispatch([testObject]);

        const testResults: TestResult[] = [];
        const that = this;
        for (const test of testObject.tests) {
            await that.spy.testStarted.dispatch([testObject, test]);
            const error = originalError ? originalError : new Error("could not load test " + loadPath);
            const testResult = TestExecutor.generateFailureTestResult(error, "could not load test " + loadPath);
            testResults.push(testResult);
            await that.spy.testFinished.dispatch([testObject, test, testResult]);
        }
        await this.spy.groupFinished.dispatch([testObject,
            new ResultGroup(testResults, `${info.fqn} ${testObject.parameterizedName}`)]);
        return true;
    }

    /** Creates artificial {@link InstrumentedTest} to be used in error cases */
    private getInstrumentedTestStub(info: TestInfo): InstrumentedTest {
        const testObject = new InstrumentedTest();
        info.module = info.module || "";
        info.fqn = info.fqn || info.module.replace(/\//g, ".") + ".*";
        testObject.load(N4Object, info).setTestObject(new N4Object());
        if (info.testMethods) {
            // stub all original test methods
            testObject.tests = info.testMethods
            .map((methName) => new TestMethodDescriptor({
                name: methName,
                type: TestFunctionType.TEST,
                value: function() {}
            }));
        } else {
            // dummy method for reporting
            testObject.tests = [new TestMethodDescriptor({
                name: "",
                type: TestFunctionType.TEST,
                value: function() {}
            })];
        }

        return testObject;
    }

    /**
     * Traverse provided test class supertype hierarchy to find injector that has to be used to inject provided test class instance.
     * Type hierarchy is traversed until first injector is found. If no injector is found, injector of {@link TestController} is used.
     */
    private getTestInjector(testClass: constructor{N4Object}): N4Injector {
        let testInjector: N4Injector;
        let diClass = testClass;
        let testType = testClass.n4type;

        while (testType) {
            if (testType.hasAnnotation("GenerateInjector")) {
                if (testType.hasAnnotation("WithParentInjector")) {
                    // injector is expected to have a parent
                    if (!this.injector.canBeParentOf(diClass)) {
                        throw new PreconditionNotMet("Test called with incompatible parent injector");
                    }
                    // create injector with proper parent
                    testInjector = N4Injector.of(diClass, this.injector);
                } else {
                    // no parent injector, create injector without parent
                    testInjector = N4Injector.of(diClass);
                }
                break;
            }

            // move to the supertype and super prototype
            testType = testType.n4superType;
            diClass = Object.getPrototypeOf(diClass) as constructor{N4Object};
        }

        // no injector in test class super types found, use mangelhaft injector
        if (!testType) {
            testInjector = this.injector;
        }
        return testInjector;
    }
}
