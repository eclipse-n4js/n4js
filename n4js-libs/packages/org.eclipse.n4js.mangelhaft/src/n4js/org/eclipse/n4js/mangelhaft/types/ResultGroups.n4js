/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */




import {ResultGroup} from "org/eclipse/n4js/mangelhaft/types/ResultGroup";
import {TestResult} from "org/eclipse/n4js/mangelhaft/types/TestResult";
import {aggregateTestStatuses} from "org/eclipse/n4js/mangelhaft/types/TestStatus";

export public class ResultGroups {
    public results: ResultGroup[];
    public successes: number = 0;
    public failures: number = 0;
    public skipped: number = 0;
    public errors: number = 0;

    public constructor(results: ResultGroup[]) {
        this.results = results;
        this.accumulateResults(results);
    }
    /**
     * Aggregates ResultGroups into a single ResultGroup. tests with the same name are collapsed with
     * errors beating failures which beat skips which beat successes.
     */
    public aggregate(): ResultGroup {
        let result: ResultGroup;
        let trMap: Map<string, TestResult> = new Map<string, TestResult>();
        let description: string;
        for (let rg of this.results) {
            description = rg.description;
            for (let tr of rg.testResults) {
                if (trMap.has(tr.description)) {
                    let oldTr = trMap.get(tr.description);
                    let testStatus = aggregateTestStatuses(tr.testStatus, oldTr.testStatus);
                    if (testStatus != oldTr.testStatus) {
                        trMap.set(tr.description, tr);
                    }
                } else {
                    trMap.set(tr.description, tr);
                }
            }
        }
        result = new ResultGroup(Array.from(trMap.values()), description);
        return result;
    }
    
    private accumulateResults(results: ResultGroup[]): void {
        for (let result of results) {
            this.successes += result.successes;
            this.failures += result.failures;
            this.errors += result.errors;
            this.skipped += result.skipped;
        }
    }

    /**
     * combines multiple ResultGroups into one single resultGroups
     * @param resultGroups one or more resultGroups objects
     * return a ResultGroups instance
     */
    public static concat(...resultGroups: ResultGroups): ResultGroups {
        return this.concatArray(resultGroups);
    }

    /**
     * same as concat but takes a whole array
     */
    public static concatArray(resultGroupss: ResultGroups[]): ResultGroups {
        const newResultGroups = new ResultGroups([]);
        for (let resultGroup of resultGroupss) {
            newResultGroups.successes += resultGroup.successes;
            newResultGroups.failures += resultGroup.failures;
            newResultGroups.errors += resultGroup.errors;
            newResultGroups.skipped += resultGroup.skipped;
            newResultGroups.results = newResultGroups.results.concat(resultGroup.results);
        }
        return newResultGroups;
    }
}
