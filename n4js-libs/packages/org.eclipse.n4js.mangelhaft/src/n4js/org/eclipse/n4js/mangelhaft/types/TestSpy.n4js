/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {DispatchQueue} from "org/eclipse/n4js/mangelhaft/types/DispatchQueue";
import {IInstrumentedTest} from "org/eclipse/n4js/mangelhaft/types/IInstrumentedTest";
import {ResultGroup} from "org/eclipse/n4js/mangelhaft/types/ResultGroup";
import {ResultGroups} from "org/eclipse/n4js/mangelhaft/types/ResultGroups";
import {TestMethodDescriptor} from "org/eclipse/n4js/mangelhaft/types/TestMethodDescriptor";
import {TestResult} from "org/eclipse/n4js/mangelhaft/types/TestResult";
@Singleton
export public class TestSpy {
    public testingStarted = new DispatchQueue<{function (numGroups: number, sessionId: string, numTests: number)}>();
    public parameterizedGroupsStarted = new DispatchQueue<{function (parameterized: IInstrumentedTest)}>();
    public parameterizedGroupsFinished = new DispatchQueue<{function(parameterizedResults: ResultGroups)}>();

    public groupStarted = new DispatchQueue<{function (group: IInstrumentedTest)}>();
    public testStarted = new DispatchQueue<{function (group: IInstrumentedTest, test: TestMethodDescriptor)}>();

    public testFinished = new DispatchQueue<{function (group: IInstrumentedTest, test: TestMethodDescriptor, testResult: TestResult, rerunTest: {function()})}>();
    public groupFinished = new DispatchQueue<{function (group: IInstrumentedTest, resultGroup: ResultGroup)}>();
    public testingFinished = new DispatchQueue<{function(resultGroups: ResultGroups)}>();
    /**
     * resets all signals, removing their handlers.
     */
    public reset(): this {
        let field: string,
            sig: DispatchQueue<?>,
            that: Object = this;
        ;
        for (field in this) {
            if (this.hasOwnProperty(field)) {
                sig = that[field] as DispatchQueue<?>;
                sig.removeAll();
            }
        }
        return this;
    }
}
