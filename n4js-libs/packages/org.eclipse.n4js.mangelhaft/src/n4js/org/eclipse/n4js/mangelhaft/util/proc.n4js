/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/**
 * Waits for the given promise then exits the process minding error codes.
 * Optionally the event loop can be kept active while the promise hasn't resolved.
 */
export public function waitAndExitProcess(proc: Function, keepEventLoop = false): void {
    let timerHandle: number;
    if (keepEventLoop) {
        // dummy interval to avoid termination on open main/exec promise:
        timerHandle = setInterval(function() {}, 0x7fffffff /* max 32bit signed int */);
    }

    // make sure any exception is channeled into a promise rejection:
    Promise.resolve(null).then(_ => proc())
        // map into return code:
        .catch(err => {
            if (err && (typeof err === "string" || typeof err === "object")) {
                // just log errors in case rejection with a string or an Error: 
                console.error((err as Error).stack || err);
            }
            return typeof err === "number" ? (err as number)|0 : 1;
        })
        // clear timer, flush stdout:
        .then(res => {
            clearInterval(timerHandle);
            // flush stdout:
            return new Promise<any, any>(resolve => process.stdout.write("", "utf-8", () => resolve(res)));
        })
        // exit:
        .then(res => process.exit(res as number));
}
