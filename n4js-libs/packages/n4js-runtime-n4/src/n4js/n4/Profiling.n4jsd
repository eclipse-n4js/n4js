/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@@ProvidedByRuntime

/**
 * Profiling map to keep any profiling time stamps and to provide API
 * to start / close a time stamp.
 */
export public interface ~Profiling {
    public timed: ~Object with { start: number; end: number; };

    public timedOrder: Array<string>;

    /**
     * Maps to {last: number, total: number}.
     */
    public aggregated: Object;

    /**
     * Maps to number.
     */
    public counted: Object;

    /**
     * Filters keys matching option profiling-match (case-insensitively).
     */
    public keyMatches?: RegExp;

    /**
     * Resets the profiling map.
     */
    public reset(): void;

    /**
     * Returns number of millisecs since browser start or of UNIX epoche with full fraction.
     */
    public now(): number;

    /**
     * Counts a number of named entries.
     */
    public count(title: string): number;

    /**
     * Set a timing start.
     */
    public time(title: string): void;

    /**
     * Closes a started timing.
     */
    public timeEnd(title: string): void;

    /**
     * Logs a timestamp.
     *
     * @param title
     * @param justOrder (i.e. no time taking)
     */
    public timeStamp(title: string, justOrder: boolean=): void;

    /**
     * Set a timestamp for an aggregated entry.
     */
    public timeAggregated(title: string): void;

    /**
     * Close a timestamp and calculate the duration for an aggregated entry.
     */
    public timeEndAggregated(title: string): void;

    /**
     * Logs the timed entries to the console.
     */
    public logTimed(): void;
}


