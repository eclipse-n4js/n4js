/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {Method} from "fetch/Method";
import {IInstrumentedTest} from "org/eclipse/n4js/mangelhaft/types/IInstrumentedTest";
import {ITestReporter} from "org/eclipse/n4js/mangelhaft/types/ITestReporter";
import {ResultGroups} from "org/eclipse/n4js/mangelhaft/types/ResultGroups";
import {TestMethodDescriptor} from "org/eclipse/n4js/mangelhaft/types/TestMethodDescriptor";
import {TestResult} from "org/eclipse/n4js/mangelhaft/types/TestResult";
import {TestSpy} from "org/eclipse/n4js/mangelhaft/types/TestSpy";
import fetch from "deps/node-fetch"

export public class IDEReporter implements ITestReporter {

    private endpointValue: string = "MISSING_REQUIRED_ENDPOINT";
    public get endpoint(): string {
        return this.endpointValue;
    }
    public set endpoint(endpoint: string) {
        this.endpointValue = endpoint.replace(/\/+$/, "");
    }
    public timeoutBuffer: number = 1000 * 30;

    @Override
    @Inject
    protected spy: TestSpy;

    public async send(uri: string, method: Method, headers: Headers|string[][]|Object, body: Object) {
        let ret: Response,
            bodyStr: string;

        try {
            bodyStr = JSON.stringify(body, (key: string, value: any) => {
                       if (key === "description") {
                           value = undefined;
                       }
                       return value;
                   }, 2)
            ret = await fetch(this.endpoint + uri, {
                   method: method,
                   union{Headers,string[][],Object} headers: headers,
                   string body: bodyStr
            });
        }catch(er) {
            let err: Error+ = er as Error;
            console.error(err);
            console.error(err.stack);
        }

        if (ret) {
            //console.log(ret.url, ret.status);
            if (Math.floor(ret.status / 100) != 2) {
                console.error("STATUS:", ret.status, ret.statusText, uri);
                if (bodyStr) {
                    console.error("BODY:" + bodyStr);
                }
            }
        }
        return ret;
    }
    /**
     * CTOR
     * @param endpoint endpoint prefix for ide (the base of the rest api)
     * @param timeoutBufferOverride if set overrides the default timeout added to each test as a buffer
     */
    constructor(endpoint: string=, timeoutBufferOverride: number=) {
        if (endpoint) {
            this.endpoint = endpoint.replace(/\/+$/, "");
        }
        if (timeoutBufferOverride !== undefined) {
            this.timeoutBuffer = timeoutBufferOverride;
        }
    }
    @Override public async register() {
        let that = this
          , sessionId: string = null
          , inParameterized = false
        ;
        async function handleTestingStart(numAllGroups: number, sid: string, numAllTests: number) {
            sessionId = sid
            let response = await that.send(  ["/n4js/testing/sessions", sessionId, "start"].join("/")
                        ,Method.POST
                        , { "Content-Type": "application/vnd.n4js.start_session_req.tm+json"
                            , "Accept": "application/json"
                        }
                        , undefined
            );
            return response;
        }
        this.spy.testingStarted.add(handleTestingStart);
//        this.spy.groupStarted.add(function (group: IInstrumentedTest) {
//        });
        this.spy.parameterizedGroupsStarted.add(test => inParameterized = true);
        async function handleTestStart(groupName: string, testName: string, timeout: number) {
            if (inParameterized) return; //test starts will be handled at the end of the parameterized tests
            if (!sessionId) {
                throw new Error("Test start sent before session start")
            }
            
            await that.send(
                        ["/n4js/testing/sessions", sessionId, "tests", IDEReporter.escapeGroupName(groupName) + "%23" + testName, "start"].join("/")
                        , Method.POST
                        , { "Content-Type": "application/vnd.n4js.start_test_req.tm+json"
                            , "Accept": "application/json"
                        }
                        , {number timeout: timeout + that.timeoutBuffer}
            );
        }
        this.spy.testStarted.add(async (group: IInstrumentedTest, test: TestMethodDescriptor) => {
            await handleTestStart(group.name, test.name, test.timeout)
        });

        async function handleTestFinished (groupName: string, testName: string, testResult: TestResult) {
            if (inParameterized) return; //test finishes will be handled at the end of the parameterized tests
            if (!sessionId) {
                throw new Error("Test end sent outside active session")
            }

            await that.send(
                        ["/n4js/testing/sessions", sessionId, "tests", IDEReporter.escapeGroupName(groupName) + "%23" + testName, "end"].join("/")
                        , Method.POST
                        , { "Content-Type": "application/vnd.n4js.end_test_req.tm+json"
                            , "Accept": "application/json"
                        }
                        , testResult
            );
        }
        this.spy.testFinished.add(async (group: IInstrumentedTest, test: TestMethodDescriptor, testResult: TestResult) => {
            await handleTestFinished(group.name, test.name, testResult)
        });

        this.spy.parameterizedGroupsFinished.add(async (resultGroups:ResultGroups) => {
            inParameterized = false;
            let resultGroup = resultGroups.aggregate();
            
            for (let testResult of resultGroup.testResults) {
                await handleTestStart(resultGroup.description, testResult.description, 100);
                await handleTestFinished(resultGroup.description, testResult.description, testResult);
            }
            
        })

        async function handleTestingFinished(resultGroups: ResultGroups) {
            let response = await that.send(  ["/n4js/testing/sessions", sessionId, "end"].join("/")
                        ,Method.POST
                        , { "Content-Type": "application/vnd.n4js.end_session_req.tm+json"
                            , "Accept": "application/json"
                        }
                        , undefined
            );
            return response;
        }
        this.spy.testingFinished.add(handleTestingFinished);
        return this;
    }
    
    /**
     * Escapes the given group name for the use with endpoints provided
     * by the IDE. 
     */
    private static escapeGroupName(groupName: string) : string {
	    	return groupName.replace(/\//g, "%2F");
    }
}
