/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import { IInstrumentedTest } from "org/eclipse/n4js/mangelhaft/types/IInstrumentedTest"
import {ITestReporter} from "org/eclipse/n4js/mangelhaft/types/ITestReporter"
import {ResultGroups} from "org/eclipse/n4js/mangelhaft/types/ResultGroups"
import { TestMethodDescriptor } from "org/eclipse/n4js/mangelhaft/types/TestMethodDescriptor"
import {TestResult} from "org/eclipse/n4js/mangelhaft/types/TestResult"
import {TestSpy} from "org/eclipse/n4js/mangelhaft/types/TestSpy"
import { TestStatus } from "org/eclipse/n4js/mangelhaft/types/TestStatus"
import * as os from "os"
import * as xmlbuilder+ from "xmlbuilder2"
import {outputTextFile} from "org/eclipse/n4js/mangelhaft/util/fs";


export public class XUnitReportSpec {
    /**
     * Output jUnit/xUnit report file.
     */
    public xunitReportFile: string;
    
    /**
     * jUnit/xUnit report name.
     */
    public xunitReportName?: string;
    
    /**
     * jUnit/xUnit report package name.
     */
    public xunitReportPackage?: string;
}

export public class XUnitReporter implements ITestReporter {
    @Inject
    @Override public spy: TestSpy;

    public spec = {} as XUnitReportSpec;

    private startTime: Date;
    private endTime: Date;

    private resultsMap = new Map<string, TestResult>();

    private testingStarted(numAllGroups: number, sid: string, numAllTests: number): void {
        this.startTime = new Date();
    }

    private testFinished(group: IInstrumentedTest, test: TestMethodDescriptor, testResult: TestResult) {
        let testIdentifier = `${group.name}#${test.name}`;
        if (group.parameterizedName) {
            testIdentifier += `!${group.parameterizedName}`;
        }
        this.resultsMap.set(testIdentifier, testResult);
    }

    private async createXunitReport(resultGroups: ResultGroups): string {
        const spec = this.spec;
        const xml = xmlbuilder.create();
        const testsuitesElem = xml.ele("testsuites");
        const suite = testsuitesElem.ele("testsuite", {
            name: spec.xunitReportName,
            package: spec.xunitReportPackage,
            timestamp: this.startTime.toISOString().substring(0, 19),
            id: 0,
            hostname: os.hostname()
        });
        const suiteProps = suite.ele("properties");

        suiteProps.ele("property", { name: "os.platform", value: os.platform() });
        suiteProps.ele("property", { name: "node.version", value: process.version });

        let skipped = 0,
            errors = 0,
            failures = 0;

        for (const k of Array.from(this.resultsMap.keys()).sort()) {
            const result = this.resultsMap.get(k);

            const hashIndex = k.lastIndexOf("#"),
                spec = suite.ele("testcase", {
                    name: k.substring(hashIndex + 1),
                    time: result.elapsedTime / 1000,
                    classname: k.substring(0, hashIndex)
                });
            if (result.isOK()) {
                if (result.testStatus.startsWith(TestStatus.skipped)) {
                    spec.ele("skipped", {});
                    ++skipped;
                }
            } else {
                ++failures;
                if (result.testStatus === TestStatus.error) {
                    ++errors;
                }
                spec.ele(result.testStatus === TestStatus.failed ? "failure" : "error", {
                    type: "",
                    message: result.message
                }).txt((result.trace || []).join("\n"));
            }
        }

        suite.att("tests", this.resultsMap.size);
        suite.att("errors", errors);
        suite.att("skipped", skipped);
        suite.att("failures", failures);
        suite.att("time", (this.endTime.getTime() - this.startTime.getTime()) / 1000);

        return xml.end({ prettyPrint: true });
    }

    @Override public async register() {
        this.spy.testingStarted.add(this.testingStarted.bind(this));
        this.spy.testFinished.add(this.testFinished.bind(this));
        this.spy.testingFinished.add(async (resultGroups: ResultGroups) => {
            this.endTime = new Date();
            outputTextFile(this.spec.xunitReportFile, await this.createXunitReport(resultGroups));
            console.log("Saved test report at: " + this.spec.xunitReportFile);
        });
        return this;
    }
}
