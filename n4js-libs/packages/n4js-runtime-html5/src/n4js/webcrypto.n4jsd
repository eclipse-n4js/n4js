@@Global @@ProvidedByRuntime

export external public const crypto: Crypto;

export external public interface Crypto {
    public get subtle(): SubtleCrypto;
    public getRandomValues(typedArray: TypedArray);
}

export external public interface SubtleCrypto {
    public decrypt(algorithm: CryptoEncryptDecryptAlgorithm, key: CryptoKey, data: ArrayBuffer|TypedArray): Promise<string, ?>;
    public deriveKey(algorithm: CryptoDeriveKeyAlgorithm, masterKey: CryptoKey, derivedKeyAlgorithm: CryptoAlgorithm, extractable: boolean, keyUsages: [CryptoKeyUsage]): Promise<CryptoKey|CryptoKeyPair, ?>;
    public digest(algorithm: string, buffer: ArrayBuffer|ArrayBufferView): Promise<ArrayBuffer, ?>;
    public encrypt(algorithm: CryptoEncryptDecryptAlgorithm, key: CryptoKey, data: ArrayBuffer|TypedArray): Promise<ArrayBuffer, ?>;
    public exportKey(format: CryptoKeyFormat, key: CryptoKey): Promise<?, ?>
    public generateKey(algorithm: CryptoGenerateKeyAlgorithm, extractable: boolean, keyUsages: [CryptoKeyUsage]): Promise<CryptoKey|CryptoKeyPair, ?>;
    public importKey(format: CryptoKeyFormat, keyData: ArrayBuffer|string, algorithm: CryptoGenerateKeyAlgorithm, extractable: boolean, usages: [CryptoKeyUsage]): Promise<CryptoKey, ?>;
    public sign(algorithm: CryptoKey|string, key: CryptoKey, text2sign: ArrayBuffer|ArrayBufferView): Promise<ArrayBuffer|ArrayBufferView, ?>;
    public unwrapKey(format: CryptoKeyFormat, wrappedKey: ArrayBuffer, unwrappingKey: CryptoKey, unwrapAlgo: string, unwrappedKeyAlgorithm: string, extractable: boolean, keyUsages: [CryptoKeyUsage]): Promise<CryptoKey, ?>;
    public verify(algorithm: string, key: CryptoKey, signature: ArrayBuffer|ArrayBufferView, text2verify: ArrayBuffer|ArrayBufferView): Promise<boolean, ?>;
    public wrapKey(format: CryptoKeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string): Promise<?, ?>
}

export external public interface CryptoKey {
    public get type(): CryptoKeyType;
    public get extractable(): boolean;
    public get algorithm(): any;
    public get usages(): [CryptoKeyUsage];
}

export external public interface CryptoKeyPair {
    public get publicKey(): CryptoKey;
    public get privateKey(): CryptoKey;
}

export external public interface ~CryptoAlgorithm {
    public get name(): string;
}

export external public interface ~CryptoEncryptDecryptAlgorithm extends CryptoAlgorithm {
    public get iv?(): ArrayBuffer|ArrayBufferView;
    public get additionalData?(): ArrayBuffer|ArrayBufferView;
    public get tagLength?(): int;
    
    public get counter?(): ArrayBuffer|ArrayBufferView;
    public get length?(): int;
    
    public get label?(): string;
}

export external public interface ~CryptoDeriveKeyAlgorithm extends CryptoAlgorithm {
    public get public?(): CryptoKey;
    
    public get salt?(): ArrayBuffer|ArrayBufferView;
    public get iterators?(): int;
    
    public get hash?(): string;
    
    public get label?(): string;
    public get context?(): any;
}

export external public interface ~CryptoGenerateKeyAlgorithm extends CryptoAlgorithm {
    public get modulusLength?(): int;
    public get publicExponent?(): Uint8Array;
    public get hash?(): CryptoAlgorithm;
}

@StringBased
export external public enum CryptoKeyType {
    secret,
    public,
    private
}

@StringBased
export external public enum CryptoKeyUsage {
    encrypt,
    decrypt,
    sign,
    verify,
    deriveKey,
    deriveBits,
    wrapKey,
    unwrapKey
}

@StringBased
export external public enum CryptoKeyFormat {
    raw,
    pkcs8,
    spki,
    jwk
}
