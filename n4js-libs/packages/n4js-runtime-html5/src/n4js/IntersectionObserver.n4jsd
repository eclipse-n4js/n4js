/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@@Global @@ProvidedByRuntime

/**
 * IntersectionObserver is an API that can be used to understand the 
 * visibility and position of DOM elements ("targets") relative to a
 * containing element or to the top-level viewport ("root"). 
 * 
 * The position is delivered asynchronously and is useful for 
 * understanding the visibility of elements and implementing 
 * pre-loading and deferred loading of DOM content.
 * 
 * see https://w3c.github.io/IntersectionObserver/
 */
export external public class IntersectionObserver {
    public constructor(callback: (entries: Iterable<IntersectionObserverEntry>, observer: IntersectionObserver) => void, options: IntersectionObserverInit = undefined);
    public root?: HTMLElement;
    public rootMargin: string;
    public thresholds: Iterable<number>;
    public observe(target: HTMLElement): void;
    public unobserve(target: HTMLElement): void;
    public disconnect(): void;
    public takeRecords(): Iterable<IntersectionObserverEntry> 
}

export external public interface IntersectionObserverEntry {
    public time: number;
    public rootBounds: ClientRect;
    public boundingClientRect: ClientRect;
    public intersectionRect: ClientRect;
    public isIntersecting: boolean;
    public intersectionRatio: number;
    public target: HTMLElement;
};

export external public interface ~IntersectionObserverInit {
    public root?: HTMLElement; //default value is null
    public rootMargin?: string; //default value is "0px"
    public threshold?: number | Iterable<number>; //default value is 0
};
