// generated from https://github.com/microsoft/TypeScript/blob/5d0d7ae85d1ff52d3ef4cb6cac653f33f7e76724/src/lib/dom.iterable.generated.d.ts
// (for license information of original file see https://github.com/microsoft/TypeScript/blob/main/LICENSE.txt)

@@Global @@ProvidedByRuntime

export external public interface ~AudioParam {
	setValueCurveAtTime(values: Iterable<number>, startTime: number, duration: number): AudioParam;
}

@EcmaScript
export external public class AudioParamMap extends ReadonlyMap<string,AudioParam> {}

@Polyfill
export external public interface ~BaseAudioContext extends BaseAudioContext {
	@Override
	createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIRFilterNode;
	@Override
	createPeriodicWave(real: Iterable<number>, imag: Iterable<number>, constraints: PeriodicWaveConstraints = ): PeriodicWave;
}

@Polyfill
export external public interface ~CSSRuleList extends CSSRuleList {
	[Symbol.iterator](): IterableIterator<CSSRule>;
}

@Polyfill
export external public interface ~CSSStyleDeclaration extends CSSStyleDeclaration {
	[Symbol.iterator](): IterableIterator<string>;
}

@Polyfill
export external public interface ~Cache extends Cache {
	@Override
	addAll(requests: Iterable<RequestInfo>): Promise<undefined>;
}

@Polyfill
export external public interface ~CanvasPathDrawingStyles extends CanvasPathDrawingStyles {
	@Override
	setLineDash(segments: Iterable<number>): void;
}

@Polyfill
export external public interface ~DOMRectList extends DOMRectList {
	[Symbol.iterator](): IterableIterator<DOMRect>;
}

@Polyfill
export external public interface ~DOMStringList extends DOMStringList {
	[Symbol.iterator](): IterableIterator<string>;
}

@Polyfill
export external public interface ~DOMTokenList extends DOMTokenList {
	[Symbol.iterator](): IterableIterator<string>;
	entries(): IterableIterator<[number,string]>;
	keys(): IterableIterator<number>;
	values(): IterableIterator<string>;
}

@Polyfill
export external public interface ~DataTransferItemList extends DataTransferItemList {
	[Symbol.iterator](): IterableIterator<DataTransferItem>;
}

@Polyfill
export external public interface ~FileList extends FileList {
	[Symbol.iterator](): IterableIterator<File>;
}

@EcmaScript
export external public class FontFaceSet extends Set<FontFace> {}

@Polyfill
export external public interface ~FormData extends FormData {
	[Symbol.iterator](): IterableIterator<[string,FormDataEntryValue]>;
	entries(): IterableIterator<[string,FormDataEntryValue]>;
	keys(): IterableIterator<string>;
	values(): IterableIterator<FormDataEntryValue>;
}

@Polyfill
export external public interface ~HTMLAllCollection extends HTMLAllCollection {
	[Symbol.iterator](): IterableIterator<Element>;
}

@Polyfill
export external public interface ~HTMLCollectionBase extends HTMLCollectionBase {
	[Symbol.iterator](): IterableIterator<Element>;
}

@Polyfill
export external public interface ~HTMLCollectionOf<T extends Element> extends HTMLCollectionOf<T> {
	[Symbol.iterator](): IterableIterator<T>;
}

@Polyfill
export external public interface ~HTMLFormElement extends HTMLFormElement {
	[Symbol.iterator](): IterableIterator<Element>;
}

@Polyfill
export external public interface ~HTMLSelectElement extends HTMLSelectElement {
	[Symbol.iterator](): IterableIterator<HTMLOptionElement>;
}

@Polyfill
export external public interface ~Headers extends Headers {
	[Symbol.iterator](): IterableIterator<[string,string]>;
	entries(): IterableIterator<[string,string]>;
	keys(): IterableIterator<string>;
	values(): IterableIterator<string>;
}

@Polyfill
export external public interface ~IDBDatabase extends IDBDatabase {
	@Override
	transaction(storeNames: string | Iterable<string>, mode: IDBTransactionMode = ): IDBTransaction;
}

@Polyfill
export external public interface ~IDBObjectStore extends IDBObjectStore {
	@Override
	createIndex(name: string, keyPath: string | Iterable<string>, options: IDBIndexParameters = ): IDBIndex;
}

@Polyfill
export external public interface ~MediaKeyStatusMap extends MediaKeyStatusMap {
	[Symbol.iterator](): IterableIterator<[BufferSource,MediaKeyStatus]>;
	entries(): IterableIterator<[BufferSource,MediaKeyStatus]>;
	keys(): IterableIterator<BufferSource>;
	values(): IterableIterator<MediaKeyStatus>;
}

@Polyfill
export external public interface ~MediaList extends MediaList {
	[Symbol.iterator](): IterableIterator<string>;
}

@Polyfill
export external public interface ~MessageEvent<T=any> extends MessageEvent<T> {
	@Override
	initMessageEvent(type: string, bubbles: boolean = , cancelable: boolean = , data: any = , origin: string = , lastEventId: string = , source: MessageEventSource = , ports: Iterable<MessagePort> = ): void;
}

@Polyfill
export external public interface ~MimeTypeArray extends MimeTypeArray {
	[Symbol.iterator](): IterableIterator<MimeType>;
}

@Polyfill
export external public interface ~NamedNodeMap extends NamedNodeMap {
	[Symbol.iterator](): IterableIterator<Attr>;
}

@Polyfill
export external public interface ~Navigator extends Navigator {
	@Override
	requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: Iterable<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>;
}

@Polyfill
export external public interface ~NodeList extends NodeList {
	[Symbol.iterator](): IterableIterator<Node>;
	entries(): IterableIterator<Iterable2<number,Node>>;
	keys(): IterableIterator<number>;
	values(): IterableIterator<Node>;
}

@Polyfill
export external public interface ~NodeListOf<TNode extends Node> extends NodeListOf<TNode> {
	[Symbol.iterator](): IterableIterator<TNode>;
	entries(): IterableIterator<Iterable2<number,TNode>>;
	keys(): IterableIterator<number>;
	values(): IterableIterator<TNode>;
}

@Polyfill
export external public interface ~Plugin extends Plugin {
	[Symbol.iterator](): IterableIterator<MimeType>;
}

@Polyfill
export external public interface ~PluginArray extends PluginArray {
	[Symbol.iterator](): IterableIterator<Plugin>;
}

@EcmaScript
export external public class RTCStatsReport extends ReadonlyMap<string,any> {}

@Polyfill
export external public interface ~ReadableStream<R=any> extends ReadableStream<R> {
	[Symbol.iterator](): IterableIterator<any>;
	entries(): IterableIterator<[number,any]>;
	keys(): IterableIterator<number>;
	values(): IterableIterator<any>;
}

@Polyfill
export external public interface ~SVGLengthList extends SVGLengthList {
	[Symbol.iterator](): IterableIterator<SVGLength>;
}

@Polyfill
export external public interface ~SVGNumberList extends SVGNumberList {
	[Symbol.iterator](): IterableIterator<SVGNumber>;
}

@Polyfill
export external public interface ~SVGPointList extends SVGPointList {
	[Symbol.iterator](): IterableIterator<DOMPoint>;
}

@Polyfill
export external public interface ~SVGStringList extends SVGStringList {
	[Symbol.iterator](): IterableIterator<string>;
}

@Polyfill
export external public interface ~SVGTransformList extends SVGTransformList {
	[Symbol.iterator](): IterableIterator<SVGTransform>;
}

@Polyfill
export external public interface ~SourceBufferList extends SourceBufferList {
	[Symbol.iterator](): IterableIterator<SourceBuffer>;
}

@Polyfill
export external public interface ~SpeechRecognitionResult extends SpeechRecognitionResult {
	[Symbol.iterator](): IterableIterator<SpeechRecognitionAlternative>;
}

@Polyfill
export external public interface ~SpeechRecognitionResultList extends SpeechRecognitionResultList {
	[Symbol.iterator](): IterableIterator<SpeechRecognitionResult>;
}

@Polyfill
export external public interface ~StyleSheetList extends StyleSheetList {
	[Symbol.iterator](): IterableIterator<CSSStyleSheet>;
}

@Polyfill
export external public interface ~SubtleCrypto extends SubtleCrypto {
	@Override
	deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;
	@Override
	generateKey(...args: any+): any+; // overloading not supported
	@Override
	importKey(...args: any+): any+; // overloading not supported
	@Override
	unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;
}

@Polyfill
export external public interface ~TextTrackCueList extends TextTrackCueList {
	[Symbol.iterator](): IterableIterator<TextTrackCue>;
}

@Polyfill
export external public interface ~TextTrackList extends TextTrackList {
	[Symbol.iterator](): IterableIterator<TextTrack>;
}

@Polyfill
export external public interface ~TouchList extends TouchList {
	[Symbol.iterator](): IterableIterator<Touch>;
}

@Polyfill
export external public interface ~URLSearchParams extends URLSearchParams {
	[Symbol.iterator](): IterableIterator<[string,string]>;
	entries(): IterableIterator<[string,string]>;
	keys(): IterableIterator<string>;
	values(): IterableIterator<string>;
}

@Polyfill
export external public interface ~WEBGL_draw_buffers extends WEBGL_draw_buffers {
	@Override
	drawBuffersWEBGL(buffers: Iterable<GLenum>): void;
}

@Polyfill
export external public interface ~WebGL2RenderingContextBase extends WebGL2RenderingContextBase {
	@Override
	clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLfloat>, srcOffset: GLuint = ): void;
	@Override
	clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLint>, srcOffset: GLuint = ): void;
	@Override
	clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLuint>, srcOffset: GLuint = ): void;
	@Override
	drawBuffers(buffers: Iterable<GLenum>): void;
	@Override
	getActiveUniforms(program: WebGLProgram, uniformIndices: Iterable<GLuint>, pname: GLenum): any;
	@Override
	invalidateFramebuffer(target: GLenum, attachments: Iterable<GLenum>): void;
	@Override
	invalidateSubFramebuffer(target: GLenum, attachments: Iterable<GLenum>, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
	@Override
	transformFeedbackVaryings(program: WebGLProgram, varyings: Iterable<string>, bufferMode: GLenum): void;
	@Override
	uniform1uiv(location: WebGLUniformLocation, data: Iterable<GLuint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform2uiv(location: WebGLUniformLocation, data: Iterable<GLuint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform3uiv(location: WebGLUniformLocation, data: Iterable<GLuint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform4uiv(location: WebGLUniformLocation, data: Iterable<GLuint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix2x3fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix2x4fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix3x2fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix3x4fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix4x2fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix4x3fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	vertexAttribI4iv(index: GLuint, values: Iterable<GLint>): void;
	@Override
	vertexAttribI4uiv(index: GLuint, values: Iterable<GLuint>): void;
}

@Polyfill
export external public interface ~WebGL2RenderingContextOverloads extends WebGL2RenderingContextOverloads {
	@Override
	uniform1fv(location: WebGLUniformLocation, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform1iv(location: WebGLUniformLocation, data: Iterable<GLint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform2fv(location: WebGLUniformLocation, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform2iv(location: WebGLUniformLocation, data: Iterable<GLint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform3fv(location: WebGLUniformLocation, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform3iv(location: WebGLUniformLocation, data: Iterable<GLint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform4fv(location: WebGLUniformLocation, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniform4iv(location: WebGLUniformLocation, data: Iterable<GLint>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix2fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix3fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
	@Override
	uniformMatrix4fv(location: WebGLUniformLocation, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint = , srcLength: GLuint = ): void;
}

@Polyfill
export external public interface ~WebGLRenderingContextBase extends WebGLRenderingContextBase {
	@Override
	vertexAttrib1fv(index: GLuint, values: Iterable<GLfloat>): void;
	@Override
	vertexAttrib2fv(index: GLuint, values: Iterable<GLfloat>): void;
	@Override
	vertexAttrib3fv(index: GLuint, values: Iterable<GLfloat>): void;
	@Override
	vertexAttrib4fv(index: GLuint, values: Iterable<GLfloat>): void;
}

@Polyfill
export external public interface ~WebGLRenderingContextOverloads extends WebGLRenderingContextOverloads {
	@Override
	uniform1fv(location: WebGLUniformLocation, v: Iterable<GLfloat>): void;
	@Override
	uniform1iv(location: WebGLUniformLocation, v: Iterable<GLint>): void;
	@Override
	uniform2fv(location: WebGLUniformLocation, v: Iterable<GLfloat>): void;
	@Override
	uniform2iv(location: WebGLUniformLocation, v: Iterable<GLint>): void;
	@Override
	uniform3fv(location: WebGLUniformLocation, v: Iterable<GLfloat>): void;
	@Override
	uniform3iv(location: WebGLUniformLocation, v: Iterable<GLint>): void;
	@Override
	uniform4fv(location: WebGLUniformLocation, v: Iterable<GLfloat>): void;
	@Override
	uniform4iv(location: WebGLUniformLocation, v: Iterable<GLint>): void;
	@Override
	uniformMatrix2fv(location: WebGLUniformLocation, transpose: GLboolean, value: Iterable<GLfloat>): void;
	@Override
	uniformMatrix3fv(location: WebGLUniformLocation, transpose: GLboolean, value: Iterable<GLfloat>): void;
	@Override
	uniformMatrix4fv(location: WebGLUniformLocation, transpose: GLboolean, value: Iterable<GLfloat>): void;
}
