/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@@Global @@ProvidedByRuntime


import {IteratorExt} from "Iterator";
export external public class Set<ValueT> extends Object implements Iterable<ValueT> {
    public constructor(arg: Iterable<ValueT> =);

    @Override public [Symbol.iterator](): IteratorExt<ValueT>;

    /**
     * Number of values.
     */
    public get size(): int;

    /**
     * Adds a new element; returns the Set object.
     */
    public add(value: ValueT): this;

    /**
     * Removes all elements.
     */
    public clear(): void;

    /**
     * Deletes an element.
     *
     * @param value - The element to be deleted.
     * @return <code>true</code> in case the set has been modified, otherwise false.
     */
    public delete(value: ValueT): boolean;

    /**
     * New iterator of [value, value] tuples for each element, in insertion order.
     */
    public entries(): IteratorExt<Iterable2<ValueT, ValueT>>;

    /**
     * Calls callbackFn for each value, in insertion order.
     */
    public forEach(callbackFn: {function(ValueT, ValueT, Set<ValueT>):void}, thisArg: Object=): void;

    /**
     * Tests whether an element is part of this set.
     */
    public has(value: ValueT): boolean;

    /**
     * New iterator of the values for each element, in insertion order.
     */
    public keys(): IteratorExt<ValueT>;

    /**
     * New iterator of values for each element, in insertion order.
     */
    public values(): IteratorExt<ValueT>;
}

