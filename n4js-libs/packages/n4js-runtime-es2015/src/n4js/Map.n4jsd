/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@@Global @@ProvidedByRuntime


import {IteratorExt} from "Iterator";
export external public class Map<KeyT, ValueT> extends Object implements Iterable<Iterable2<KeyT, ValueT>> {
    public constructor(arg: Iterable<Iterable2<KeyT, ValueT>> =);

    @Override public [Symbol.iterator](): IteratorExt<Iterable2<KeyT, ValueT>>;

    /**
     * Number of key/value pairs.
     */
    public get size(): int;

    /**
     * Removes all key/value pairs.
     */
    public clear(): void;

    /**
     * Removes value associated with given key.
     */
    public delete(key: KeyT): boolean;

    /**
     * New iterator of [key, value] tuples for each element in insertion order.
     */
    public entries(): IteratorExt<Iterable2<KeyT, ValueT>>;

    /**
     * Calls callbackFn for each key/value pai, in insertion order.
     */
    public forEach(callbackFn: {function(ValueT, KeyT, Map<KeyT, ValueT>):void}, thisArg: Object=): void;

    /**
     * Value associated with key.
     */
    public get(key: KeyT): ValueT;

    /**
     * Tests whether a value has been associated with the key.
     */
    public has(key: KeyT): boolean;

    /**
     * New iterator that contains the keys in insertion order.
     */
    public keys(): IteratorExt<KeyT>;

    /**
     * Sets a key/value; returns the Map object.
     */
    public set(key: KeyT, value: ValueT): this;

    /**
     * New iterator that contains the values in insertion order.
     */
    public values(): IteratorExt<ValueT>;
}

