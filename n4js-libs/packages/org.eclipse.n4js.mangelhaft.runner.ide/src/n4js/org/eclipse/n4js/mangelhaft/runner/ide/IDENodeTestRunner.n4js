/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {N4Injector} from "n4js/lang/N4Injector";
import {FIXME1} from "org/eclipse/n4js/mangelhaft/Test";
import {FIXME2} from "org/eclipse/n4js/mangelhaft/Test";
import {IFIXME} from "org/eclipse/n4js/mangelhaft/Test";
import {IFIXME2} from "org/eclipse/n4js/mangelhaft/Test";
import {TestController} from "org/eclipse/n4js/mangelhaft/TestController";
import {IDEReporter} from "org/eclipse/n4js/mangelhaft/reporter/ide/IDEReporter";
import {TestDIComponent} from "org/eclipse/n4js/mangelhaft/types/TestDIComponent";
import {TestInfos} from "org/eclipse/n4js/mangelhaft/types/TestInfos";

/**
 *  Test runner specialized for IDE usage, e.g. reports test progress via HTTP to the end point exposed by the IDE.
 */
class IDENodeTestRunner {

    @Inject
    private controller: TestController;

    @Inject
    private reporter: IDEReporter;

    /** Performs test execution. If needed fetches required data and prepares it. */
    @Final
    private async run(): void {

        try {
            let testInfos = await this.getTestCatalog();
            this.reporter.endpoint = testInfos.endpoint;
            this.controller.reporters = [this.reporter];
            await this.controller.runGroups(testInfos, 100, n4.runtimeOptions.testScope as string);
        } catch (err) {
            if (err instanceof Error) {
                console.error(err + "\stack: " + (err as Error).stack.replace(/^Error:?\s*/, ""));
            }

            throw err;
        }
    }

    private async getTestCatalog(): TestInfos {
        let catalogDef = n4.runtimeOptions["test-catalog"];
        let testCatalog = catalogDef as TestInfos; // optimistic assignment

        if (typeof catalogDef === "string") { // we need to fetch actual data
            let response = await fetch(catalogDef as string, {
                    headers: {"Content-Type": "application/vnd.n4js.assemble_test_catalog_req.tm+json"}
                });
            testCatalog = (await response.json()) as TestInfos;
        }
        return testCatalog;
    }
}

/** Bindings for the self-testing setup of mangelhaft  */
@Bind(IFIXME, FIXME1)
@Bind(IFIXME2, FIXME2)
@Binder
class TestBinder {}

/** Main component of the IDENodeTestRunner */
@GenerateInjector
@WithParentInjector(TestDIComponent)
@UseBinder(TestBinder)
class Root {

    @Inject
    runner: IDENodeTestRunner;
}

// Create (and inject) object graph for test runner
const parentinj = N4Injector.of(TestDIComponent);
const root = N4Injector.of(Root, parentinj).create(Root);

/*
 * Name {@code main} is required by n4js bootstrapping, that in most cases is done used 
 * runtime environment. See {@code n4js-es5/src/js/rt/post-systemjs.js} for example of
 * bootstrapping.
 * Note that also name of this module and the location needs to be in sync with low level
 * {@code require} statements in runtime environments and build scripts.
 */
export default public const main = root.runner;
