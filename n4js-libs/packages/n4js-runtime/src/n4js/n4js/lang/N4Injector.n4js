/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

const DI_SYMBOL_KEY = "org.eclipse.n4js/diInfo";
const DI_PROP_NAME = Symbol.for(DI_SYMBOL_KEY);

/**
 * Interface for DI hooks of an injected type;
 * exported just for testing
 */
@Internal
export public interface InjectedTypeMeta {
    type: type{N4Object};
    name?: string;
    typeVar?: InjectedTypeMeta;
}

/**
 * Interface for DI hooks of a class that can has injection points,
 * or has relevant information when being injected;
 * exported just for testing
 */
@Internal
export public interface InjectedClassMeta {
    /** present if type is annotated with scope annotation, will contain name of the scope */
    public scope?: string;
    /** present if type has own injected constructor, can be empty (if annotated ctor has no params) */
    public injectCtorParams?: InjectedTypeMeta[];
    /** present if type has own injected fields, includes overriden fields */
    public fieldsInjectedTypes?: InjectedTypeMeta[];
}

/** exported just for testing*/
@Internal
export public interface BindingInfo {
    public from: constructor{? extends N4Object};
    public to: constructor{? extends N4Object};
}

/** exported just for testing*/
@Internal
export public interface ProvideMethodInfo {
    public to: constructor{? extends N4Object};
    public name: string;
    public args: InjectedTypeMeta[];
}

/**
 * Interface for DI hooks of a class that defines bindings.
 * Binders can be created manually, or be created by via injection,
 * hence DI hooks of and class with injection points;
 * exported just for testing
 */
@Internal
export public interface BinderMeta extends InjectedClassMeta {
    /** present if binding annotations */
    public bindings?: BindingInfo[];
    /** present if provide methods */
    public methodBindings?: ProvideMethodInfo[];
}

/**
 * Interface for DI hooks of a DIComponent.
 * DIComponets can have other classes injected,
 * hence DI hooks of and class with injection points;
 * exported just for testing
 */
@Internal
export public interface DIComponentMeta extends InjectedClassMeta {
    public parent?: constructor{? extends N4Object};
    public binders: constructor{? extends N4Object}[];
}

/** exported just for testing*/
@Internal
export public function hasDIMeta(type: type{N4Object}): boolean {
    let typeObj: Object = type;
    return typeof typeObj[DI_PROP_NAME] === typeof{};
}

/** exported just for testing*/
@Internal
export public function getOwnInjectedClassMeta(type: type{N4Object}): InjectedClassMeta? {
    if (type.hasOwnProperty(DI_PROP_NAME)) {
        let typeObj: Object = type;
        return typeObj[DI_PROP_NAME] as InjectedClassMeta;
    }
    return undefined;
}

/** exported just for testing*/
@Internal
export public function getBinderMeta(type: type{N4Object}): BinderMeta? {
    let typeObj: Object = type;
    return typeObj[DI_PROP_NAME] as BinderMeta;
}

/** exported just for testing*/
@Internal
export public function getDIComponentMeta(type: type{N4Object}): DIComponentMeta? {
    let typeObj: Object = type;
    return typeObj[DI_PROP_NAME] as DIComponentMeta;
}

// ==================================
// === helper types, not exported ===
// ==================================

// TODO: IDEBUG-517  for providers, class expression would be so much better

/**
 * Class for creating anonymous N4Providers.
 * Due to IDEBUG-517 we cannot use actual anonymous classes (class expressions)
 * so we declare this class that will give us constructor for N4Providers
 */
class _$<T> implements N4Provider<T>{
    fn: {function():T};
    constructor(fn: {function():T}){
        this.fn = fn;
    }
    @Override
    public get(): T{
        return this.fn();
    }
}

/**
 * Transforms given {constructor{? extends N4Object}} to a string
 * representation based on origin and fqn
 */
function getOFQN(ctor: type{N4Object}):string{
    return ctor.n4type.origin + ctor.n4type.fqn;
}

// ===============================
// === injector implementation ===
// ===============================

/**
 * Generic error indicating issue in the dependency injection configuration.
 * Clients should catch this exception, log it and interrupt the program execution.
 */
export public class DIConfigurationError extends Error {}

/**
 * Thrown when a instance of a type cannot be created, or type itself throws exceptions
 * during creation. In most cases indicates missing binding for interface or abstract class.
 */
export public class DIUnsatisfiedBindingError extends DIConfigurationError {

    /** Used for wrapping the N4Type which could not be constructed. */
    private binding: type{N4Object};

    /**
     * Creates a new unsatisfied binding error instance with the N4 type of the
     * unsatisfied binding and the optional error message arguments.
     */
    public constructor(unsatisfiedBinding: type{N4Object}, message: string=) {
        super(message || '');
        this.binding = unsatisfiedBinding;
    }

    /**
     * Returns with the N4 type which does not have a corresponding binding, hence
     * it cannot be instantiated and injected.
     */
    public get unsatisfiedBinding(): type{N4Object} {
        return this.binding;
    }
}

@Final
export public class N4Injector{
    /** keeps information about which binder has binding for a given type */
    private explicitBindings: Map<string, N4Object>;
    /** keeps scoped instances */
    private scopedInstances: Map<string, N4Object> = new Map<string, N4Object>();
    /** information about DICompoment */
    private dicInfo: string;
    /** parent injector used to delegate creation of some types, or getting singleton instances */
    @Final public parent: N4Injector;

    private constructor(dicInfo: string, bindings: Map<string, N4Object>, parent: N4Injector=){
        this.dicInfo = dicInfo;
        if(parent){
            this.parent = parent;
        }
        this.explicitBindings = bindings;
    }

    /**
     * Public method for asking N4Injector to create instance of a given type.
     * Resolves bindings, scopes, and delegation to the parent for a given type.
     * Returns fully injected instance of provided type. May throw exception if
     * creation of the type is not possible.
     *
     * If is user facing facade, delegates to internal logic.
     * Injector itself should never call this method, instead should use
     * call its delegate or sub delegates.
     */
    public <T extends N4Object> create(ctor: type{T}): T {
        let cachedInstances: Map<string, N4Object> = new Map<string, N4Object>();

        //for type{T} we return either:
        // - T
        // - ? <: T
        // - ~N4Provider<T>
        // - ? <: ~N4Provider<T>
        
        // TODO: ctor as any cast is a hack. In the long run, we should properly type this whole file
        return this.internalCreate(ctor, this, cachedInstances);
    }

    /**
     * Used internally as main entry point for creating types. Checks for bindings,
     * parent bindings, special cases.
     *
     * @param ctor constructor of a type for which instance we are creating
     * @param delegate instance of N4Injector to which we are delegating creation of dependencies
     * @param cachedInstances cache with instances created in this injection phase
     */
     // TODO GH-709 As a developer I need custom DI scopes
     // https://github.com/eclipse/n4js/issues/709
     // this method should be private again once
     // support for custom scopes is added
    public <T extends N4Object> internalCreate(ctor: type{T}, delegate: N4Injector, cachedInstances: Map<string, N4Object>): T {
        if(!ctor){
            //can happen if there is a load time cycle,
            //in which case our module loader
            //will return undefined instead of loading a module and returning
            //exported symbol (we expect type)
            throw new DIConfigurationError('Requested injection of undefined or null ctor.');
        }
        let fqn = ctor.n4type.fqn;
        if (!fqn) {
            throw new DIConfigurationError('Cannot resolve FQN for ' + ctor + '.');
        }

        //if injecting N4Injector, quick return
        if(fqn === N4Type.of(this).fqn){
            let that: Object = this;
            return that as T;
        }

        //if injector asked for N4Provider<T> directly, quick return
        if(fqn === N4Provider.n4type.fqn){
            let pMeta: InjectedTypeMeta = Object.create(null) as InjectedTypeMeta;
            pMeta.type = ctor;
            return this.createAnonymousProvider(pMeta) as T;
        }

        //check owned bindings, parent bindings
        let pairInjectorBinding = this.findBinding(ctor);
        if(pairInjectorBinding){
            let [injector, binder] = pairInjectorBinding;
            if(binder && injector){
                return injector.createFromBinder(ctor, binder, delegate, cachedInstances);
            }
            throw new DIConfigurationError("Cannot obtain Injector->Binder pair");
        }

        //check scoped instances
        if(this.declaredSingleton(ctor)){
            //we already checked bindings, but only for keys
            //when declaring a binding side desired (?) effect
            //is that target of the binding is treated differently
            //if type is scoped at definition side
            let isBindingTarget = this.checkOwnBindingTargets(ctor);
            if(isBindingTarget){
                //if scoped type is in this injector local bindings, it creates instance
                return this.createNewInjected(ctor, delegate, cachedInstances);
            }
            //otherwise we lookup existing instance in parents (closest parent with instnace wins)
            let scopedInstance = this.findScopedInstanceInParentChain(ctor);
            if(scopedInstance){
                //TODO test if lookup above works correctly regardlessly
                //if parent has type in owned bindings target,
                //but instance was not yet created and cached.
                return scopedInstance;
            }
            //if there is no instance ask root injector for the instance
            //we could delegate to internalCreate or createInstance
            //but due to already checked conditions, we can delegate to createNewInjected
            //(avoids many internal checks and lookups)
            return this.getRootParent().createNewInjected(ctor, delegate, cachedInstances);
        }

        //just try to create type
        return this.createInstance(ctor as constructor{T}, delegate, cachedInstances);
    }

    /**
     * Checks if provided type is target of any owned bindings,
     * that is: second argument in annotation based binding (b) or a
     * return type in a method based binding (m).
     */
    private checkOwnBindingTargets(ctor: type{N4Object}): boolean{
        if(!this.explicitBindings.size) return false;

        for(let bx of this.explicitBindings.values()){
            let binderMeta = getBinderMeta(bx.constructor);
            if(binderMeta.bindings.some(b => b.to === ctor) || binderMeta.methodBindings.some(m => m.to === ctor)){
                return true;
            }
        }

        return false;
    }

    /**
     * Transitive scoped instance lookup. Traverses from this instance through parents chain checking
     * for existence of a cached scoped instance.
     * @returns first found cached scoped instance, or undefined.
     */
    private <T extends N4Object> findScopedInstanceInParentChain(ctor: type{T}): T? {
        let key = getOFQN(ctor);
        if(this.scopedInstances.has(key)){
            return this.scopedInstances.get(key) as T;
        }
        if(this.parent){
            if(this.parent.scopedInstances.has(key)){
                return this.parent.scopedInstances.get(key) as T;
            }
            return this.parent.findScopedInstanceInParentChain(ctor);
        }
    }

    /**
     * Returns top most parent of this injector chain.
     */
    private getRootParent(): N4Injector{
        if(this.parent){
            return this.parent.getRootParent();
        }
        return this;
    }

    /**
     * Creates instance of a type specified by the ctor.
     * Will either delegate to method that cares of injection,
     * or it will just use ctor for creation of the type.
     */
    private <T extends N4Object> createInstance(ctor: constructor{T}, delegate: N4Injector,cachedInstances: Map<string, N4Object>): T {
        //if injecting class with DI data
        if(hasDIMeta(ctor)){
            return this.createNewInjected(ctor, delegate, cachedInstances)
        }

        //if injecting class with no di info
        if (!hasDIMeta(ctor)) {
            return this.createNewNotInjected(ctor);
        }

        throw new DIConfigurationError('Type ' + getOFQN(ctor) + ' could not be created.');
    }

    /**
     * Creates instance of a type with no DI meta information, thus
     * just tries to create using ctor and empty parameter list.
     * Will catch any throwable thrown during creation of the instance,
     * and will throw a {@link DIUnsatisfiedBindingError} instead.
     */
    private <T extends N4Object> createNewNotInjected(ctor: constructor{T}): T {
        let typeInstance = this.createNew(ctor, []);
        if (!typeInstance) {
            throw new DIConfigurationError('Could not create valid instance for ' + getOFQN(ctor) + '.');
        }
        return typeInstance;
    }

    /**
     * returns true if given type is annotated with Singleton scope.
     */
    private declaredSingleton(ctor: type{N4Object}): boolean{
        if (hasDIMeta(ctor)) {
            const meta = getOwnInjectedClassMeta(ctor);
            if (meta) {
                return meta.scope === "Singleton";
            }
        }
        return false;
    }

    /**
     * Transitive Binding lookup.
     * Will check current instance for bindings of provided type.
     * If not found recursively calls itself on the parent (if available).
     * When {@link N4Injector} configured  with {@link Binder} for a given
     * type is found, iterable with injector and a binder is returned.
     * If no binding found, returns undefined.
     * @returns closest pair of N4Injector and Binder for a given type
     */
    private findBinding(ctor: type{N4Object}): Iterable2<N4Injector, N4Object>?{
        let key = getOFQN(ctor);
        if(this.explicitBindings.has(key)){
            return [this, this.explicitBindings.get(key)];
        }
        if(this.parent){
            return this.parent.findBinding(ctor);
        }
    }

    private <T extends N4Object> createFromBinder(ctor: type{T}, binder: N4Object, delegate: N4Injector, cachedInstances: Map<string,N4Object>): T {
        //check for annotation based binding
        let bm = getBinderMeta(binder.constructor);
        let annotationMappings = bm.bindings.filter(k => k.from === ctor);
        if(annotationMappings.length > 1){
            throw new Error("too many mappings for" + ctor);
        }
        if(annotationMappings.length === 1){
            let target = annotationMappings[0].to;
            if(this === delegate){
                if(this.scopedInstances.has(getOFQN(target))){
                    //bound to existing scoped instance
                    return this.scopedInstances.get(getOFQN(target)) as T;
                }
            }
            if (target === ctor) {
                //cycle binding: T->T
                return this.createInstance(ctor as constructor{T}, delegate, cachedInstances);
            }
            //delegate creation of the target
            return delegate.internalCreate(target as constructor{T}, delegate, cachedInstances);
        }

        //check for method binding
        let methodMappings = bm.methodBindings.filter(k => k.to === ctor);
        if(methodMappings.length > 1){
            throw new Error("too many mappings for" + ctor);
        }
        if(methodMappings.length === 1){
            if(this === delegate){
                if(this.scopedInstances.has(getOFQN(ctor))){
                    //bound to existing scoped instance
                    return this.scopedInstances.get(getOFQN(ctor)) as T;
                }
            }
            return this.createProvided(binder, methodMappings[0], delegate, cachedInstances) as T;
        }
        throw new DIConfigurationError("trouble resolving binding for " + ctor);
    }

    /**
     * Creates new type instance from provided ctor and parameters.
     * Basically calls <pre>new ctor(parameters)</pre>.
     */
    private <T extends N4Object> createNew(ctor: constructor{T}, parameters: any[]): T {
        if(!ctor){
            throw new DIConfigurationError("Tried to create instance from null or undefined ctor" + ctor);
        }
        if(!ctor.n4type.isClass){
            if(ctor.n4type.isInterface){
                throw new DIUnsatisfiedBindingError((ctor), 'No binding for ' + getOFQN(ctor) + ' interface');
            }

            if(ctor.n4type.isEnum){
                throw new DIConfigurationError("Tried to create instance from enum" + getOFQN(ctor));
            }
        }
        //TODO IDEBUG-541 handle ctor of an abstract class

        return Reflect.construct(ctor, parameters) as T;
    }

    /**
     * Creates instance based on provided DI meta information.
     * Delegates to the {@link N4Injector#createAnonymousProvider}, or to the {@link N4Injector#create}
     */
    private createFromInjectedTypeMeta(meta: InjectedTypeMeta, delegate: N4Injector, cachedInstances: Map<string, N4Object>): N4Object{
        if(!meta.type){
            throw new DIConfigurationError("DI meta information corrupted, no type available.");
        }
        if(meta.type.n4type.fqn === N4Provider.n4type.fqn){
            if(!meta.typeVar){
                throw new DIConfigurationError('Cannot create provider ' + meta.type + " typelet is " + meta.typeVar);
            }
            return this.createAnonymousProvider(meta.typeVar) as N4Object;
        }
        return this.internalCreate(meta.type, delegate, cachedInstances);
    }

    /**
     * Creates fully injected instance of given type. Calls constructor (with injected params if needed),
     * and assigns injected fields.
     * For any injected dependency delegates provided delegate injector.
     * If type is scoped it will either return instance from injectors scoped instances cache, or it will
     * create new instance, store it in cache, and return that instance.
     */
    private <T extends N4Object> createNewInjected(ctor: type{T} , delegate: N4Injector, cachedInstances: Map<string, N4Object>): T {
        let ofqn = getOFQN(ctor);
        if(cachedInstances.has(ofqn)){
            return cachedInstances.get(ofqn) as T;
        }

        if(this.scopedInstances.has(ofqn)){
            return this.scopedInstances.get(ofqn) as T;
        }

        let ctorParams: any[] = this.getInjectorParams(ctor as constructor{N4Object})
            .map(fp => delegate.createFromInjectedTypeMeta(fp, delegate, new Map<string, N4Object>(cachedInstances)));
        let instance = this.createNew(ctor as constructor{T}, ctorParams);
        cachedInstances.set(ofqn, instance);

        //inject fields
        delegate.injectDataFields(instance, ctor, new Set<string>(), delegate, cachedInstances);

        if(this.declaredSingleton(ctor)){
            this.scopedInstances.set(ofqn, instance);
        }
        return instance;
    }

    /**
     * Collect parameters for the (injected) constructor.
     * If no parameters found returns empty array.
     * Will traverse to super types to check for inherited constructor
     * (if owned ctor not there).
     */
    private getInjectorParams(type: type{? extends N4Object}): InjectedTypeMeta[] {
        if(hasDIMeta(type)){
            let meta = getOwnInjectedClassMeta(type);
            //owned injected constructor
            if(meta && meta.injectCtorParams){
                //assumption here is compiler generates this property
                //only for owned injected constructor, even if
                //it has no params in which case it is empty array
                return meta.injectCtorParams;
            }
            //search through parents
            const superType = getSuperType(type);
            if(superType) {
                return this.getInjectorParams(superType);
            }
        }
        return [];
    }

    /**
     * Call to inject fields on the instance.
     * Always injects only owned members from the processed type.
     * Recursively calls itself on the with the super type as type.
     * Stores names of already injected fields, to avoid overwriting already
     * injected overridden fields.
     */
    private injectDataFields(instance: N4Object,type: type{N4Object}, usedNames: Set<string>, delegate: N4Injector, cachedInstances: Map<string, N4Object>): void{
        if(hasDIMeta(type)){
            let meta = getOwnInjectedClassMeta(type);
            if (meta && meta.fieldsInjectedTypes) {
                meta.fieldsInjectedTypes.forEach(f => {
                    if(!usedNames.has(f.name)){
                        usedNames.add(f.name);
                        //cahedNames is copied per injection point, otherwise every type
                        //effectively becomes singleton during injection phase.
                        //we want to make them singleton like only per injection chain
                        //to break cyclic dependency
                        let instanceObj: Object = instance;
                        instanceObj[f.name] = delegate.createFromInjectedTypeMeta(f, delegate, new Map<string, N4Object>(cachedInstances));
                    }
                });
            }
            const superType = getSuperType(type);
            if(superType) {
                delegate.injectDataFields(instance, superType, usedNames, delegate, cachedInstances)
            }
        }
    }

    /**
     * Creates instance of a type, by delegating to a proper provide method from a given binder.
     * For any injected parameters of the provider method delegates to itself via  {@link N4Injector.create}.
     */
    private createProvided(binder: N4Object, info: ProvideMethodInfo, delegate: N4Injector, cachedInstances: Map<string, N4Object>): N4Object{
        let params: N4Object[] = info.args.map(e => this.createFromInjectedTypeMeta(e, delegate, cachedInstances));
        let binderObj: Object = binder;
        return (binderObj[info.name] as Function).apply(binder, params) as N4Object;
    }

    /**
     * For a given DI meta info about injected type T creates instance of the N4Provider<T>.
     * In case of nested providers, calls itself recursively. For creation of the T delegates to
     * {@link N4Injector.create}.
     *
     * Note this is only for N4Provider<T>, any custom subtype must be handled like other bindings.
     */
    private createAnonymousProvider (meta: InjectedTypeMeta): N4Provider<?> {
        let injector = this;
        let f;
        if(!meta.typeVar){
            //not nested provider, create T
            f = function(){
                //since obtaining instance from provider is not done during injection phase
                //we are not using cache of that phase.
                //instead we create new cache when triggered N4Provider.get() is called.
                return injector.internalCreate(meta.type, injector, new Map<string, N4Object>());
            }
        }else{
            //create nested provider
            f = (function(){
                let p = injector.createAnonymousProvider(meta.typeVar);
                return function(){
                    return p;
                }
            })();
        }

        return new _$<N4Object>(f as {function():N4Object});
    }

    /**
     * Registers information about bindings in internal binding map.
     * Note that only information about which binder has binding for given type is stored,
     * not binding information itself.
     */
    private static prepareBindingsMap(providedBinders: N4Object[], expectedBindersTypes: constructor{? extends N4Object}[] =): Map<string, N4Object>{
        let bindings: N4Object[] = [];
        if(expectedBindersTypes){
            let expectedBindersMap = new Map<string, constructor{? extends N4Object}>();
            expectedBindersTypes.forEach(eb=> expectedBindersMap.set(getOFQN(eb),eb));
            providedBinders.forEach(bi=>{
                if(bi){//binder instance is  not null not undefined
                    let biType = bi.constructor;
                    if(!expectedBindersMap.has(getOFQN(biType))){
                        throw new DIConfigurationError("provided Binder instance is not of any expected type");
                    }
                    bindings.push(bi)
                    expectedBindersMap.delete(getOFQN(bi.constructor));
                }
            });
            expectedBindersMap.forEach(bt=>{
                let _b = Reflect.construct(bt, []) as N4Object;
                bindings.push(_b);
            });
        }
        let bindingsMap = new Map<string, N4Object>();
        bindings.forEach(binder=>{
            let binderType = binder.constructor;
        if(hasDIMeta(binderType)){
            let meta = getBinderMeta(binderType);
            meta.bindings.forEach(b=> bindingsMap.set(getOFQN(b.from), binder));
            meta.methodBindings.forEach(b=> bindingsMap.set(getOFQN(b.to), binder));
        }});
        return bindingsMap;
    }

    /**
     * Helper function that inspects provided DICompoment via reflection
     * to get information about expected parent, that is one declared in the
     * DIC annotation.
     */
    private static expectedParent(ctorDIC: constructor{? extends N4Object}): string?{
        let parent = getDIComponentMeta(ctorDIC).parent
        if(!parent){
            return void(0);
        }
        return getOFQN(parent);
    }

    private static checkParent(dic: constructor{? extends N4Object}, parent: N4Injector=): void{
        let expectedParent =getDIComponentMeta(dic).parent;
        if(parent){
            if(!expectedParent){
                throw new DIConfigurationError('Injector of ' + getOFQN(dic) + ' expects no parent, but was given ' + parent.dicInfo + '.');

            }
            if(!parent.isCompatibleWith(expectedParent)){
                throw new DIConfigurationError('Injector of ' + getOFQN(dic) + ' expects parent compatible with ' + expectedParent + ', but was given incompatible ' + parent.dicInfo + '.');
            }
        }else{
            if(expectedParent){
                throw new DIConfigurationError('Injector of ' + getOFQN(dic) + ' parent compatible with ' + expectedParent + ', but no injector was passed.');
            }
        }

    }

    private static getMetaData(type: constructor{? extends N4Object}): DIComponentMeta{
        if(!type){
            throw new DIConfigurationError("cannot create N4Injector without DIComponent type");
        }
        if(!hasDIMeta(type)){
            throw new DIConfigurationError("provided DIComponent did not had proper di meta information");
        }
        return getDIComponentMeta(type);
    }

    /**
     * Factory method for the N4Injector.
     */
    public static of(type: constructor{? extends N4Object}, parent: N4Injector=, ... providedBinders: N4Object): N4Injector{
        let dicMeta = N4Injector.getMetaData(type);
        N4Injector.checkParent(type, parent);
        let bindings = N4Injector.prepareBindingsMap(providedBinders, dicMeta.binders);
        return new N4Injector(getOFQN(type), bindings, parent);
    }

    /**
     * @returns true if this injector was created for a given DIComponent
     */
    public isInjectorOf(dic: constructor{? extends N4Object}){
        return  this.dicInfo === getOFQN(dic);
    }

    /**
     * @returns true if this injector or any of its parents was created for a given DIComponent
     */
    public isCompatibleWith(dic: constructor{? extends N4Object}){
        return this.isInjectorOf(dic) || N4Injector.isParentCompatible(this, dic);
    }

    /**
     * Checks if provided injector or any of its parents was created for a given DIComponent
     */
    private static isParentCompatible(injector: N4Injector, dic: constructor{? extends N4Object}){
        if(injector.parent){
            let inj = injector.parent;
            return inj.isInjectorOf(dic) || N4Injector.isParentCompatible(inj, dic);
        }
        return false;
    }

     /**
     * @returns true if this injector can be used as parent for a given DIComponent
     */
    public canBeParentOf(dic: constructor{? extends N4Object}){
        if(!hasDIMeta(dic)){
            return false;
        }
        let expectedParent = getDIComponentMeta(dic).parent;
        return expectedParent ? this.isCompatibleWith(expectedParent): false;
    }
}


function getSuperType(type: type{? extends N4Object}): type{? extends N4Object} {
    const superType = Object.getPrototypeOf(type);
    if (superType === null
            || superType === Function || superType === Object || superType === Error
            || superType === Function.prototype || superType === Object.prototype) {
        return undefined;
    }
    return superType as constructor{? extends N4Object};
}
