/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import NodeTestOptions from "org/eclipse/n4js/mangelhaft/runner/node/NodeTestOptions";
import * as lib_nomnom+ from "nomnom-patched";
import * as lib_path from "path";

const cwd = process.cwd();
const resolvePath = (p: string): string => lib_path.resolve(cwd, p);

const nomnomOptions: Object = {
    testCatalog: {
        position: 0,
        list: false,
        default: ".",
        metavar: "URL|PATH|NPM-relpath",
        help: "Test catalog (JSON) or project location to be inspected for test cases."
    },
    filter: {
        abbr: "f",
        list: true,
        help: "Filter for matching test cases."
    },
    xunitReportFile: {
        metavar: "PATH",
        transform: resolvePath,
        help: "jUnit/xUnit report output file."
    },
    xunitReportName: {
        default: "N4JS Mangelhaft test",
        help: "jUnit/xUnit report name."
    },
    xunitReportPackage: {
        help: "jUnit/xUnit report package name. Default is the project name."
    },
    inspectBrk: {
        type: "number",
        full: "inspect-brk",
        metavar: "PORT",
        help: "Attach V8 Inspector with --inspect-brk."
    },
    testScope: {
        type: "string",
        abbr: "s",
        help: "Scope in which to run these tests. (Used to scope test behaviors. Currently just Fixme annotations.)"
    },
    quiet: {
        flag: true,
        abbr: "q",
        help: "Turn off mangelhaft console reporting."
    }
};

const nomnomHelp = `Runs N4JS mangelhaft testing.

By default n4js-mangelhaft will retrieve the test catalog from a running IDE and just runs the tests.
On CI systems, you may want to compile and run the tests in one go:

$ n4js-mangelhaft --compile ./project --xunitReportFile ./jenkins/reports.xml

In case of a failure the tool uses exit code 1 for compilation problems, and exit code 8 for failed tests.
`;

export public class NodeTestCLI {
    public static toCommandLine(options: NodeTestOptions): string[] {
        const optionsObj: Object = options;
        const res: string[] = [];

        Object.keys(optionsObj).forEach(k => {
            const info: Object+ = nomnomOptions[k] as Object;
            let v = optionsObj[k];

            if (info && typeof v !== "undefined") {
                k = "--" + k;
                if (Array.isArray(v)) {
                    const positionedArg = typeof info.position !== "undefined";
                    (v as string[]).forEach(vv => positionedArg ? res.push(vv) : res.push(k, vv));
                } else {
                    if (typeof v !== "boolean") {
                        res.push(k, v as string);
                    } else if (v) {
                        res.push(k);
                    }
                }
            }
        });

        return res;
    }

    public static parseCommandLine(): NodeTestOptions {
        return lib_nomnom.script("n4js-mangelhaft")
                         .help(nomnomHelp)
                         .options(nomnomOptions)
                         .parse() as NodeTestOptions;
    }
}
