/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import debug from "debug";
import {NodeTestCLI} from "org/eclipse/n4js/mangelhaft/runner/node/NodeTestCLI";
import NodeTestOptions from "org/eclipse/n4js/mangelhaft/runner/node/NodeTestOptions";
import {fsSafeAccessSync} from "org/eclipse/n4js/mangelhaft/util/fs";
import {readJsonFile} from "org/eclipse/n4js/mangelhaft/util/fs";
import {PACKAGE_JSON} from "org/eclipse/n4js/mangelhaft/util/npm";
import {isHTTP_re} from "org/eclipse/n4js/mangelhaft/util/npm";
import * as child_process from "child_process";
import * as lib_path from "path";

const log = debug("n4js-mangelhaft:api");
const rlog = debug("n4js-mangelhaft:test-run");

function readPackageJson(prjPath: string): Object+ {
    const packageJsonPath = lib_path.join(prjPath, PACKAGE_JSON);
    return fsSafeAccessSync(packageJsonPath) ? readJsonFile(packageJsonPath) : null;
}

export default public class NodeTestAPI {
    /**
     * Executes a test run (might include compilation) with the given set of test options.
     */
    public static async exec(options: NodeTestOptions): void {
        log("options: %O", options);

        if (!isHTTP_re.test(options.testCatalog)) {
            // try to resolve file:
            const file = lib_path.resolve(process.cwd(), options.testCatalog);
            if (fsSafeAccessSync(file)) {
                options.testCatalog = file;
            } else { // try to resolve via NPM
                try {
                    options.testCatalog = require.resolve(options.testCatalog);
                } catch (exc) {
                    throw new Error(`Cannot resolve test catalog: ${options.testCatalog}`);
                }
            }
        }

        log("testing with test catalog:", options.testCatalog);

        await new Promise<any, any>((resolve, reject) => {
            rlog("execPath:", process.execPath);
            const modulePath = lib_path.join(__dirname, "NodeTestRunner.js");
            rlog("modulePath:", modulePath);

            const execArgv = process.execArgv.slice();
            const execArgvOptions = execArgv.join(" ");
            const nodeOptions = process.env.NODE_OPTIONS || "";
            const checkOption = (str: string, opt: string): boolean => str.endsWith(opt) || str.indexOf(`${opt} `) >= 0;
            const hasOption = (opt: string): boolean => checkOption(execArgvOptions, opt) || checkOption(nodeOptions, opt);
            
            if (!["-r esm", "--require=esm", "--experimental-modules"].some(hasOption)) {
                const esm = require.resolve("esm"); // use "own" esm version
                execArgv.push("-r", esm);
            }
            if (options.inspectBrk) {
                execArgv.push(`--inspect-brk=${options.inspectBrk}`);
            }
            rlog("execArgv:", execArgv);
            const args = NodeTestCLI.toCommandLine(options); // fodder in same args
            rlog("args:", args);

            //rlog("env:", process.env);

            child_process.fork(modulePath, args, {
                stdio: "inherit",
                execArgv: execArgv,
                env: process.env
            }).on("close", code => {
                rlog("exit code:", code);
                if (code === 0) {
                    resolve(code);
                } else {
                    reject(code);
                }
            });
        });
    }
}
