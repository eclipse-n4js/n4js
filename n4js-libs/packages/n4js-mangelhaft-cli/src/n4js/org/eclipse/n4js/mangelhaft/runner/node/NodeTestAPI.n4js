/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import NodeTestCLI from "org/eclipse/n4js/mangelhaft/runner/node/NodeTestCLI";
import NodeTestOptions from "org/eclipse/n4js/mangelhaft/runner/node/NodeTestOptions";
import {TestInfo} from "org/eclipse/n4js/mangelhaft/types/TestInfo";
import * as child_process from "child_process";
import * as lib_fs from "fs";
import * as glob+ from "glob";
import * as n4js_cli from "n4js-cli";
import * as os from "os";
import * as lib_path from "path";

const isHTTP_re = /^https?:\/\//i;
const n4jsFileExt_re = /\.n4js[xd]?$/;

export public const PACKAGE_JSON = "package.json";

/**
 * TODO define as part of n4js-runtime-node
 */
export public const FsConstants = {
    F_OK: 0,
    R_OK: 4,
    W_OK: 2,
    X_OK: 1
};

/**
 * Safe check in access of a path.
 */
export public function fsSafeAccessSync(path: string, mode = FsConstants.R_OK): boolean {
    try {
        lib_fs.accessSync(path, mode);
        return true;
    } catch (exc) {
        return false;
    }
}

export public async function createTempDir(): string {
    const prefix = lib_path.join(os.tmpdir(), "n4js-mangelhaft-");
    return await lib_fs.mkdtemp(prefix);
}

export default public class NodeTestAPI {
    /**
     * Executes a test run (might include compilation) with the given set of test options.
     */
    public static async exec(options: NodeTestOptions): void {
        const pathToPackageJson = new Map<string, Object+>();

        function addProject(dir: string): void {
            const content = String(lib_fs.readFileSync(lib_path.join(dir, PACKAGE_JSON), { encoding: "UTF-8" }));
            const packageJson = JSON.parse(content) as Object;
            pathToPackageJson.set(dir, packageJson);
        }

        for (const dir of (options.projects || [])) {
            addProject(dir);
        }

        for (const dir of (options.scan || [])) {
            for (const p of await lib_fs.readdir(dir)) {
                const prj = lib_path.join(dir, p);

                if (fsSafeAccessSync(lib_path.join(prj, PACKAGE_JSON))) {
                    addProject(prj);
                }
            }
        }

        const projectDirs = Array.from(pathToPackageJson.keys());

        if (options.debug) {
            console.log("projects:", projectDirs);
        }

        if (options.compile) { // call n4jsc
            const n4jscTempDir = await createTempDir();

            if (isHTTP_re.test(options.testCatalog)) { // use temp file
                options.testCatalog = lib_path.join(n4jscTempDir, "test-catalog.json");
            } else {
                options.testCatalog = lib_path.resolve(process.cwd(), options.testCatalog);
            }

            await n4js_cli.n4jsc({
                buildType: "projects",
                testCatalogFile: options.testCatalog,
                nodejsLocation: process.execArgv[0],
                npmrcRootLocation: options.npmrcRootLocation,
                installMissingDependencies: options.installMissingDependencies,
                clean: options.cleanCompile,
                keepCompiling: options.keepCompiling,
                verbose: options.debug,
                debug: options.debug
            }, projectDirs);

            if (options.debug) {
                console.log("generated test catalog:", options.testCatalog);
            }

            const testCatalog = options.emitProjectTestCatalogs ? JSON.parse(String(lib_fs.readFileSync(options.testCatalog, { encoding: "UTF-8" }))) as Array<TestInfo> : null;

            for (const [dir, packageJson] of pathToPackageJson) {
                if (options.generatedModulesGlob) {
                    // walk all generated code modules:
                    const bundleGen = [];
                    const files = /*await dbo TODO */ glob.sync(options.generatedModulesGlob, { cwd: dir }) as Array<string>;
                    for (const path of files) {
                        const rpath = path
                            .replace(n4jsFileExt_re, ".js")
                            .split(lib_path.sep);
                        bundleGen.push(`import * as ${rpath.join("_")} from "./${rpath.join("/")}";\n`);
                    }
                    if (bundleGen.length) {
                        const file = lib_path.join(dir, "__bundle-gen.js");
                        if (options.debug) {
                            console.log("writing:", file);
                        }
                        lib_fs.writeFileSync(file, `/** Generated */\n${bundleGen.join("")}`, { encoding: "UTF-8" });
                    }
                }

                if (testCatalog && options.emitProjectTestCatalogs) {
                    const tests = testCatalog.filter(test => test.origin === packageJson["name"] as string);
                    if (tests.length) {
                        const file = lib_path.join(dir, options.emitProjectTestCatalogs);
                        if (options.debug) {
                            console.log("writing:", file);
                        }
                        lib_fs.writeFileSync(file, JSON.stringify(tests, null, 2), { encoding: "UTF-8" });
                    }
                }

                // HACK until we have proper support for top-level import():
                const transpiledFiles = glob.sync("**/*.js", {
                    cwd: lib_path.join(dir, (packageJson.n4js as Object)["output"] as string),
                    absolute: true
                }) as Array<string>;
                for (const file of transpiledFiles) {
                    const content = lib_fs.readFileSync(file, { encoding: "UTF-8" });
                    let newContent = content.replace(/_n4jsImport(?!\(\?)/mg, "import");
                    newContent = newContent.replace(/_nodeRequire(?!\(\?)/mg, "require");
                    if (newContent !== content) {
                        if (options.debug) {
                            console.log("patching:", file);
                        }
                        lib_fs.writeFileSync(file, newContent, { encoding: "UTF-8" });
                    }
                }
            }
        }

        if (!isHTTP_re.test(options.testCatalog)) {
            // try to resolve file:
            const file = lib_path.resolve(process.cwd(), options.testCatalog);
            if (fsSafeAccessSync(file)) {
                options.testCatalog = file;
            } else { // try to resolve via NPM
                try {
                    options.testCatalog = require.resolve(options.testCatalog);
                } catch (exc) {
                    throw new Error(`Cannot resolve test catalog: ${options.testCatalog}`);
                }
            }
        }

        if (options.debug) {
            console.log("testing with test catalog:", options.testCatalog);
        }

        // fork test runner process, set parent of all projects on NODE_PATH:
        let nodePath: Array<string> = [];
        for (const dir of projectDirs) {
            nodePath.push(lib_path.dirname(dir));
        }
        
        nodePath = Array.from(new Set<string>(nodePath)); // uniq

        if (process.env.NODE_PATH) { // append existing
            nodePath.push(process.env.NODE_PATH as string);
        }

        const env: Object+ = Object.assign({}, process.env, {
            NODE_PATH: nodePath.join(lib_path.delimiter)
        });

        const n4type = this.n4type;
        // build NodeTestRunner module path to give for n4js command line (per main, i.e. "<module>:<export>" notation),
        // leaving off export will pick default export:
        const consoleTestRunner = n4type.fqn.split(".");
        consoleTestRunner.pop();
        consoleTestRunner.pop();
        consoleTestRunner.unshift("src-gen");
        consoleTestRunner.unshift(n4type.origin);
        consoleTestRunner.push("NodeTestRunner:");

        const args = NodeTestCLI.toCommandLine(options);
        args.unshift(consoleTestRunner.join("/"));

        env.N4JS_RT_keep_eventloop = "1";

        (options.define || []).forEach(kv => {
            const [k, v] = kv.split("=");
            env[`N4JS_RT_${k.replace(/-/g, "_")}`] = (v || "");
        });
        if (options.debug) {
            env.N4JS_RT_debug = "1";
        }
        if (options.noDebugLog) {
            // giving the command line option noLog overrides the DEBUG environment value to disable all logging (if the logger is configured.)
            env.DEBUG = "-*";
        }

        await new Promise<any, any>((resolve, reject) => {
            const execArgv = process.execArgv.slice();
            if (options.inspectBrk) {
                execArgv.push(`--inspect-brk=${options.inspectBrk}`);
            }

            const n4jsRun = require.resolve("n4js-node/src-gen/n4js-cli");

            if (options.debug) {
                console.log("TestRun fork:", n4jsRun);
                console.log("args:", args);
                console.log("execArgv:", execArgv);
                console.log("env:", env);
            }

            child_process.fork(n4jsRun, args, {
                stdio: "inherit",
                execArgv: execArgv,
                env: env
            }).on("close", code => {
                if (options.debug) {
                    console.log(`TestRun exit code: ${code}`);
                }
                if (code === 0) {
                    resolve(code);
                } else {
                    reject(code);
                }
            });
        });
    }
}
