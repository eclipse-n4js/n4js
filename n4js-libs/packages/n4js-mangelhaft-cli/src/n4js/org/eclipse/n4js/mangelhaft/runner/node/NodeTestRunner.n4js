/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import * as lib_fs from "fs";
import {Module} from "module";
import * as lib_glob from "glob";
import * as lib_path from "path";
import * as lib_url from "url";
import cli_color_+ from "cli-color";
import * as lib_coverage+ from "istanbul-lib-coverage";
import {NodeTestCLI} from "org/eclipse/n4js/mangelhaft/runner/node/NodeTestCLI";
import {N4Injector} from "n4js/lang/N4Injector";
import {FIXME1} from "org/eclipse/n4js/mangelhaft/Test";
import {FIXME2} from "org/eclipse/n4js/mangelhaft/Test";
import {IFIXME} from "org/eclipse/n4js/mangelhaft/Test";
import {IFIXME2} from "org/eclipse/n4js/mangelhaft/Test";
import {TestController} from "org/eclipse/n4js/mangelhaft/TestController";
import {ITestReporter} from "org/eclipse/n4js/mangelhaft/types/ITestReporter";
import {ResultGroups} from "org/eclipse/n4js/mangelhaft/types/ResultGroups";
import {TestCatalogInfo} from "org/eclipse/n4js/mangelhaft/types/TestCatalogInfo";
import {TestDIComponent} from "org/eclipse/n4js/mangelhaft/types/TestDIComponent";
import {TestInfo} from "org/eclipse/n4js/mangelhaft/types/TestInfo";
import {mkdirp} from "org/eclipse/n4js/mangelhaft/util/fs";
import {readJsonFile} from "org/eclipse/n4js/mangelhaft/util/fs";
import {waitAndExitProcess} from "org/eclipse/n4js/mangelhaft/util/proc";
import {ConsoleReporter} from "org/eclipse/n4js/mangelhaft/reporter/console/ConsoleReporter";
import {SonarReporter} from "org/eclipse/n4js/mangelhaft/reporter/sonar/SonarReporter";
import {XUnitReporter} from "org/eclipse/n4js/mangelhaft/reporter/xunit/XUnitReporter";


const DEFAULT_TEST_CATALOG_NAME = "test-catalog.json";
const GLOB_PREFIX = "glob:";

export public class NodeTestRunner  {

    @Inject
    controller: TestController;
    @Inject
    consoleReporter: ConsoleReporter;
    @Inject
    xunitReporter: XUnitReporter;
    @Inject
    sonarReporter: SonarReporter;

    @Final public async run(): void {
        const options = NodeTestCLI.parseCommandLine();
        if (!options) {
            return;
        }
 
        const log = options.quiet ? function(...p) {} : console.log.bind(console);
        let testCatalogs: TestCatalogInfo[] = [];

        for (let testCatalogArg of options.testCatalogs) {
            const newTestCatalogs = await findTestCatalogs(testCatalogArg, log);
            if (options.filter && options.filter.length) {
                for (let testCatalog of newTestCatalogs) {
                    filterTestCatalog(testCatalog, options.filter);
                }
            }
            testCatalogs = testCatalogs.concat(newTestCatalogs);
        }

        
        this.consoleReporter.cliColor = cli_color_;
        this.consoleReporter.setLogger(log);

        const reporters: ITestReporter[] = [this.consoleReporter];
        const allResultGroups : ResultGroups[] = [];
        let updateXUnitReportPackage = false;

        if (options.xunitReportFile) {
            if (!options.xunitReportPackage) {
                updateXUnitReportPackage = true;
            }
            this.xunitReporter.spec = options;
            reporters.push(this.xunitReporter);
        }
        if (options.sonarTestExecutionReportFile) {
            this.sonarReporter.outputFile = options.sonarTestExecutionReportFile;
            this.sonarReporter.baseDir = options.sonarTestExecutionReportBaseDir;
            this.sonarReporter.disableSourceMap = options.sonarDisableSourceMap;
            reporters.push(this.sonarReporter);
        }

        this.controller.reporters = reporters;
        const cliColor = this.consoleReporter.cliColor;
        const success = cliColor.green.bind(cliColor);
        const fail = cliColor.red.bind(cliColor);
        const skipped = cliColor.cyan.bind(cliColor);


        for (let testCatalog of testCatalogs) {
            if (updateXUnitReportPackage) {
                options.xunitReportPackage = lib_path.dirname(testCatalog.location);
            }

            const resGroups = await this.controller.runGroups(testCatalog, 420187, options.testScope);
            allResultGroups.push(resGroups);

            if (testCatalogs.length > 1) {
                log(`\nTested ${testCatalog.location}\nTesting results: ${success("SUCCESSES")}: ${resGroups.successes}, ${fail("FAILURES")}: ${resGroups.failures}, ${fail("ERRORS")}: ${resGroups.errors}, ${skipped("SKIPPED")}: ${resGroups.skipped}`);
            }
        }

        const concatResultGroups = ResultGroups.concatArray(allResultGroups);
        log(`\nTesting completed: ${success("SUCCESSES")}: ${concatResultGroups.successes}, ${fail("FAILURES")}: ${concatResultGroups.failures}, ${fail("ERRORS")}: ${concatResultGroups.errors}, ${skipped("SKIPPED")}: ${concatResultGroups.skipped}`);

        const failed = (concatResultGroups.failures !== 0) || (concatResultGroups.errors !== 0);
        if (failed) {
            log(`${fail("Test run failed.")} To rerun just the failing tests use the command: \n n4js-mangelhaft ${this.consoleReporter.unsuccessfulTests.map(test => `\\\n    -f ${test}`).join(" ")}`);
        }

        const nycCoveragePath = options.nycCoveragePath;
        const coverage = globalThis.__coverage__;
        if (nycCoveragePath && coverage) {
            const coverageMap = lib_coverage.createCoverageMap(coverage);
            mkdirp(lib_path.dirname(nycCoveragePath));
            log("Writing %s", nycCoveragePath);
            lib_fs.writeFileSync(nycCoveragePath, JSON.stringify(coverageMap, null, 2), { BufferEncoding encoding: "utf-8" });

            const coverageSummary = lib_coverage.createCoverageSummary();
            for (const file of coverageMap.files()) {
                const fc = coverageMap.fileCoverageFor(file);
                coverageSummary.merge(fc.toSummary());
            }
            console.log("Coverage Summary:", coverageSummary);
        }

        // Don't wait for async promises to finish.
        // In case of exceptions, the process is already exiting with code 1.
        if (failed) { // use different error code
            throw 8;
        }
    }
}

async function findTestCatalogs(testCatalogArg: string, log: {function(...any):void}) : TestCatalogInfo[] {
    if (testCatalogArg.startsWith(GLOB_PREFIX)) {
        const testCatalogLocations = resolveGlob(process.cwd(), testCatalogArg.substring(GLOB_PREFIX.length));
        const testCatalogs : TestCatalogInfo[] = [];
        for (const testCatalogLocation of testCatalogLocations) {
            let testCatalog = resolveTestCatalog(testCatalogLocation, log);
            if (testCatalog) {
                testCatalogs.push(testCatalog);
            }
        }
        return testCatalogs;
    } else {
        const file1 = lib_path.resolve(process.cwd(), testCatalogArg);
        let testCatalog = resolveTestCatalog(file1, log);
        if (!testCatalog) {
            const file2 = lib_url.fileURLToPath((await import.meta.resolve(testCatalogArg)) as string);
            testCatalog = resolveTestCatalog(file2, log);
        }
        if (testCatalog) {
            return [testCatalog];
        }
        return [];
    }
}

function resolveGlob(root: string, glob: string) : string[] {
    const testCatalogLocations : string[] = [];
    const options = { cwd: root, absolute: true, sync: true };
    const ee = new lib_glob.Glob(glob, options);
    const foundLocs = ee.found;

    for (const foundLoc of foundLocs) {
        if (lib_fs.existsSync(foundLoc)) {
            const locStat = lib_fs.statSync(foundLoc);
            if (locStat.isFile()) {
                testCatalogLocations.push(locStat);
            } else if (locStat.isDirectory()) {
                const testCatalogFile = lib_path.join(locStat, DEFAULT_TEST_CATALOG_NAME);
                testCatalogLocations.push(testCatalogFile);
            }
        }
    }
    return testCatalogLocations;
}

function resolveTestCatalog(fileLocation: string, log: {function(...any):void}) : TestCatalogInfo {
    if (lib_fs.existsSync(fileLocation)) {
        const stat = lib_fs.statSync(fileLocation);
        if (stat.isFile()) {
            return loadTestCatalog(log, fileLocation);
        } else if (stat.isDirectory()) {
            const potentialTestCatalogFile = lib_path.resolve(fileLocation, DEFAULT_TEST_CATALOG_NAME);
            if (lib_fs.existsSync(potentialTestCatalogFile) && lib_fs.statSync(potentialTestCatalogFile).isFile()) {
                return loadTestCatalog(log, potentialTestCatalogFile);
            }
        }
    }
    log("Did not find any test catalogs in: " + fileLocation);
    return null;
}

function loadTestCatalog(log: {function(any):void}, testCatalogFile: string) : TestCatalogInfo {
    log("Loading test catalog: " + testCatalogFile);
    let testCatalog : TestCatalogInfo = readJsonFile(testCatalogFile);
    testCatalog.location = lib_path.dirname(testCatalogFile);
    testCatalog.fileName = lib_path.basename(testCatalogFile);
    testCatalog.testDescriptors = testCatalog.testDescriptors || [];
    return testCatalog;
}

/** filter out tests */
function filterTestCatalog(testCatalog: TestCatalogInfo, filter: Array<string>) {
    const filters = filter.slice(0).sort();
    const descriptors: TestInfo[] = [];

    for (const info of testCatalog.testDescriptors) {
        let methods = new Set<string>();
        for (const filter of filters) {
            const [fqnFilter, methodFilter] = filter.split("#");
            if (!fqnFilter || info.fqn.indexOf(fqnFilter) >= 0) {
                if (methodFilter) { // filter methods
                    for (const method of info.testMethods) {
                        if (method.indexOf(methodFilter) >= 0) {
                            methods.add(method);
                        }
                    }
                } else {
                    methods = new Set<string>(info.testMethods); // take all
                    break;
                }
            }
        }
        if (methods.size > 0) {
            info.testMethods = Array.from(methods);
            descriptors.push(info);
        }
    }
    testCatalog.testDescriptors = descriptors;
}

@Bind(IFIXME, FIXME1)
@Bind(IFIXME2, FIXME2)
@Binder
class TestBinder {}

@GenerateInjector
@WithParentInjector(TestDIComponent)
@UseBinder(TestBinder)
class Root {
    @Inject
    runner: NodeTestRunner;
}

const parentinj = N4Injector.of(TestDIComponent);
const root = N4Injector.of(Root, parentinj).create(Root);
 
// TODO: fragile, will be removed once we have proper api/impl binding
if (process.env.N4JS_RT_strip_api_prj_suffix) {
    const objModule: Object+ = Module;
    const _resolveFilename = objModule._resolveFilename;
    const stripApiSuffix_re = /^([^/]+)[-.]api\//;
    const stripScopedApiSuffix_re = /^([^/]+)\/([^/]+)[-.]api\//;
    objModule._resolveFilename = function(request: string, parent, isMain) {
        if (request[0] === "@") {
            request = request.replace(stripScopedApiSuffix_re, "$1/$2/");
        } else {
            request = request.replace(stripApiSuffix_re, "$1/");
        }
        return _resolveFilename(request, parent, isMain);
    };
}

waitAndExitProcess(root.runner.run.bind(root.runner), true /* keep event loop */);
