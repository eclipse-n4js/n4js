/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import fetch from "deps/node-fetch";
import {Module} from "module";
import {N4Injector} from "n4js/lang/N4Injector";
import {FIXME1} from "org/eclipse/n4js/mangelhaft/Test";
import {FIXME2} from "org/eclipse/n4js/mangelhaft/Test";
import {IFIXME} from "org/eclipse/n4js/mangelhaft/Test";
import {IFIXME2} from "org/eclipse/n4js/mangelhaft/Test";
import {TestController} from "org/eclipse/n4js/mangelhaft/TestController";
import {ConsoleReporter} from "org/eclipse/n4js/mangelhaft/reporter/console/ConsoleReporter";
import {IDEReporter} from "org/eclipse/n4js/mangelhaft/reporter/ide/IDEReporter";
import {XUnitReporter} from "org/eclipse/n4js/mangelhaft/reporter/xunit/XUnitReporter";
import {NodeTestCLI} from "org/eclipse/n4js/mangelhaft/runner/node/NodeTestCLI";
import {ITestReporter} from "org/eclipse/n4js/mangelhaft/types/ITestReporter";
import {TestDIComponent} from "org/eclipse/n4js/mangelhaft/types/TestDIComponent";
import {TestInfo} from "org/eclipse/n4js/mangelhaft/types/TestInfo";
import {TestInfos} from "org/eclipse/n4js/mangelhaft/types/TestInfos";
import {readJsonFile} from "org/eclipse/n4js/mangelhaft/util/fs";
import {isHTTP_re} from "org/eclipse/n4js/mangelhaft/util/npm";
import {waitAndExitProcess} from "org/eclipse/n4js/mangelhaft/util/proc";
import * as cli_color_+ from "cli-color";
import {parse} from "url";

class NodeTestRunner  {
    @Inject
    controller: TestController;
    @Inject
    consoleReporter: ConsoleReporter;
    @Inject
    xunitReporter: XUnitReporter;
    @Inject
    ideReporter: IDEReporter;

    @Final public async run(): void {
        const options = NodeTestCLI.parseCommandLine();
        if (!options) {
            return;
        }
 
        let testCatalog: TestInfos;
 
        if (isHTTP_re.test(options.testCatalog)) { // running IDE
            const req = await fetch(options.testCatalog, {
                headers: {
                    "Content-Type": "application/vnd.n4js.assemble_test_catalog_req.tm+json"
                }
            });
            testCatalog = (await req.json()) as TestInfos;
        } else {
            testCatalog = readJsonFile(options.testCatalog) as TestInfos;
        }

        if (options.filter && options.filter.length) { // filter out tests
            const filters = options.filter.slice(0).sort();
            const descriptors: TestInfo[] = [];

            for (const info of testCatalog.testDescriptors) {
                let methods = new Set<string>();
                for (const filter of filters) {
                    const [fqnFilter, methodFilter] = filter.split("#");
                    if (!fqnFilter || info.fqn.indexOf(fqnFilter) >= 0) {
                        if (methodFilter) { // filter methods
                            for (const method of info.testMethods) {
                                if (method.indexOf(methodFilter) >= 0) {
                                    methods.add(method);
                                }
                            }
                        } else {
                            methods = new Set<string>(info.testMethods); // take all
                            break;
                        }
                    }
                }
                if (methods.size > 0) {
                    info.testMethods = Array.from(methods);
                    descriptors.push(info);
                }
            }
            testCatalog.testDescriptors = descriptors;
        }
        
        const log = options.quiet ? function(...p) {} : console.log.bind(console);
        this.consoleReporter.cliColor = cli_color_.default;
        this.consoleReporter.setLogger(log);

        const reporters: ITestReporter[] = [this.consoleReporter];

        if (options.xunitReportFile) {
            this.xunitReporter.spec = options;
            reporters.push(this.xunitReporter);
        }

        const ideReportEndpoint = testCatalog.endpoint;
        if (ideReportEndpoint) {
            if (!isHTTP_re.test(ideReportEndpoint)) {
                throw new Error(`no report URL: ${ideReportEndpoint}`);
            }
            // make sure IDE reporting hostname matches the one used when fetching the catalog:
            if (!isHTTP_re.test(options.testCatalog) || parse(options.testCatalog).hostname === parse(ideReportEndpoint).hostname) {
                this.ideReporter.endpoint = ideReportEndpoint;
                reporters.push(this.ideReporter);
            }
        }

        this.controller.reporters = reporters;

        const resGroups = await this.controller.runGroups(testCatalog, 420187, options.testScope);
        const cliColor = this.consoleReporter.cliColor;
        const success = cliColor.green.bind(cliColor);
        const fail = cliColor.red.bind(cliColor);
        const skipped = cliColor.cyan.bind(cliColor);
        log(`\nTesting completed: ${success("SUCCESSES")}: ${resGroups.successes}, ${fail("FAILURES")}: ${resGroups.failures}, ${fail("ERRORS")}: ${resGroups.errors}, ${skipped("SKIPPED")}: ${resGroups.skipped}`);

        const failed = (resGroups.failures !== 0) || (resGroups.errors !== 0);
        if (failed) {
            log(`${fail("Test run failed.")} To rerun just the failing tests use the command: \n n4js-mangelhaft ${this.consoleReporter.unsuccessfulTests.map(test => `\\\n    -f ${test}`).join(" ")}`);
        }

        // Don't wait for async promises to finish.
        // In case of exceptions, the process is already exiting with code 1.
        if (failed) { // use different error code
            throw 8;
        }
    }
}

@Bind(IFIXME, FIXME1)
@Bind(IFIXME2, FIXME2)
@Binder
class TestBinder {}

@GenerateInjector
@WithParentInjector(TestDIComponent)
@UseBinder(TestBinder)
class Root {
    @Inject
    runner: NodeTestRunner;
}

const parentinj = N4Injector.of(TestDIComponent);
const root = N4Injector.of(Root, parentinj).create(Root);
 
// TODO: fragile, will be removed once we have proper api/impl binding
if (process.env.N4JS_RT_strip_api_prj_suffix) {
    const objModule: Object+ = Module;
    const _resolveFilename = objModule._resolveFilename;
    const stripApiSuffix_re = /^([^/]+)\.api\//;
    objModule._resolveFilename = function(request: string, parent, isMain) {
        request = request.replace(stripApiSuffix_re, "$1/");
        return _resolveFilename(request, parent, isMain);
    };
}

waitAndExitProcess(root.runner.run.bind(root.runner), true /* keep event loop */);
