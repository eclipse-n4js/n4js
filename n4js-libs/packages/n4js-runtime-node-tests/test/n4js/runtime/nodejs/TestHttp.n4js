/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {AbstractVerifyRuntimeSupport} from "AbstractVerifyRuntimeSupport";
import {Server, ServerResponse, ClientRequest, IncomingMessage, Agent} from "http";

export public class TestHttp extends AbstractVerifyRuntimeSupport {

    @Test
    public __Server___001_listen(): void {
        let _testSubject = this.getTestSubject(Server, 'Server');
        this.verifyMethod(_testSubject,'listen',false, null);
    }

    @Test
    public __Server___002_close(): void {
        let _testSubject = this.getTestSubject(Server, 'Server');
        this.verifyMethod(_testSubject,'close',false, null);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Server___003_port(): void {
        let _testSubject = this.getTestSubject(Server, 'Server');
        this.verifyProperty(_testSubject,'port', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Server___004_maxHeadersCount(): void {
        let _testSubject = this.getTestSubject(Server, 'Server');
        this.verifyProperty(_testSubject,'maxHeadersCount', false);
    }

    @Test
    public __ServerResponse___001_write(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'write',false, null);
    }

    @Test
    public __ServerResponse___002_writeContinue(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'writeContinue',false, null);
    }

    @Test
    public __ServerResponse___003_writeHead(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'writeHead',false, null);
    }

    @Test
    public __ServerResponse___004_setHeader(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'setHeader',false, null);
    }

    @Test
    public __ServerResponse___005_getHeader(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'getHeader',false, null);
    }

    @Test
    public __ServerResponse___006_removeHeader(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'removeHeader',false, null);
    }

    @Test
    public __ServerResponse___007_addTrailers(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'addTrailers',false, null);
    }

    @Test
    public __ServerResponse___008_end(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyMethod(_testSubject,'end',false, null);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __ServerResponse___009_port(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyProperty(_testSubject,'port', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __ServerResponse___010_maxHeadersCount(): void {
        let _testSubject = this.getTestSubject(ServerResponse, 'ServerResponse');
        this.verifyProperty(_testSubject,'maxHeadersCount', false);
    }

    @Test
    public __ClientRequest___001_write(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'write',false, null);
    }

    @Test
    public __ClientRequest___002_addListener(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'addListener',false, null);
    }

    @Test
    public __ClientRequest___003_on(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'on',false, null);
    }

    @Test
    public __ClientRequest___004_once(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'once',false, null);
    }

    @Test
    public __ClientRequest___005_removeListener(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'removeListener',false, null);
    }

    @Test
    public __ClientRequest___006_removeAllListeners(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'removeAllListeners',false, null);
    }

    @Test
    public __ClientRequest___007_setMaxListeners(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'setMaxListeners',false, null);
    }

    @Test
    public __ClientRequest___008_listeners(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'listeners',false, null);
    }

    @Test
    public __ClientRequest___009_emit(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'emit',false, null);
    }

    @Test
    public __ClientRequest___010_end(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyMethod(_testSubject,'end',false, null);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __ClientRequest___011_port(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyProperty(_testSubject,'port', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __ClientRequest___012_maxHeadersCount(): void {
        let _testSubject = this.getTestSubject(ClientRequest, 'ClientRequest');
        this.verifyProperty(_testSubject,'maxHeadersCount', false);
    }

    @Test
    public __IncomingMessage___001_setTimeout(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'setTimeout',false, null);
    }

    @Test
    public __IncomingMessage___002_addListener(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'addListener',false, null);
    }

    @Test
    public __IncomingMessage___003_on(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'on',false, null);
    }

    @Test
    public __IncomingMessage___004_once(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'once',false, null);
    }

    @Test
    public __IncomingMessage___005_removeListener(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'removeListener',false, null);
    }

    @Test
    public __IncomingMessage___006_removeAllListeners(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'removeAllListeners',false, null);
    }

    @Test
    public __IncomingMessage___007_setMaxListeners(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'setMaxListeners',false, null);
    }

    @Test
    public __IncomingMessage___008_listeners(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'listeners',false, null);
    }

    @Test
    public __IncomingMessage___009_emit(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'emit',false, null);
    }

    @Test
    public __IncomingMessage___010_read(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'read',false, null);
    }

    @Test
    public __IncomingMessage___011_setEncoding(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'setEncoding',false, null);
    }

    @Test
    public __IncomingMessage___012_pause(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'pause',false, null);
    }

    @Test
    public __IncomingMessage___013_resume(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'resume',false, null);
    }

    @Test
    public __IncomingMessage___014_pipe(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'pipe',false, null);
    }

    @Test
    public __IncomingMessage___015_unpipe(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'unpipe',false, null);
    }

    @Test
    public __IncomingMessage___016_unshift(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'unshift',false, null);
    }

    @Test
    public __IncomingMessage___017_wrap(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyMethod(_testSubject,'wrap',false, null);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___018_port(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'port', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___019_maxHeadersCount(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'maxHeadersCount', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___020_httpVersion(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'httpVersion', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___021_headers(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'headers', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___022_rawHeaders(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'rawHeaders', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___023_trailers(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'trailers', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___024_rawTrailers(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'rawTrailers', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___025_method(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'method', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___026_url(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'url', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___027_statusCode(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'statusCode', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___028_statusMessage(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'statusMessage', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___029_socket(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'socket', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __IncomingMessage___030_readable(): void {
        let _testSubject = this.getTestSubject(IncomingMessage, 'IncomingMessage');
        this.verifyProperty(_testSubject,'readable', false);
    }

    @Test
    public __Agent___001_destroy(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyMethod(_testSubject,'destroy',false, null);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___002_port(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'port', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___003_maxHeadersCount(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'maxHeadersCount', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___004_httpVersion(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'httpVersion', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___005_headers(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'headers', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___006_rawHeaders(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'rawHeaders', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___007_trailers(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'trailers', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___008_rawTrailers(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'rawTrailers', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___009_method(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'method', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___010_url(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'url', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___011_statusCode(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'statusCode', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___012_statusMessage(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'statusMessage', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___013_socket(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'socket', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___014_readable(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'readable', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___015_maxSockets(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'maxSockets', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___016_sockets(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'sockets', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Agent___017_requests(): void {
        let _testSubject = this.getTestSubject(Agent, 'Agent');
        this.verifyProperty(_testSubject,'requests', false);
    }
}
