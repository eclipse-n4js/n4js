/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {AbstractVerifyRuntimeSupport} from "AbstractVerifyRuntimeSupport";
import {Readable, Writable, Duplex, Transform} from "stream";

export public class TestStream extends AbstractVerifyRuntimeSupport {

    @Test
    public __Readable___001_read(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'read',false, null);
    }

    @Test
    public __Readable___002_setEncoding(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'setEncoding',false, null);
    }

    @Test
    public __Readable___003_pause(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'pause',false, null);
    }

    @Test
    public __Readable___004_resume(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'resume',false, null);
    }

    @Test
    public __Readable___005_pipe(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'pipe',false, null);
    }

    @Test
    public __Readable___006_unpipe(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'unpipe',false, null);
    }

    @Test
    public __Readable___007_unshift(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'unshift',false, null);
    }

    @Test
    public __Readable___008_wrap(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'wrap',false, null);
    }

    @Test
    public __Readable___009_push(): void {
        let _testSubject = this.getTestSubject(Readable, 'Readable');
        this.verifyMethod(_testSubject,'push',false, null);
    }

    @Test
    public __Writable___001_write(): void {
        let _testSubject = this.getTestSubject(Writable, 'Writable');
        this.verifyMethod(_testSubject,'write',false, null);
    }

    @Test
    public __Writable___002_end(): void {
        let _testSubject = this.getTestSubject(Writable, 'Writable');
        this.verifyMethod(_testSubject,'end',false, null);
    }

    @Test
    public __Duplex___001_write(): void {
        let _testSubject = this.getTestSubject(Duplex, 'Duplex');
        this.verifyMethod(_testSubject,'write',false, null);
    }

    @Test
    public __Duplex___002_end(): void {
        let _testSubject = this.getTestSubject(Duplex, 'Duplex');
        this.verifyMethod(_testSubject,'end',false, null);
    }

    @Test
    public __Transform___001_read(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'read',false, null);
    }

    @Test
    public __Transform___002_setEncoding(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'setEncoding',false, null);
    }

    @Test
    public __Transform___003_pause(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'pause',false, null);
    }

    @Test
    public __Transform___004_resume(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'resume',false, null);
    }

    @Test
    public __Transform___005_pipe(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'pipe',false, null);
    }

    @Test
    public __Transform___006_unpipe(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'unpipe',false, null);
    }

    @Test
    public __Transform___007_unshift(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'unshift',false, null);
    }

    @Test
    public __Transform___008_wrap(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'wrap',false, null);
    }

    @Test
    public __Transform___009_push(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'push',false, null);
    }

    @Test
    public __Transform___010_write(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'write',false, null);
    }

    @Test
    public __Transform___011_end(): void {
        let _testSubject = this.getTestSubject(Transform, 'Transform');
        this.verifyMethod(_testSubject,'end',false, null);
    }
}
