/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {AbstractVerifyRuntimeSupport} from "AbstractVerifyRuntimeSupport";
import {ReadStream, WriteStream, rename, renameSync, truncate, truncateSync, ftruncate, ftruncateSync, chown, chownSync, fchown, fchownSync, chmod, chmodSync, fchmod, fchmodSync, stat, lstat, fstat, statSync, lstatSync, fstatSync, link, linkSync, symlink, symlinkSync, readlink, readlinkSync, realpath, unlink, unlinkSync, rmdir, rmdirSync, mkdir, mkdirSync, readdir, readdirSync, close, closeSync, open, openSync, utimes, utimesSync, futimes, futimesSync, fsync, fsyncSync, read, readSync, readFile, readFileSync, writeFile, writeFileSync, appendFile, appendFileSync, watchFile, unwatchFile, watch, exists, existsSync, access, accessSync, createReadStream, createWriteStream} from "fs";

export public class TestFs extends AbstractVerifyRuntimeSupport {

    @Test
    public __ReadStream___001_close(): void {
        let _testSubject = this.getTestSubject(ReadStream, 'ReadStream');
        this.verifyMethod(_testSubject,'close',false, null);
    }

    @Test
    public __WriteStream___001_close(): void {
        let _testSubject = this.getTestSubject(WriteStream, 'WriteStream');
        this.verifyMethod(_testSubject,'close',false, null);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __WriteStream___002_bytesWritten(): void {
        let _testSubject = this.getTestSubject(WriteStream, 'WriteStream');
        this.verifyProperty(_testSubject,'bytesWritten', false);
    }

    @Test
    public __rename___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(rename, 'rename');
        this.verifyFunction(_testSubject as Function, null ,'rename');
    }

    @Test
    public __renameSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(renameSync, 'renameSync');
        this.verifyFunction(_testSubject as Function, null ,'renameSync');
    }

    @Test
    public __truncate___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(truncate, 'truncate');
        this.verifyFunction(_testSubject as Function, null ,'truncate');
    }

    @Test
    public __truncateSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(truncateSync, 'truncateSync');
        this.verifyFunction(_testSubject as Function, null ,'truncateSync');
    }

    @Test
    public __ftruncate___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(ftruncate, 'ftruncate');
        this.verifyFunction(_testSubject as Function, null ,'ftruncate');
    }

    @Test
    public __ftruncateSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(ftruncateSync, 'ftruncateSync');
        this.verifyFunction(_testSubject as Function, null ,'ftruncateSync');
    }

    @Test
    public __chown___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(chown, 'chown');
        this.verifyFunction(_testSubject as Function, null ,'chown');
    }

    @Test
    public __chownSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(chownSync, 'chownSync');
        this.verifyFunction(_testSubject as Function, null ,'chownSync');
    }

    @Test
    public __fchown___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fchown, 'fchown');
        this.verifyFunction(_testSubject as Function, null ,'fchown');
    }

    @Test
    public __fchownSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fchownSync, 'fchownSync');
        this.verifyFunction(_testSubject as Function, null ,'fchownSync');
    }

    @Test
    public __chmod___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(chmod, 'chmod');
        this.verifyFunction(_testSubject as Function, null ,'chmod');
    }

    @Test
    public __chmodSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(chmodSync, 'chmodSync');
        this.verifyFunction(_testSubject as Function, null ,'chmodSync');
    }

    @Test
    public __fchmod___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fchmod, 'fchmod');
        this.verifyFunction(_testSubject as Function, null ,'fchmod');
    }

    @Test
    public __fchmodSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fchmodSync, 'fchmodSync');
        this.verifyFunction(_testSubject as Function, null ,'fchmodSync');
    }

    @Test
    public __stat___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(stat, 'stat');
        this.verifyFunction(_testSubject as Function, null ,'stat');
    }

    @Test
    public __lstat___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(lstat, 'lstat');
        this.verifyFunction(_testSubject as Function, null ,'lstat');
    }

    @Test
    public __fstat___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fstat, 'fstat');
        this.verifyFunction(_testSubject as Function, null ,'fstat');
    }

    @Test
    public __statSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(statSync, 'statSync');
        this.verifyFunction(_testSubject as Function, null ,'statSync');
    }

    @Test
    public __lstatSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(lstatSync, 'lstatSync');
        this.verifyFunction(_testSubject as Function, null ,'lstatSync');
    }

    @Test
    public __fstatSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fstatSync, 'fstatSync');
        this.verifyFunction(_testSubject as Function, null ,'fstatSync');
    }

    @Test
    public __link___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(link, 'link');
        this.verifyFunction(_testSubject as Function, null ,'link');
    }

    @Test
    public __linkSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(linkSync, 'linkSync');
        this.verifyFunction(_testSubject as Function, null ,'linkSync');
    }

    @Test
    public __symlink___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(symlink, 'symlink');
        this.verifyFunction(_testSubject as Function, null ,'symlink');
    }

    @Test
    public __symlinkSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(symlinkSync, 'symlinkSync');
        this.verifyFunction(_testSubject as Function, null ,'symlinkSync');
    }

    @Test
    public __readlink___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(readlink, 'readlink');
        this.verifyFunction(_testSubject as Function, null ,'readlink');
    }

    @Test
    public __readlinkSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(readlinkSync, 'readlinkSync');
        this.verifyFunction(_testSubject as Function, null ,'readlinkSync');
    }

    @Test
    public __realpath___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(realpath, 'realpath');
        this.verifyFunction(_testSubject as Function, null ,'realpath');
    }

    @Test
    public __unlink___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(unlink, 'unlink');
        this.verifyFunction(_testSubject as Function, null ,'unlink');
    }

    @Test
    public __unlinkSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(unlinkSync, 'unlinkSync');
        this.verifyFunction(_testSubject as Function, null ,'unlinkSync');
    }

    @Test
    public __rmdir___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(rmdir, 'rmdir');
        this.verifyFunction(_testSubject as Function, null ,'rmdir');
    }

    @Test
    public __rmdirSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(rmdirSync, 'rmdirSync');
        this.verifyFunction(_testSubject as Function, null ,'rmdirSync');
    }

    @Test
    public __mkdir___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(mkdir, 'mkdir');
        this.verifyFunction(_testSubject as Function, null ,'mkdir');
    }

    @Test
    public __mkdirSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(mkdirSync, 'mkdirSync');
        this.verifyFunction(_testSubject as Function, null ,'mkdirSync');
    }

    @Test
    public __readdir___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(readdir, 'readdir');
        this.verifyFunction(_testSubject as Function, null ,'readdir');
    }

    @Test
    public __readdirSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(readdirSync, 'readdirSync');
        this.verifyFunction(_testSubject as Function, null ,'readdirSync');
    }

    @Test
    public __close___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(close, 'close');
        this.verifyFunction(_testSubject as Function, null ,'close');
    }

    @Test
    public __closeSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(closeSync, 'closeSync');
        this.verifyFunction(_testSubject as Function, null ,'closeSync');
    }

    @Test
    public __open___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(open, 'open');
        this.verifyFunction(_testSubject as Function, null ,'open');
    }

    @Test
    public __openSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(openSync, 'openSync');
        this.verifyFunction(_testSubject as Function, null ,'openSync');
    }

    @Test
    public __utimes___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(utimes, 'utimes');
        this.verifyFunction(_testSubject as Function, null ,'utimes');
    }

    @Test
    public __utimesSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(utimesSync, 'utimesSync');
        this.verifyFunction(_testSubject as Function, null ,'utimesSync');
    }

    @Test
    public __futimes___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(futimes, 'futimes');
        this.verifyFunction(_testSubject as Function, null ,'futimes');
    }

    @Test
    public __futimesSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(futimesSync, 'futimesSync');
        this.verifyFunction(_testSubject as Function, null ,'futimesSync');
    }

    @Test
    public __fsync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fsync, 'fsync');
        this.verifyFunction(_testSubject as Function, null ,'fsync');
    }

    @Test
    public __fsyncSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(fsyncSync, 'fsyncSync');
        this.verifyFunction(_testSubject as Function, null ,'fsyncSync');
    }

    @Test
    public __read___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(read, 'read');
        this.verifyFunction(_testSubject as Function, null ,'read');
    }

    @Test
    public __readSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(readSync, 'readSync');
        this.verifyFunction(_testSubject as Function, null ,'readSync');
    }

    @Test
    public __readFile___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(readFile, 'readFile');
        this.verifyFunction(_testSubject as Function, null ,'readFile');
    }

    @Test
    public __readFileSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(readFileSync, 'readFileSync');
        this.verifyFunction(_testSubject as Function, null ,'readFileSync');
    }

    @Test
    public __writeFile___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(writeFile, 'writeFile');
        this.verifyFunction(_testSubject as Function, null ,'writeFile');
    }

    @Test
    public __writeFileSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(writeFileSync, 'writeFileSync');
        this.verifyFunction(_testSubject as Function, null ,'writeFileSync');
    }

    @Test
    public __appendFile___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(appendFile, 'appendFile');
        this.verifyFunction(_testSubject as Function, null ,'appendFile');
    }

    @Test
    public __appendFileSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(appendFileSync, 'appendFileSync');
        this.verifyFunction(_testSubject as Function, null ,'appendFileSync');
    }

    @Test
    public __watchFile___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(watchFile, 'watchFile');
        this.verifyFunction(_testSubject as Function, null ,'watchFile');
    }

    @Test
    public __unwatchFile___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(unwatchFile, 'unwatchFile');
        this.verifyFunction(_testSubject as Function, null ,'unwatchFile');
    }

    @Test
    public __watch___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(watch, 'watch');
        this.verifyFunction(_testSubject as Function, null ,'watch');
    }

    @Test
    public __exists___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(exists, 'exists');
        this.verifyFunction(_testSubject as Function, null ,'exists');
    }

    @Test
    public __existsSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(existsSync, 'existsSync');
        this.verifyFunction(_testSubject as Function, null ,'existsSync');
    }

    @Test
    public __access___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(access, 'access');
        this.verifyFunction(_testSubject as Function, null ,'access');
    }

    @Test
    public __accessSync___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(accessSync, 'accessSync');
        this.verifyFunction(_testSubject as Function, null ,'accessSync');
    }

    @Test
    public __createReadStream___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(createReadStream, 'createReadStream');
        this.verifyFunction(_testSubject as Function, null ,'createReadStream');
    }

    @Test
    public __createWriteStream___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(createWriteStream, 'createWriteStream');
        this.verifyFunction(_testSubject as Function, null ,'createWriteStream');
    }
}
