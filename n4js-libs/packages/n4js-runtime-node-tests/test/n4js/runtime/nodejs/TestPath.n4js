/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {AbstractVerifyRuntimeSupport} from "AbstractVerifyRuntimeSupport";
import {basename, dirname, extname, format, isAbsolute, join, normalize, parse, relative, resolve} from "path";

export public class TestPath extends AbstractVerifyRuntimeSupport {

    @Test
    public __basename___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(basename, 'basename');
        this.verifyFunction(_testSubject as Function, null ,'basename');
    }

    @Test
    public __dirname___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(dirname, 'dirname');
        this.verifyFunction(_testSubject as Function, null ,'dirname');
    }

    @Test
    public __extname___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(extname, 'extname');
        this.verifyFunction(_testSubject as Function, null ,'extname');
    }

    @Test
    public __format___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(format, 'format');
        this.verifyFunction(_testSubject as Function, null ,'format');
    }

    @Test
    public __isAbsolute___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(isAbsolute, 'isAbsolute');
        this.verifyFunction(_testSubject as Function, null ,'isAbsolute');
    }

    @Test
    public __join___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(join, 'join');
        this.verifyFunction(_testSubject as Function, null ,'join');
    }

    @Test
    public __normalize___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(normalize, 'normalize');
        this.verifyFunction(_testSubject as Function, null ,'normalize');
    }

    @Test
    public __parse___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(parse, 'parse');
        this.verifyFunction(_testSubject as Function, null ,'parse');
    }

    @Test
    public __relative___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(relative, 'relative');
        this.verifyFunction(_testSubject as Function, null ,'relative');
    }

    @Test
    public __resolve___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(resolve, 'resolve');
        this.verifyFunction(_testSubject as Function, null ,'resolve');
    }
}