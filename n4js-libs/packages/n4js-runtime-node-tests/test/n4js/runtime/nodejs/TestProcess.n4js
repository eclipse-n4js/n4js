/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {AbstractVerifyRuntimeSupport} from "AbstractVerifyRuntimeSupport";

export public class TestProcess extends AbstractVerifyRuntimeSupport {
    @Test
    public __process___1_abort(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "abort", true, null);
    }

    @Test
    public __process___2_arch(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "arch", true);
    }

    @Test
    public __process___3_argv(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "argv", true);
    }

    @Test
    public __process___4_chdir(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "chdir", true, null);
    }

    @Test
    public __process___5_config(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "config", true);
    }

    @Test @Ignore('Set only if process.disconnect() has been called.')
    public __process___6_connected(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "connected", true);
    }

    @Test
    public __process___7_cwd(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "cwd", true, null);
    }

    @Test @Ignore("If Node.js is not spawned with an IPC channel, process.disconnect() will be undefined.")
    public __process___8_disconnect(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "disconnect", true, null);
    }

    @Test
    public __process___9_env(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "env", true);
    }

    @Test
    public __process___10_execArgv(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "execArgv", true);
    }

    @Test
    public __process___11_execPath(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "execPath", true);
    }

    @Test
    public __process___12_exit(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "exit", true, null);
    }

    @Test @Ignore('exitCode is set only when the process exits. undefined otherwise')
    public __process___13_exitCode(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "exitCode", true);
    }

    @Test
    public __process___14_getegid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "getegid", true, null);
    }

    @Test
    public __process___15_geteuid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "geteuid", true, null);
    }

    @Test
    public __process___16_getgid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "getgid", true, null);
    }

    @Test
    public __process___17_getgroups(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "getgroups", true, null);
    }

    @Test
    public __process___18_getuid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "getuid", true, null);
    }

    @Test
    public __process___19_hrtime(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "hrtime", true, null);
    }

    @Test
    public __process___20_initgroups(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "initgroups", true, null);
    }

    @Test
    public __process___21_kill(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "kill", true, null);
    }

    @Test
    public __process___22_mainModule(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "mainModule", true);
    }

    @Test
    public __process___23_memoryUsage(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "memoryUsage", true, null);
    }

    @Test
    public __process___24_nextTick(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "nextTick", true, null);
    }

    @Test
    public __process___25_pid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "pid", true);
    }

    @Test
    public __process___26_platform(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "platform", true);
    }

    @Test
    public __process___27_release(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "release", true);
    }

    @Test @Ignore('If Node.js is not spawned with an IPC channel, send will be undefined.')
    public __process___28_send(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "send", true, null);
    }

    @Test
    public __process___29_setegid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "setegid", true, null);
    }

    @Test
    public __process___30_seteuid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "seteuid", true, null);
    }

    @Test
    public __process___31_setgid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "setgid", true, null);
    }

    @Test
    public __process___32_setgroups(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "setgroups", true, null);
    }

    @Test
    public __process___33_setuid(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "setuid", true, null);
    }

    @Test
    public __process___34_stderr(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "stderr", true);
    }

    @Test
    public __process___35_stdout(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "stdout", true);
    }

    @Test
    public __process___36_stdin(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "stdin", true);
    }

    @Test
    public __process___37_title(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "title", true);
    }

    @Test
    public __process___38_umask(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "umask", true, null);
    }

    @Test
    public __process___39_uptime(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyMethod(_testSubject, "uptime", true, null);
    }

    @Test
    public __process___40_version(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "version", true);
    }

    @Test
    public __process___41_versions(): void {
        let _testSubject = this.getTestSubject(process, 'process');
        this.verifyProperty(_testSubject, "versions", true);
    }

}