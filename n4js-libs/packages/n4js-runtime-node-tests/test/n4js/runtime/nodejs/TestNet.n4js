/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {AbstractVerifyRuntimeSupport} from "AbstractVerifyRuntimeSupport";
import {Socket, createServer, connect, createConnection, isIP, isIPv4, isIPv6} from "net";

export public class TestNet extends AbstractVerifyRuntimeSupport {

    @Test
    public __Socket___001_destroy(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyMethod(_testSubject,'destroy',false, null);
    }

    @Test
    public __Socket___002_setTimeout(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyMethod(_testSubject,'setTimeout',false, null);
    }

    @Test
    public __Socket___003_setNoDelay(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyMethod(_testSubject,'setNoDelay',false, null);
    }

    @Test
    public __Socket___004_setKeepAlive(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyMethod(_testSubject,'setKeepAlive',false, null);
    }

    @Test
    public __Socket___005_unref(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyMethod(_testSubject,'unref',false, null);
    }

    @Test
    public __Socket___006_ref(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyMethod(_testSubject,'ref',false, null);
    }

    @Test
    public __Socket___007_end(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyMethod(_testSubject,'end',false, null);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___008_bufferSize(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'bufferSize', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___009_port(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'port', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___010_remoteAddress(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'remoteAddress', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___011_remoteFamily(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'remoteFamily', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___012_remotePort(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'remotePort', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___013_localAddress(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'localAddress', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___014_localPort(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'localPort', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___015_bytesRead(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'bytesRead', false);
    }

    @Test @Ignore("Currently cannot verify node members (they are not in prototype nor always in constructor)")
    public __Socket___016_bytesWritten(): void {
        let _testSubject = this.getTestSubject(Socket, 'Socket');
        this.verifyProperty(_testSubject,'bytesWritten', false);
    }

    @Test
    public __createServer___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(createServer, 'createServer');
        this.verifyFunction(_testSubject as Function, null ,'createServer');
    }

    @Test
    public __connect___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(connect, 'connect');
        this.verifyFunction(_testSubject as Function, null ,'connect');
    }

    @Test
    public __createConnection___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(createConnection, 'createConnection');
        this.verifyFunction(_testSubject as Function, null ,'createConnection');
    }

    @Test
    public __isIP___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(isIP, 'isIP');
        this.verifyFunction(_testSubject as Function, null ,'isIP');
    }

    @Test
    public __isIPv4___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(isIPv4, 'isIPv4');
        this.verifyFunction(_testSubject as Function, null ,'isIPv4');
    }

    @Test
    public __isIPv6___001_basic_function_exists(): void {
        let _testSubject = this.getTestSubject(isIPv6, 'isIPv6');
        this.verifyFunction(_testSubject as Function, null ,'isIPv6');
    }
}
