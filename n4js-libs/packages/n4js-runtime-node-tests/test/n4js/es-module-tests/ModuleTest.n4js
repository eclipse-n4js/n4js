/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {execFile} from "child_process";
import {PlatformId} from "n4/RuntimeInfo";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {Precondition} from "org/eclipse/n4js/mangelhaft/precondition/Precondition";
import {resolve} from "path";

export interface ModuleTest {
    @BeforeAll
    public checkForNode() {
        Precondition.equal(n4.runtimeInfo.platformId, PlatformId.NODEJS, "Node-specific tests");
    }

    /**
     * Returns the absolute path to the transpiled class/module.
     */
    protected getThisModulePath(): string {
        let n4type = this.constructor.n4type,
            parts = n4type.fqn.split(".");
        parts.pop();
        return System._nodeRequire.resolve(n4type.origin + "/src-gen/" + parts.join("/"));
    }
    
    /**
     * Returns the project root directory.
     */
    protected getPrjRootDir(): string {
        return resolve(this.getThisModulePath(), ".."/* es-module-tests */, ".." /* src-gen */, ".."/* project root*/);
    }
    
    /**
     * Returns the logical module.
     */
    protected getRunnerModuleOf(exampleId: string): string {
        let parts = this.constructor.n4type.fqn.split(".");
        parts.pop();
        parts.pop();
        console.log("?!? ModuleTest.getRunnerModuleOf :: " + parts.join("/")  + "/" + exampleId + "/run")
        return parts.join("/")  + "/" + exampleId + "/run";
    }
    
    /**
     * Returns the origin-prefixed module id.
     */
    protected getRunnerModuleIdOf(exampleId: string): string {
        return this.constructor.n4type.origin + "/src-gen/" + this.getRunnerModuleOf(exampleId);
    }

    protected abstract getNodeExecArgs(exampleId: string): Array<string>;
    protected getNodeExecOptions(exampleId: string): Object {
        return {
            env: {
                PRJ_ORIGIN: ModuleTest.n4type.origin,
                NODE_PATH: process.env.NODE_PATH
            }
        };
    }

    protected async execNodeJS(exampleId: string): string {
        let cmd = process.argv[0],
            logDebug = n4.runtimeOptions.debug;
        let args = this.getNodeExecArgs(exampleId),
            options: Object+ = this.getNodeExecOptions(exampleId);

        if (logDebug) {
            console.log(cmd, "args:", args, "options:", JSON.stringify(options, null, 2));
        }

        return await new Promise<string, any>((resolve, reject) => {
            execFile(cmd, args, options, (err, stdout: Buffer, stderr: Buffer) => {
                if (logDebug) {
                    console.log(cmd, args.join(" "), "\nerr", err, "\nstdout:", stdout, "\nstderr:", stderr);
                }

                if (err || stderr) {
                    reject(err || new Error(String(stderr)));
                }
                resolve(String(stdout) || "");
            });
        });
    }
    
    async execNodeJSAndAssert(exampleId: string, output: string): void {
        let actual = await this.execNodeJS(exampleId);
        Assert.equal(actual, output, "output of " + exampleId + " should be " + output + " but is " + actual);
    }

    @Test async test_ex01(): void {
        await this.execNodeJSAndAssert("ex01", "1\n");
    }

    @Test async test_ex02(): void {
        await this.execNodeJSAndAssert("ex02", "1 2\n");
    }

    @Fixme("IDE-2053")
    @Test async test_ex03(): void {
        await this.execNodeJSAndAssert("ex03", "1\n");
    }

    @Fixme("IDE-2053")
    @Test async test_ex04(): void {
        await this.execNodeJSAndAssert("ex04", "1 2\n");
    }

    @Test async test_ex05(): void {
        await this.execNodeJSAndAssert("ex05", "undefined\n");
    }

    @Fixme("IDE-2053")
    @Test async test_ex06(): void {
        await this.execNodeJSAndAssert("ex06", "42\n");
    }

    @Test async test_ex07(): void {
        await this.execNodeJSAndAssert("ex07", "42 21\n");
    }

    @Fixme("IDE-2053")
    @Test async test_ex08(): void {
        await this.execNodeJSAndAssert("ex08", "1 2\n");
    }

    @Fixme("IDE-2054")
    @Test async test_ex09(): void {
        await this.execNodeJSAndAssert("ex09", "43 exported from A\n");
    }

    @Test async test_ex10(): void {
        await this.execNodeJSAndAssert("ex10", "I am module A\n");
    }

    @Test async test_ex11(): void {
        await this.execNodeJSAndAssert("ex11", "I am A\nI am B\n");
    }

    @Test async test_ex12(): void {
        await this.execNodeJSAndAssert("ex12", "I am B\nI am A\n");
    }

    @Test async test_ex13(): void {
        await this.execNodeJSAndAssert("ex13", "0\n1\n");
    }

    @Test async test_ex14(): void {
        await this.execNodeJSAndAssert("ex14", "0\n1\n");
    }

    @Test async test_ex15(): void {
        await this.execNodeJSAndAssert("ex15", "0\n1\n16\n");
    }
}
