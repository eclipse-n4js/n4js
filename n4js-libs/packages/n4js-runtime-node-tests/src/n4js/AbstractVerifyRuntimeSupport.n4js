/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
import {Precondition} from "org/eclipse/n4js/mangelhaft/precondition/Precondition"
import {PlatformId} from "n4/RuntimeInfo"

export public class AbstractVerifyRuntimeSupport {
    public testSubjectOverride: Object;

    @BeforeAll
    public checkForNode() {
        Precondition.equal(n4.runtimeInfo.platformId, PlatformId.NODEJS, "Node-specific tests");
    }

    /**
     * Override this method to add custom handling if extending test class
     */
    public getTestSubject(subject: any, subjectName: string): any {
        if (this.testSubjectOverride) {
            if (this.testSubjectOverride[subjectName]) {
                return this.testSubjectOverride[subjectName];
            }  else {
                 Precondition.fail("Overridden test not applicable")
            }
        }
        return subject;
    }

    public verifyFunction(fcn: Function, numArgs: number=, name: string=) {

        Assert.strictEqual(typeof fcn, "function", [name
                                                  , "should be a function in runtime environment"
                                                    ].join(" "));
        if (numArgs != null) {
           Assert.strictEqual(fcn.length, numArgs,
                [name, "defined with right number of arguments"].join(" "));
        }
    }

    public verifyMethod(clazz: any+, methodName: string, isStatic: boolean=, numArgs: number=) {
        let testSubject: any+ = isStatic? clazz: clazz.prototype;
        Assert.strictEqual(typeof testSubject[methodName], "function", [methodName
                                                               ,"should be a function in runtime environment"
                                                               ].join(" "));
        if (numArgs != null) {
            Assert.strictEqual((testSubject[methodName] as Function).length, numArgs,
                [methodName, "defined with right number of arguments"].join(" "));
        }
    }

    public verifyProperty(clazz: any+, memberName: string, isStatic: boolean=) {
        let testSubject: any+ = isStatic? clazz: new (clazz as constructor{Object})();
        Assert.isTrue(testSubject[memberName] !== undefined, memberName + " should be defined in runtime environment");
    }

    public verifyMember(object: any+, memberName: string, type: string=) {
        Assert.isNotUndefined(object[memberName], memberName + " should be defined in runtime environment");
        if (type) {
            Assert.strictEqual(typeof object[memberName], type, memberName +" not of type "+ type + " actual type:" + typeof object[memberName]);
        }
    }
}

/* -*- mode: typescript;-*- */
