/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import * as lib_jreProvider from "JreProvider";
import * as lib_fs from "fs";
import * as lib_http from "n4js-runtime-node/http";
import * as lib_https from "n4js-runtime-node/https";
import * as log+ from "npmlog";
import {N4JSC_JAR} from "Globals";


const NPM_NAME = process.env.npm_package_name ?? "n4js-cli";
const NPM_VERSION = process.env.npm_package_version ? "@"+process.env.npm_package_version : "";
const LOG_NAME = NPM_NAME + NPM_VERSION;
const LOG_FN = (text: string) => {log.info(LOG_NAME, text);}



replaceN4jscJar(process.env.N4JSC_JAR as string);
lib_jreProvider.ensureJRE(LOG_FN);


/**
 * Replaces the local n4jsc.jar in case the environment variable 'N4JSC_JAR' was set to a url or file system path.
 */
function replaceN4jscJar(envN4jscJar: string) {
    if (!envN4jscJar) {
        // environment variable not set
        return;
    }

    LOG_FN(`Replacing ${N4JSC_JAR} with ${envN4jscJar}`);

    if (lib_fs.existsSync(N4JSC_JAR)) {
        // remove to notice any problems
        lib_fs.unlinkSync(N4JSC_JAR);
    }

    if (/^https?:\/\//i.test(envN4jscJar)) {
        // interpret 'envN4jscJar' as url
        download(envN4jscJar, N4JSC_JAR);

    } else {
        // interpret 'envN4jscJar' as file system path
        lib_fs.copyFileSync(envN4jscJar, N4JSC_JAR);
    }
}

/**
 * Downloads a given url to the given out path. Supports redirects.
 */
function download(url: string, outPath: string) {
    const stream = lib_fs.createWriteStream(outPath);
    const messageHandler = (resp: lib_http.IncomingMessage) => {
        if (Math.trunc(resp.statusCode /100) === 3 && resp.headers.location) {
            // redirect
            download(resp.headers.location as string, outPath);
        } else {
            if (resp.statusCode !== 200) {
                throw new Error(`Request on ${url} failed: ${resp.statusCode}`);
            }
            resp.pipe(stream);
        }
    };

    if (/^http:\/\//i.test(url)) {
        lib_http.get(url, undefined, messageHandler);
    } else {
        lib_https.get(url, undefined, messageHandler);
    }
};
