/*
 * Copyright (c) 2019 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import {resolve as pathResolve} from "path";
import {spawn} from "child_process";
import debug from "debug";
const log = debug("n4js-cli");

@StringBased
export public enum Goal {
    compile,
    lsp,
    api,
    watch
}

export public interface ~Options {
    public version?: boolean;
    public help?: boolean;
    /** Clean the output folder before compiling. */
    public clean?: boolean;
    public noPersist?: boolean;
    public noTests?: boolean;
    public showSetup?: boolean;
    public stdio?: boolean;
    public testOnly?: boolean;
    public verbose?: boolean;
    public maxErrs?: int;
    public maxWarns?: int;
    public port?: int;
    /** Test catalog (JSON) to be used. If file path, will be written on --compile. */
    public testCatalog?: string;
}

/**
 * Calls n4jsc with the given set of arguments, e.g.
 *
 * "port": "1234"
 * "clean": true
 *
 * Any stdout/stderr will be logged as is.
 * 
 * Unless set per `JAVA_TOOL_OPTIONS` heap usage is defaulted to 4096m.
 *
 * Call `n4jsc -h` for more details.
 *
 * Returns a promise.
 */
export public async function n4jsc(goal: Goal, dir: string, options: Options+ =) {
    return new Promise<int, int>((resolve, reject) => {
        log("goal=%s dir=%s options: %O", goal, dir, options);
        const args = ["-jar", pathResolve(__dirname, "..", "bin", "n4jsc.jar"), goal, dir];
        if (!/-Xmx/.test(process.env.JAVA_TOOL_OPTIONS as string)) {
            args.unshift("-Xmx4096m");
        }
        const optionsFieldNames = new Set<string>(Options.n4type.dataFields().map(f => f.name));

        for (const [key, value] of Object.entries(options)) {
            if (!optionsFieldNames.has(key)) {
                log("unknown option:", key, value);
                continue;
            }
            const isBool = typeof value === "boolean";
            if (isBool && !value) {
                continue; // skip
            }
            args.push((key.length > 1 ? "--" : "-") + key);
            if (!isBool) {
                args.push(String(value));
            }
        }

        if (log.enabled) {
            args.push("--verbose");
        }

        log("calling n4jsc:", args);

        spawn("java", args, {
            stdio: "inherit",
            env: Object.assign({ NODEJS_PATH: process.argv[0] }, process.env)
        }).on("close", (code: int) => {
            if (code === 0) {
                resolve(0);
            } else {
                reject(code);
            }
        });
    });
}
