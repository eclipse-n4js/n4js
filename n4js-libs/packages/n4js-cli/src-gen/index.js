// Generated by N4JS transpiler; for copyright see original N4JS source file.

import 'n4js-runtime'
import {runN4jsc} from './n4jsc'
import {resolve as pathResolve} from 'path'
import debug from 'debug'

const log = debug("n4js-cli");
export var Options = {};
Options.$fieldDefaults = {
	version: undefined,
	help: undefined,
	clean: undefined,
	noPersist: undefined,
	noTests: undefined,
	showSetup: undefined,
	stdio: undefined,
	testOnly: undefined,
	verbose: undefined,
	maxErrs: undefined,
	maxWarns: undefined,
	port: undefined,
	testCatalog: undefined
};
Options.$methods = {};
$makeInterface(Options, undefined, function(instanceProto, staticProto) {
	var metaClass = new N4Interface({
		name: 'Options',
		origin: 'n4js-cli',
		fqn: 'index/Options',
		n4superType: undefined,
		allImplementedInterfaces: [],
		ownedMembers: [
			new N4DataField({
				name: 'version',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'help',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'clean',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'noPersist',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'noTests',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'showSetup',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'stdio',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'testOnly',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'verbose',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'maxErrs',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'maxWarns',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'port',
				isStatic: false,
				annotations: []
			}),
			new N4DataField({
				name: 'testCatalog',
				isStatic: false,
				annotations: []
			})
		],
		consumedMembers: [],
		annotations: []
	});
	return metaClass;
});
export async function n4jsc(goal, dir, options) {
	log("goal=%s dir=%s options: %O", goal, dir, options);
	const args = [
		"-jar",
		pathResolve(__dirname, "..", "bin", "n4jsc.jar"),
		goal
	];
	const optionsFieldNames = new Set(Options.n4type.dataFields().map((f)=>f.name));
	if (dir) {
		args.push(dir);
	}
	for(const [
		key,
		value
	] of Object.entries(options)) {
		if (!optionsFieldNames.has(key)) {
			log("unknown option:", key, value);
			continue;
		}
		const isBool = typeof value === "boolean";
		if (isBool && !value) {
			continue;
		}
		args.push((key.length > 1 ? "--" : "-") + key);
		if (!isBool) {
			args.push(String(value));
		}
	}
	if (log.enabled) {
		args.push("--verbose");
	}
	log("calling n4jsc:", args);
	return runN4jsc(args);
}
//# sourceMappingURL=index.map
