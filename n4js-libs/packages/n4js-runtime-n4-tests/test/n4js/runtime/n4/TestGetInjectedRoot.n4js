/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
import {N4Injector} from "n4js/lang/N4Injector"

class Mage {
    public spells = 6000000;
}

class ApprenticeMage extends Mage {
    @Override public spells = 1;
}

@Binder
@Bind(Mage, ApprenticeMage)
class Binder {}

@GenerateInjector
class TestRoot{
    @Inject
    inj: N4Injector;
    @Inject
    mage: Mage;
}
@GenerateInjector
@UseBinder(Binder)
class TestRootWithBinder{
    @Inject
    inj: N4Injector;
    @Inject
    mage: Mage;
}

@GenerateInjector
@WithParentInjector(TestRootWithBinder)
class SubRoot {
    @Inject mage: Mage;
}
@GenerateInjector
@UseBinder(Binder)
@WithParentInjector(TestRoot)
class SubRootWithBinding {
    @Inject mage: Mage;
}

export public class TestGetInjectedRoot {
    @Test
    basic() {
        let root = N4Injector.of(TestRoot).create(TestRoot);
        Assert.isTrue(root instanceof TestRoot, "root object should be of right type");
        Assert.isTrue(root.inj instanceof N4Injector, "root object should be injected");
        Assert.strictEqual(root.mage.spells, 6000000, "Mage should be injected");
    }
    @Test
    basicWithNulls() {
        let root = N4Injector.of(TestRoot, null, null).create(TestRoot);
        Assert.isTrue(root instanceof TestRoot, "root object should be of right type");
        Assert.isTrue(root.inj instanceof N4Injector, "root object should be injected");
        Assert.strictEqual(root.mage.spells, 6000000, "Mage should be injected");
    }
    @Test
    basicWithBinder() {
        let root = N4Injector.of(TestRootWithBinder, undefined, new Binder()).create(TestRoot);
        Assert.strictEqual(root.mage.spells, 1, "ApprenticeMage should be injected from binding");
    }

    @Test
    parentInjectorParentBinding() {
        let rootInj: N4Injector = N4Injector.of(TestRootWithBinder);
        let subroot: SubRoot = N4Injector.of(SubRoot, rootInj).create(SubRoot);
        Assert.strictEqual(subroot.mage.spells, 1, "ApprenticeMage should be injected from binding");
    }

    @Test
    parentInjectorSubBinding() {
        let root = N4Injector.of(TestRoot).create(TestRoot);
        let subroot: SubRoot = N4Injector.of(SubRootWithBinding, root.inj, new Binder()).create(SubRoot);
        Assert.strictEqual(root.mage.spells, 6000000, "Mage should be injected in root");
        Assert.strictEqual(subroot.mage.spells, 1, "ApprenticeMage should be injected from binding in subroot");
    }

    @Test
    saveInjectorObject() {
        let rootInj = N4Injector.of(TestRoot);
        Assert.equal(typeof rootInj.create, "function", "injector should have valid createNew");
    }
}
