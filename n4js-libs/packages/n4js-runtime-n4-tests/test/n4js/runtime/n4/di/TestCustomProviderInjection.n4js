/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Set Up
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {DIAsserts} from "runtime/n4/di/DIAsserts";
import {Sub} from "runtime/n4/di/ExtModuleForTestCtorWithModules";
interface I{}
class X implements I {}

@Singleton class S {}

class PX implements N4Provider<X>{
    @Override
    public get(): X{
        return new X();
    }
}
class PPX implements N4Provider<PX>{
    @Override
    public get(): PX{
        return new PX();
    }
}
class PPPX implements N4Provider<PPX>{
    @Override
    public get(): PPX{
        return new PPX();
    }
}

@GenerateInjector
class DIC {
    @Inject x: X;
    @Inject xp: PX;
    @Inject xpp: PPX;
    @Inject xppp: PPPX;
}


class PI implements N4Provider<I>{
    @Override
    public get(): I{
        return new X();
    }
}

@Binder @Bind(I, X) class Binder{}

@GenerateInjector
@UseBinder(Binder)
class DIC2 {
    @Inject x: X;
    @Inject i: I;
    @Inject xp: PX;
    @Inject ip: PI;
}


class PS implements N4Provider<S>{
    @Inject
    private s: S;
    @Override
    public get(): S{
        return this.s;
    }
}

@GenerateInjector
class DIC3 {
    @Inject s: S;
    @Inject ps: PS;
}

@GenerateInjector
class DIC4 {
    ps: PS;
    px: PX;

    @Inject
    constructor(px: PX, ps: PS) {
        this.px = px;
        this.ps = ps;
    }
}

@Binder
class BinderWithPM {
    @Provides
    provideI(xp: PX): I {
        return xp.get();
    }
}

@GenerateInjector
@UseBinder(BinderWithPM)
class DIC5 {
    @Inject x: X;
    @Inject i: I;
    @Inject xp: PX;
    @Inject ip: PI;
}

class PSub implements N4Provider<Sub>{
    @Override
    public get(): Sub{
        return new Sub();
    }
}

@GenerateInjector
class DIC6 {
    sub: Sub;
    @Inject
    constructor(psub: PSub) {
        this.sub = psub.get();
    }
}

//=============================================================================
// Test
//=============================================================================

/**
 * @testee N4Provider
 */
export public class TestProvidersInjection {

    @Test
    testProvidersOfProviders() {
        let dic = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");
        DIAsserts.equalsClassName(dic.x, "X");
        DIAsserts.equalsClassName(dic.xp.get(), "X");
        DIAsserts.equalsClassName(dic.xpp.get().get(), "X");
        DIAsserts.equalsClassName(dic.xppp.get().get().get(), "X");
        Assert.notStrictEqual(dic.x, dic.xp.get())
        Assert.notStrictEqual(dic.xp.get(), dic.xp.get())
        Assert.notStrictEqual(dic.xpp.get().get(), dic.xp.get())
    }

    @Test
    testProviderWithBinding() {
        // TODO explicit Binder call should be unecessary
        let dic = N4Injector.of(DIC2).create(DIC2);
        DIAsserts.equalsClassName(dic, "DIC2");
        DIAsserts.equalsClassName(dic.x, "X");
        DIAsserts.equalsClassName(dic.i, "X");
        DIAsserts.equalsClassName(dic.xp.get(), "X");
        DIAsserts.equalsClassName(dic.ip.get(), "X");
    }

    @Test
    testProviderWithSingleton() {
        let dic = N4Injector.of(DIC3).create(DIC3);
        DIAsserts.equalsClassName(dic, "DIC3");
        DIAsserts.equalsClassName(dic.s, "S");
        DIAsserts.equalsClassName(dic.ps.get(), "S");
        Assert.strictEqual(dic.s, dic.ps.get());
    }

    @Test
    testProvidersWithCtorInjection() {
        let dic = N4Injector.of(DIC4).create(DIC4);
        DIAsserts.equalsClassName(dic, "DIC4");
        DIAsserts.equalsClassName(dic.ps.get(), "S");
        Assert.strictEqual(dic.ps.get(), dic.ps.get());
        DIAsserts.equalsClassName(dic.px.get(), "X");
        Assert.notStrictEqual(dic.px.get(), dic.px.get());
    }

    @Test
    testProviderWithBinderProvider() {
        // TODO explicit Binder call should be unecessary
        let dic = N4Injector.of(DIC5).create(DIC5);
        DIAsserts.equalsClassName(dic, "DIC5");
        DIAsserts.equalsClassName(dic.x, "X");
        DIAsserts.equalsClassName(dic.i, "X");
        DIAsserts.equalsClassName(dic.xp.get(), "X");
        DIAsserts.equalsClassName(dic.ip.get(), "X");
    }

    @Test
    testProviderWithExternalModule() {
        let dic = N4Injector.of(DIC6).create(DIC6);
        DIAsserts.equalsClassName(dic, "DIC6");
        DIAsserts.equalsClassName(dic.sub, "Sub");
    }
}
