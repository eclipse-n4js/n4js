/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {getInjectedClassMeta, getBinderMeta, getDIComponentMeta} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P} from "runtime/n4/di/compiledMetaInfo/ScriptDeps";
class Injected extends P {
    @Inject fieldA: A;
    @Inject fieldPB: N4Provider<B>;
    @Inject fieldPPC: N4Provider<N4Provider<C>>;

    @Inject
    constructor(ctorD: D, ctorPE: N4Provider<E>, ctorPPF: N4Provider<N4Provider<F>>){}
}

@Binder
@Bind(~G,H)
class Binder{
    @Provides
    pm(paramJ: J, paramPK: N4Provider<K>, paramPPL: N4Provider<N4Provider<L>>): ~I{
        return new M();
    }
}

@GenerateInjector
@UseBinder(N)
@WithParentInjector(O)
class DIC{}

//=============================================================================
// Tests
//=============================================================================
/**
 * Compiler by default is removing "unused" imported types.
 * Check if compiler is not removing references to types that need to be loaded for
 * the DI mechanisms.
 */
export class TestDIScriptDependencies{

    @Test
    checkInjectedClassDeps(){
        let meta = getInjectedClassMeta(Injected);

        Assert.strictEqual(meta.superType, P);

        Assert.strictEqual(meta.fieldsInjectedTypes[0].type, A);
        Assert.strictEqual(meta.fieldsInjectedTypes[1].typeVar.type, B);
        Assert.strictEqual(meta.fieldsInjectedTypes[2].typeVar.typeVar.type, C);

        Assert.strictEqual(meta.injectCtorParams[0].type, D);
        Assert.strictEqual(meta.injectCtorParams[1].typeVar.type, E);
        Assert.strictEqual(meta.injectCtorParams[2].typeVar.typeVar.type, F);
    }

    @Test
    checkBinderDeps(){
        let meta = getBinderMeta(Binder);

        Assert.strictEqual(meta.bindings[0].from, G);
        Assert.strictEqual(meta.bindings[0].to, H);

        Assert.strictEqual(meta.methodBindings[0].to, I);
        Assert.strictEqual(meta.methodBindings[0].args[0].type, J);
        Assert.strictEqual(meta.methodBindings[0].args[1].typeVar.type, K);
        Assert.strictEqual(meta.methodBindings[0].args[2].typeVar.typeVar.type, L);
    }

    @Test
    checkDiComponentDeps(){
        let meta = getDIComponentMeta(DIC);

        Assert.strictEqual(meta.parent, O);
        Assert.strictEqual(meta.binders[0], N);
    }
}
