/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================
import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
class Foo{}

interface IY{}
class Y implements IY{}
interface IX{}
class X implements IX{
    foo: Foo;
    y: IY;
}

@Binder
class PointlessB{
    foo: Foo = new Foo();
}

@Binder
@Bind(IY, Y)
class B{
    @Inject
    foo: Foo;
    @Provides
    im(y: IY): IX{
        let x = new X();
        x.foo = this.foo;
        x.y = y;
        return x;
    }
}

@GenerateInjector
class DIC{}

@GenerateInjector
@UseBinder(B)
class DIC2{
    @Inject pointlessB: PointlessB;
}
//=============================================================================
// Tests
//=============================================================================

export class TestCreationWithParentInjector{

    @Test
    canInjectInBinders(){
        let b = N4Injector.of(DIC).create(B);
        Assert.isInstanceOf(b, B);
        Assert.isInstanceOf(b.foo, Foo);
    }

    @Test
    canInjectBinders(){
        let b = N4Injector.of(DIC).create(B);
        let dic2 = N4Injector.of(DIC2, null, b).create(DIC2);
        Assert.isInstanceOf(dic2.pointlessB, PointlessB);
    }

    @Test
    bindersWithInjectionPointsNeedToBeCreatedByOtherInjectorsBeforeConfiguringInjector(){
        let b = N4Injector.of(DIC).create(B);
        let ix = N4Injector.of(DIC2, null, b).create(IX);
        Assert.isNotUndefined((ix as X).foo);
        Assert.isNotUndefined((ix as X).y);
    }
}

