/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {BinderMeta} from "n4js/lang/N4Injector";
import {getBinderMeta} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
class Foo{}
class Bar{}
class Baz{}

interface IY{}
class Y implements IY{}
interface IX{}
class X implements IX{}

@Binder
@Bind(IY, Y)
class B{
    @Provides
    m(): X{
        return new X();
    }
    @Provides
    im(paramFoo: Foo, paramPB: N4Provider<Bar>, paramPPB: N4Provider<N4Provider<Baz>>): IX{
        return new X();
    }
}

//=============================================================================
// Tests
//=============================================================================

export class TestDIMetaForBinder{

    private meta: BinderMeta = getBinderMeta(B);

    @Test
    hasMetaForAllSimpleBindings(){
        Assert.equal(this.meta.bindings.length, 1);
    }

    @Test
    metaForAllSimpleBindingsContainsActualTypes(){
        let bindingInfo = this.meta.bindings[0];
        Assert.isNotNullOrUndefined(bindingInfo.from);
        Assert.strictEqual(bindingInfo.from, IY);
        Assert.isNotNullOrUndefined(bindingInfo.to);
        Assert.strictEqual(bindingInfo.to, Y);
    }

    @Test
    hasMetaForAllMethodBindings(){
        Assert.equal(this.meta.methodBindings.length, 2);
    }

    @Test
    metaForMethodBindingContainsMethodNameAndLoadedReturnType(){
        let bindingInfo = this.meta.methodBindings[0];
        Assert.equal(bindingInfo.name, 'm');
        Assert.isNotNullOrUndefined(bindingInfo.to);
        Assert.strictEqual(bindingInfo.to, X);

        let bindingInfo1 = this.meta.methodBindings[1];
        Assert.equal(bindingInfo1.name, 'im');
        Assert.isNotNullOrUndefined(bindingInfo1.to);
        Assert.strictEqual(bindingInfo1.to, IX);
    }

    @Test
    metaForMethodBindingEmptyArgsArrayIfNoFormalParams(){
        Assert.isNotNullOrUndefined(this.meta.methodBindings[0].args);
        Assert.equal(this.meta.methodBindings[0].args.length, 0);

        Assert.isNotNullOrUndefined(this.meta.methodBindings[1].args);
        Assert.equal(this.meta.methodBindings[1].args.length, 3);
    }

    @Test
    metaForMethodBindingConstainsAllParamsMeta(){
        let methodArgs = this.meta.methodBindings[1].args;

        let formalParamInfo = methodArgs[0];
        Assert.isNotNullOrUndefined(formalParamInfo);
        Assert.strictEqual(formalParamInfo.type, Foo);
        Assert.equal(formalParamInfo.name, "paramFoo");
        Assert.isUndefined(formalParamInfo.typeVar);

        let formalParamInfo1 = methodArgs[1];
        Assert.isNotNullOrUndefined(formalParamInfo1);
        Assert.strictEqual(formalParamInfo1.type, N4Provider);
        Assert.equal(formalParamInfo1.name, "paramPB");
        Assert.isNotUndefined(formalParamInfo1.typeVar);

        let nestedTypeInfo1 = formalParamInfo1.typeVar;
        Assert.isUndefined(nestedTypeInfo1.name);
        Assert.strictEqual(nestedTypeInfo1.type, Bar);
        Assert.isUndefined(nestedTypeInfo1.typeVar);

        let fieldInfo2 = methodArgs[2];
        Assert.isNotNullOrUndefined(fieldInfo2);
        Assert.strictEqual(fieldInfo2.type, N4Provider);
        Assert.equal(fieldInfo2.name, "paramPPB");
        Assert.isNotUndefined(fieldInfo2.typeVar);

        let formalParamInfo2 = fieldInfo2.typeVar;
        Assert.isUndefined(formalParamInfo2.name);
        Assert.strictEqual(formalParamInfo2.type, N4Provider);
        Assert.isNotUndefined(formalParamInfo2.typeVar);

        let deepNestedTypeInfo2 = formalParamInfo2.typeVar;
        Assert.isUndefined(deepNestedTypeInfo2.name);
        Assert.strictEqual(deepNestedTypeInfo2.type, Baz);
        Assert.isUndefined(deepNestedTypeInfo2.typeVar);
    }
}
