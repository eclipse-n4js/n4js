/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/*
 * See Constraints 124.4 (Bindings)
 * @task IDEBUG-418
 */

//=============================================================================
// Set Up
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {Precondition} from "org/eclipse/n4js/mangelhaft/precondition/Precondition";
import {DIAsserts} from "runtime/n4/di/DIAsserts";
class A {
    public m() { return "A"; }
}

class B {
    public m() { return "B"; }
}

class ~SA {
    public m() { return "~SA"; }
}

class ~SA2 {
    public m() { return "~SA2"; }
}

//////////////////////// 1
@GenerateInjector
class DIC1 {
    @Inject a1: A;
    @Inject a2: ~A;
    @Inject sa1: SA;
    @Inject sa2: ~SA;
}

//////////////////////// 2
@Bind(SA, ~A)
@Binder class UseStructToDefStruct{}

@GenerateInjector
@UseBinder(UseStructToDefStruct)
class DIC2 {
    @Inject a: SA; // --> ~A => A
}

//////////////////////// 3
@Bind(~A, SA)
@Binder class DefStructToUseStruct{}

@GenerateInjector
@UseBinder(DefStructToUseStruct)
class DIC3 {
    @Inject a: ~A; // SA
}

//////////////////////// 4
@Bind(SA, SA2)
@Binder class StructToStruct{}

@GenerateInjector
@UseBinder(StructToStruct)
class DIC4 {
    @Inject sa: SA; // SA2
}

//////////////////////// 5
@Bind(~A, ~B)
@Binder class UseSiteStructToUseSiteStruct{}

@GenerateInjector
@UseBinder(UseSiteStructToUseSiteStruct)
class DIC5 {
    @Inject a1: ~A; // B
}

@GenerateInjector
@UseBinder(UseSiteStructToUseSiteStruct)
class DIC5a {
    @Inject a2: A; // A
}

//////////////////////// 6

@Binder
class UseSiteStructTypeProvider {
    @Provides
    provideA(b: B): ~A {
        return b;
    }
}

@GenerateInjector
@UseBinder(UseSiteStructTypeProvider)
class DIC6 {
    @Inject a: ~A; // B
}

@GenerateInjector
@UseBinder(UseSiteStructTypeProvider)
class DIC6a {
    @Inject a: A; // A
}

//============================================
// Test
//============================================

export public class FieldInjectionOfStructTypesWithImplicitBindings {

    @Test
    testFieldInjectionOfStructTypesWithImplicitBindings(): void {
        let dic = N4Injector.of(DIC1).create(DIC1);
        DIAsserts.equalsClassName(dic, "DIC1");
        Assert.equal(dic.a1.m(), "A");
        Assert.equal(dic.a2.m(), "A");
        Assert.equal(dic.sa1.m(), "~SA");
        Assert.equal(dic.sa2.m(), "~SA");
    }

    @Test
    testFieldInjectionOfStructTypesWithNominalType(): void {
        let dic = N4Injector.of(DIC2).create(DIC2);
        DIAsserts.equalsClassName(dic, "DIC2");
        Assert.equal(dic.a.m(), "A");
    }

    @Test
    testFieldInjectionOfUseSiteStructTypesWithDefSiteStructType(): void {
        let dic = N4Injector.of(DIC3).create(DIC3);
        DIAsserts.equalsClassName(dic, "DIC3");
        Assert.equal(dic.a.m(), "~SA");
    }

    @Test
    testFieldInjectionOfStructTypesWithStructType(): void {
        let dic = N4Injector.of(DIC4).create(DIC4);
        DIAsserts.equalsClassName(dic, "DIC4");
        Assert.equal(dic.sa.m(), "~SA2");
    }


    @Test
    testFieldInjectionOfUseSiteStructTypesWithUseSiteStructType(): void {
        let dic = N4Injector.of(DIC5).create(DIC5);
        DIAsserts.equalsClassName(dic, "DIC5");
        Assert.equal(dic.a1.m(), "B");
    }

    @Test
    @Ignore("IDEBUG-498")//IDE-1512 ignoring tests does not work
    testFieldInjectionOfUseSiteStructTypesWithUseSiteStructTypeCase2(): void {
        Precondition.ok(false, "IDEBUG-498");
        let dic = N4Injector.of(DIC5a).create(DIC5a);
        DIAsserts.equalsClassName(dic, "DIC5a");
        Assert.equal(dic.a2.m(), "A");
    }

    @Test
    testFieldInjectionWithUseSiteStructTypeProvider(): void {
        let dic = N4Injector.of(DIC6).create(DIC6);
        DIAsserts.equalsClassName(dic, "DIC6");
        Assert.equal(dic.a.m(), "B");
    }

    @Test
    @Ignore("IDEBUG-498")//IDE-1512 ignoring tests does not work
    testFieldInjectionWithUseSiteStructTypeProviderCase2(): void {
        Precondition.ok(false, "IDEBUG-498");
        let dic = N4Injector.of(DIC6a).create(DIC6a);
        DIAsserts.equalsClassName(dic, "DIC6a");
        Assert.equal(dic.a.m(), "A");
    }
}

