/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Set Up
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {DIAsserts} from "runtime/n4/di/DIAsserts";
class C {}
class B { @Inject c: C; }

class A {
    @Inject injector: N4Injector;
    @Inject pb: N4Provider<B>;
}

class D {
    @Inject injector: N4Injector;
}

@GenerateInjector
@WithParentInjector(DIC)
class SubDIC {
    @Inject injector: N4Injector;
}

@GenerateInjector
class DIC {
    @Inject injector: N4Injector;
    @Inject a: A;
    @Inject d: D;
}

//=============================================================================
// Test
//=============================================================================

/**
 * 11.2.1 DI Components and Injectors, Constraints 125 (InjectionPhase), 1. a) - c)
 * @testee N4Injector
 */
export public class TestRootObjectCreation {
    @Test
    testDICViaItsInjector() {
        let dic = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");
        DIAsserts.equalsClassName(dic.a, "A");
    }

    /**
     * @testee N4Injector#of
     */
    @Test
    testN4InjectorOfReturnsNewInstances() {
        Assert.notStrictEqual(N4Injector.of(DIC), N4Injector.of(DIC))
    }

    @Test
    testInjectorIsAPerDICSingleton() {
        let injector = N4Injector.of(DIC);
        let dic = injector.create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");
        Assert.strictEqual(injector, dic.injector)
        Assert.strictEqual(injector, dic.a.injector)
        Assert.strictEqual(dic.d.injector, dic.a.injector)
    }

    @Test
    testRootObjectViaDICInjector() {
        let injector = N4Injector.of(DIC);
        DIAsserts.equalsClassName(injector, "N4Injector");
        let b = injector.create(B);
        DIAsserts.equalsClassName(b, "B");
    }

    @Test
    testRootObjectViaProvider() {
        let dic = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");
        DIAsserts.equalsClassName(dic.a, "A");
        Assert.isNotNullOrUndefined(dic.a.pb);
        DIAsserts.equalsClassName(dic.a.pb.get(), "B");
    }

    @Test
    testRootObjectViaInjectedInjector() {
        let dic = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");
        DIAsserts.equalsClassName(dic.a, "A");
        DIAsserts.equalsClassName(dic.a.injector, "N4Injector");
        DIAsserts.equalsClassName(dic.a.injector.create(B), "B");
    }
}
