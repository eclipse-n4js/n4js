/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
import {InjectedClassMeta} from "n4js/lang/N4Injector"
import {getInjectedClassMeta} from "n4js/lang/N4Injector"
import {hasDIMeta} from "n4js/lang/N4Injector"

//=============================================================================
// Test Data
//=============================================================================

class Foo{}
class A{
    @Inject fieldFoo: Foo;
}
class B{
    @Inject
    constructor(ctorFoo: Foo){};
}

class B2{
    @Inject
    constructor(){};
}

class SC{}
class C extends SC{};

@Singleton
class S{}

//=============================================================================
// Tests
//=============================================================================

/**
 * DI meta info is generated when class has either injected field or injected ctor
 * or scope annotation.
 */
export class TestBasicDIMetaForClassWithSomeInjection{

    @Test
    hasSomeDiMetaForInjectedFields(){
        let ctor = A;
        Assert.isTrue(hasDIMeta(ctor));
        Assert.isNotUndefined(getInjectedClassMeta(ctor));
    }

    @Test
    hasSomeDiMetaForInjectedCtors(){
        let ctor = B;
        Assert.isTrue(hasDIMeta(ctor));
        Assert.isNotUndefined(getInjectedClassMeta(ctor));
    }

    @Test
    hasSomeDiMetaForScope(){
        let ctor = S;
        Assert.isTrue(hasDIMeta(ctor));
        let meta = getInjectedClassMeta(ctor);
        Assert.isNotUndefined(meta);
        Assert.isNotNullOrUndefined(meta.scope);
        Assert.equal(meta.scope, "Singleton");

    }

    @Test
    metaContainsLoadedTypesForFields(){
        let ctor = A;
        Assert.isTrue(hasDIMeta(ctor));
        let meta: InjectedClassMeta = getInjectedClassMeta(ctor);
        Assert.isNotUndefined(meta);
        Assert.isNotUndefined(meta.fieldsInjectedTypes);
        Assert.isTrue(meta.fieldsInjectedTypes.length > 0);
        let fieldInfo = meta.fieldsInjectedTypes[0]
        Assert.strictEqual(fieldInfo.type, Foo);
    }

    @Test
    metaContainsLoadedTypesForCtors(){
        let ctor = B;
        Assert.isTrue(getInjectedClassMeta(ctor));
        let meta: InjectedClassMeta = getInjectedClassMeta(ctor);
        Assert.isNotUndefined(meta);
        Assert.isNotUndefined(meta.injectCtorParams);
        Assert.greaterThan(meta.injectCtorParams.length, 0);
        let fieldInfo = meta.injectCtorParams[0]
        Assert.strictEqual(fieldInfo.type, Foo);
    }

    @Test
    metaContainsEmptyArrayForCtorsWithNoParams(){
        let ctor = B2;
        Assert.isTrue(getInjectedClassMeta(ctor));
        let meta: InjectedClassMeta = getInjectedClassMeta(ctor);
        Assert.isNotUndefined(meta);
        Assert.isNotUndefined(meta.injectCtorParams);
        Assert.equal(meta.injectCtorParams.length,0);
    }

    @Test
    metaContainsNameOfTheScopeForScopedClasses(){
        let ctor = S;
        Assert.isTrue(getInjectedClassMeta(ctor));
        let meta: InjectedClassMeta = getInjectedClassMeta(ctor);
        Assert.isNotUndefined(meta);
        Assert.isNotUndefined(meta.scope);
        Assert.equal(meta.scope, "Singleton");
    }

    @Test
    metaContainsSuperClassLoadedType(){
        let ctor = C;
        Assert.isTrue(getInjectedClassMeta(ctor));
        let meta: InjectedClassMeta = getInjectedClassMeta(ctor);
        Assert.isNotUndefined(meta);
        Assert.isNotUndefined(meta.superType);
        Assert.equal(meta.superType.n4type.name, SC.n4type.name);
    }
}
