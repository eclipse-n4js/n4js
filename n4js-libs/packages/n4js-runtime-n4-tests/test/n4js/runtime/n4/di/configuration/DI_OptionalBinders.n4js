/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================
import {DIConfigurationError} from "n4js/lang/N4Injector";
import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
@Binder
class B1{}
@Binder
class B2{}
@Binder
class B3{}

@GenerateInjector
@UseBinder(B1)
class DIC1{}

@GenerateInjector
class DIC2{}


@GenerateInjector
@UseBinder(B1)
@UseBinder(B2)
@UseBinder(B3)
class DIC3{}


@Binder
class Bx{
    constructor(x: any){ if(!x){throw "x was not defined"}}
}

@GenerateInjector
@UseBinder(Bx)
class DICX{}

//=============================================================================
// Tests
//=============================================================================

export class TestCreationWithParentInjector{

    @Test
    bindersInstancesArePassedToInjector(){
        let b1 = new B1();
        let dic1 = N4Injector.of(DIC1, null,b1);
        dic1;
    }

    @Test
    bindersInstancesCanBeSkipped(){
        let dic2 = N4Injector.of(DIC1);
        dic2;
    }

    @Test
    skippedBindersInstancesWillBeCreatedByInjectorOnTheFly(){
        let dic3 = N4Injector.of(DIC3, null, new B1(), new B3());
        dic3;
    }

    @Test
    notAllowedToPassInstancesOfUndeclaredBinders(){
        Assert.throws(()=>N4Injector.of(DIC1, null, new B1(), new B3()), DIConfigurationError, "DIConfigurationError: provided Binder instance is not of any expected type");
    }

    @Test
    whenBinderInstanceIsCreatedOnTheFlyNoParamsArePassedToCtor(){
        try{
            N4Injector.of(DICX);
        }catch(th){
            Assert.equal(th, "x was not defined");
            return;
        }
        throw new Error("should not reach");
    }
}

