/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Set Up
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {DIAsserts} from "runtime/n4/di/DIAsserts";
class X {
}

class A {
    @Inject xInA: X;
}
class A1 extends A {}
class A2 extends A1 {}
class B extends A2 {}

@GenerateInjector
export public class DIC {
    @Inject a: B;
}

//=============================================================================
// Test
//=============================================================================

/**
 * See N4JSSpec, 11.2.1 DI Components and Injectors, Constraints 125 (InjectionPhase), 3
 * and 11.2.3.1 Field Injection, Constraints 128 (Field Injection).
 * @task IDEBUG-400
 */
export public class FieldInjIndirectlyInheritedFieldsTest {

    @Test
    testFieldInjectionOfIndirectlyInheritedFields() {
        let dic = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");
        DIAsserts.equalsClassName(dic.a, "B");
        DIAsserts.equalsClassName(dic.a.xInA, "X");
    }
}
