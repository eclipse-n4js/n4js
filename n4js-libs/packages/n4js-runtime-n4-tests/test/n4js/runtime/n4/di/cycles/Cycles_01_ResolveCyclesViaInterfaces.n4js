/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Set Up
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
interface IFoo{}
interface IBar{}

class Foo implements IFoo{
    @Inject
    bar: IBar;
}

class Bar implements IBar{
    @Inject
    foo: IFoo;
}


@Binder
@Bind(IFoo, Foo)
@Bind(IBar, Bar)
class B{}

@GenerateInjector
@UseBinder(B)
class DIC {
    @Inject
    foo: Foo;
    @Inject
    bar: Bar;
}


//=============================================================================
// Test
//=============================================================================

/**
 * @testee N4Injector
 */
export class Cycles_01_ResolveCyclesViaInterfaces {

    private dic: DIC = N4Injector.of(DIC).create(DIC);

    @Test
    instancesCreatedInOneInjecitonChainAreTheSame() {
        Assert.isInstanceOf(this.dic.foo, Foo);
        Assert.isInstanceOf(this.dic.foo.bar, Bar);
        Assert.strictEqual(this.dic.foo, (this.dic.foo.bar as Bar).foo);

        Assert.isInstanceOf(this.dic.bar, Bar);
        Assert.isInstanceOf(this.dic.bar.foo, Foo);
        Assert.strictEqual(this.dic.bar, (this.dic.bar.foo as Foo).bar);
    }

    @Test
    instancesCreatedInDifferentInjecitonChainsAreDifferent() {
        Assert.notStrictEqual(this.dic.foo, this.dic.bar.foo)
        Assert.notStrictEqual(this.dic.bar, this.dic.foo.bar)
    }

    @Test
    instancesCreatedInDifferentInjectionPhasesAreDifferent() {
        let inj = N4Injector.of(DIC);
        let dic1 = inj.create(DIC);
        let dic2 = inj.create(DIC);

        Assert.notStrictEqual(dic1.foo, dic2.foo)
        Assert.notStrictEqual(dic1.bar, dic2.bar)
    }
}

