/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {DIConfigurationError} from "n4js/lang/N4Injector";
import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
@GenerateInjector
class SomeDic{}

@GenerateInjector
class A {}

@GenerateInjector
@WithParentInjector(A)
class B {}

@GenerateInjector
@WithParentInjector(B)
class C {}

@GenerateInjector
@WithParentInjector(C)
class D {}

@GenerateInjector
@WithParentInjector(A)
class B2 {}

@GenerateInjector
@WithParentInjector(B2)
class C2 {}

@GenerateInjector
@WithParentInjector(C2)
class D2 {}

@GenerateInjector
@WithParentInjector(A)
class X {}

@GenerateInjector
@WithParentInjector(C)
class Y {}

//=============================================================================
// Tests
//=============================================================================

export class TestCreationWithParentInjector{

    @Test
    canCreateWithInjectorOfDirectlyDeclaredParent(){
        let injectorA = N4Injector.of(A);
        let injectorX = N4Injector.of(X, injectorA);
        injectorX;
    }

    @Test
    canCreateWithInjectorOfDeclaredParentChildren_X(){
        let injectorA = N4Injector.of(A);
        let injectorB = N4Injector.of(B, injectorA);
        let injectorC = N4Injector.of(C, injectorB);
        let injectorD = N4Injector.of(D, injectorC);
        let injectorB2 = N4Injector.of(B2, injectorA);
        let injectorC2 = N4Injector.of(C2, injectorB2);
        let injectorD2 = N4Injector.of(D2, injectorC2);

        Assert.isInstanceOf(N4Injector.of(X, injectorD).create(X), X);
        Assert.isInstanceOf(N4Injector.of(X, injectorD2).create(X), X);
    }

    @Test
    canCreateWithInjectorOfDeclaredParentChildren_Y(){
        let injectorA = N4Injector.of(A);
        let injectorB = N4Injector.of(B, injectorA);
        let injectorC = N4Injector.of(C, injectorB);
        let injectorD = N4Injector.of(D, injectorC);

        Assert.isInstanceOf(N4Injector.of(Y, injectorC).create(Y), Y);
        Assert.isInstanceOf(N4Injector.of(Y, injectorD).create(Y), Y);
    }

    @Test
    canNotCreateWithIncomaptibleInjector(){
        let injectorA = N4Injector.of(A);
        let injectorB2 = N4Injector.of(B2, injectorA);
        let injectorC2 = N4Injector.of(C2, injectorB2);
        let injectorD2 = N4Injector.of(D2, injectorC2);

        Assert.throws(()=> N4Injector.of(Y, injectorB2), DIConfigurationError);
        Assert.throws(()=> N4Injector.of(Y, injectorC2), DIConfigurationError);
        Assert.throws(()=> N4Injector.of(Y, injectorD2), DIConfigurationError);
    }
}

