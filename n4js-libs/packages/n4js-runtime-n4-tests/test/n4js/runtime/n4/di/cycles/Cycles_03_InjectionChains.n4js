/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {N4Injector} from "n4js/lang/N4Injector"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"

//=============================================================================
// Set Up
//=============================================================================

interface IFoo{}
interface IBar{}

class Foo implements IFoo{
    @Inject bar: IBar;
}

class Bar implements IBar{
    @Inject foo1: IFoo;
    @Inject foo2: IFoo;
}


@Binder
@Bind(IFoo, Foo)
@Bind(IBar, Bar)
class B{}

@GenerateInjector
@UseBinder(B)
class DIC {
    @Inject
    foo: Foo;
    @Inject
    bar: Bar;
}

//=============================================================================
// Test
//=============================================================================

/**
 * Similar as in Guice, automatic cycle resolution is context depended.
 * These tests show how what developer should be aware of.
 *
 * @testee N4Injector
 */
export class Cycles_03_InjectionChains {

    private dic: DIC = N4Injector.of(DIC).create(DIC);

    /**
     * Cycle: Foo->Bar->Foo
     */
    @Test
    cyclicLinksAreResolvedAsSingletonsInCycle() {
        let foo =  N4Injector.of(DIC).create(IFoo) as Foo;
        Assert.strictEqual((foo.bar as Bar).foo1, (foo.bar as Bar).foo2)
    }

    /**
     * Cycle1: Bar->Foo1->Bar
     * Cycle2: Bar->Foo2->Bar
     */
    @Test
    cyclicLinksAreNotSingletonsAcrossCycles() {
        let bar =  N4Injector.of(DIC).create(IBar) as Bar;
        Assert.notStrictEqual(bar.foo1, bar.foo2)
        Assert.strictEqual((bar.foo1 as Foo).bar, (bar.foo2 as Foo).bar)
    }
}

