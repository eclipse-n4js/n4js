/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
import {Precondition} from "org/eclipse/n4js/mangelhaft/precondition/Precondition"
import {N4Injector} from "n4js/lang/N4Injector"
import {DIUnsatisfiedBindingError} from "n4js/lang/N4Injector"

//=============================================================================
// Set Up
//=============================================================================

interface IA{}

@GenerateInjector
class DIC {
    @Inject a: IA;
}

abstract class AA{}

@GenerateInjector
class DIC2 {
    @Inject a: AA;
}


//=============================================================================
// Test
//=============================================================================

/**
 * See N4JSSpec, 11.2.2 Binders and Bindings, Constraints 126 (Bindings), 5.
 * @task IDEBUG-461
 */
export public class SimpleFieldInjection {

    @Test
    testInjectoinInterfaceThrows() {
        Assert.throws(()=>{N4Injector.of(DIC).create(DIC)}, DIUnsatisfiedBindingError);

    }

    /**
     * Due to IDEBUG-541 N4Inejctor is creating instances of the abstract classes;
     */
    @Test
    testInjectingAbstractClassThrows() {
        Precondition.fail("N4Inejctor is creating abstract class");
        Assert.throws(()=>{N4Injector.of(DIC2).create(DIC2)}, DIUnsatisfiedBindingError);

    }
}
