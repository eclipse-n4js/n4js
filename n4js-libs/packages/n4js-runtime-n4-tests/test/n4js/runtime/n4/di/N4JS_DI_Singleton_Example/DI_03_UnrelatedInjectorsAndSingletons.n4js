/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
import {N4Injector} from "n4js/lang/N4Injector"

//=============================================================================
// Test Data
//=============================================================================

@Singleton
class S {}

@GenerateInjector
class C {
    @Inject
    private s: S;
    getS() { return this.s; }
}

@GenerateInjector
class D {
    @Inject
    private s: S;
    getS() { return this.s; }
}

//=============================================================================
// Tests
//=============================================================================

/**
 * Injectors are not Singletons.
 * Singletons have one instance per Injector.
 * There are no Singleton objects that have only one instance,
 * a.k.a. "System Singletons".
 */
export class TestUnrelatedInjectors{

    @Test
    multipleInjectorsOfTheSameDICAreDifferentInstances(){
        let injC1 = N4Injector.of(C);
        let injC2 = N4Injector.of(C);

        Assert.isInstanceOf(injC1, N4Injector);
        Assert.isInstanceOf(injC2, N4Injector);
        Assert.notStrictEqual(injC1, injC2)
    }

    @Test
    multipleInjectorsOfTheSameDICProduceDifferentSingletons(){
        let c1 = N4Injector.of(C).create(C);
        let c2 = N4Injector.of(C).create(C);

        Assert.isInstanceOf(c1, C);
        Assert.isInstanceOf(c2, C);
        Assert.notStrictEqual(c1, c2)

        Assert.isInstanceOf(c1.s, S);
        Assert.isInstanceOf(c2.s, S);
        Assert.notStrictEqual(c1.s, c2.s);
    }

    @Test
    injectorsOfDifferentDICProduceDifferentSingletons(){
        let c = N4Injector.of(C).create(C);
        let d = N4Injector.of(D).create(D);

        Assert.isInstanceOf(c, C);
        Assert.isInstanceOf(d, D);

        Assert.isInstanceOf(c.s, S);
        Assert.isInstanceOf(d.s, S);
        Assert.notStrictEqual(c.s, d.s);
    }
}
