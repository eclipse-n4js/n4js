/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
import {InjectedClassMeta} from "n4js/lang/N4Injector"
import {getInjectedClassMeta} from "n4js/lang/N4Injector"

//=============================================================================
// Test Data
//=============================================================================

class A{}
class B{
    constructor(a: A, b: B){}
}
class C{
    @Inject
    constructor(){}
}
class D{
    @Inject
    constructor(a: A, b: B){}
}
class E extends D{}

//=============================================================================
// Tests
//=============================================================================
/**
 * DI hooks for constructor are generated only for classes with owned
 * injected constructor. If constructor has non empty list of formal parameters than
 * information those parameters will be in the array, otherwise empty array.
 */
export class TestDiMetaForCostructors{

    @Test
    classNoConstructor(){
        let meta: InjectedClassMeta = getInjectedClassMeta(A);
        Assert.isUndefined(meta)
    }

    @Test
    classNotInjectedConstructor(){
        let meta: InjectedClassMeta = getInjectedClassMeta(B);
        Assert.isUndefined(meta)
    }

    @Test
    classInjectedConstructorNoParams(){
        let meta: InjectedClassMeta = getInjectedClassMeta(C);
        Assert.isNotUndefined(meta.injectCtorParams)
        Assert.equal(meta.injectCtorParams.length, 0)
    }

    @Test
    classInjectedConstructorWithParams(){
        let meta: InjectedClassMeta = getInjectedClassMeta(D);
        Assert.isNotUndefined(meta.injectCtorParams)
        Assert.equal(meta.injectCtorParams.length, 2)
    }

    @Test
    classInheritedInejctedCtor(){
        let meta: InjectedClassMeta = getInjectedClassMeta(E);
        Assert.isUndefined(meta.injectCtorParams)
    }
}
