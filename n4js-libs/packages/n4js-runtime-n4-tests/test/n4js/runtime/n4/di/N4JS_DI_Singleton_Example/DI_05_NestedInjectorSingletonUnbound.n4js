/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
@Singleton
class S {}

@GenerateInjector
class A { @Inject s: S; }

@GenerateInjector
@WithParentInjector(A)
class B { @Inject s: S; }

@GenerateInjector
@WithParentInjector(B)
class C { @Inject s: S; }

@GenerateInjector
@WithParentInjector(C)
class D { @Inject s: S;}

//=============================================================================
// Tests
//=============================================================================

/**
 * Child-Parent relation forces children to check parents bindings.
 * Since there is no binding in injector chain, each injector creates own instance.
 * Result is that each injector has its own singleton instance.
 *
 * If we would change that we would run into undefined behavior.
 * Assume that you expect all injectors to have same instance.
 * We make children ask parent if there is singleton instance available, before
 * creating our own instance. This works when each injector is asked for singleton instance
 * accordingly to ancestor-descendant order.
 * If you would ask descendant first it would create its own singleton instance.
 * But then asking ancestor is a problem, as ancestor has no knowledge about state
 * (or existence) of descendant, thus ancestor creates its own instance.
 * As a result you can have one instance or multiple instances of the singleton, depending on
 * order of calls.
 *
 * This could be mitigated if Singletons would be created eagerly, but that
 * adds more undefined behavior and/or limits lazy initialization of instances.
 *
 * Other approach would be if always root would create and hold instance of the singleton.
 * But that means that child injector can mutate parent injector, which in turn can affect
 * other child of the parent. (E.g. a parent loads a child, child mutates parent(!),
 * parent loads other child, other has singleton created for previous child).
 */
export class TestNestedInjectorsNoSingletonBinding{

    @Test
    childrenHaveDifferentSingletons(){
        let aInj = N4Injector.of(A);
        let bInj = N4Injector.of(B, aInj);
        let cInj = N4Injector.of(C, bInj);
        let dInj = N4Injector.of(D, cInj);

        let a: A = aInj.create(A);
        Assert.isInstanceOf(a.s, S);

        let b: B = bInj.create(B);
        Assert.isInstanceOf(b.s, S);

        let c: C = cInj.create(C);
        Assert.isInstanceOf(c.s, S);

        let d: D = dInj.create(D);
        Assert.isInstanceOf(d.s, S);

        Assert.strictEqual(a.s, b.s);
        Assert.strictEqual(b.s, c.s);
        Assert.strictEqual(c.s, d.s);
    }

    @Test
    childrenHaveDifferentSingletonsRegardlesOfCreationOrder(){
        let aInj = N4Injector.of(A);
        let bInj = N4Injector.of(B, aInj);
        let cInj = N4Injector.of(C, bInj);
        let dInj = N4Injector.of(D, cInj);

        let b: B = bInj.create(B);
        Assert.isInstanceOf(b.s, S);

        let c: C = cInj.create(C);
        Assert.isInstanceOf(c.s, S);

        let d: D = dInj.create(D);
        Assert.isInstanceOf(d.s, S);

        let a: A = aInj.create(A);
        Assert.isInstanceOf(a.s, S);

        Assert.strictEqual(a.s, b.s);
        Assert.strictEqual(b.s, c.s);
        Assert.strictEqual(c.s, d.s);
    }
}

