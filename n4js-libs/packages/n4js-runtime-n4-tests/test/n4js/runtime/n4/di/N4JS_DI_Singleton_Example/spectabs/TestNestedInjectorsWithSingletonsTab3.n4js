/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
interface J {}
@Singleton
class U implements J {}
@Singleton
class V extends U {}

@Bind(J, U)
@Binder
class BinderJ2U {}

@Bind(J, V)
@Binder
class BinderJ2V {}

@GenerateInjector
@UseBinder(BinderJ2U)
class C {
    @Inject j: J;
    @Inject u: U;
    @Inject v: V;
}

@GenerateInjector
@WithParentInjector(C)
class D {
    @Inject j: J;
    @Inject u: U;
    @Inject v: V;
}

@GenerateInjector
@WithParentInjector(D)
class E {
    @Inject j: J;
    @Inject u: U;
    @Inject v: V;
}

@GenerateInjector
@WithParentInjector(E)
@UseBinder(BinderJ2V)
class F {
    @Inject j: J;
    @Inject u: U;
    @Inject v: V;
}

@GenerateInjector
@WithParentInjector(F)
class G {
    @Inject j: J;
    @Inject u: U;
    @Inject v: V;
}

//=============================================================================
// Tests
//=============================================================================

/**
 * See N4JSSpec, 11.2.5.3 SingletonScope, Tab.3
 */
export class TestNestedInjectorsWithSingletonsTab3{
    private c: C;
    private d: D;
    private e: E;
    private f: F;
    private g: G;

    @BeforeAll
    m(){
        let cInj = N4Injector.of(C);
        let dInj = N4Injector.of(D, cInj);
        let eInj = N4Injector.of(E, dInj);
        let fInj = N4Injector.of(F, eInj);
        let gInj = N4Injector.of(G, fInj);

        this.c = cInj.create(C);
        this.d = dInj.create(D);
        this.e = eInj.create(E);
        this.f = fInj.create(F);
        this.g = gInj.create(G);
    }

//-------------
//row checks
//-------------

    @Test
    j_IsInstanceof_U_in_CDE(){
        Assert.isInstanceOf(this.c.j, U);
        Assert.isInstanceOf(this.d.j, U);
        Assert.isInstanceOf(this.e.j, U);
    }

    @Test
    j_IsTheSameInstance_in_CDE(){
        Assert.strictEqual(this.c.j, this.d.j);
        Assert.strictEqual(this.d.j, this.e.j);
    }

    @Test
    j_IsInstanceof_V_in_FG(){
        Assert.isInstanceOf(this.f.j, V);
        Assert.isInstanceOf(this.g.j, V);
    }

    @Test
    j_IsTheSameInstance_in_FG(){
        Assert.strictEqual(this.f.j, this.g.j);
    }

    @Test
    u_IsInstanceof_U_in_CDEFG(){
        Assert.isInstanceOf(this.c.u, U);
        Assert.isInstanceOf(this.d.u, U);
        Assert.isInstanceOf(this.e.u, U);
        Assert.isInstanceOf(this.f.u, U);
        Assert.isInstanceOf(this.g.u, U);
    }

    @Test
    u_IsTheSameInstance_in_CDEFG(){
        Assert.strictEqual(this.c.u, this.d.u);
        Assert.strictEqual(this.d.u, this.e.u);
        Assert.strictEqual(this.e.u, this.f.u);
        Assert.strictEqual(this.f.u, this.g.u);
    }

    @Test
    v_IsInstanceof_V_in_CDEFG(){
        Assert.isInstanceOf(this.c.v, V);
        Assert.isInstanceOf(this.d.v, V);
        Assert.isInstanceOf(this.e.v, V);
        Assert.isInstanceOf(this.f.v, V);
        Assert.isInstanceOf(this.g.v, V);
    }

    @Test
    v_IsTheSameInstance_in_CDE(){
        Assert.strictEqual(this.c.v, this.d.v);
        Assert.strictEqual(this.d.v, this.e.v);
    }

    @Test
    v_IsTheSameInstance_in_FG(){
        Assert.strictEqual(this.f.v, this.g.v);
    }

    @Test
    v_In_CDE_isNotTheSameInstanceAsIn_FG(){
        Assert.notStrictEqual(this.c.v, this.f.v);
    }

//-------------
//column checks
//-------------

    @Test
    ju_AreTheSameInstanceIn_C(){
        Assert.strictEqual(this.c.j, this.c.u);
    }

    @Test
    ju_AreTheSameInstanceIn_D(){
        Assert.strictEqual(this.d.j, this.d.u);
    }

    @Test
    ju_AreTheSameInstanceIn_E(){
        Assert.strictEqual(this.e.j, this.e.u);
    }
    @Test
    jv_AreTheSameInstanceIn_F(){
        Assert.strictEqual(this.f.j, this.f.v);
    }

    @Test
    jv_AreTheSameInstanceIn_G(){
        Assert.strictEqual(this.g.j, this.g.v);
    }

}
