/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Set Up
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
import {DIAsserts} from "runtime/n4/di/DIAsserts";
interface IS {}
@Singleton class S implements IS {}
class Sub extends S {}

@GenerateInjector
class DIC {
    @Inject s1: S;
    @Inject s2: S;
    @Inject sub1: Sub;
    @Inject sub2: Sub;
}

@Binder @Bind(IS, S) class Binder2 {}

@GenerateInjector
@UseBinder(Binder2)
class DIC2{
    @Inject s1: S;
    @Inject s2: S;
    @Inject is1: IS;
    @Inject is2: IS;
}


@GenerateInjector
@UseBinder(Binder2)
@WithParentInjector(DIC2)
class DIC2SubWithBinding {
    @Inject is1: IS;
}

@GenerateInjector
@WithParentInjector(DIC2)
class DIC2Sub {
    @Inject is1: IS;
}

//=============================================================================
// Test
//=============================================================================

/**
 * @testee N4Injector
 */
export public class TestSingletonDIScope {

    @Test
    testSimpleSingleton() {
        let dic = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");

        DIAsserts.equalsClassName(dic.s1, "S");
        Assert.strictEqual(dic.s1, dic.s2);
    }

    @Test
    testSimpleSingletonPerInjector() {
        let dic1 = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic1, "DIC");
        let dic2 = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic2, "DIC");

        Assert.strictEqual(dic1.s1, dic1.s2);
        Assert.strictEqual(dic2.s1, dic2.s2);
        Assert.notStrictEqual(dic1.s1, dic2.s2);
    }

    @Test
    testSingletonWithInhertedSingletons() {
        let dic = N4Injector.of(DIC).create(DIC);
        DIAsserts.equalsClassName(dic, "DIC");

        DIAsserts.equalsClassName(dic.sub1, "Sub");
        DIAsserts.equalsClassName(dic.sub2, "Sub");
        Assert.notStrictEqual(dic.sub1, dic.sub2);
    }

    @Test
    testBindToSingleton() {
        let dic = N4Injector.of(DIC2).create(DIC2);
        DIAsserts.equalsClassName(dic, "DIC2");

        DIAsserts.equalsClassName(dic.s1, "S");
        Assert.strictEqual(dic.s1, dic.s2);
        DIAsserts.equalsClassName(dic.is1, "S");
        Assert.strictEqual(dic.is1, dic.is2);
        Assert.strictEqual(dic.is1, dic.s2);
    }

    @Test
    testParentChildInjectorAndSingleton() {
        let injector = N4Injector.of(DIC2);
        let dic = injector.create(DIC2);
        let dicOther = N4Injector.of(DIC2).create(DIC2);
        let dicSub = N4Injector.of(DIC2Sub, injector).create(DIC2Sub);

        Assert.strictEqual(dic.s1, dic.is2);
        Assert.strictEqual(dicSub.is1, dic.s2);
        Assert.notStrictEqual(dicSub.is1, dicOther.s2);
    }

    @Test
    testParentChildInjectorAndSingletonButExplicitBinding() {
        let injector = N4Injector.of(DIC2);
        let dic = injector.create(DIC2);
        let dicSub = N4Injector.of(DIC2SubWithBinding, injector).create(DIC2SubWithBinding);

        Assert.strictEqual(dic.s1, dic.is2);
        Assert.notStrictEqual(dicSub.is1, dic.s2);
    }
}
