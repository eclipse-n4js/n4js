/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {N4Injector} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
interface SI {}
@Singleton
class S implements SI {}

@Bind(SI, S)
@Binder
class Binder {}

@GenerateInjector
@UseBinder(Binder)
class A { @Inject s: SI; }

@GenerateInjector
@WithParentInjector(A)
class B { @Inject s: SI; }

@GenerateInjector
@WithParentInjector(B)
class C { @Inject s: SI; }

@GenerateInjector
@WithParentInjector(C)
class D { @Inject s: SI;}


//=============================================================================
// Tests
//=============================================================================

/**
 * Child-Parent relation forces children to check parents bindings.
 * Parent having a binding makes all children use object created by their parent
 * as they have no owned binding.
 * Result is that singleton created by the parent is used by all children.
 */
export class TestNestedInjectorsWithBindingInTheParent{

    @Test
    childrenHaveParentCreatedSingleton(){
        let aInj = N4Injector.of(A);
        let bInj = N4Injector.of(B, aInj);
        let cInj = N4Injector.of(C, bInj);
        let dInj = N4Injector.of(D, cInj);

        let a: A = aInj.create(A);
        Assert.isInstanceOf(a.s, S);

        let b: B = bInj.create(B);
        Assert.isInstanceOf(b.s, S);

        let c: C = cInj.create(C);
        Assert.isInstanceOf(c.s, S);

        let d: D = dInj.create(D);
        Assert.isInstanceOf(d.s, S);

        Assert.strictEqual(a.s, b.s);
        Assert.strictEqual(b.s, c.s);
        Assert.strictEqual(c.s, d.s);
    }

    @Test
    childrenHaveParentCreatedSingletonRegardlesOfCreationOrder(){
        let aInj = N4Injector.of(A);
        let bInj = N4Injector.of(B, aInj);
        let cInj = N4Injector.of(C, bInj);
        let dInj = N4Injector.of(D, cInj);

        let b: B = bInj.create(B);
        Assert.isInstanceOf(b.s, S);

        let d: D = dInj.create(D);
        Assert.isInstanceOf(d.s, S);

        let a: A = aInj.create(A);
        Assert.isInstanceOf(a.s, S);

        let c: C = cInj.create(C);
        Assert.isInstanceOf(c.s, S);

        Assert.strictEqual(a.s, b.s);
        Assert.strictEqual(b.s, c.s);
        Assert.strictEqual(c.s, d.s);
    }
}

