/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {getDIComponentMeta} from "n4js/lang/N4Injector";
import {hasDIMeta} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
@GenerateInjector
class DIC1{}


@GenerateInjector
@WithParentInjector(DIC1)
class DIC2{}


@Binder
class B1{}
@Binder
class B2{}
@Binder
class B3{}


@GenerateInjector
@UseBinder(B1)
@UseBinder(B3)
class DIC3{}


@GenerateInjector
@UseBinder(B2)
@WithParentInjector(DIC1)
class DIC4{}


@GenerateInjector
@UseBinder(B2)
@WithParentInjector(DIC3)
class DIC5{}

@GenerateInjector
@UseBinder(B1)
@UseBinder(B2)
@UseBinder(B3)
@WithParentInjector(DIC3)
class DIC6{}


//=============================================================================
// Tests
//=============================================================================


/**
 * DI meta info is generated when class has either injected field or injected ctor
 * or scope annotation.
 */
export class TestBasicDIMetaForClassWithSomeInjection{

    @Test
    diComponentsHaveDIMeta(){
        let ctor = DIC1;
        Assert.isTrue(hasDIMeta(ctor));
        Assert.isNotUndefined(getDIComponentMeta(ctor));
    }

    @Test
    metaParentTypeForDICWithParent(){
        let ctor = DIC2;
        Assert.isTrue(hasDIMeta(ctor));
        let meta = getDIComponentMeta(ctor);
        let parent = meta.parent;
        Assert.isNotNullOrUndefined(parent);
        Assert.strictEqual(parent, DIC1);
    }

    @Test
    metaHasBindersInfoForDICWithBinders(){
        let ctor = DIC3;
        Assert.isTrue(hasDIMeta(ctor));
        let meta = getDIComponentMeta(ctor);
        let binders = meta.binders;
        Assert.isNotNullOrUndefined(binders);
        Assert.equal(typeof binders, typeof []);
        Assert.equal(binders.length, 2);
        Assert.strictEqual(binders[0], B1);
        Assert.strictEqual(binders[1], B3);
    }

    @Test
    metaHasBindersInfoForDICWithBindersAndParent(){
        let ctor = DIC4;
        Assert.isTrue(hasDIMeta(ctor));
        let meta = getDIComponentMeta(ctor);
        let parent = meta.parent;
        Assert.isNotNullOrUndefined(parent);
        Assert.strictEqual(parent, DIC1);
        let binders = meta.binders;
        Assert.isNotNullOrUndefined(binders);
        Assert.equal(typeof binders, typeof []);
        Assert.equal(binders.length, 1);
        Assert.strictEqual(binders[0], B2);
    }

    @Test
    metaHasOwnedBindersOnly(){
        let ctor = DIC5;
        Assert.isTrue(hasDIMeta(ctor));
        let meta = getDIComponentMeta(ctor);
        let parent = meta.parent;
        Assert.isNotNullOrUndefined(parent);
        Assert.strictEqual(parent, DIC3);
        let binders = meta.binders;
        Assert.isNotNullOrUndefined(binders);
        Assert.equal(typeof binders, typeof []);
        Assert.equal(binders.length, 1);
        Assert.strictEqual(binders[0], B2);
    }

    @Test
    metaHasOwnedBinders(){
        let ctor = DIC6;
        Assert.isTrue(hasDIMeta(ctor));
        let meta = getDIComponentMeta(ctor);
        let parent = meta.parent;
        Assert.isNotNullOrUndefined(parent);
        Assert.strictEqual(parent, DIC3);
        let binders = meta.binders;
        Assert.isNotNullOrUndefined(binders);
        Assert.equal(typeof binders, typeof []);
        Assert.equal(binders.length, 3);
        Assert.strictEqual(binders[0], B1);
        Assert.strictEqual(binders[1], B2);
        Assert.strictEqual(binders[2], B3);
    }
}

