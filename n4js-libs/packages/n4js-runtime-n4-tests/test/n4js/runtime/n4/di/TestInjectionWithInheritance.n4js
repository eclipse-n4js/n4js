/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {N4Injector} from "n4js/lang/N4Injector"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
//=============================================================================
// Test Data
//=============================================================================
class Foo {}
class Bar{}
class Baz{}


class T{
    @Inject
    public foo: Foo;
    @Inject
    private bar: Bar;
}
class S extends T{
    @Inject
    @Override
    public foo: Foo;
    private baz: Baz;
    @Inject
    constructor(baz: Baz){
        this.baz = baz;
    }
}

class X extends S{}

@GenerateInjector
class DIC{
    @Inject
    x: X;
}

//=============================================================================
// Tests
//=============================================================================
export class TestInjectionWithInheritance{
    private dic = N4Injector.of(DIC).create(DIC);

    @Test
    hasFieldsFormInheritedInjectedCtor(){
        Assert.isNotNullOrUndefined(this.dic.x.baz);
        Assert.isInstanceOf(this.dic.x.baz, Baz)
    }
    @Test
    hasInheritedOverridenFields(){
        Assert.isNotNullOrUndefined(this.dic.x.foo);
        Assert.isInstanceOf(this.dic.x.foo, Foo)
    }
    @Test
    hasSupertypePrivateFields(){
        Assert.isNotNullOrUndefined(this.dic.x.bar);
        Assert.isInstanceOf(this.dic.x.bar, Bar)
    }
}

