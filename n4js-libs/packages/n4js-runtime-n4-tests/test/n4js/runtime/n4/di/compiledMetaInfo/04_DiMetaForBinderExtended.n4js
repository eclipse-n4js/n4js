/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

//=============================================================================
// Test Data
//=============================================================================

import {InjectedClassMeta} from "n4js/lang/N4Injector";
import {getInjectedClassMeta} from "n4js/lang/N4Injector";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";
class Foo{}
class Bar{}
class Baz{}

@Binder
class B{
    @Inject fieldFoo: Foo;
    @Inject fieldPB: N4Provider<Bar>;
    @Inject fieldPPB: N4Provider<N4Provider<Baz>>;

    @Inject
    constructor(ctorFoo: Foo, ctorPB: N4Provider<Bar>, ctorPPB: N4Provider<N4Provider<Baz>>){}
}


//=============================================================================
// Tests
//=============================================================================
/**
 * It is possible to inject into binder and to create its injected instance with
 * the Injector.
 */
export class TestDIMetaForBinderWithInjection{

    private meta: InjectedClassMeta = getInjectedClassMeta(B);

    @Test
    hasMetaForAllInjectedFields(){
        Assert.equal(this.meta.fieldsInjectedTypes.length, 3);
    }

    @Test
    simpleMetaForInjectedField(){
        let fieldInfo = this.meta.fieldsInjectedTypes[0];
        Assert.isNotNullOrUndefined(fieldInfo);
        Assert.strictEqual(fieldInfo.type, Foo);
        Assert.equal(fieldInfo.name, "fieldFoo");
        Assert.isUndefined(fieldInfo.typeVar);
    }

    @Test
    nestedMetaForInjectedProviderField(){
        let fieldInfo = this.meta.fieldsInjectedTypes[1];
        Assert.isNotNullOrUndefined(fieldInfo);
        Assert.strictEqual(fieldInfo.type, N4Provider);
        Assert.equal(fieldInfo.name, "fieldPB");
        Assert.isNotUndefined(fieldInfo.typeVar);

        let nestedTypeInfo = fieldInfo.typeVar;
        Assert.isUndefined(nestedTypeInfo.name);
        Assert.strictEqual(nestedTypeInfo.type, Bar);
        Assert.isUndefined(nestedTypeInfo.typeVar);
    }

    @Test
    multilevelNestedMetaForNestedProviderField(){
        let fieldInfo = this.meta.fieldsInjectedTypes[2];
        Assert.isNotNullOrUndefined(fieldInfo);
        Assert.strictEqual(fieldInfo.type, N4Provider);
        Assert.equal(fieldInfo.name, "fieldPPB");
        Assert.isNotUndefined(fieldInfo.typeVar);

        let nestedTypeInfo = fieldInfo.typeVar;
        Assert.isUndefined(nestedTypeInfo.name);
        Assert.strictEqual(nestedTypeInfo.type, N4Provider);
        Assert.isNotUndefined(nestedTypeInfo.typeVar);

        let deepNestedTypeInfo = nestedTypeInfo.typeVar;
        Assert.isUndefined(deepNestedTypeInfo.name);
        Assert.strictEqual(deepNestedTypeInfo.type, Baz);
        Assert.isUndefined(deepNestedTypeInfo.typeVar);
    }

    @Test
    hasMetaForAllInjectedCtorParams(){
        Assert.equal(this.meta.injectCtorParams.length, 3);
    }

    @Test
    simpleMetaForInjectedCtorParam(){
        let fieldInfo = this.meta.injectCtorParams[0];
        Assert.isNotNullOrUndefined(fieldInfo);
        Assert.strictEqual(fieldInfo.type, Foo);
        Assert.equal(fieldInfo.name, "ctorFoo");
        Assert.isUndefined(fieldInfo.typeVar);
    }

    @Test
    nestedMetaForInjectedProviderCtorParam(){
        let fieldInfo = this.meta.injectCtorParams[1];
        Assert.isNotNullOrUndefined(fieldInfo);
        Assert.strictEqual(fieldInfo.type, N4Provider);
        Assert.equal(fieldInfo.name, "ctorPB");
        Assert.isNotUndefined(fieldInfo.typeVar);

        let nestedTypeInfo = fieldInfo.typeVar;
        Assert.isUndefined(nestedTypeInfo.name);
        Assert.strictEqual(nestedTypeInfo.type, Bar);
        Assert.isUndefined(nestedTypeInfo.typeVar);
    }

    @Test
    multilevelNestedMetaForNestedProviderCtorParam(){
        let fieldInfo = this.meta.injectCtorParams[2];
        Assert.isNotNullOrUndefined(fieldInfo);
        Assert.strictEqual(fieldInfo.type, N4Provider);
        Assert.equal(fieldInfo.name, "ctorPPB");
        Assert.isNotUndefined(fieldInfo.typeVar);

        let nestedTypeInfo = fieldInfo.typeVar;
        Assert.isUndefined(nestedTypeInfo.name);
        Assert.strictEqual(nestedTypeInfo.type, N4Provider);
        Assert.isNotUndefined(nestedTypeInfo.typeVar);

        let deepNestedTypeInfo = nestedTypeInfo.typeVar;
        Assert.isUndefined(deepNestedTypeInfo.name);
        Assert.strictEqual(deepNestedTypeInfo.type, Baz);
        Assert.isUndefined(deepNestedTypeInfo.typeVar);
    }

}
