/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

let time = 1;
let err = new Error();

export public class TestPromisifiable {
    @Test
    public async test_1() {
        @Promisifiable //Callback w/o any params
        function fn(time: int, callback: {function()}) {
            setTimeout(() => {
                callback();
            }, time);
        }

        let args: int,
            ok: boolean,
            promisedFn = @Promisify fn(time);

        Assert.isInstanceOf(promisedFn, Promise);

        await promisedFn.then(() => {
            args = arguments.length;
            ok = true;
        });

        Assert.equal(args, 0);
        Assert.isTrue(ok);
    }

    @Test
    public async test_2() {
        @Promisifiable //Callback w/ only Error
        function fn(time: int, callback: {function(err: Error)}) {
            setTimeout(() => {
                callback(err);
            }, time);
        }
        let arg,
            promisedFn = @Promisify fn(time);

        await promisedFn.catch((rej=) => {
            arg = rej;
        });

        Assert.equal(arg, err);
    }

    @Test
    public async test_3() {
        @Promisifiable //Callback w/o Error
        function fn(time: int, callback: {function(val: any)}) {
            setTimeout(() => {
                callback(time);
            }, time);
        }
        let arg,
            promisedFn = @Promisify fn(time);

        await promisedFn.then((res=) => {
            arg = res;
        });

        Assert.equal(arg, time);
    }

    @Test
    public async test_4() {
        @Promisifiable //Node style callback
        function fn(time: int, callback: {function(err: Error, val: any)}) {
            setTimeout(() => {
                if (time % 2 === 0) {
                    callback(null, time);
                } else {
                    callback(err, null);
                }
            }, time);
        }

        let arg,
            erred: boolean = false,
            oddPromisedFn = @Promisify fn(time),
            evenPromisedFn = @Promisify fn(time + 1);

        await oddPromisedFn.catch((rej=) => {
            erred = true;
        });
        Assert.isTrue(erred);

        await evenPromisedFn.then((res=) => {
            arg = res
        });
        Assert.equal(arg, time + 1);
    }

    @Test
    public async test_5() {
        @Promisifiable //Callback with no error and multiple other params.
        function fn(time: int, callback: {function(any, any)}) {
            setTimeout(() => {
                callback(time, time + 1);
            }, time);
        }

        let promisedFn = @Promisify fn(time);
        let arg: Iterable2<any, any>;
        
        await promisedFn.then((res=) => {
            arg = res;
        });

        Assert.equal(Array.from(arg)[0], time);
        Assert.equal(Array.from(arg)[1], time + 1);
    }

    @Test
    public async test_6() {
        @Promisifiable //Callback with optional error and multiple other params.
        function fn(time: int, callback: {function(Error=, any=, any=)}) {
            setTimeout(() => {
                if (time === 1) {
                    callback(err);
                } else if (time === 2) {
                    callback(null, time);
                } else if (time === 3) {
                    callback(null, time, time + 1);
                }
            }, time);
        }
        
        let arg: Iterable2<any, any>;
        let erred: boolean = false,
            promisedFn1 = @Promisify fn(1),
            promisedFn2 = @Promisify fn(2),
            promisedFn3 = @Promisify fn(3);

        await promisedFn1.catch((rej=) => {
            erred = true;
        });
        Assert.isTrue(erred);

        await promisedFn2.then((res=) => {
            arg = res;
        });
        Assert.equal(arg, 2);

        await promisedFn3.then((res=) => {
            arg = res;
        });
        Assert.equal(Array.from(arg)[0], 3);
        Assert.equal(Array.from(arg)[1], 4);
    }

    @Test
    public async test_7() {
        @Promisifiable //Node style callback
        function fn(time: int, callback: {function(err: Error, val: any)}) {
            setTimeout(() => {
                if (time % 2 === 0) {
                    callback(null, time);
                } else {
                    callback(err, null);
                }
            }, time);
        }

        try {
            await fn(time); //will be rejected
        } catch(e) {
            Assert.equal(e, err);
        }

        let result = await fn(time + 1); //will be resolved
        Assert.equal(result, time + 1);
    }
}
