/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"

/**
 * Tests the transpiler's async/await feature.
 */
export public class TestAsyncAwait {
    private <T> createPromise(v: T): Promise<T, Error> {
        return new Promise<T, Error>(function(resolveFn: {function(T): void}, rejectFn: {function(Error): void}) {
            setTimeout(() => resolveFn(v), 1);
        });
    }

    private <T> async returns(v: T, reallyAsync: boolean=): T {
        return reallyAsync ? await this.createPromise(v): v;
    }

    private <T> async delegated(v: T): T {
        return await this.returns(v, true /* async */);
    }

    private async sequence(): string {
        Assert.equal(await this.createPromise(5), 5);
        return "bar";
    }

    private async throw1(): string {
        Assert.equal(await this.createPromise(5), 5);
        throw new Error("err1");
    }

    private async throw2(): string {
        Assert.equal(await this.createPromise(5), 5);
        return await Promise.<string, Error>reject(new Error("err2"));
    }

    private async throw3(): string {
        return await Promise.<string, Error>reject(new Error("err3"));
    }

    private async throw4(): string {
        throw new Error("err4");
    }

    @Test @Description("basics")
    public async basics() {
        let waited: number = await this.createPromise(5);
        Assert.equal(waited, 5);
        Assert.equal(await this.createPromise("foo"), "foo");
    }

    @Test @Description("delegated")
    public async delegated_() {
        let del: number = await this.delegated(6);
        Assert.equal(del, 6);
    }

    @Test @Description("basics - multiple")
    public async basicsMultiple() {
        let waited: Array<int> = await Promise.all([this.createPromise(5), this.createPromise(6), this.createPromise(7)]);
        Assert.deepEqual(waited, [5, 6, 7]);
        Assert.equal(await this.createPromise("foo"), "foo");
    }

    @Test @Description("return from fn")
    public async returnFromFn() {
        Assert.equal(await this.sequence(), "bar");
    }

    @Test @Description("looping")
    public async looping(total: number=): number {
        total = total || 0;
        let start: number = total,
            res: number;
        for (let i = 0; i < 4; ++i) {
            res = await this.createPromise(i);
            Assert.equal(res, i);
            total += res;
        }
        Assert.equal(total, start + 6);
        return total;
    }

    @Test @Description("looping total")
    public async loopingTotal(): void {
        Assert.equal(await this.looping(3), 9);
    }

    @Test @Description("throw1")
    public async _throw1(): string {
        try {
            await this.throw1();
        } catch (exc) {
            Assert.equal((exc as Error).message, "err1");
            return null;
        }
        throw new Error("failed assertion");
    }

    @Test @Description("throw2")
    public async _throw2(): string {
        try {
            await this.throw2();
        } catch (exc) {
            Assert.equal((exc as Error).message, "err2");
            return null;
        }
        throw new Error("failed assertion");
    }

    @Test @Description("throw3")
    public async _throw3(): string {
        try {
            await this.throw3();
        } catch (exc) {
            Assert.equal((exc as Error).message, "err3");
            return null;
        }
        throw new Error("failed assertion");
    }

    @Test @Description("throw4")
    public async _throw4(): string {
        try {
            await this.throw4();
        } catch (exc) {
            Assert.equal((exc as Error).message, "err4");
            return null;
        }
        throw new Error("failed assertion");
    }

    @Test @Description("finally")
    public async _finally(): string {
        let finallyCalled = false;

        try {
            try {
                await this.returns("");
            } finally {
                finallyCalled = true;
            }
            throw new Error("err1");
        } catch (exc) {
            Assert.equal((exc as Error).message, "err1");
            Assert.equal(finallyCalled, true);
            return null;
        }
        throw new Error("failed assertion");
    }

    async tcf_order(res: Array<string>, async: boolean=): void {
        try {
            if (async) {
                await this.throw2();
            } else {
                throw new Error("e");
            }
            res.push("T");
        } catch (exc) {
            res.push("C");
        } finally {
            res.push("F");
        }
    }

    @Test @Description("try/catch/finally order")
    public async tryCatchFinallyOrder(): void {
        let res1: Array<string> = [],
            res2: Array<string> = [];
        await this.tcf_order(res1);
        await this.tcf_order(res2, true);
        Assert.deepEqual(res1, res2);
    }

    @Test @Description("nested")
    public async _nested(): string {
        let e, finallyCalled = false;

        const inner = async (fail: boolean=): string => {
            try {
                try {
                    throw new Error("dummy");
                } finally {
                    finallyCalled = true;
                }
            } catch (exc) {
                if (fail) {
                    throw exc;
                }
                e = exc;
            }
            return "dodo";
        };

        return await inner(true /* fails with dummy */).<string, Error>catch(function(err: any=) {
            Assert.equal((err as Error).message, "dummy");
            Assert.equal(finallyCalled, true);
            finallyCalled = false;

            // using plain return here, since it's not an async-marked function:
            return inner(false).<string, Error>then(function(res: string=) {
                Assert.equal(res, "dodo");
                Assert.equal(finallyCalled, true);
                console.log("reached");
                return "fini";
            });
        }).<string, Error>then(function(res: string=) {
            Assert.equal(res, "fini");
            return null;
        }).<string, Error>catch(function(err: Error=) {
            Assert.fail("no error", err);
            return null;
        });
    }
}
