/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import { PlatformId } from "n4/RuntimeInfo"
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert"
import { Precondition } from "org/eclipse/n4js/mangelhaft/precondition/Precondition"
import {TestPromise} from "runtime/n4/TestPromise"

interface SystemLoaderTest_ {
    // The loader instance being used for the tests;
    // needs to be on instance level due to the way mangelhaft calls on the test methods.
    protected loader = System;
    protected testModulePath = TestPromise.n4type.origin + "/runtime/n4/util/moduleloader/modules/TestModule";

    @Before
    async reset(): void {
        let resolvedPath = await this.loader.normalize(this.testModulePath);
        this.loader.delete(resolvedPath);
        Assert.isFalse(this.loader.has(resolvedPath), "test module is not defined");
    }

    protected async dynamically_load_module_cached__(): void {
        let resolved: Object+ = await this.loader.import(this.testModulePath);
        Assert.deepEqual(Object.keys(resolved).sort(), ["Foo", "bar"], "all exports", true);
        Assert.deepEqual(resolved.bar, {bar: 5}, "exported object", true);
        Assert.equal(resolved.Foo.n4type.fqn, "runtime.n4.util.moduleloader.modules.TestModule.Foo", "exported class");

        let resolvedPath = await this.loader.normalize(this.testModulePath);
        Assert.isTrue(this.loader.has(resolvedPath), "test module is defined");
        Assert.equal(this.loader.get(resolvedPath), resolved, "same module");
        resolved.bar.bar = resolved.bar.bar + 1; // modify

        resolved = await this.loader.import(this.testModulePath);
        Assert.deepEqual(resolved.bar, {bar: 6}, "exported object, cached", true);
    }

    @Test
    async fail_on_non_existing_module(): void {
        await Assert.throwsAsync(async () => await this.loader.import("404/a/b.js"));
    }

    @Test
    async dynamically_load_module_then_refresh(): void {
        let resolved: Object+ = await this.loader.import(this.testModulePath);
        Assert.deepEqual(resolved.bar, {bar: 5}, "exported object", true);
        let resolvedPath = await this.loader.normalize(this.testModulePath);
        Assert.isTrue(this.loader.has(resolvedPath), "test module is defined");
        resolved.bar.bar = resolved.bar.bar + 1; // modify
        this.loader.delete(resolvedPath);
        Assert.isFalse(this.loader.has(resolvedPath), "test module is not defined");
        Assert.isFalse(!!this.loader.get(resolvedPath), "test module is not defined");
        resolved = await this.loader.import(this.testModulePath);
        Assert.isTrue(this.loader.has(resolvedPath), "test module is defined");
        Assert.deepEqual(resolved.bar, {bar: 5}, "exported object", true);
    }
}
interface SystemLoaderTest extends SystemLoaderTest_ {
    @Test async dynamically_load_module_cached(): void {
        await this.dynamically_load_module_cached__();
    }
}

/**
 * Loader tests with System.register module.
 */
export public class SystemJS implements SystemLoaderTest {}

/**
 * Loader tests on SystemJS with System.registerDynamic module.
 */
export public class SystemJS_SysRegDynamic implements SystemLoaderTest_ {
    constructor() {
        Precondition.isFalse(System._commonJS, "no CJS shim");
        this.testModulePath += "SysRegDynamic";
    }
    
    @Fixme("SystemJS disparity between System.get and System.import w.r.t. System.registerDynamic")
    @Test async dynamically_load_module_cached(): void {
        await this.dynamically_load_module_cached__();
    }
}

/**
 * Loader tests on System_CJS-shim with System.registerDynamic module.
 */
export public class System_CJS_shim_SysRegDynamic implements SystemLoaderTest {
    constructor() {
        Precondition.isTrue(System._commonJS, "just for CJS shim");
        this.testModulePath += "SysRegDynamic";
    }
}

/**
 * Loader tests with System.register module loaded with CJS shim.
 */
export public class CommonJS implements SystemLoaderTest {
    protected static init(that: N4Object): N4Object {
        Precondition.equal(n4.runtimeInfo.platformId, PlatformId.NODEJS, "Node-specific tests");
        if (System._commonJS) {
            return that;
        } else { // load this same module as common JS:
            let fqn = CommonJS.n4type.fqn,
                index = fqn.lastIndexOf(".");
            let modPath = CommonJS.n4type.origin + "/" + fqn.substring(0, index).replace(/\./g, "/");
            let mod = System._nodeRequire(modPath) as Object;
            return new (mod[fqn.substring(index + 1)] as constructor{N4Object})();
        }
    }
    
    @IDEBUG(2154, "N4Object is not a subtype of this[CommonJS].")
    constructor() {
        return CommonJS.init(this);
    }
}

/**
 * Loader tests with System.registerDynamic module loaded with CJS shim.
 */
export public class CommonJS_SysRegDynamic implements SystemLoaderTest {
    @IDEBUG(2154, "N4Object is not a subtype of this[CommonJS_SysRegDynamic].")
    constructor() {
        this.testModulePath += "SysRegDynamic";
        return CommonJS.init(this);
    }
}

/**
 * Loader tests with old skol CJS module loaded with CJS shim.
 */
export public class CommonJS_PlainCJS implements SystemLoaderTest {
    @IDEBUG(2154, "N4Object is not a subtype of this[CommonJS_PlainCJS].")
    constructor() {
        this.testModulePath += "PlainCJS";
        return CommonJS.init(this);
    }
}
