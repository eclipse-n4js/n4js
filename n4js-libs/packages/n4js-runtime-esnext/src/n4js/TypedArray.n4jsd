@@Global @@ProvidedByRuntime

export external public abstract class ArrayBufferView {
    public get buffer(): ArrayBuffer;
    public get byteLength(): int; 
    public get byteOffsett(): int;
}

export external public abstract class TypedArray extends ArrayBufferView implements Iterable<number> {
    public get BYTES_PER_ELEMENT(): int;
    public get name(): string;
    public get length(): int;
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): TypedArray;
    public static <T> of(...elements: T): TypedArray;
    public copyWithin(target: int, start: int, end: int = this.length);
    public entries(): ArrayIterator<number>;
    public every(callback: (number, int, TypedArray) => boolean, thisArg: Object=): boolean;
    public fill(value: number, start: int = 0, end: int = this.length): TypedArray
    public filter(callback: (number, int, TypedArray) => boolean, thisArg: Object=): TypedArray;
    public find(callback: (number, int, TypedArray) => boolean, thisArg: Object=): number;
    public findIndex(callback: (number, int, TypedArray) => boolean, thisArg: Object=): int;
    public forEach(callback: (number, int, TypedArray) => void, thisArg: Object=): void;
    public includes(searchElement: number, fromIndex: int = 0): boolean;
    public indexOf(searchElement: number, fromIndex: int = 0): int;
    public join(separator: string = ','): string;
    public keys(): ArrayIterator<int>;
    public lastIndexOf(searchElement: number, fromIndex: int = this.length): int;
    public map(callback: (number, int, TypedArray) => number, thisArg: Object=): TypedArray;
    public reduce(callback: (number, number, int, TypedArray) => number, initialValue: number=): number;
    public reduceRight(callback: (number, number, int, TypedArray) => number, initialValue: number=): number;
    public reverse(): TypedArray;
    public <T> set(array: Array<T>|TypedArray, offset: int = 0): void;
    public slice(begin: int = 0, end: int = this.length): TypedArray;
    public some(callback: (number, int, TypedArray) => boolean, thisArg: Object=): boolean;
    public sort(compareFunction: (number, number) => int = ): TypedArray;
    public subarray(begin: int = 0, end: int = this.length): TypedArray;
    public values(): ArrayIterator<number>;
    
    @Override
    public [Symbol.iterator](): Iterator<number>;
}

export external public class Int8Array extends TypedArray {
    
    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);
    
    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Int8Array;
    
    @Override
    public static <T> of(...elements: T): Int8Array;

    @Override
    public every(callback: (number, int, Int8Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Int8Array
    
    @Override
    public filter(callback: (number, int, Int8Array) => boolean, thisArg: Object=): Int8Array;
    
    @Override
    public find(callback: (number, int, Int8Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Int8Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Int8Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Int8Array) => number, thisArg: Object=): Int8Array;
    
    @Override
    public reduce(callback: (number, number, int, Int8Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Int8Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Int8Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Int8Array;
    
    @Override
    public some(callback: (number, int, Int8Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Int8Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Int8Array;
}

export external public class Uint8Array extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Uint8Array;
    
    @Override
    public static <T> of(...elements: T): Uint8Array;

    @Override
    public every(callback: (number, int, Uint8Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Uint8Array
    
    @Override
    public filter(callback: (number, int, Uint8Array) => boolean, thisArg: Object=): Uint8Array;
    
    @Override
    public find(callback: (number, int, Uint8Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Uint8Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Uint8Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Uint8Array) => number, thisArg: Object=): Uint8Array;
    
    @Override
    public reduce(callback: (number, number, int, Uint8Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Uint8Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Uint8Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Uint8Array;
    
    @Override
    public some(callback: (number, int, Uint8Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Uint8Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Uint8Array;
}

export external public class Uint8ClampedArray extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Uint8ClampedArray;
    
    @Override
    public static <T> of(...elements: T): Uint8ClampedArray;

    @Override
    public every(callback: (number, int, Uint8ClampedArray) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Uint8ClampedArray
    
    @Override
    public filter(callback: (number, int, Uint8ClampedArray) => boolean, thisArg: Object=): Uint8ClampedArray;
    
    @Override
    public find(callback: (number, int, Uint8ClampedArray) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Uint8ClampedArray) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Uint8ClampedArray) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Uint8ClampedArray) => number, thisArg: Object=): Uint8ClampedArray;
    
    @Override
    public reduce(callback: (number, number, int, Uint8ClampedArray) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Uint8ClampedArray) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Uint8ClampedArray;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Uint8ClampedArray;
    
    @Override
    public some(callback: (number, int, Uint8ClampedArray) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Uint8ClampedArray;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Uint8ClampedArray;
}

export external public class Int16Array extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Int16Array;
    
    @Override
    public static <T> of(...elements: T): Int16Array;

    @Override
    public every(callback: (number, int, Int16Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Int16Array
    
    @Override
    public filter(callback: (number, int, Int16Array) => boolean, thisArg: Object=): Int16Array;
    
    @Override
    public find(callback: (number, int, Int16Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Int16Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Int16Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Int16Array) => number, thisArg: Object=): Int16Array;
    
    @Override
    public reduce(callback: (number, number, int, Int16Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Int16Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Int16Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Int16Array;
    
    @Override
    public some(callback: (number, int, Int16Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Int16Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Int16Array;
}

export external public class Uint16Array extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Uint16Array;
    
    @Override
    public static <T> of(...elements: T): Uint16Array;

    @Override
    public every(callback: (number, int, Uint16Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Uint16Array
    
    @Override
    public filter(callback: (number, int, Uint16Array) => boolean, thisArg: Object=): Uint16Array;
    
    @Override
    public find(callback: (number, int, Uint16Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Uint16Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Uint16Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Uint16Array) => number, thisArg: Object=): Uint16Array;
    
    @Override
    public reduce(callback: (number, number, int, Uint16Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Uint16Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Uint16Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Uint16Array;
    
    @Override
    public some(callback: (number, int, Uint16Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Uint16Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Uint16Array;
}

export external public class Int32Array extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Int32Array;
    
    @Override
    public static <T> of(...elements: T): Int32Array;

    @Override
    public every(callback: (number, int, Int32Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Int32Array
    
    @Override
    public filter(callback: (number, int, Int32Array) => boolean, thisArg: Object=): Int32Array;
    
    @Override
    public find(callback: (number, int, Int32Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Int32Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Int32Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Int32Array) => number, thisArg: Object=): Int32Array;
    
    @Override
    public reduce(callback: (number, number, int, Int32Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Int32Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Int32Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Int32Array;
    
    @Override
    public some(callback: (number, int, Int32Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Int32Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Int32Array;
}

export external public class Uint32Array extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Uint32Array;
    
    @Override
    public static <T> of(...elements: T): Uint32Array;

    @Override
    public every(callback: (number, int, Uint32Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Uint32Array
    
    @Override
    public filter(callback: (number, int, Uint32Array) => boolean, thisArg: Object=): Uint32Array;
    
    @Override
    public find(callback: (number, int, Uint32Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Uint32Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Uint32Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Uint32Array) => number, thisArg: Object=): Uint32Array;
    
    @Override
    public reduce(callback: (number, number, int, Uint32Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Uint32Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Uint32Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Uint32Array;
    
    @Override
    public some(callback: (number, int, Uint32Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Uint32Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Uint32Array;
}

export external public class Float32Array extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Float32Array;
    
    @Override
    public static <T> of(...elements: T): Float32Array;

    @Override
    public every(callback: (number, int, Float32Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Float32Array
    
    @Override
    public filter(callback: (number, int, Float32Array) => boolean, thisArg: Object=): Float32Array;
    
    @Override
    public find(callback: (number, int, Float32Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Float32Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Float32Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Float32Array) => number, thisArg: Object=): Float32Array;
    
    @Override
    public reduce(callback: (number, number, int, Float32Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Float32Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Float32Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Float32Array;
    
    @Override
    public some(callback: (number, int, Float32Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Float32Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Float32Array;
}

export external public class Float64Array extends TypedArray {

    public constructor(a1: int|TypedArray|Object|ArrayBuffer=, byteOffset: int=, length: int=);

    @Override
    public static <T> from(source: union{Iterable<T>, ArrayLike<T>, Iterator<T> }, mapFn: (T) => number=, thisArg: Object=): Float64Array;
    
    @Override
    public static <T> of(...elements: T): Float64Array;

    @Override
    public every(callback: (number, int, Float64Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public fill(value: number, start: int = 0, end: int = this.length): Float64Array
    
    @Override
    public filter(callback: (number, int, Float64Array) => boolean, thisArg: Object=): Float64Array;
    
    @Override
    public find(callback: (number, int, Float64Array) => boolean, thisArg: Object=): number;
    
    @Override
    public findIndex(callback: (number, int, Float64Array) => boolean, thisArg: Object=): int;
    
    @Override
    public forEach(callback: (number, int, Float64Array) => void, thisArg: Object=): void;

    @Override
    public map(callback: (number, int, Float64Array) => number, thisArg: Object=): Float64Array;
    
    @Override
    public reduce(callback: (number, number, int, Float64Array) => number, initialValue: number=): number;
    
    @Override
    public reduceRight(callback: (number, number, int, Float64Array) => number, initialValue: number=): number;
    
    @Override
    public reverse(): Float64Array;
    
    @Override
    public slice(begin: int = 0, end: int = this.length): Float64Array;
    
    @Override
    public some(callback: (number, int, Float64Array) => boolean, thisArg: Object=): boolean;
    
    @Override
    public sort(compareFunction: (number, number) => int = ): Float64Array;
    
    @Override
    public subarray(begin: int = 0, end: int = this.length): Float64Array;
}

export external public class DataView extends ArrayBufferView {
    public constructor(buffer: ArrayBuffer, byteOffset: int=, byteLength: int=);
 
    public getInt8(byteOffset: int, littleEndian: boolean = false): number;
    public getUint8(byteOffset: int, littleEndian: boolean = false): number;
    public getInt16(byteOffset: int, littleEndian: boolean = false): number;
    public getUint16(byteOffset: int, littleEndian: boolean = false): number;
    public getInt32(byteOffset: int, littleEndian: boolean = false): number;
    public getUint32(byteOffset: int, littleEndian: boolean = false): number;
    public getFloat32(byteOffset: int, littleEndian: boolean = false): number;
    public getFloat64(byteOffset: int, littleEndian: boolean = false): number;

    public setInt8(byteOffset: int, value: number, littleEndian: boolean = false): number;
    public setUint8(byteOffset: int, value: number, littleEndian: boolean = false): number;
    public setInt16(byteOffset: int, value: number, littleEndian: boolean = false): number;
    public setUint16(byteOffset: int, value: number, littleEndian: boolean = false): number;
    public setInt32(byteOffset: int, value: number, littleEndian: boolean = false): number;
    public setUint32(byteOffset: int, value: number, littleEndian: boolean = false): number;
    public setFloat32(byteOffset: int, value: number, littleEndian: boolean = false): number;
    public setFloat64(byteOffset: int, value: number, littleEndian: boolean = false): number;
}