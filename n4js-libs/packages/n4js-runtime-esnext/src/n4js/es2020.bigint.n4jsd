@@Global @@ProvidedByRuntime

export external public interface ~BigIntToLocaleStringOptions {
	localeMatcher: string;
	style: string;
	numberingSystem: string;
	unit: string;
	unitDisplay: string;
	currency: string;
	currencyDisplay: string;
	useGrouping: boolean;
	minimumIntegerDigits: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;
	minimumFractionDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;
	maximumFractionDigits: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;
	minimumSignificantDigits: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;
	maximumSignificantDigits: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;
	notation: string;
	compactDisplay: string;
}

export external public class BigInt {
	public toString(radix: number = ): string;
	public toLocaleString(locales: string = , options: BigIntToLocaleStringOptions = ): string;
	public valueOf(): any+;
	public get [Symbol.toStringTag](): "BigInt";
	(value: any+ | boolean | number | string): any+;
	public static asIntN(bits: number, int: any+): any+;
	public static asUintN(bits: number, int: any+): any+;
}

export external public class BigInt64Array {
	public get BYTES_PER_ELEMENT(): number;
	public get buffer(): ArrayBufferLike;
	public get byteLength(): number;
	public get byteOffset(): number;
	public copyWithin(target: number, start: number, end: number = ): this;
	public entries(): IterableIterator<any+>;
	public every(predicate: (value: any+, index: number, array: BigInt64Array)=>boolean, thisArg: any = ): boolean;
	public fill(value: any+, start: number = , end: number = ): this;
	public filter(predicate: (value: any+, index: number, array: BigInt64Array)=>any, thisArg: any = ): BigInt64Array;
	public find(predicate: (value: any+, index: number, array: BigInt64Array)=>boolean, thisArg: any = ): any+;
	public findIndex(predicate: (value: any+, index: number, array: BigInt64Array)=>boolean, thisArg: any = ): number;
	public forEach(callbackfn: (value: any+, index: number, array: BigInt64Array)=>void, thisArg: any = ): void;
	public includes(searchElement: any+, fromIndex: number = ): boolean;
	public indexOf(searchElement: any+, fromIndex: number = ): number;
	public join(separator: string = ): string;
	public keys(): IterableIterator<number>;
	public lastIndexOf(searchElement: any+, fromIndex: number = ): number;
	public get length(): number;
	public map(callbackfn: (value: any+, index: number, array: BigInt64Array)=>any+, thisArg: any = ): BigInt64Array;
	public reduce(...args: any+): any+; // overloading not supported
	public reduceRight(...args: any+): any+; // overloading not supported
	public reverse(): this;
	public set(array: ArrayLike<any+>, offset: number = ): void;
	public slice(start: number = , end: number = ): BigInt64Array;
	public some(predicate: (value: any+, index: number, array: BigInt64Array)=>boolean, thisArg: any = ): boolean;
	public sort(compareFn: (a: any+, b: any+)=>(number | any+) = ): this;
	public subarray(begin: number = , end: number = ): BigInt64Array;
	public toLocaleString(): string;
	public toString(): string;
	public valueOf(): BigInt64Array;
	public values(): IterableIterator<any+>;
	public [Symbol.iterator](): IterableIterator<any+>;
	public get [Symbol.toStringTag](): "BigInt64Array";
	public constructor(...args: any+); // overloading not supported
	public static get BYTES_PER_ELEMENT(): number;
	public static of(...items: any+): BigInt64Array;
	public static from(...args: any+): any+; // overloading not supported
}

export external public class BigUint64Array {
	public get BYTES_PER_ELEMENT(): number;
	public get buffer(): ArrayBufferLike;
	public get byteLength(): number;
	public get byteOffset(): number;
	public copyWithin(target: number, start: number, end: number = ): this;
	public entries(): IterableIterator<any+>;
	public every(predicate: (value: any+, index: number, array: BigUint64Array)=>boolean, thisArg: any = ): boolean;
	public fill(value: any+, start: number = , end: number = ): this;
	public filter(predicate: (value: any+, index: number, array: BigUint64Array)=>any, thisArg: any = ): BigUint64Array;
	public find(predicate: (value: any+, index: number, array: BigUint64Array)=>boolean, thisArg: any = ): any+;
	public findIndex(predicate: (value: any+, index: number, array: BigUint64Array)=>boolean, thisArg: any = ): number;
	public forEach(callbackfn: (value: any+, index: number, array: BigUint64Array)=>void, thisArg: any = ): void;
	public includes(searchElement: any+, fromIndex: number = ): boolean;
	public indexOf(searchElement: any+, fromIndex: number = ): number;
	public join(separator: string = ): string;
	public keys(): IterableIterator<number>;
	public lastIndexOf(searchElement: any+, fromIndex: number = ): number;
	public get length(): number;
	public map(callbackfn: (value: any+, index: number, array: BigUint64Array)=>any+, thisArg: any = ): BigUint64Array;
	public reduce(...args: any+): any+; // overloading not supported
	public reduceRight(...args: any+): any+; // overloading not supported
	public reverse(): this;
	public set(array: ArrayLike<any+>, offset: number = ): void;
	public slice(start: number = , end: number = ): BigUint64Array;
	public some(predicate: (value: any+, index: number, array: BigUint64Array)=>boolean, thisArg: any = ): boolean;
	public sort(compareFn: (a: any+, b: any+)=>(number | any+) = ): this;
	public subarray(begin: number = , end: number = ): BigUint64Array;
	public toLocaleString(): string;
	public toString(): string;
	public valueOf(): BigUint64Array;
	public values(): IterableIterator<any+>;
	public [Symbol.iterator](): IterableIterator<any+>;
	public get [Symbol.toStringTag](): "BigUint64Array";
	public constructor(...args: any+); // overloading not supported
	public static get BYTES_PER_ELEMENT(): number;
	public static of(...items: any+): BigUint64Array;
	public static from(...args: any+): any+; // overloading not supported
}

@Polyfill
export external public class DataView extends DataView {
	public getBigInt64(byteOffset: number, littleEndian: boolean = ): any+;
	public getBigUint64(byteOffset: number, littleEndian: boolean = ): any+;
	public setBigInt64(byteOffset: number, value: any+, littleEndian: boolean = ): void;
	public setBigUint64(byteOffset: number, value: any+, littleEndian: boolean = ): void;
}
