// Generated by N4JS transpiler; for copyright see original N4JS source file.

import 'n4js-runtime'
import * as n4jscli from 'n4js-cli'
import * as net from 'net'
import * as VSCodeJRCP from 'vscode-jsonrpc'

const PORT = 5007;
let n4jscProcess;
export function getActivate(vscode, vscodeLC) {
	return (context)=>{
		let outputChannel = vscode.window.createOutputChannel('N4JS Language Server');
		let serverOptions = async()=>{
			outputChannel.appendLine("Start LSP extension");
			let env = Object.assign({
				NODEJS_PATH: process.argv[0]
			}, process.env);
			let spawnOptions = {
				env: env
			};
			n4jscProcess = n4jscli.n4jscProcess('lsp', undefined, {
				port: PORT
			}, spawnOptions);
			n4jscProcess.stdout.on('data', (data)=>outputChannel.append(data.toString()));
			n4jscProcess.stderr.on('data', (data)=>outputChannel.append(data.toString()));
			n4jscProcess.on('message', (data)=>outputChannel.append(data.toString()));
			let serverReady = new Promise((resolve, reject)=>{
				n4jscProcess.stdout.on('data', (data)=>{
					let $opt;
					let receivedServerOutput = data.toString();
					if (($opt = receivedServerOutput) == null ? void 0 : $opt.startsWith("Listening for LSP clients")) {
						resolve();
					}
				});
			});
			await serverReady;
			let socket = net.connect({
				port: PORT
			});
			let result = {
				writer: socket,
				reader: socket,
				process: n4jscProcess,
				detached: true
			};
			return Promise.resolve(result);
		};
		let clientOptions = {
			documentSelector: [
				'n4js'
			],
			synchronize: {
				fileEvents: vscode.workspace.createFileSystemWatcher('{/**/*.+(n4js|n4jsd|n4jsx|n4idl),/**/package.json}')
			},
			outputChannel: outputChannel
		};
		let lc = new vscodeLC.LanguageClient('N4JS Language Server', serverOptions, clientOptions, true);
		lc.trace = VSCodeJRCP.Trace.Verbose;
		let disposable = lc.start();
		context.subscriptions.push(disposable);
	};
}
export function getDeactivate(vscode, vscodeLC) {
	return ()=>{
		if (!n4jscProcess) {
			return undefined;
		}
		n4jscProcess.kill();
		return new Promise((resolve, reject)=>{
			n4jscProcess.on('exit', ()=>{
				resolve();
			});
		});
	};
}
async function sleep(ms) {
	return new Promise((resolve)=>{
		setTimeout(resolve, ms);
	});
}
//# sourceMappingURL=extensionProvider.map
