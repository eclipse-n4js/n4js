 
//import * as net from 'net';
//import * as net+ from '@types/node';

//import * as VSCode+ from 'n4js-vscode-extension/vscode';
//import { workspace, ExtensionContext } from 'vscode';

//import * as VSCodeJRCP+ from 'vscode-jsonrpc';
//import { Trace } from 'vscode-jsonrpc';

//import * as VSCodeLC+ from 'vscode-languageclient';
//import { LanguageClient, LanguageClientOptions, StreamInfo } from 'vscode-languageclient';


const net : any+ = require("net");
const VSCode : any+ = require("vscode");
const VSCodeJRCP : any+ = require("vscode-jsonrpc");
const VSCodeLC : any+ = require("vscode-languageclient");

// TODO remove generated in output code: import 'n4js-runtime'
// TODO add in output code: Object.defineProperty(exports, "__esModule", { value: true });

function activate(context: any+ /*VSCode.ExtensionContext*/) {
    // The server is a started as a separate app and listens on port 5007
    let serverOptions = () => {
        // Connect to language server via socket
        let socket = net.connect({port:5007});
        let result = {
            writer: socket,
            reader: socket
        };
        return Promise.resolve(result);
    };
    
    let clientOptions = {
        documentSelector: ['n4js'],
        synchronize: {
            fileEvents: VSCode.workspace.createFileSystemWatcher('**/*.*')
        }
    }; 
    
    // Create the language client and start the client.
    let lc = new VSCodeLC.LanguageClient('N4JS Language Server', serverOptions, clientOptions);
    // enable tracing (.Off, .Messages, .Verbose)
    lc.trace = VSCodeJRCP.Trace.Verbose;
    let disposable = lc.start();
    
    // Push the disposable to the context's subscriptions so that the 
    // client can be deactivated on extension deactivation
    context.subscriptions.push(disposable);
}



// TODO add in output code: exports.activate = activate;

