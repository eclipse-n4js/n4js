<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2016 NumberFour AG.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
  NumberFour AG - Initial API and implementation
-->
<!-- releng/org.eclipse.n4js.parent/pom.xml -->
<!-- main configuration, target platform defined in parent (=god) -->
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<modelVersion>4.0.0</modelVersion>
	<prerequisites>
		<maven>3.0</maven>
	</prerequisites>

	<groupId>org.eclipse.n4js</groupId>
	<artifactId>org.eclipse.n4js.parent</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<properties>
		<!-- tycho version -->
		<!-- as there are still problems with tycho 0.21.0 we still stick to 0.20.0 -->
		<!-- see also https://bugs.eclipse.org/bugs/show_bug.cgi?id=444793 -->
		<!-- see also http://wiki.eclipse.org/Tycho/Release_Notes/0.21 -->
		<!-- see also https://bugs.eclipse.org/bugs/show_bug.cgi?id=436617#c11 -->
		<tycho.version>0.24.0</tycho.version>
		<!-- tycho 20 by default is using Kepler jdt compiler -->
		<!--  we are forcing Luna jdt compiler, see http://dev.eclipse.org/mhonarc/lists/tycho-user/msg05619.html -->
		<!-- TODO: remove after switching to tycho 0.21.0-->
<!-- 		<cbi-jdt-version>3.10.0.v20140604-1726</cbi-jdt-version> -->

		<!-- encoding -->
		<project.encoding>UTF-8</project.encoding>
		<file.encoding>${project.encoding}</file.encoding>
		<project.build.sourceEncoding>${project.encoding}</project.build.sourceEncoding>
		<project.reporting.outputEncoding>${project.encoding}</project.reporting.outputEncoding>

		<memoryArgs>-Xms256M -Xmx1324M -XX:+HeapDumpOnOutOfMemoryError</memoryArgs>
		<lowMemoryArgs>-Xms64M -Xmx320M -XX:+HeapDumpOnOutOfMemoryError</lowMemoryArgs>
		<encodingArgs>-Dfile.encoding=${file.encoding}</encodingArgs>

		<!-- Maven POJO versions -->
		<maven-resources-plugin.version>2.7</maven-resources-plugin.version>
		<maven-enforcer-plugin.version>1.3.1</maven-enforcer-plugin.version>
		<maven-antrun-plugin.version>1.7</maven-antrun-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<maven-site-plugin.version>3.3</maven-site-plugin.version>
		<maven-clean-plugin.version>2.5</maven-clean-plugin.version>
		<maven-scm-plugin.version>1.9.1</maven-scm-plugin.version>
		<maven-assembly-plugin.version>2.4.1</maven-assembly-plugin.version>
		<maven-release-plugin.version>2.5</maven-release-plugin.version>
		<maven-jxr-plugin.version>2.4</maven-jxr-plugin.version>
		<maven-dependency-plugin.version>2.10</maven-dependency-plugin.version>
		<codehaus-exec-maven-plugin.version>1.4.0</codehaus-exec-maven-plugin.version>
		<codehaus-buildnumber-maven-plugin.version>1.4</codehaus-buildnumber-maven-plugin.version>
		<maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
		<maven-verifier-plugin.version>1.0</maven-verifier-plugin.version>
		<maven-javadoc-plugin.version>2.9.1</maven-javadoc-plugin.version>
		<xslt-generator-maven-plugin.version>1.8</xslt-generator-maven-plugin.version>
		<m2e-lifecycle-mapping.version>1.0.0</m2e-lifecycle-mapping.version>
		<maven-surefire-plugin.version>2.17</maven-surefire-plugin.version>
		<maven-failsafe-plugin.version>2.17</maven-failsafe-plugin.version>


		<!-- code analysis, coding conventions -->
		<maven-pmd-plugin.version>3.2</maven-pmd-plugin.version>

		<!-- for adding paths to classpath -->
		<build-helper-maven-plugin.version>1.9</build-helper-maven-plugin.version>
		<!-- <eclipse-signing-maven-plugin.version>1.0.5</eclipse-signing-maven-plugin.version> -->

		<!-- current xtext version -->
		<xtext.version>2.10.0</xtext.version>
		<!-- compile xtend files to java -->
<!-- 		<xtend-maven-plugin.version>${xtext.version}-SNAPSHOT</xtend-maven-plugin.version> -->
		<xtend-maven-plugin.version>${xtext.version}</xtend-maven-plugin.version>
		<xtend-library.version>${xtend-maven-plugin.version}</xtend-library.version>
		<fornax-oaw-m2-plugin.version>3.6.0</fornax-oaw-m2-plugin.version>

		<!-- java version -->
		<java-compile-version>8.0</java-compile-version>
		<jdk-version>1.8</jdk-version>
		<maven.compiler.source>${jdk-version}</maven.compiler.source>
		<maven.compiler.target>${jdk-version}</maven.compiler.target>

		<!-- Flags for the java compiler, e.g. -g For debug-information (see http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html) -->
		<java-compiler-arguments></java-compiler-arguments>

		<!-- headless compiler options, used in tools/org.eclipse.n4js.hlc -->
		<hlc.name>n4jsc</hlc.name>
		<hlc.jar-shortname>${hlc.name}.jar</hlc.jar-shortname>


		<!-- xtend runtime dependencies start -->
		<xtext-version>${xtend-maven-plugin.version}</xtext-version>
		<org.eclipse.xtext.builder.standalone-version>[${xtend-maven-plugin.version}]</org.eclipse.xtext.builder.standalone-version>
		<org.eclipse.xtext.common.types-version>[${xtend-maven-plugin.version}]</org.eclipse.xtext.common.types-version>
		<org.eclipse.xtext.xtext-version>[${xtend-maven-plugin.version}]</org.eclipse.xtext.xtext-version>
		<org.eclipse.xtext.xbase-version>[${xtend-maven-plugin.version}]</org.eclipse.xtext.xbase-version>
		<org.osgi.core-version>4.3.1</org.osgi.core-version>
		<org.eclipse.equinox.common-version>3.6.200-v20130402-1505</org.eclipse.equinox.common-version>
		<org.eclipse.core.resources-version>3.7.100</org.eclipse.core.resources-version>
		<org.eclipse.text-version>3.5.101</org.eclipse.text-version>
		<org.eclipse.emf.codegen.ecore-version>[2.11.0-v20150806-0404]</org.eclipse.emf.codegen.ecore-version>
		<org.eclipse.emf.codegen.ecore.xtext-version>[1.2.0]</org.eclipse.emf.codegen.ecore.xtext-version>
		<org.eclipse.emf.common-version>[2.11.0-v20150805-0538]</org.eclipse.emf.common-version>
		<org.eclipse.emf.ecore-version>[2.11.1-v20150805-0538]</org.eclipse.emf.ecore-version>
		<org.eclipse.emf.ecore.xcore-version>[1.3.1]</org.eclipse.emf.ecore.xcore-version>
		<org.eclipse.emf.ecore.xcore.lib-version>[1.1.100]</org.eclipse.emf.ecore.xcore.lib-version>
		<!-- xtend runtime dependencies end -->

		<!-- folder for local deployments, either absolute or relative to project-root -->
		<!-- local-snapshot-deploy-folder>builds/org.eclipse.n4js.product.build/target/mvn-repository</local-snapshot-deploy-folder -->

		<!-- Test related dependency path tragets. -->
		<classes-unpacked>classes-unpacked</classes-unpacked>
		<cu_org.eclipse.n4js.runner>${classes-unpacked}/org.eclipse.n4js.runner</cu_org.eclipse.n4js.runner>

	</properties>

	<build>
		<sourceDirectory>src</sourceDirectory>
		<plugins>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-maven-plugin</artifactId>
				<version>${tycho.version}</version>
				<extensions>true</extensions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-source-plugin</artifactId>
				<version>${tycho.version}</version>
				<executions>
					<execution>
						<id>attach-source</id>
						<goals>
							<goal>plugin-source</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!--
				Here the target file
				deployed in the build of the targetplatform project is referenced via
				the classifier used in the attach-artifacts process. Please note that it
				is possible to use multiple target files in Maven build but in Eclipse
				you can only choose one target file.
				-->
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>target-platform-configuration</artifactId>
				<version>${tycho.version}</version>
				<configuration>
					<resolver>p2</resolver>
					<target>
						<artifact>
							<groupId>org.eclipse.n4js</groupId>
							<artifactId>org.eclipse.n4js.targetplatform</artifactId>
							<version>${project.version}</version>
							<classifier>org.eclipse.n4js.targetplatform</classifier>
							<relativePath>../org.eclipse.n4js.targetplatform/pom.xml</relativePath>
						</artifact>
					</target>

					<pomDependencies>consider</pomDependencies>
					<environments>
						<environment>
							<os>win32</os>
							<ws>win32</ws>
							<arch>x86_64</arch>
						</environment>
						<environment>
							<os>macosx</os>
							<ws>cocoa</ws>
							<arch>x86_64</arch>
						</environment>
						<environment>
							<os>linux</os>
							<ws>gtk</ws>
							<arch>x86_64</arch>
						</environment>
					</environments>
				</configuration>
			</plugin>
			<!--
			The following will deploy this artifact to a temporary maven repository (aka "local build repo").
			This be used by the N4JS IDE extensions builds to obtain dependencies of the MWE2 workflows. There are several
			other cases like this; search for "Enable deploy:". THIS IS TEMPORARY AND SHOULD BE CLEANED-UP!
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>${maven-deploy-plugin.version}</version>
				<!-- Enable deploy: -->
					<executions>
						<execution>
							<id>deploy-to-local-build-repo</id>
							<!-- rebind to default phase 'deploy' -->
							<phase>deploy</phase>
							<goals>
								<goal>deploy</goal>
							</goals>
							<configuration>
								<altDeploymentRepository>local-build-repo::default::file:${local-snapshot-deploy-folder}</altDeploymentRepository>
							</configuration>
						</execution>
					</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!-- TYCHO -->
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-compiler-plugin</artifactId>
					<version>${tycho.version}</version>
					<dependencies>
<!-- 						<dependency> -->
<!-- 						force specific (Luna) JDT compiler -->
<!-- 						TODO: remove after switching to tycho 0.21.0 -->
<!-- 						<groupId>org.eclipse.jdt</groupId> -->
<!-- 						<artifactId>org.eclipse.jdt.core</artifactId> -->
<!-- 						<version>${cbi-jdt-version}</version> -->
<!-- 						</dependency> -->
					</dependencies>
					<configuration>
						<encoding>${project.encoding}</encoding>
						<meminitial>128m</meminitial>
						<maxmem>1024m</maxmem>
						<source>${java-compile-version}</source>
						<target>${java-compile-version}</target>
						<verbose>true</verbose>
						<compilerArgument>${java-compiler-arguments}</compilerArgument>
						<!-- IDE-1452
							since tycho 0.22: use eclipse stored compiler-settings from .settings/org.eclipse.jdt.core.prefs
							(but causing problems in generated code, because class path property "ignore_optional_problems"
							is not considered by Tycho/maven together with our harsh settings for optional warnings/errors;
							therefore: do not use this at the moment!)
						<useProjectSettings>true</useProjectSettings>
						-->
					</configuration>
				</plugin>
				<!-- enable source bundle generation -->
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-repository-plugin</artifactId>
					<version>${tycho.version}</version>
				</plugin>
				<!-- enable source feature generation (next two plug-ins required) -->
				<plugin>
					<groupId>org.eclipse.tycho.extras</groupId>
					<artifactId>tycho-source-feature-plugin</artifactId>
					<version>${tycho.version}</version>
					<executions>
						<execution>
							<id>source-feature</id>
							<phase>package</phase>
							<goals>
								<goal>source-feature</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>tycho-p2-plugin</artifactId>
					<version>${tycho.version}</version>
					<executions>
						<execution>
							<id>attach-p2-metadata</id>
							<phase>package</phase>
							<goals>
								<goal>p2-metadata</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- APACHE MAVEN PLUGINS -->
				<plugin>
					<!--
					This plugin can be used to execute additional logic
					which cannot be done by existing Maven plugins but is available within ANT.
					Currently this plugin is used inside the tests/pom.xml for setting the property
					"coverageAgent" to an empty string when the Maven profile "codeCoverage" is
					not activated and thus this property wouldn't exist when executing the Tycho
					surefire plugin using this property in the argLine. As the code coverage plugin
					JaCoCo sets the value of this property only when it doesn't exist yet we have to
					use this work around as defining an empty property "coverageAgent" in Maven
					would cause the JaCoCo plugin not to set the value of this property. As the
					setting of this property is conditional we also have to add the ant-contrib plugin
					that provides the possibility to work with if-else constructs within ANT.
					-->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${maven-antrun-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${maven-deploy-plugin.version}</version>
					<!-- Disable deploy -->
						<executions>
							<execution>
								<id>default-deploy</id>
								<!-- rebind to none -->
								<phase />
							</execution>
						</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
					<!-- Disable install: -->
						<executions>
							<execution>
								<id>default-install</id>
								<!-- rebind to none -->
								<!-- IDE-2368 some plugins are enabled specifically in their own poms:
									* releng/org.eclipse.n4js.releng.utils
								 -->
								<phase />
							</execution>
						</executions>
				</plugin>
				<plugin>
					<!--
					The clean plugin is here configured to
					clean the src-gen folder of the grammar project as well as the src-gen
					folder of the grammar ui project besides clean the xtend folder. As this
					generalized here the grammar UI projects have to override the configuration
					again to prevent that the src-gen folder is cleaned on their build execution
					as the src-gen is filled when running the non UI grammar project.
					-->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>xtend-gen</directory>
								<excludes>
									<!--
									When clean xtend-gen, the .gitignore should not be deleted,
									as otherwise the hole folder got lost and in Eclipse you get
									a error marker because of the missing folder.
									-->
									<exclude>.gitignore</exclude>
								</excludes>
							</fileset>
						</filesets>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-scm-plugin</artifactId>
					<version>${maven-scm-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin.version}</version>
				</plugin>
				<plugin>
					<!--
					It is configured to raise the versions as preparation step.
					-->
					<artifactId>maven-release-plugin</artifactId>
					<version>${maven-release-plugin.version}</version>
					<configuration>
						<preparationGoals>clean -DnewVersion=${releaseVersion}
							-Dprudent=true
							org.eclipse.tycho:tycho-versions-plugin:set-version
							verify
							scm:checkin</preparationGoals>
						<arguments>-Prelease</arguments>
					</configuration>
				</plugin>
				<plugin>
					<!-- PMD code analysis and coding conventions -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-pmd-plugin</artifactId>
					<version>${maven-pmd-plugin.version}</version>
					<configuration>
						<excludeRoots>
							<excludeRoot>src-gen</excludeRoot>
							<excludeRoot>xtend-gen</excludeRoot>
						</excludeRoots>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>${build-helper-maven-plugin.version}</version>
					<executions>
						<execution>
							<!-- add generated sources to class path -->
							<id>add-source</id>
							<phase>generate-sources</phase>
							<goals>
								<goal>add-source</goal>
							</goals>
							<configuration>
								<sources>
									<source>src-gen</source>
								</sources>
								<sources>
									<source>emf-gen</source>
								</sources>
								<sources>
									<source>grammar-gen</source>
								</sources>
								<sources>
									<!-- Maven xtend plugin generates into target, not in bundle root,
										does it? -->
									<!-- <source>${project.build.directory}/xtend-gen</source> -->
									<source>xtend-gen</source>
								</sources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${codehaus-exec-maven-plugin.version}</version>
				</plugin>
				<!-- we do no sign yet <plugin> <groupId>org.eclipse.dash.maven</groupId>
					<artifactId>eclipse-signing-maven-plugin</artifactId> <version>${eclipse-signing-maven-plugin.version}</version>
					</plugin> -->
				<plugin>
					<groupId>org.eclipse.xtend</groupId>
					<artifactId>xtend-maven-plugin</artifactId>
					<version>${xtend-maven-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>compile</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<outputDirectory>${basedir}/xtend-gen</outputDirectory>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.eclipse.xtend</groupId>
							<artifactId>org.eclipse.xtend.lib</artifactId>
							<version>${xtend-library.version}</version>
							<type>pom</type>
						</dependency>
					</dependencies>
				</plugin>
				<!-- enforce jdk version -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforce-jdk-version</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<configuration>
								<rules>
									<requireJavaVersion>
										<version>${jdk-version}</version>
									</requireJavaVersion>
								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- to resolve this warning "[WARNING] Unable to locate Source XRef to
		link to - DISABLED". With this warning PMD validation will work fine. -->
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${maven-jxr-plugin.version}</version>
			</plugin>
		</plugins>
	</reporting>

	<!-- repositories for Maven plugins (Mojos), i.e. things that actually perform
		the build -->
	<pluginRepositories>
		<pluginRepository>
			<id>eclipse</id>
			<url>https://repo.eclipse.org/content/repositories/eclipse-releases/</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>daily</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>fornax</id>
			<url>http://www.fornax-platform.org/m2/repository</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.eclipse.xtend</groupId>
				<artifactId>org.eclipse.xtend.lib</artifactId>
				<version>${xtend-library.version}</version>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<profiles>
		<profile>
			<id>vpn</id>
			<activation>
				<property>
					<name>!noVPN</name>
				</property>
			</activation>

			<!-- main artifact repo -->
			<repositories>
				<repository>
					<id>sonatype_snapshots</id>
					<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
					<releases>
						<enabled>false</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</repository>
			</repositories>
			<pluginRepositories>
				<pluginRepository>
					<id>eclipse</id>
					<url>https://repo.eclipse.org/content/repositories/eclipse-releases/</url>
					<releases>
						<enabled>true</enabled>
						<updatePolicy>daily</updatePolicy>
						<checksumPolicy>fail</checksumPolicy>
					</releases>
					<snapshots>
						<enabled>false</enabled>
						<updatePolicy>daily</updatePolicy>
						<checksumPolicy>fail</checksumPolicy>
					</snapshots>
				</pluginRepository>
				<pluginRepository>
					<id>sonatype_snapshots</id>
					<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
					<releases>
						<enabled>false</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</pluginRepository>
			</pluginRepositories>
		</profile>
		<profile>
			<id>noVPN</id>
			<activation>
				<property>
					<name>noVPN</name>
				</property>
			</activation>
			<properties>
				<noVPNInternal>true</noVPNInternal>
			</properties>
		</profile>
		<profile>
			<id>staging</id>
			<activation>
				<!--
					ENABLE this if pre-releases are desired:
					As long as we depend on a unstable pre-release activate the staging unless -DnoStaging is given.
				<property>
					<name>!noStaging</name>
				</property>
				 -->
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<xtext.version>2.11.0-SNAPSHOT</xtext.version>
			</properties>
			<repositories>
					<repository>
							<id>sonatype-staging</id>
							<url>https://oss.sonatype.org/content/repositories/staging/</url>
					</repository>
			</repositories>
			<pluginRepositories>
					<pluginRepository>
							<id>sonatype-staging</id>
							<url>https://oss.sonatype.org/content/repositories/staging/</url>
					</pluginRepository>
			</pluginRepositories>
		</profile>

		<!-- Check correct enabling of noTests profile via property. -->
		<profile>
			<id>noTests</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<executions>
							<execution>
								<id>enforce-noTests-property-for-notTests-profile</id>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<rules>
										<requireProperty>
											<property>noTests</property>
											<message>Missing 'noTests' property while noTests profile is activated. Please call maven with '-DnoTests' to activate profile noTests.</message>
										</requireProperty>
									</rules>
									<fail>true</fail>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
