<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2016 NumberFour AG.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
  NumberFour AG - Initial API and implementation
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.eclipse.n4js</groupId>
		<artifactId>org.eclipse.n4js.tools</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<artifactId>org.eclipse.n4js.hlc</artifactId>
	<name>org.eclipse.n4js.hlc</name>
	<packaging>eclipse-plugin</packaging>
	<description>Headless N4js compiler bundled into one jar.</description>

	<properties>
		<!-- hint: also look at inherited properties -->
		<hlc.jar-descriptorRef>jar-with-dependencies</hlc.jar-descriptorRef>
		<hlc.jar-longname>${project.artifactId}-${project.version}-${cli.fat.jar.classifier}.jar</hlc.jar-longname>
		<hlc.plugin-folder>plugins</hlc.plugin-folder>
		<jackson.version>2.5.0</jackson.version>
		<dir.lib>${project.build.directory}/lib</dir.lib>
		<plugins.file>plugins-list.txt</plugins.file>
		<path.dot>.</path.dot>
	</properties>


	<dependencies>
		<!-- product plugins to be packaged in this jar -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>org.eclipse.n4js.headless.product.build</artifactId>
			<version>${project.version}</version>
			<type>jar</type>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>
	</dependencies>


	<build>
		<plugins>
			<!-- unpack product plugins to target folder -->
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-product</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>org.eclipse.n4js.headless.product.build</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<!-- <overWrite>true</overWrite> -->
									<outputDirectory>${dir.lib}</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- create executable jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${maven-jar-plugin.version}</version>
				<!-- execution adds second jar -->
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<forceCreation>true</forceCreation>
							<classifier>${cli.fat.jar.classifier}</classifier>
							<archive>
								<addMavenDescriptor>false</addMavenDescriptor>
								<manifest>
									<mainClass>org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader</mainClass>
								</manifest>
								<manifestEntries>
									<Class-Path>${path.dot}</Class-Path>
									<Rsrc-Main-Class>org.eclipse.n4js.hlc.ProductLauncher</Rsrc-Main-Class>
									<Rsrc-Class-Path><![CDATA[${path.dot}/ MANIFEST.MF ${plugins.jars.list} ${plugins.file}]]></Rsrc-Class-Path>
								</manifestEntries>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- add eclipse plugins contents to our executable jar -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${maven-antrun-plugin.version}</version>
				<executions>
					<!-- cleanup folder with unpacked deps -->
					<execution>
						<id>list-jars-in-lib</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<!-- let maven use property with plugins list -->
							<exportAntProperties>true</exportAntProperties>
							<tasks>
								<echo message="Running list-jars-in-lib in ${dir.lib}" />
								<fileset id="dist.contents" dir="${dir.lib}" includes="*.jar*" />
								<pathconvert pathsep=" " property="plugins.jars.list"
									refid="dist.contents">
									<map from="${dir.lib}/" to="" />
								</pathconvert>
								<echo>${plugins.jars.list}</echo>
								<echo file="${dir.lib}/${plugins.file}">${plugins.jars.list}</echo>
							</tasks>
						</configuration>
					</execution>

					<execution>
						<id>add-jars-in-jar</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<echo message="Adding content to cli-standalone" />
								<!-- update our executable jar with unpacked eclipse bundles -->
								<jar update="yes"
									jarfile="${project.build.directory}/${project.artifactId}-${project.version}-${cli.fat.jar.classifier}.jar">
									<fileset dir="${dir.lib}" />
								</jar>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Copy the longname-jar to a usable shorthand name AND also copy it to the global target folder in the repository root folder. -->
			<plugin>
				<groupId>com.coderplus.maven.plugins</groupId>
				<artifactId>copy-rename-maven-plugin</artifactId>
				<version>${codehaus-copy-rename-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>copy-file</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<overWrite>true</overWrite>
							<fileSets>
								<fileSet>
									<sourceFile>${project.build.directory}/${hlc.jar-longname}</sourceFile>
									<destinationFile>${project.build.directory}/${hlc.jar-shortname}</destinationFile>
								</fileSet>
								<fileSet>
									<sourceFile>${project.build.directory}/${hlc.jar-shortname}</sourceFile>
									<destinationFile>${project.basedir}/../../target/${hlc.jar-shortname}</destinationFile>
								</fileSet>
							</fileSets>
						</configuration>
					</execution>
				</executions>
			</plugin>



			<plugin>
				<!-- Executing the build as part of the integration test in a separate 
					vm. -->
				<!-- config-HELP with:: mvn exec:help -Ddetail=true -Dgoal=exec -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>it-of-n4js-compiler-command</id>
						<phase>integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<systemProperties>
								<NODEJS_PATH>${NODEJS_PATH}</NODEJS_PATH>
								<org.eclipse.n4js.defaultNodePath>${org.eclipse.n4js.defaultNodePath}</org.eclipse.n4js.defaultNodePath>
							</systemProperties>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<systemProperties>
						<NODEJS_PATH>${NODEJS_PATH}</NODEJS_PATH>
						<org.eclipse.n4js.defaultNodePath>${org.eclipse.n4js.defaultNodePath}</org.eclipse.n4js.defaultNodePath>
					</systemProperties>
					<executable>java</executable>
					<arguments>
						<argument>-jar</argument>
						<argument>${project.build.directory}/${hlc.jar-shortname}</argument>
						<argument>--help</argument><!-- this will show helpl only -->
						<!-- <argument>-projectroot</argument> <argument>${project.build.directory}/test</argument> 
							<argument>a/b/c/A.n4js</argument> <argument>-version</argument> -->
					</arguments>
					<!-- optional -->
					<!-- <workingDirectory>/tmp</workingDirectory> -->
					<!-- successCodes>0</successCodes -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${jdk-version}</source>
					<target>${jdk-version}</target>
					<release>${jdk-version}</release>
				</configuration>
			</plugin>

			<!-- Jenkins issues -->
			<!-- We only consume fat-jar we produce with maven by the configuration 
				above. But, hlc is an 'eclipse-bundle' to have it nicely shown in eclipse, 
				but we are not really interested in the bundle jar. Unfortunately when this 
				artificial bundle is process by tycho-p2-plugin it produces errors !ENTRY 
				org.eclipse.equinox.p2.publisher.eclipse 4 0 2017-07-31 11:14:34.478 !MESSAGE 
				Unable to acquire PluginConverter service during generation for: /var/lib/build/workspace/n4js/tools/org.eclipse.n4js.hlc/target/org.eclipse.n4js.hlc-0.0.1-SNAPSHOT-fat.jar. 
				which is probably due to the manifest of the fat jar, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=407312 
				It would be best to not process attached fat-jar with tycho tools. Alternatively 
				revert HLC to be plain maven project. For now, just disable tycho-p2. -->
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-plugin</artifactId>
				<version>${tycho-version}</version>
				<executions>
					<execution>
						<id>attach-p2-metadata</id>
						<goals>
							<goal>p2-metadata</goal>
						</goals>
						<phase></phase>
					</execution>
				</executions>
			</plugin>
		</plugins>

	</build>

</project>
