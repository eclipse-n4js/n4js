<!--
 Copyright (c) 2019 HAW Hamburg and others.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 *
 Contributors:
   Jens von Pilgrim (HAW Hamburg) - Initial API and implementation
-->
<project default="all">

	<description>
		Builds HTML files from asciidoc documents.
		Instead of plain asciidoc, asciispec is used. This tools is downloaded if needed.
		The generated html file is chunked into multiple files, one file per chapter.
		The index file will contain a table of contents.
	</description>

	<property name="doctools.dir" value="${basedir}/../asciispec-tools" />
	<property name="docname" value="N4JSSpec" />
	<property name="sharedResources" value="${basedir}/../shared/website" />
	
	<target name="all" depends="getAsciispec, asciispec, chunk" />
	
	<target name="clean" >
		<delete dir="${basedir}/generated-docs" />
	</target>

	<target name="getAsciispec" depends="asciispec.check" unless="asciispec.Exists">
		<mkdir dir="${doctools.dir}"/>
		<get src="https://raw.githubusercontent.com/NumberFour/asciispec/gh-pages/asciispec.zip"  dest="${doctools.dir}/asciispec.zip" />
		<unzip src="${doctools.dir}/asciispec.zip" dest="${doctools.dir}" />
		<chmod file="${doctools.dir}/asciispec/bin/asciispec" perm="+x" />
		<delete file="${doctools.dir}/asciispec.zip" />
	</target>

	<target name="asciispec.check">
		<condition property="asciispec.Exists" >
			<resourceexists>
	  			<file file="${doctools.dir}/asciispec/bin/asciispec"/>
			</resourceexists>
		</condition>
	</target>

	<target name="asciispec" depends="getAsciispec">
		<echo>Illegal access operation already reported, see https://github.com/headius/backport9/issues/2</echo>
		
		<mkdir dir="${basedir}/generated-docs"/>
		<!-- Generate ${docname}.html -->
		<exec executable="${doctools.dir}/asciispec/bin/asciispec" spawn="false" dir="${basedir}">
			<arg value="direct"/>
			<arg value="-a"/>
			<arg value="-o"/>
            <!-- <arg value="-a eclipse-help-mode"/> -->
            <arg value="-D"/>
			<arg value="generated-docs/"/>
			<arg value="${docname}.adoc"/>
		</exec>

        <!-- Generate ${docname}.xml -->
        <exec executable="${doctools.dir}/asciispec/bin/asciispec" spawn="false" dir="${basedir}">
            <arg value="direct"/>
            <arg value="-b"/>
            <arg value="docbook"/>
            <arg value="-a"/>
            <arg value="-o"/>
        	<!-- <arg value="-a eclipse-help-mode"/> -->
            <arg value="-D"/>
            <arg value="generated-docs/"/>
            <arg value="${docname}.adoc"/>
        </exec>

		<copy todir="${basedir}/generated-docs/.">
            <fileset dir="${sharedResources}">
                <include name="styles/**"/>
                <include name="images/**"/>
                <include name="scripts/**"/>
           	</fileset> 	
        </copy>
		
		<copy todir="${basedir}/generated-docs/.">
            <fileset dir="${basedir}">
                <include name="chapters/**"/>
                <exclude name="chapters/**/*.adoc"/>
                <exclude name="chapters/**/*.graffle"/>
           	</fileset> 	
        </copy>
		
		
    </target>

	<target name="chunk" >
		
		<!-- Compile Chunker -->
		<mkdir dir="${doctools.dir}/chunker"/>
		<javac srcdir="${basedir}/../../releng/org.eclipse.n4js.releng.utils/src/org/eclipse/n4js/doctools" fork="yes" debug="yes" destdir="${doctools.dir}/chunker" includeantruntime="false" />

		<!-- Create table of content stub -->
		<java classname="org.eclipse.n4js.doctools.IndexTocGenerator" classpath="${doctools.dir}/chunker">
			<arg value="-t"/>
			<arg value="${basedir}/generated-docs/toc.html"/>
			<arg value="-p"/>
			<arg value=""/>
			<arg value="${basedir}/generated-docs/${docname}.xml"/>
		</java>


		<!-- Chunk main file -->
		<java classname="org.eclipse.n4js.doctools.Chunker" classpath="${doctools.dir}/chunker">
			<!-- The name tag which is used to determine the name of the file to be generated -->
			<arg value="-n"/>
			<arg value="h2"/>
			<!-- The regex to determine a chapter -->
			<arg value="-c"/>
			<arg value="&lt;div class=&quot;sect1&quot;&gt;"/>
			<!-- The header separator regex -->
			<arg value="-h"/>
			<arg value="&lt;div id=&quot;content&quot;&gt;"/>
			<!-- The footer separator regex -->
			<arg value="-f"/>
			<arg value="&lt;/div&gt;\n&lt;div id=&quot;footer&quot;&gt;"/>
			<!-- The name of the TOC fragment to be added to the index (part between header and first chapter) file -->
			<arg value="-t"/>
			<arg value="${basedir}/generated-docs/toc.html"/>
			<!-- The output folder -->
			<arg value="-d"/>
			<arg value="${basedir}/generated-docs/"/>
			<!-- The document to be chunked -->
			<arg value="${basedir}/generated-docs/${docname}.html"/>
		</java>
		
		<delete file="${basedir}/generated-docs/toc.html" />
		<!-- delete file="${basedir}/generated-docs/${docname}.xml" /> -->
		<!--delete file="${basedir}/generated-docs/${docname}.html" /> -->
	</target>
</project>