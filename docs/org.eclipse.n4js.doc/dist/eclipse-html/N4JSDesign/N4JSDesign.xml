<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered maxdepth="5"?>
<!DOCTYPE book [<!ENTITY % db5ent PUBLIC "-//FOPUB//ENTITIES Entities for DocBook 5" "db5.ent"> %db5ent;]>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>N4JS Design Specification</title>
<date>2019-01-11</date>
<author>
<personname>
<firstname>2019-01-11 12:16:49 CET</firstname>
</personname>
</author>
<authorinitials>{</authorinitials>
<style>
      .admonitionblock td.icon .icon-todo:before{content:"\f249";color:#f4ee42}
    </style>
</info>
<preface>
<title></title>
<informalfigure role="n4jslogo">
<mediaobject>
<imageobject>
<imagedata fileref="images/n4jslogo.png" contentwidth="400" align="center"/>
</imageobject>
<textobject><phrase>400</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara role="center"><emphasis role="strong">Last Updated: 2019-01-11</emphasis></simpara>
<simpara role="center"><emphasis role="strong">Authors:</emphasis><?asciidoc-br?>
Jens von Pilgrim, Jakub Siberski, Mark-Oliver Reiser,<?asciidoc-br?>
Torsten Krämer, Ákos Kitta, Sebastian Zarnekow, Lorenzo Bettini, Jörg Reichert, Kristian Duske, Marcus Mews, Minh Quang Tran, Luca Beurer-Kellner</simpara>
<simpara><?asciidoc-pagebreak?></simpara>
<simpara>This document contains the N4JS Design and Implementation documentation.</simpara>
<simpara><?asciidoc-pagebreak?></simpara>
</preface>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>This document describes design aspects of the N4JS compiler and IDE. It relies on the following N4JS related specifications:</simpara>
<itemizedlist>
<listitem>
<simpara>N4JS Language Specification [<link linkend="N4JSSpec">N4JSSpec</link>]</simpara>
</listitem>
</itemizedlist>
<section xml:id="notation">
<title>Notation</title>
<simpara>We reuse the notation specified in [<link linkend="N4JSSpec">N4JSSpec</link>].</simpara>
</section>
<section xml:id="sec:IDE_Overview">
<title>IDE Components</title>
<simpara>The N4JS and N4JSIDE components are organized via features. The following features with included plugins are defined
(the common prefix "org.eclipse.n4js" is omitted at the plugin name):</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="5.8823*"/>
<colspec colname="col_2" colwidth="11.7647*"/>
<colspec colname="col_3" colwidth="82.353*"/>
<thead>
<row>
<entry align="left" valign="top">Feature</entry>
<entry align="left" valign="top">Plugin</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.lang.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>N4JS core language with parser, validation etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>org.eclipse.n4js</simpara></entry>
<entry align="left" valign="top"><simpara>Xtext grammar with generator and custom code for N4JS, scoping (and binding) implementation, basic validation (and Xsemantics type system).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>doc</simpara></entry>
<entry align="left" valign="top"><simpara>(in doc folder) General documentation (including web page) written in AsciiDoc</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>external.libraries</simpara></entry>
<entry align="left" valign="top"><simpara>Support for N4JS libraries shipped with the IDE, i.e. core N4JS library and mangelhaft.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI components for N4JS, e.g., proposal provider, labels, outline, quickfixes.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>jsdoc</simpara></entry>
<entry align="left" valign="top"><simpara>Parser and model for JSDoc</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>external.libraries.update</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Not included in feature</emphasis>. Updates the external library plugin</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.ts.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Type System</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>ts</simpara></entry>
<entry align="left" valign="top"><simpara>Xtext grammar with generator and custom code for type expressions and standalone type definitions.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>ts.model</simpara></entry>
<entry align="left" valign="top"><simpara>Xcore based types model with helper classes etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>ts.ui</simpara></entry>
<entry align="left" valign="top"><simpara>Xtext generated UI for type system, not really used as this TS files are not editable by users.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.unicode.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>common.unicode</simpara></entry>
<entry align="left" valign="top"><simpara>Xtext grammar with generator and custom code used by all other grammars for proper unicode support.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.regex.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Regular expression grammar and UI, used by N4JS grammar and UI</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>regex</simpara></entry>
<entry align="left" valign="top"><simpara>Xtext grammar with generator and custom code used by N4JS grammars for regular expressions.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>regex.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI components for regular expressions, e.g., proposal provider, labels, outline, quickfixes.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This feature defines the N4JSIDE. It contains core UI plugins and all includes (almost all) other features!</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>environments</simpara></entry>
<entry align="left" valign="top"><simpara>Utility plugin, registers n4scheme for EMF proxy resolution.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>model</simpara></entry>
<entry align="left" valign="top"><simpara>Xcore based N4JS model with helper classes etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>product</simpara></entry>
<entry align="left" valign="top"><simpara>N4JSIDE main application.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>releng.utils</simpara></entry>
<entry align="left" valign="top"><simpara>(in releng folder) Contains utility classes only used for building the system, e.g., tools for generating antlr based parser with extended features.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>utils</simpara></entry>
<entry align="left" valign="top"><simpara>general utilities</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>utils.ui</simpara></entry>
<entry align="left" valign="top"><simpara>general UI utilities</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.compiler.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Compilers and Transpilers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>generator.common</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Not included in feature, logically associated.</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>generator.headless</simpara></entry>
<entry align="left" valign="top"><simpara>N4JS headless generator (i.e. command line compiler).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>transpiler</simpara></entry>
<entry align="left" valign="top"><simpara>Generic transpiler infrastructure</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>transpiler.es</simpara></entry>
<entry align="left" valign="top"><simpara>Transpiler to compile to EcmaScript</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.json.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>N4JS JSON</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>json</simpara></entry>
<entry align="left" valign="top"><simpara>Xtext grammar with generator and custom code for a extensible JSON language support. Used in N4JS for the project description in terms of a <literal>package.json</literal> file.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>json.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI components for extensible JSON language support, e.g., proposal provider, labels, outline.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>json.model</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Not included in feature, logically associated.</emphasis> Xcore based model for the JSON language.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.semver.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Semantic version string support.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>semver</simpara></entry>
<entry align="left" valign="top"><simpara>Parser and tools for semantic version strings.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>semver.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI tools for semantic version strings.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>semver.model</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Not included in feature, logically associated.</emphasis> Xcore model of semantic version strings.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.runner.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Runners for executing N4JS or JavaScript code</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>runner</simpara></entry>
<entry align="left" valign="top"><simpara>Generic interfaces and helper for runners, i.e. JavaScript engines executing N4JS or JavaScript code.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>runner.chrome</simpara></entry>
<entry align="left" valign="top"><simpara>Runner for executing N4JS or JavaScript with Chrome.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>runner.chrome.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI classes for launching the Chrome runner via the org.eclipse.debug.ui</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>runner.nodejs</simpara></entry>
<entry align="left" valign="top"><simpara>Runner for executing N4JS or JavaScript with node.js.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>runner.nodejs.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI classes for launching the node.js runner via the org.eclipse.debug.ui</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>runner.ui</simpara></entry>
<entry align="left" valign="top"><simpara>Generic interfaces for configuring N4JS runner via the debug ui.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.tester.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Runners and UI for tests (via mangelhaft).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>tester</simpara></entry>
<entry align="left" valign="top"><simpara>Generic interfaces and helper for testers, i.e. JavaScript engines executing N4JS tests (using mangelhaft).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>tester.nodejs</simpara></entry>
<entry align="left" valign="top"><simpara>Tester based on the nodejs runner for executing mangelhaft tests with node.js</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>tester.nodejs.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI for showing test results.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>tester.ui</simpara></entry>
<entry align="left" valign="top"><simpara>Configuration of tests via the debug UI.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.jsdoc2spec.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>JSDoc 2 Specification</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>jsdoc2spec</simpara></entry>
<entry align="left" valign="top"><simpara>Exporter to generate API documentation with specification tests awareness</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>jsdoc2spec.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI for API doc exporter</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.xpect.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>xpect</simpara></entry>
<entry align="left" valign="top"><simpara>Xpect test methods.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>xpect.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI for running Xpext tests methods from the N4JSIDE (for creating bug reports).</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.smith.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Feature for internal N4JS IDE plugins only intended for development (for example, the AST Graph view).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>smith</simpara></entry>
<entry align="left" valign="top"><simpara>Non-UI classes for tools for smiths, that is, tools for developers of the N4JS IDE such as AST views etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>smith.ui</simpara></entry>
<entry align="left" valign="top"><simpara>UI classes for tools for smiths, that is, tools for developers of the N4JS IDE such as AST views etc.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.tests.helper.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Test helpers.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.dependencies.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Collection of all external non-ui dependencies, used for local mirroring of update sites.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">org.eclipse.n4js.dependencies.ui.sdk</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Collection of all external ui dependencies, used for local mirroring of update sites.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_3"><simpara><emphasis role="strong">uncategorized plugins</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>flowgraphs</simpara></entry>
<entry align="left" valign="top"><simpara>Control and data flow graph model and computer.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara><emphasis role="strong">Fragments</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>not associated to features, only listed here for completeness</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>utils.logging</simpara></entry>
<entry align="left" valign="top"><simpara>Fragment only, configuration for loggers, in particular for the product and for the tests</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="sec:Naming_Conventions">
<title>Naming Conventions</title>
<simpara>In the above sections, tests were omitted. We use the following naming conventions (by example) for test and tests helper:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara>project</simpara>
</entry>
<entry>
<simpara>-</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.tests</simpara>
</entry>
<entry>
<simpara>tests for project, is a fragment</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.tests.helper</simpara>
</entry>
<entry>
<simpara>helper classes used ONLY by tests</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.tests.performance</simpara>
</entry>
<entry>
<simpara>performance tests</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.tests.integration</simpara>
</entry>
<entry>
<simpara>integration tests</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.ui</simpara>
</entry>
<entry>
<simpara>-</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.ui.tests</simpara>
</entry>
<entry>
<simpara>tests for ui project, fragment of project.ui</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.ui.tests.helper</simpara>
</entry>
<entry>
<simpara>helper classes used ONLY by tests</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.ui.tests.performance</simpara>
</entry>
<entry>
<simpara>-</simpara>
</entry>
</row>
<row>
<entry>
<simpara>tests.helper</simpara>
</entry>
<entry>
<simpara>general test helper</simpara>
</entry>
</row>
<row>
<entry>
<simpara>ui.tests.helper</simpara>
</entry>
<entry>
<simpara>general ui test helper</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.xpect.tests</simpara>
</entry>
<entry>
<simpara>xpect tests for the project, despite dependnecies to UI the can be executed as plain JUnit tests</simpara>
</entry>
</row>
<row>
<entry>
<simpara>project.xpect.ui.tests</simpara>
</entry>
<entry>
<simpara>xpect tests for the project, need to be executed as eclipse plugin tests</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Due to Maven, tests are in subfolder tests (incl. helpers), implementation bundles in plugins, and release engineering related bundles in releng.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_eclipse-setup">
<title>Eclipse Setup</title>
<section xml:id="_contribute">
<title>Contribute</title>
<simpara>Eclipse developers who want to develop N4JS itself should use the <link xl:href="https://www.eclipse.org/downloads/">Oomph Eclipse installer</link>. The N4JS project is listed under "Eclipse Projects/N4JS"
This setup installs the correct Eclipse version, creates a new workspace and clones all projects into it (for details see below).</simpara>
<section xml:id="_eclipse-installer">
<title>Eclipse Installer</title>
<simpara>The recommended way to install the Eclipse IDE and set up the workspace is to use the Eclipse Installer.
This installer is to be downloaded from <link xl:href="https://wiki.eclipse.org/Eclipse_Installer">https://wiki.eclipse.org/Eclipse_Installer</link></simpara>
<simpara>Run the installer and apply the following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>change to "Advance Mode" via the menu (upper-right corner) (no need to move the installer)</simpara>
</listitem>
<listitem>
<simpara>select a product, e.g. "Eclipse IDE for Eclipse Committers" with product version "Oxygen"</simpara>
</listitem>
<listitem>
<simpara>double-click the entry <emphasis role="strong">Eclipse Projects/N4JS</emphasis> so that it is shown in the catalog view below</simpara>
</listitem>
<listitem>
<simpara>on the next page, configure paths accordingly. You only have to configure the installation and workspace folder.</simpara>
</listitem>
<listitem>
<simpara>start installation</simpara>
</listitem>
</orderedlist>
<simpara>The installer will then guide you through the rest of the installation. All plug-ins are downloaded and configured automatically, so is the workspace including downloading the git repository and setting up the workspace.</simpara>
</section>
<section xml:id="_manual-ide-configuration">
<title>Manual IDE Configuration</title>
<simpara>For a manual install, clone the code and import all top-level projects from the docs, features, plugins, releng, testhelpers, and tests folders. Activate the targetplatform contained in the <literal>releng/org.eclipse.n4js.targetplatform/</literal> project.</simpara>
<simpara>The N4JS IDE is developed with Eclipse Oxygen 4.7 or better since the system is based on Eclipse anyway.
It is almost impossible to use another IDE to develop Eclipse plugins. The list of required plugins includes:</simpara>
<itemizedlist>
<listitem>
<simpara>Xtext/Xtend 2.10.0</simpara>
</listitem>
<listitem>
<simpara>Xcore 1.4.0</simpara>
</listitem>
<listitem>
<simpara>Xsemantics 1.10.0</simpara>
</listitem>
<listitem>
<simpara>Xpect 0.1</simpara>
</listitem>
</itemizedlist>
<simpara>It is important to use the latest version of Xtext and the corresponding service release of Xcore. You will find the latest version numbers and plugins used in the target platform definition at
<link xl:href="https://github.com/eclipse/n4js/blob/master/releng/org.eclipse.n4js.targetplatform/org.eclipse.n4js.targetplatform.target">https://github.com/eclipse/n4js/blob/master/releng/org.eclipse.n4js.targetplatform/org.eclipse.n4js.targetplatform.target</link></simpara>
</section>
</section>
</chapter>
<chapter xml:id="_release-engineering">
<title>Release Engineering</title>
<section xml:id="_nightly-build-on-eclipse-infrastructure">
<title>Nightly build on Eclipse infrastructure</title>
<simpara>The N4JS IDE, headless n4jsc.jar, and the N4JS update site is being built on the Eclipse Common Build
Infrastructure (CBI). For this purpose the N4JS project is using a dedicated Jenkins instance, referred
to as a "Jenkins Instance Per Project" (JIPP) in Eclipse CBI documentation. At this time, the N4JS
project&#8217;s JIPP is running on the "old" infrastructure, not yet using docker. This will be migrated
at a later point in time.</simpara>
<simpara>The N4JS JIPP is available at: <link xl:href="https://ci.eclipse.org/n4js/">https://ci.eclipse.org/n4js/</link></simpara>
<simpara>The nightly build performs the following main steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>compile the N4JS implementation,</simpara>
</listitem>
<listitem>
<simpara>build the n4jsc.jar, the IDE products for MacOS, Windows, Linux, and the update site,</simpara>
</listitem>
<listitem>
<simpara>run tests,</simpara>
</listitem>
<listitem>
<simpara>sign the IDE product for macOS and package it in a .dmg file,</simpara>
</listitem>
<listitem>
<simpara>deploy to n4jsc.jar, IDE products and update sites to Eclipse download server (i.e. download.eclipse.org),</simpara>
</listitem>
<listitem>
<simpara>move all artifacts older than 7 days from download.eclipse.org to archive.eclipse.org.</simpara>
</listitem>
</orderedlist>
<simpara>Details about all the above steps can be found in the Jenkinsfile <literal>eclipse-nightly.jenkinsfile</literal>, located in
the root folder of the N4JS source repository on GitHub.</simpara>
<simpara>The most accurate documentation for our JIPP can be found at <link xl:href="https://wiki.eclipse.org/IT_Infrastructure_Doc">https://wiki.eclipse.org/IT_Infrastructure_Doc</link>.
Note that many other documents do not apply to our JIPP, at the moment, as they refer to the new
infrastructure, e.g. <link xl:href="https://wiki.eclipse.org/CBI">https://wiki.eclipse.org/CBI</link> and <link xl:href="https://wiki.eclipse.org/Jenkins">https://wiki.eclipse.org/Jenkins</link>.</simpara>
</section>
<section xml:id="_build-the-n4js-ide-from-command-line">
<title>Build the N4JS IDE from command line</title>
<simpara>Ensure you have</simpara>
<itemizedlist>
<listitem>
<simpara>Java 8</simpara>
</listitem>
<listitem>
<simpara>Maven 3.2.x and</simpara>
</listitem>
<listitem>
<simpara>Node.js 6</simpara>
</listitem>
</itemizedlist>
<simpara>installed on your system.</simpara>
<simpara>Clone the repository</simpara>
<screen>git clone https://github.com/Eclipse/n4js.git</screen>
<simpara>Change to the n4js folder:</simpara>
<screen>cd n4js</screen>
<simpara>Run the Maven build:</simpara>
<screen>mvn clean verify</screen>
<simpara>You may have to increase the memory for maven via <literal>export MAVEN_OPTS="-Xmx2048m"</literal> (Unix) or <literal>set MAVEN_OPTS="-Xmx2048m"</literal> (Windows).</simpara>
<section xml:id="_publish-maven-tooling-literal-org-eclipse-n4js-releng-util-literal">
<title>Publish maven-tooling <literal>org.eclipse.n4js.releng.util</literal></title>
<note>
<simpara>For extending the N4JS-language in a different project, the <literal>org.eclipse.n4js.releng.util</literal> module needs to be published as a maven-plugin. You can deploy this SNAPSHOT-artifact to a local folder by providing the <literal>local-snapshot-deploy-folder</literal>-property pointing to an absolute path in the local file system:</simpara>
</note>
<screen>mvn clean deploy -Dlocal-snapshot-deploy-folder=/var/lib/my/folder/local-mvn-deploy-repository</screen>
<simpara>The existence of <literal>local-snapshot-deploy-folder</literal> will trigger a profile enabling the deploy-goal for the project <literal>org.eclipse.n4js.releng.util</literal></simpara>
</section>
<section xml:id="_generation-of-eclipse-help-for-spec-and-design-document">
<title>Generation of Eclipse help for spec and design document</title>
<simpara>The HTML pages for N4JSSpec and N4JSDesign documents are generated from the Asciidoc sources in the project <literal>org.eclipse.n4js.spec</literal> <literal>org.eclipse.n4js.design</literal> by Asciispec. </simpara>
<figure xml:id="img:eclipse-help-doc-process">
<title>The process of creating Eclipse help for N4JSSpec</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/03_releng/images/eclipse-help-process.svg"/>
</imageobject>
<textobject><phrase>Creating Eclipse help for N4JSSpec</phrase></textobject>
</mediaobject>
</figure>
<simpara>Figure <xref linkend="img:eclipse-help-doc-process"/> shows the generation process for N4JSSpec document. The process for N4JSDesign is the same. The following explains the diagram.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Asciispec</literal> is used to compile the source N4JSSpec Asciidoc into a single large <literal>N4JSSpec.html</literal> file which contains all the chapters. The use of the custom parameter <literal>-a eclipse-help-mode</literal> indicates that a specical header and footer styles as well as CSS style should be used (i.e. no table of content menu, no download links etc.). Here, we are using the possibility provided by Asciidoctor to configure header/footer as well as CSS style via parameter <literal>:docinfodir:</literal> and <literal>:stylesheet:</literal>.</simpara>
</listitem>
<listitem>
<simpara>Our custom tool <literal>Chunker</literal> splits <literal>N4JSSpec.html</literal> into multiple chunked HTML files, each of which corresponds to either the <literal>index</literal> file or a chapter.</simpara>
</listitem>
<listitem>
<simpara>Another custom tool <literal>EclipseHelpTOCGenerator</literal> takes to Docbook file <literal>N4JSSpec.xml</literal> and generates an XML file describing the table of content (TOC) in the Eclipse format. This TOC file references the chunked HTML files above.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter xml:id="_parser">
<title>Parser</title>
<simpara>Some of the concepts described here were presented at
<link xl:href="https://www.youtube.com/watch?v=Xm-7aE1UMGY&amp;feature=youtu.be">EclipseCon 2013</link> and
<link xl:href="https://vimeo.com/channels/xtextcon/98446435">XtextCon 2014</link>. Note that the material presented at the linked videos may be outdated.</simpara>
<section xml:id="sec:Parser_Overview">
<title>Overview</title>
<simpara>The parser is created from an Xtext grammar. Actually, there are several grammars used as shown in <link linkend="fig:cd_grammars">Figure CD Grammars</link>. These grammars and the parsers generated from them are described more closely in the following sections.</simpara>
<figure xml:id="fig:cd_grammars" role="center">
<title>N4 Grammars</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/04_parser/images/cd_grammars.png"/>
</imageobject>
<textobject><phrase>cd grammars</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="sec:N4JS_Parser">
<title>N4JS Parser</title>
<simpara>One of the most tricky parts of JavaScript is the parsing because there is a conceptual mismatch between the <link linkend="AC">ANTLR</link> runtime and the specified grammar. Another challenge is the disambiguation of regular expressions and binary operations. Both features require significant customizing of the generated parser (see figure below).</simpara>
<figure xml:id="fig:cd_ASIParser" role="center">
<title>Overview custom parser implementation (runtime only)</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/04_parser/images/cd_ASIParser.png"/>
</imageobject>
<textobject><phrase>cd ASIParser</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="sec:Parser_Generation_Post_Processing" role="language-bash">
<title>Parser Generation Post-Processing</title>
<simpara>The ANTLR grammar that is generated by Xtext is post-processed to inject custom code into the grammar file before it is passed to the ANTLR tool. This is required in particular due to <link linkend="AC">ASI</link> (Automated Semicolon Insertion), but for some other reasons as well.</simpara>
<simpara>Actually, there are several injections:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Due to Xtext restrictions, the generated ANTLR grammar file (<emphasis role="strong">*.g</emphasis>) is modified. This means that some some additional actions are added and some rules are rewritten.</simpara>
</listitem>
<listitem>
<simpara>Due to ANTLR restrictions, the generated ANTLR Java parser (<emphasis role="strong">*.java</emphasis>) os modified. This means that some generated rules are slightly modified to match certain requirements.</simpara>
</listitem>
<listitem>
<simpara>Due to Java restrictions, the generated Java parser needs to be preprocessed in order to reduce the size of certain methods since they must not exceed 64k characters. This is implemented by means of an MWE fragment, activated after the other post processing steps are done.</simpara>
</listitem>
</orderedlist>
<simpara>The first two steps are handled by <literal>AntlrGeneratorWithCustomKeywordLogic</literal>, which is configured with additional helpers in <literal>GenerateN4JS.mwe2</literal>. shows the customized classes which modify the code generation. These classes are all part of the <literal>releng.utils</literal> bundle.</simpara>
<figure role="center">
<title>Class Diagram Parser Generation</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/04_parser/images/cd_parsergeneration.png"/>
</imageobject>
<textobject><phrase>cd parsergeneration</phrase></textobject>
</mediaobject>
</figure>
<section xml:id="sec:Automatic_Semicolon_Insertion">
<title>Automatic Semicolon Insertion</title>
<simpara>The EcmaScript specification mandates that valid implementations automatically insert a semicolon as a statement delimiter if it is missing and the input file would become invalid due to the missing semicolon. This is known as <link linkend="AC">ASI</link>. It implies that not only valid implementations have to perform this, but a valid parser has to mimic this behavior in order to parse executable code. The <link linkend="AC">ASI</link> is implemented by two different means.</simpara>
<simpara>The parser’s error recovery strategy is customized so it attempts to insert a semicolon if it was expected. Both strategies have to work hand in hand in order to consume all sorts of legal JavaScript code.</simpara>
<section xml:id="sec:Injected_code_in_the_Antlr_grammar_file">
<title>Injected code in the Antlr grammar file</title>
<simpara>Under certain circumstances, the parser has to actively promote a token to become a semicolon even though it may be a syntactically a closing brace or line break. This has to happen before that token is consumed thus the rules for return statements, continue statements and break statements are enhanced to actively promote these tokens to semicolons.</simpara>
<simpara>The same rule is applied to promote line breaks between an expression and a possible postfix operator <literal>++</literal> or <literal>–</literal>. At this location the line break is always treated as a semicolon even though the operator may be validly consumed and produce a postfix expression.</simpara>
<simpara>In both cases, the method <literal>promoteEOL()</literal> is used to move a token that may serve as an automatically injected semicolon from the so called hidden token channel to the semantic channel. The hidden tokens are usually not handled by the parser explicitly thus they are semantically invisible (therefore the term hidden token). Nevertheless, they can be put on the semantic channel explicitly to make them recognizable. That’s implemented in the EOL promotion. The offending tokens include the hidden line terminators and multi-line comments that include line breaks. Furthermore, closing braces (right curly brackets) are included in the set of offending tokens as well as explicit semicolons.</simpara>
</section>
<section xml:id="sec:Customized_error_recovery">
<title>Customized error recovery</title>
<simpara>Since the EOL promotion does not work well with Antlr prediction mode, another customization complements that feature. As soon as an invalid token sequence is attempted to be parsed and missing semicolon would make that sequence valid, an offending token is sought and moved to the semantic channel. This is implemented in the custom recovery strategy.</simpara>
</section>
</section>
<section xml:id="sec:_No_line_terminator_allowed_here__handling">
<title>Async and <literal>No line terminator allowed here</literal> Handling</title>
<simpara>There is no way of directly defining <literal>No line terminator allowed here</literal>. This is required not only for <link linkend="AC">ASI</link>, but also for <literal>async</literal>. This requires not only a special rule (using some rules from <link linkend="sec:Automatic_Semicolon_Insertion">ASI</link>), but also a special error recovery since the token ’async’ may be rejected (by the manually enriched rule) which is of course unexpected behavior from the generated source code.</simpara>
</section>
<section xml:id="sec:Regular_Expression">
<title>Regular Expression</title>
<simpara>The ANTLR parsing process can basically be divided into three steps. First of all, the file contents has to be read from disk. This includes the proper encoding of bytes to characters. The second step is the lexing or tokenizing of the character stream. A token is a basically a typed region in the stream, that is a triplet of token-id, offset and length. The last step is the parsing of these tokens. The result is a semantic model that is associated with a node tree. All necessary information to validate the model can be deduced from these two interlinked representations.</simpara>
<figure role="center">
<title>Simplified visualization of the parsing</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/04_parser/images/ad_parsing_simplified.png"/>
</imageobject>
<textobject><phrase>ad parsing simplified</phrase></textobject>
</mediaobject>
</figure>
<simpara>Since the default semantics and control flow of Antlr generated parsers do not really fit the requirements of a fully working JavaScript parser, some customizations are necessary. <emphasis role="strong">Regular expression literals in JavaScript cannot be syntactically disambiguated from div operations without contextual information.</emphasis> Nevertheless, the spec clearly describes, where a regular expression may appear and where it is prohibited. Unfortunately, it is not possible to implement these rules in the lexer alone, since it does not have enough contextual information. Therefore, the parser has been enhanced to establish a communication channel with the lexer. It announces when it expects a regular expression rather than a binary operation.</simpara>
<simpara>This required a reworking of the Antlr internals. Instead of a completely pre-populated <literal>TokenStream</literal>, the parser works on a lazy implementation that only reads as many characters as possible without a disambiguation between regular expression literals and divide operators.</simpara>
<simpara>Only after the parser has read this buffered tokens and potentially announced that it expects a regular expression, another batch of characters is processed by the lexer until the next ambiguous situation occurs. This is fundamentally different from the default behavior of Antlr.</simpara>
<figure role="center">
<title>Abstract control flow during parsing</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/04_parser/images/sd_parsing_sequence.png"/>
</imageobject>
<textobject><phrase>sd parsing sequence</phrase></textobject>
</mediaobject>
</figure>
<simpara>shows the involved classes which allow for this lexer-parser communication.</simpara>
<figure role="center">
<title>Class Diagram Parser-Lexer Communication</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/04_parser/images/cd_parserlexercommunication.png"/>
</imageobject>
<textobject><phrase>cd parserlexercommunication</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="sec:Unicode">
<title>Unicode</title>
<simpara>Unicode support in JavaScript includes the possibility to use unicode escape sequences in identifiers, string literals and regular expression literals. Another issue in this field is the specification of valid identifiers in JavaScript. They are described by means of unicode character classes. These have to be enumerated in the terminal rules in order to fully accept or reject valid or invalid JS identifiers.</simpara>
<simpara>For that purpose, a small code generator is used to define the terminal fragments for certain unicode categories. The <literal>UnicodeGrammarGenerator</literal> basically iterates all characters from <literal>Character.MIN_VALUE</literal> to <literal>Character.MAX_VALUE</literal> and adds them as alternatives to the respective terminal fragments, e.g. <literal>UNICODE_DIGIT_FRAGMENT</literal>.</simpara>
<simpara>The real terminal rules are defined as a composition of these generated fragments. Besides that, each character in an identifier, in a string literal or in a regular expression literal may be represented by its unicode escape value, e.g. ` u0060`. These escape sequences are handled and validated by the <literal>IValueConverter</literal> for the corresponding terminal rules.</simpara>
<simpara>The second piece of the puzzle are the unicode escaped sequences that may be used in keywords. This issue is covered by the <literal>UnicodeKeywordHelper</literal> which replaces the default terminal representation in the generated Antlr grammar by more elaborated alternatives. The keyword <literal>if</literal> is not only lexed as <literal>’if’</literal> but as seen in snippet
<link linkend="lst:terminal_if">Terminal if listing</link>.</simpara>
<formalpara xml:id="lst:terminal_if">
<title>Terminal if</title>
<para>
<screen>If :
    ( 'i' | '\\' 'u' '0``   0``   6``   9' )
    ( 'f' | '\\' 'u' '0``   0``   6``   6' );</screen>
</para>
</formalpara>
</section>
<section xml:id="sec:Literals">
<title>Literals</title>
<simpara>Template literals are also to be handled specially, see <literal>TemplateLiteralDisambiguationInjector</literal> for details.</simpara>
</section>
</section>
<section xml:id="sec:Modifiers" role="language-n4js">
<title>Modifiers</title>
<simpara>On the AST side, all modifiers are included in a single enumeration <literal>N4Modifier</literal>. In the types model however, the individual modifiers are mapped to two different enumerations of <emphasis>access</emphasis> modifiers (namely <literal>TypeAccessModifier</literal> and <literal>MemberAccessModifier</literal>) and a number of boolean properties (in case of non-access modifiers such as <literal>abstract</literal> or <literal>static</literal>). This mapping is done by the types builder, mostly by calling methods in class <literal>ModifierUtils</literal>.</simpara>
<simpara>The grammar allows the use of certain modifiers in many places that are actually invalid. Rules where a certain modifier may appear in the AST are implemented in method isValid(EClass,N4Modifier) in class <literal>ModifierUtils</literal> and checked via several validations in <literal>N4JSSyntaxValidator</literal>. Those validations also check for a particular order of modifiers that is not enforced by the grammar.</simpara>
<simpara>See API documentation of enumeration <literal>N4Modifier</literal> in file <literal>N4JS.xcore</literal> and the utility class <literal>ModifierUtils</literal> for more details.</simpara>
</section>
<section xml:id="sec:Conflict_Resolutions" role="language-n4js">
<title>Conflict Resolutions</title>
<section xml:id="sec:Reserved_Keywords_vs__Identifier_Names">
<title>Reserved Keywords vs. Identifier Names</title>
<simpara>Keywords and identifiers have to be distinguished by the lexer. Therefore, there is no means to decide upfront whether a certain keyword is actually used as a keyword or whether it is used as an identifier in a given context. This limitation is idiomatically overcome by a data type rule for valid identifiers. This data type rule enumerates all keywords which may be used as identifiers and the pure IDENTIFIER terminal rule as seen in <link linkend="lst:keywords_as_identifier">Keywords as Identifier listing</link>.</simpara>
<formalpara xml:id="lst:keywords_as_identifier">
<title>Keywords as Identifier</title>
<para>
<programlisting language="ebnf" linenumbering="unnumbered">N4JSIdentifier: IDENTIFIER
    | 'get'
    | 'set'
    ...
;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="sec:Operators_and_Generics">
<title>Operators and Generics</title>
<simpara>The ambiguity between shift operators and nested generics arises also from the fact, that Antlr lexer upfront without any contextual information. When implemented naively, the grammar will be broken, since a token sequence <literal>a&gt;&gt;b</literal> can either be part of <literal>List&lt;List&lt;a&gt;&gt; b</literal> or it can be part of a binary operation <literal>int c = a &gt;&gt; b</literal>. Therefore the shift operator may not be defined with a single token but has to be composed from individual characters (see <link linkend="lst:shift_operator">Shift Operator listing</link>).</simpara>
<formalpara xml:id="lst:shift_operator">
<title>Shift Operator listing</title>
<para>
<programlisting language="ebnf" linenumbering="unnumbered">ShiftOperator:
      '&gt;' '&gt;' '&gt;'?
    | '&lt;' '&lt;'
    ;</programlisting>
</para>
</formalpara>
</section>
</section>
</chapter>
<chapter xml:id="chap:flowgraphs">
<title>Flow Graphs</title>
<section xml:id="sec:flowgraphs_overview" role="language-n4js">
<title>Flow graphs overview</title>
<simpara>In this chapter, the control and data flow analyses are introduced.
Since not all AST elements are relevant for the control or data flow analyses, a new marker class is introduced called <literal>ControlFlowElement</literal>.
All AST elements which are part of the control flow graph implement this class.
The term control flow is abbreviated as <emphasis>CF</emphasis> and hence <literal>ControlFlowElement</literal>s are abbreviated as <emphasis>CF elements</emphasis>.</simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/eclipse/n4js/issues/120"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #120</link></simpara>
</sidebar>
<simpara>The following picture shows the control flow graph of the function <literal>f</literal>.</simpara>
<figure>
<title>Control flow graph of a simple function</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/10_flowgraphs/images/cfg_for_loop.png"/>
</imageobject>
<textobject><phrase>cfg for loop</phrase></textobject>
</mediaobject>
</figure>
<section xml:id="_internal-graph">
<title>Internal graph</title>
<simpara>Every <emphasis>internal graph</emphasis> refers to a single <emphasis>control flow container</emphasis>.
The graph consists of <emphasis>nodes</emphasis> and <emphasis>edges</emphasis>, where the edges are instances of <literal>ControlFlowEdge</literal>, and nodes are instances of <literal>Node</literal>.
Additionally, a so called <emphasis>complex node</emphasis> is used to group nodes that belong to the same CF element.</simpara>
<variablelist>
<varlistentry>
<term>Internal graph</term>
<listitem>
<simpara>Control flow graphs are created based on the AST elements.
Nevertheless, a fine-grained abstraction is used that is called <emphasis>internal graph</emphasis>.
The internal graph reflects all control flows and data effects that happen implicitly and are part of the language&#8217;s semantics.
For instance, the for-of statement on iterable objects forks the control flow after invoking the <literal>next()</literal> method.
This is done implicitly and not part of the written source code.
Moreover, this invocation could cause side effects.
These control flows and effects are reflected using the internal graph.
To implement analyses that refer to AST elements, an API for flow analyses is provided which hides the internal graph and works with AST elements only.
In the following, the term <emphasis>control flow graph</emphasis> refers to the internal graph.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Control flow container</term>
<listitem>
<simpara>At several places in the AST, an execution of statements or elements can happen.
Obviously, statements can be executed in bodies of methods or function expressions.
In addition, execution can also happen in field initializers or the <literal>Script</literal> itself.
Since all these AST elements can contain executable control flow elements (CF elements), they thus contain a control flow graph.
In the following, these AST elements are called <emphasis>control flow containers</emphasis> or CF containers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Nodes</term>
<listitem>
<simpara>Nodes represent complete CF elements or parts of them.
For instance, simple CF elements like a <literal>break</literal> statement are represented using only one node.
Regarding more complex CF elements that introduce a more complex control flow, due to e.g. nested expressions, several nodes represent one CF element.
All nodes of a single CF element are grouped within a complex node.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Edges</term>
<listitem>
<simpara>Edges reference a start and an end node which reflects a forward control flow direction, which is in the following called forward traverse direction.
Traversing from end to start of an edge is thus called backward traverse direction.
The so called <emphasis>next node</emphasis> is either the end node in context of forward, or the start node in context of backward traverse direction.
Edges also reflect the reason of the control flow using a control flow type.
The default control flow type is called <literal>Successor</literal> and such edges connect two ordinary subsequent nodes.
Other types like <literal>Return</literal> or <literal>Break</literal> indicate control flow that happens due to return or break statements.
A special control flow type is <literal>Repeat</literal> that indicates the entry of a loop body.
This edge is treated specially when traversing the control flow graph to avoid infinitive traversals of loops.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Complex node</term>
<listitem>
<simpara>The complex node always has a single entry and exit node, no matter the control flow it causes.
For instance, although the for-statement can contain various control flows among its nested CF elements, its complex node still has a single entry and exit node.
This simplifies concatenating subsequent complex nodes, since only their exit nodes have to be connected to the following entry node.
Aside from exit and entry node, a complex node usually contains additionally nodes to represent the CF element.
These nodes are connected by control flow edge so that their control flow lies within complex node.
However, regarding nested CF elements, the control flow leaves and re-enters a complex node.
To specify which CF element is nested, a delegating node (<literal>DelegatingNode</literal>) is created that points to the nested CF element.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Consider that source code elements can be nested like expressions that have sub-expressions as in <literal>1 + 2 * 3</literal>.
Also statements can contain other statements like in <literal>if (true) return;</literal>.
The design of the control flow graph deals with this nesting by mapping CF elements to several nodes.
All nodes of one CF element are aggregated into the <emphasis>complex node</emphasis>.</simpara>
<figure xml:id="img:internalGraph">
<title>The source code of <literal>1+2</literal> creates an internal graph of three complex nodes to deal with nested integer literals</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/10_flowgraphs/images/internalGraph.png"/>
</imageobject>
<textobject><phrase>internalGraph</phrase></textobject>
</mediaobject>
</figure>
<simpara>The example in the <link linkend="img:internalGraph">figure above</link> shows the internal graph produced by the source code <literal>1+2</literal>.
Additionally, a simpler version of the internal graph is shown (called <emphasis>User Graph View</emphasis>), with which client analyses deal.
The user graph view is only a view on the internal graph, but does not exist as an own instance.
In the figure, the nesting of the integer literals becomes obvious:
The control flow edges of delegating nodes targets entry nodes of different CF elements.
Also, there are CF edges from the exit nodes of these nested CF elements to return the control flow.</simpara>
<figure xml:id="img:cn_for_stmt">
<title>Complex Node of for statement</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/10_flowgraphs/images/cn_for_stmt.png"/>
</imageobject>
<textobject><phrase>cn for stmt</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the <link linkend="img:cn_for_stmt">above figure</link>, the complex node of the for statement is shown.
The details of the complex nodes of the nested CF elements (such as the initializer or the body statement) are omitted.
The figure displays the control flow fork after the condition and also shows the <emphasis>Repeat</emphasis> edge that targets the for body.
The node called <emphasis>Catch Node</emphasis> is used in situations when there are jumping control flows introduced for instance by a continue statement.
The catch will will then be the target of an control flow edge that starts at the continue statement.</simpara>
<simpara>The graph of nodes and edges is constructed in the following order.</simpara>
<itemizedlist>
<listitem>
<simpara>First, for every CF element a complex node and all its nodes are created.
Also, the nodes within the complex node are connected according to their control flow behavior.</simpara>
</listitem>
<listitem>
<simpara>Second, all subsequent complex nodes are connected by connecting their exit and entry nodes.
Moreover, nested complex nodes are connected by interpreting the delegating nodes.</simpara>
</listitem>
<listitem>
<simpara>Third, jumping control due to <literal>return</literal>, <literal>throw</literal>, <literal>break</literal> or <literal>continue</literal> statements is computed.
This is done by first deleting the successor edge of the jumping statement and introducing a new control flow edge that ends at the jump target.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_optimizations">
<title>Optimizations</title>
<simpara>The internal graph contains many nodes to simplify the graph construction.
However, these nodes carry no relevant information when traversing the graph.
Consequently, in an optimization step, they are removed from the graph for performance reasons.</simpara>
<simpara>A node removal for a node <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>n</mi><mn>2</mn></msub></math> is done by replacing the path <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>n</mi><mn>1</mn></msub><mo>-</mo><mo>&gt;</mo><msub><mi>n</mi><mn>2</mn></msub><mo>-</mo><mo>&gt;</mo><msub><mi>n</mi><mn>3</mn></msub></math> by the new path <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>n</mi><mn>1</mn></msub><mo>-</mo><mo>&gt;</mo><msub><mi>n</mi><mn>3</mn></msub></math>.
These removals are done for delegating nodes that only have one incoming and one outgoing edge.</simpara>
<simpara>A second kind but similar optimization reduces the number of helper nodes that are used as entry nodes.
In case a complex nodes consists only of exactly one entry and one exit node, both of these nodes are collapsed into one node.
This remaining node then is the representing node of the AST element.</simpara>
</section>
<section xml:id="_api-for-client-analyses">
<title>API for client analyses</title>
<simpara>To implement client analyses based on the control flow graph, the three classes <literal>GraphVisitor</literal>, <literal>GraphExplorer</literal> and <literal>BranchWalker</literal> are provided.
They provide the means to visit CF elements in a control flow graph and also to traverse single control flow paths.
The method <literal>N4JSFlowAnalyses#analyze</literal> can execute several client analyses in one run to maintain scalability.</simpara>
<section xml:id="_mapping-from-internal-to-ast-elements">
<title>Mapping from internal to AST elements</title>
<simpara>The API classes work with AST elements such as <literal>ControlFlowElement</literal> instead of the internally used graph classes <literal>ComplexNode</literal>, <literal>Node</literal> or <literal>ControlFlowEdge</literal>.
The mapping from internal classes to AST elements is done in the <literal>GraphVisitor</literal> class.</simpara>
<simpara>Note that the control flow graph has the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ExpressionStatement</literal>s are not represented.
Instead, only their expressions are represented.
Nevertheless, the API can deal with calls that refer to expression statements, e.g. when requesting their successors.</simpara>
</listitem>
<listitem>
<simpara>Control statements are also not represented in the graph, but can also be used in calls to the API.
The reason is, that it is unclear when a control statement (e.g. a for loop) is visited exactly.</simpara>
</listitem>
<listitem>
<simpara>Since a <literal>FlowEdge</literal> which connects two <literal>ControlFlowElement</literal>s can represent multiple internal edges, it can have multiple <literal>ControlFlowType</literal>s.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_graph-visitor">
<title>Graph visitor</title>
<simpara>Graph visitors traverse the control flow graphs of every CF container of a script instance in the following two traverse directions:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>Forward</emphasis>: from the container&#8217;s start to all reachable CF graph elements.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Backward</emphasis>: from the container&#8217;s end to all reachable CF graph elements.</simpara>
</listitem>
</itemizedlist>
<simpara>In each traverse direction, the graph visitor visits every reachable CF element and edge.
Note that neither empty statements nor control statements are part of the control flow graph.
The order of visited CF elements is related to either a breadth or a depth search on the CF graph.
However, no specific order assumptions are guaranteed.</simpara>
<figure>
<title>The CF elements <literal>"loop"</literal> and <literal>"end"</literal> are dead code and displayed in grey.</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/10_flowgraphs/images/deadcode.png"/>
</imageobject>
<textobject><phrase>deadcode</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="_graph-explorer">
<title>Graph explorer</title>
<simpara>Graph visitors can request a <emphasis>graph explorer</emphasis> to be activated under specific conditions related to the client analysis.
A graph explorer is the start point to analyze control flow branches.
The first control flow branches is started directly at the graph explorer&#8217;s creation site, but of course this first branches might fork eventually.
The graph explorer keeps track of all forked branches that originate at its activation site.
It also provides the means to join previously forked branches again.</simpara>
</section>
<section xml:id="_branch-walker">
<title>Branch walker</title>
<simpara>With every graph explorer, a branch walker is created that traverses the control flow graph beginning from the activation site of the graph explorer.
On every such branch, the two visit methods of CF elements and edges respectively, are called in the order of the traverse direction.
Every time the branch forks, the fork method of the branch walker is invoked and creates another branch walker which will continue the traversal on the forked branch.
The fork method can be used to copy some path data or state to the newly forked branch walker.
Note that every edge is always followed by the branch walker except for repeat edges which are followed exactly twice.
The reason to follow them twice is that first, following them only once would hide those control flows that re-visit the same CF elements due to the loop.
Second, following them more than twice does not reveal more insights, but only increases the number of branches.
When control flow branches merge again, for instance at the end of an <literal>if</literal>-statement, two or more branch walkers are merged into a new succeeding one.
The graph explorer provides the means to do this.
In case a CF element has no next elements, the branch walker terminates.</simpara>
</section>
<section xml:id="_example-1-compute-string-for-each-path">
<title>Example 1: Compute string for each path</title>
<simpara>Let&#8217;s assume that we want to compute all control flow branches of a function and use the client API for that.
The function <literal>f()</literal> in the following code snippet has four control flow branches: <literal>1 &#8594; 2</literal>, <literal>&#8594; 3 &#8594;</literal>, <literal>&#8594; 4 &#8594;</literal> and <literal>5</literal>.</simpara>
<formalpara>
<title>Function <literal>f()</literal> has four control flow branches.</title>
<para>
<screen>function f() {
	1;
	if (2)
		3;
	else
		4;
	5;
}</screen>
</para>
</formalpara>
<simpara>To compute these control flow branches, the class <literal>AllBranchPrintVisitor</literal> extends the <literal>GraphVisitor</literal>.
Already in the method <literal>initializeMode()</literal> a graph explorer is activated.
Note that the method <literal>requestActivation()</literal> can be understood as a <literal>addListener</literal> method for a listener that listens to visit events on nodes and edges.
Immediately after the activation request, the first branch walker is created in the method <literal>firstBranchWalker()</literal>.</simpara>
<simpara>The first visited CF element of the branch walker will then be the expression <literal>1</literal>.
It is formed into a string and added to the variable <literal>curString</literal>.
After expression <literal>1</literal>, the flow edge from <literal>1</literal> to <literal>2</literal> is visited.
This will concatenate the string <literal>&#8594;</literal> to the path string.
Variable <literal>curString</literal> will eventually hold the branch string like <literal>1 &#8594; 2</literal>.
Since the control flow forks after <literal>2</literal>, the method <literal>forkPath()</literal> is called and creates two new instances of a branch walker.
These new instances succeed the the first branch walker instance and each traverses one of the branches of the <literal>if</literal>-statement.
When the <literal>if</literal>-statement is passed, these two branches are merged into a new succeeding branch walker.
After all branch walkers are terminated, the graph explorer and graph visitor are also terminated.
The method <literal>getBranchStrings()</literal> collects all four computed strings from the variable <literal>curString</literal> of all branch walkers.</simpara>
<formalpara>
<title>Implementation of a graph visitor that computes all control flow paths</title>
<para>
<screen>class AllBranchPrintVisitor extends GraphVisitor {
	protected void initializeMode(Mode curDirection, ControlFlowElement curContainer) {
		super.requestActivation(new AllBranchPrintExplorer());
	}

	class AllBranchPrintExplorer extends GraphExplorer {
		class AllBranchPrintWalker extends BranchWalker {
			String curString = "";

			protected void visit(ControlFlowElement cfe) {
				curString += cfe.toString();
			}

			protected void visit(FlowEdge edge) {
				curString += " -&gt; ";
			}

			protected AllBranchPrintWalker forkPath() {
				return new AllBranchPrintWalker();
			}
		}

		protected BranchWalker joinBranches(List&lt;BranchWalker&gt; branchWalkers) {
			// TODO Auto-generated method stub
			return null;
		}

		protected BranchWalkerInternal firstBranchWalker() {
			return new AllBranchPrintWalker();
		}
	}

	List&lt;String&gt; getBranchStrings() {
		List&lt;String&gt; branchStrings = new LinkedList&lt;&gt;();
		for (GraphExplorerInternal app : getActivatedExplorers()) {
			for (BranchWalkerInternal ap : app.getAllBranches()) {
				AllBranchPrintWalker printPath = (AllBranchPrintWalker) ap;
				branchStrings.add(printPath.curString);
			}
		}
		return branchStrings;
	}
}</screen>
</para>
</formalpara>
</section>
<section xml:id="_path-quantor">
<title>Path quantor</title>
<simpara>Graph explorers are typically used to reason on all branch walkers that start at a specific location.
For instance, such a reasoning might determine whether some source element is reachable or whether a variable is used or not.
To simplify this, quantors are provided.
Since branch walkers originating from a single activation point can fork, the reasoning has to include all these forked branch walkers.
Hence, graph explorers are instantiated using a quantor which can be either <emphasis>For All</emphasis>, <emphasis>At Least One</emphasis> OR <emphasis>None</emphasis> that refers to all branches.
After all branch walkers of an explorer are terminated, the explorer is regarded as either passed or failed.
Paths also can be aborted manually using the methods <literal>pass()</literal> or <literal>fail()</literal>.
When <emphasis>pass</emphasis> or <emphasis>fail</emphasis> are used, the graph explorer might be terminated in the following cases:</simpara>
<itemizedlist>
<listitem>
<simpara>If the quantor of the graph explorer is <emphasis>For All</emphasis>, and <literal>fail()</literal> is called on a branch walker.</simpara>
</listitem>
<listitem>
<simpara>If the quantor of the graph explorer is <emphasis>At Least One</emphasis>, and <literal>pass()</literal> is called on a branch walker.</simpara>
</listitem>
</itemizedlist>
<simpara>Additionally, a graph explorer can be aborted manually by canceling all its branches.</simpara>
</section>
</section>
<section xml:id="_control-flow-analyses">
<title>Control flow analyses</title>
<section xml:id="_dead-code-analysis">
<title>Dead code analysis</title>
<simpara>The dead code analysis uses the graph visitor in all four modes and collects all visited CF elements.
The collected CF elements are saved separately for every mode.
After the graph visitor is terminated, the unreachable CF elements are computed like follows:</simpara>
<itemizedlist>
<listitem>
<simpara>CF elements, that are collected during forward and catch block mode are reachable.</simpara>
</listitem>
<listitem>
<simpara>CF elements, that are collected during islands mode are unreachable.</simpara>
</listitem>
<listitem>
<simpara>CF elements, that are <emphasis>only</emphasis> collected during backward mode, are also unreachable.</simpara>
</listitem>
</itemizedlist>
<simpara>In a later step, the unreachable elements are merged into unreachable text regions that are used for error markers.</simpara>
</section>
</section>
</section>
<section xml:id="sec:dataflow" role="language-n4js">
<title>Dataflow</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/eclipse/n4js/issues/331"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #331</link>
<link xl:href="https://github.com/eclipse/n4js/issues/464"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #464</link></simpara>
</sidebar>
<section xml:id="_dataflow-graph">
<title>Dataflow graph</title>
<simpara>The data flow graph provides means to reason about <emphasis>symbols</emphasis>, <emphasis>effects</emphasis>, <emphasis>data flow</emphasis>, <emphasis>aliases</emphasis> and <emphasis>guards</emphasis> in the control flow graph.
The main classes of the data flow API are <literal>DataflowVisitor</literal> and <literal>Assumption</literal>.</simpara>
<variablelist>
<varlistentry>
<term>Symbol</term>
<listitem>
<simpara>Symbols represent a program variable in the sence that it represents all AST elements, that bind to the same variable declaration (according to scoping).
The terms <emphasis>symbol</emphasis> and <emphasis>variable</emphasis> are used synonymously.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Effect</term>
<listitem>
<simpara>Effects are reads, writes and declarations of symbols.
For instance, a typical CF element with a write effect is an assignment such as <literal>a = null;</literal>.
Every effect refers to a single symbol and graph node.
The following effects are provided:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>Declaration</emphasis>: is the declaration of a variable.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Write</emphasis>: is the definition of a variable&#8217;s value, which is typically done with an assignment.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Read</emphasis>: is the read of a variable&#8217;s value, which could happen when passing a variable as an argument to a method call.</simpara>
</listitem>
<listitem>
<simpara><emphasis>MethodCall</emphasis>: is the call of a property method of a variable.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>Note that the term <emphasis>value use</emphasis> means either write or method call of a variable.
The term <emphasis>value definition</emphasis> means that a variable is written.</simpara>
<variablelist>
<varlistentry>
<term>Data flow</term>
<listitem>
<simpara>The term data flow is used for assignments of all kind.
For instance, the assigments <literal>a = b</literal>, <literal>a = 1</literal>, <literal>a = null</literal> or even <literal>for (let [a] of [[0],[undefined]]);</literal> are data flows.
The data is always flowing from the right hand side to the left hand side.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Alias</term>
<listitem>
<simpara>Due to data flow, other symbols can get important for an analysis.
For instance, the data flow <literal>a = b</literal> makes <literal>b</literal> important when reasoning about <literal>a</literal> since the value of <literal>b</literal> is assigned to <literal>a</literal>.
In the API is <literal>b</literal> therefore called an alias of <literal>a</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Guard</term>
<listitem>
<simpara>Guards are conditions that appear in e.g. <literal>it</literal>-statements.
For instance, a typical guard is the null-check in the following statement: <literal>if (a == null) foo();</literal>.
For every CF element, guards can hold either <emphasis>always</emphasis>, <emphasis>never</emphasis> or <emphasis>sometimes</emphasis>.
Note that the null-check-guard always holds at the method invocation <literal>foo();</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>DataflowVisitor</literal></term>
<listitem>
<simpara>The class <literal>DataflowVisitor</literal> provides means to visit all code locations where either effects happen or guards are declared.
For instance, when a variable is written, the callback method <literal>DataflowVisitor#visitEffect(EffectInfo effect, ControlFlowElement cfe)</literal> gets called.
In case a guard is declared, the callback method <literal>visitGuard(Guard guard)</literal> gets called.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Assumption</literal></term>
<listitem>
<simpara>The class <literal>Assumption</literal> provides means to track the data flow of a specific symbol from a specific code location.
For instance, assumptions are used to detect whether the symbol <literal>s</literal> in the property access <literal>s.prop</literal> is or may be undefined.
In this example, the assumption symbol is <literal>s</literal> and its start location is the property access.
From there, the data flow of <literal>s</literal> is tracked in backwards traverse direction.
Also, (transitive) aliases of <literal>s</literal> are tracked.
In case a data flow that happens on <literal>s</literal> or its aliases, the callback method <literal>holdsOnDataflow(Symbol lhs, Symbol rSymbol, Expression rValue)</literal> is called.
For every effect that affects <literal>s</literal> or one of its aliases, the callback method <literal>holdsOnEffect(EffectInfo effect, ControlFlowElement container)</literal> is called.
And finally, for all guards that hold always/never at the start location regarding symbol <literal>s</literal>, the callback method <literal>holdsOnGuards(Multimap&lt;GuardType, Guard&gt; neverHolding, Multimap&lt;GuardType, Guard&gt; alwaysHolding)</literal> is called.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_dataflow-analyses">
<title>Dataflow analyses</title>
<section xml:id="_def-def-def-nothing-analysis">
<title>Def&#8594;Def / Def&#8594;Nothing analysis</title>
<simpara>A Def&#8594;Def analysis finds all defintions of a variable that are always a predecessor of another definition.
Its result is a set of all obsolete definition sites.</simpara>
<simpara>A Def&#8594;!Use analysis finds all definitions of a variable that are not followed by either a read or a method call.
These definition are therefore obsolete and can be removed.</simpara>
<simpara>Both of these analyses are performed in traverse direction <emphasis>Forward</emphasis>.</simpara>
</section>
<section xml:id="_def-use-decl-analysis">
<title>Def|Use&#8592;Decl analysis</title>
<simpara>A Def|Use&#8592;Decl analysis finds all preceding <emphasis>def</emphasis> or <emphasis>use</emphasis> sites of a declarations of a specific variable.
The paths might contain other <emphasis>defs</emphasis> or <emphasis>uses</emphasis> of the same variable.
In case such paths exists, the variable is used before it is declared.
This analysis is done in traverse direction <emphasis>Backward</emphasis>.</simpara>
<figure xml:id="img:usedBeforeDeclaredAnalysis">
<title>Finding use or def sites can be done using the graph visitor in traverse direction <emphasis>Backward</emphasis>.</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/10_flowgraphs/images/usedBeforeDeclaredAnalysis.png"/>
</imageobject>
<textobject><phrase>usedBeforeDeclaredAnalysis</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the <link linkend="img:usedBeforeDeclaredAnalysis">above figure</link> a graph visitor would visit all CF elements.
When it visits the declaration in line 8 (<literal>let w</literal>), it will activate a graph explorer (star 1 in the figure) for variable <literal>w</literal>.
Now, the first branch walker <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>1</mn></msub></math> is created and walks the control in backward traverse direction.
When <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>1</mn></msub></math> encounters the exit node of the <literal>if</literal>-statement, it will create two forked branches <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>2</mn></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>3</mn></msub></math>.
Now, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>2</mn></msub></math> enters then the branch of the <literal>if</literal>-statement (star 2), while <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>3</mn></msub></math> traverses directly to the condition of the <literal>if</literal>-statement.
Next, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>2</mn></msub></math> visits the def site of variable <literal>w</literal> (star 3).
This means, that there exist a def site of <literal>w</literal> before <literal>w</literal> was declared and hence, an error should be shown.
Since there could exist more cases like this, neither the branch walker nor the graph explorer are terminated.
When reaching star 4, the two branch walkers <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>2</mn></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>3</mn></msub></math> are joined and the follow-up branch walker <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>4</mn></msub></math> is created.
At star 5, the end the CF container is reached and the <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>4</mn></msub></math> will be terminated.
After all branch walkers are terminated, the graph explorer for the declaration site of variable <literal>w</literal> is evaluated:
All use or def sites, that were reachable should be marked with an error saying that the declaration has to be located before the use of a variable.</simpara>
<simpara>Note this analysis is currently implemented as a control flow analysis since it does not rely on guards, aliases.
Also, it only relies on local variables and hence does not need the symbols that are provided by the data flow API.</simpara>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_external-libraries">
<title>External Libraries</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/eclipse/n4js/issues/1018"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #1018</link>
<link xl:href="https://github.com/eclipse/n4js/issues/397"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #397</link>
<link xl:href="https://github.com/eclipse/n4js/issues/809"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #809</link>
<link xl:href="https://github.com/eclipse/n4js/issues/714"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #714</link>
<link xl:href="https://github.com/eclipse/n4js/issues/653"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #653</link>
<link xl:href="https://github.com/eclipse/n4js/issues/862"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #862</link>
<link xl:href="https://github.com/eclipse/n4js/issues/1133"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/issue.svg"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject> #1133</link></simpara>
</sidebar>
<simpara><emphasis role="strong">External libraries</emphasis> are N4JS projects that are provided by the N4JS IDE:
the <emphasis>built-in</emphasis>/<emphasis>shipped</emphasis> libraries, and all <emphasis>3rd-party libraries</emphasis> that were installed by the <emphasis>N4JS library manager</emphasis>.
Each external library consist of a valid package.json file located in the project root and an arbitrary number of files supported by N4JS projects, e.g. <emphasis>.n4js</emphasis>, <emphasis>.njsd</emphasis> and <emphasis>.js</emphasis> files.
The purpose of the external libraries is to share and to provide core and third party functionality for N4JS developers both in compile and runtime without rebuilding them.</simpara>
<simpara><xref linkend="sec:Built-in_External_Libraries"/> are external libraries that provide some basic functionality for N4JS programmers, such as the class <literal>N4Injector</literal>.</simpara>
<simpara><emphasis role="strong">3rd-party libraries</emphasis> are external libraries that are not built-in/shipped with the N4JS IDE.
Instead, they can be installed later by the user from third party providers.
Currently, only <emphasis>npm packages</emphasis> are supported.</simpara>
<simpara>The <emphasis role="strong">N4JS index</emphasis> is populated when the external libraries are compiled.
However, this compilation is only triggered through the library manager, but not when building workspace projects. (Self-evidently, the index is also populated when compiling workspace projects.)</simpara>
<simpara><emphasis role="strong">Name clashes</emphasis> of projects can happen and they are solved in the following order:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>User workspace projects always shadow external libraries.</simpara>
</listitem>
<listitem>
<simpara>In case of a name clash between a shipped and a 3rd-party library, the 3rd-party library shadows the shipped project.</simpara>
</listitem>
</orderedlist>
<simpara>The <emphasis role="strong">N4JS library manager</emphasis> is a tool in the N4JS IDE to view and manage external libraries.
In particular, the user can (un-)install new 3rd-party libraries, or can trigger the build of all external libraries to re-populate the N4JS index.
The library manager also supports other maintenance actions such as deleting all 3rd-party libraries.</simpara>
<section xml:id="sec:Major_Components" role="language-n4js">
<title>Major Components</title>
<simpara>External libraries are supported based on different components all over the application.</simpara>
<simpara>The followings are the most important ones:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">External Resources</emphasis> (<literal>IExternalResource</literal>)</simpara>
<itemizedlist>
<listitem>
<simpara>These are customized <literal>IResource</literal> implementations for external projects, folders and files.</simpara>
</listitem>
<listitem>
<simpara>With this approach the <literal>IProject</literal>, <literal>IFolder</literal> and <literal>IFile</literal> interfaces have been implemented. Each implementation is backed by a pure <literal>java.io.File</literal> based resource.</simpara>
</listitem>
<listitem>
<simpara>When accessing such external resources for example visiting purposes, getting the members of the resource or simply deleting the resource, internally each requests will be directly performed on the wrapped <literal>java.io.File</literal> without accessing the <literal>org.eclipse.core.resources.IWorkspace</literal> instance.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">External Library Workspace</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>This is a kind of dedicated workspace for external libraries and their dependencies.</simpara>
</listitem>
<listitem>
<simpara>Any query requests to retrieve a particular project or any dependencies of a particular project via the <literal>IN4JSCore</literal> singleton service will delegated to its wrapped <literal>N4JSModel</literal> singleton. Internally the <literal>N4JSModel</literal> has a reference to a workspace for all the ordinary workspace projects and another reference to the workspace for external libraries. Each query requests will be forwarded to the workspace for the ordinary projects first, and then to the external library workspace. If ordinary project workspace can provide any meaningful response for a request, then the external library workspace will not be accessed at all. Otherwise the query will be executed against the external library workspace. This fallback mechanism provides a pragmatic solution to the project shadowing feature. The project shadowing will be described in details later in this section.</simpara>
</listitem>
<listitem>
<simpara>The <emphasis role="strong">External Library Workspace</emphasis> is only supported and available in the IDE case, in the headless case there are no external libraries available from this dedicated workspace. Since the Xtext index creation and the entire build infrastructure is different, it is supported via target platform file. This is described in more details in a later section (<link linkend="sec:Headless_External_Library_Support">Headless External Library Support</link>]).</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">External Library Preference Store</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>This preference store is being used to register and un-register external library root folders into its underlying ordered list. A folder is called as an external library root folder if it is neither equal with the Eclipse workspace root nor being nested in the workspace root and contains zero to any external libraries.</simpara>
</listitem>
<listitem>
<simpara>Whenever any modifications are being saved in this preference store the <emphasis>External Library Workspace</emphasis> will be updated as well, new libraries will be registered into the workspace and removed libraries will be cleaned up from the workspace.</simpara>
</listitem>
<listitem>
<simpara>When the N4JS IDE application is started in production mode, the initial state of the preference store is being pre-populated with default values. This is necessary to provide built-in libraries to end users. These default values and additional advanced configurations will be mentioned in more details later in this section.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">Library Manager</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>This service is responsible for downloading and installing third party <emphasis>npm</emphasis> packages into the <literal>node_modules</literal> folder of the N4JS IDE. After downloading, the newly-installed and/or updated packages are registered as external libraries into the system.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">External Library Builder</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>This service is responsible for updating the persistent Xtext index with the currently available external libraries.</simpara>
</listitem>
<listitem>
<simpara>Unlike in case of any other ordinary projects, this builder does not triggers a build via the <literal>org.eclipse.core.internal.events.BuildManager</literal> but modifies the persisted Xtext index (<literal>IBuilderState</literal>) directly.</simpara>
</listitem>
<listitem>
<simpara>Considers shadowed external libraries when updating the persisted Xtext index.</simpara>
</listitem>
<listitem>
<simpara>Makes sure that the external library related Xtext index is persistent and will be available on the next application startup.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">External Library Xtext Index Persister</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>This class is responsible for recovering the consistent external library Xtext index state at application startup.</simpara>
</listitem>
<listitem>
<simpara>Scheduled on the very first application startup to prepare the Xtext index for the available external libraries.</simpara>
</listitem>
<listitem>
<simpara>Recovers the Xtext index state after a force quit and/or application crash.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">External Library Preference Page</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Preference page to configure and update the state of the <emphasis>External Library Preference Store</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Provides a way to install <emphasis>npm</emphasis> dependencies as external libraries into the application.</simpara>
</listitem>
<listitem>
<simpara>Reloads the external libraries. Gets the most recent state of N4JS type definition files and updates the Xtext index content based on the current state of the external libraries.</simpara>
</listitem>
<listitem>
<simpara>Exports the current npm dependency configuration as a target platform file. This will be discussed in another section ([sec:Headless_External_Library_Support]).</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">Miscellaneous UI Features</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Searching for types provided by external libraries.</simpara>
</listitem>
<listitem>
<simpara>Opening external modules in read-only editor.</simpara>
</listitem>
<listitem>
<simpara>Navigation between external types.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Project Explorer</emphasis> contribution for showing external dependencies for ordinary workspace projects.</simpara>
</listitem>
<listitem>
<simpara>Editor-navigator linking support for external modules.</simpara>
</listitem>
<listitem>
<simpara>Installing third party npm dependencies directly from package.json editor via a quick fix.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<section xml:id="subsec:External_Resources">
<title>External Resources</title>
<simpara>This approach provides a very pragmatic and simple solution to support external libraries in both in the <literal>IN4JSCore</literal> and in the <literal>IBuilderState</literal>. While <literal>IN4JSCore</literal> supports a completely transparent way of external libraries via the <literal>IN4JSProject</literal> interface all over in the application, the <literal>IBuilderState</literal> is responsible for keeping the Xtext index content up to date with the external libraries. Below picture depicts the hierarchy between the ordinary <literal>IResource</literal> and the <literal>IExternalResource</literal> instances. As described above each external resource is backed by a <literal>java.io.File</literal> resource and each access and operation being invoked on the <literal>IResource</literal> interface will be delegated to this backing resource.</simpara>
<figure xml:id="fig:External_Resources_Hierarchy" role="center">
<title>External Resources Hierarchy</title>
<mediaobject>
<imageobject>
<imagedata fileref="chapters/20_externalLibraries/images/externalResources.svg"/>
</imageobject>
<textobject><phrase>externalResources</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="subsec:External_Library_Workspace">
<title>External Library Workspace</title>
<simpara>External library workspace is an extension of the <literal>InternalN4JSWorkspace</literal>. This workspace is used for storing and managing external libraries all over the application. External libraries can be registered into the workspace by providing one to many external library root folder locations. The provided root folder locations will be visited in an ordered fashion and the contained external libraries (N4JS projects) will be registered into the application. If an external library from a root folder has been registered, then a forthcoming occurrence of an external library with the same artefact identifier (and same folder name) will be ignored at all. For instance let assume two external library root locations are available <literal>ER1</literal> and <literal>ER2</literal>, also <literal>ER1</literal> contains <literal>P1</literal> and <literal>P2</literal> external libraries, while <literal>ER2</literal> contains <literal>P2</literal> and <literal>P3</literal>. After registering the two roots into the workspace <literal>ER1</literal> will be processed first, and <literal>P1</literal> and <literal>P2</literal> will be registered to the workspace, when processing the forthcoming <literal>ER2</literal> root, <literal>P2</literal> will be ignored at all as an external with the same name exists. Finally <literal>P3</literal> will be registered to the workspace. External libraries cannot be registered directly into the workspace it is done automatically by the <emphasis>External Library Preference Store</emphasis> and by the <emphasis>npm Manager</emphasis>.</simpara>
</section>
<section xml:id="subsec:External_Library_Preference_Store">
<title>External Library Preference Store</title>
<simpara>This persistent cache is used for storing an ordered enumeration of registered external library root folder locations. Whenever its internal state is being persisted after a modification, all registered modification listeners will be synchronously notified about this change. All listeners will receive the store itself with the updated state. There are a couple of registered listeners all over the application listening to store update events but the most important one is the <emphasis>External Library Workspace</emphasis> itself. After receiving an external library preference store update event, the external library workspace will calculate the changes from its own state: creates a sort of difference by identifying added, removed and modified external libraries. Also tracks external library root location order changes. Once the workspace has calculated the changes<footnote><simpara>Calculates a list of external library projects that have to be build and another list of projects that have to be cleaned.</simpara></footnote> it will interact with the <emphasis>External Library Builder Helper</emphasis> which will eventually update the persisted Xtext index directly through the <literal>IBuilderState</literal>. After the Xtext index content update all ordinary workspace projects that directly depend either on a built or a cleaned external library will be automatically rebuilt by the external library workspace.</simpara>
</section>
<section xml:id="subsec:npm_Manager">
<title>Library Manager</title>
<simpara>This service is responsible for downloading, installing third party npm dependencies into the local file system. This is done directly by <literal>npm</literal> from <literal>Node.js</literal>. Once an npm package has been downloaded and installed it will be registered into the external library workspace. As part of the registration, the Xtext index content will be updated and all dependent ordinary workspace projects will be rebuilt automatically. An npm package cannot be installed via the <emphasis>Library Manager</emphasis> if it already installed previously.</simpara>
</section>
<section xml:id="subsec:External_Library_Builder_Helper">
<title>External Library Builder</title>
<simpara>This builder is responsible for updating the persisted Xtext index state with external library content directly through the <literal>IBuilderState</literal>. When providing a subset of external libraries to either build or clean, internally it orders the provided external libraries based on the project dependencies. Also, it might skip building all those external libraries that have are being shadowed by a workspace counterpart. An external library is being shadowed by an ordinary workspace project, if the workspace project is accessible and has exactly the same project name as the external library.</simpara>
</section>
<section xml:id="subsec:External_Library_Xtext_Index_Persister">
<title>External Library Xtext Index Persister</title>
<simpara>By default Xtext provides a way to fix corrupted index or to recreate it from scratch in case of its absence. Such inconsistent index states could occur due to application crashes or due to non-graceful application shutdowns. Although this default recovery mechanism provided by Xtext works properly, it is provided only for projects that are available in the Eclipse based workspace (<literal>org.eclipse.core.resources.IWorkspace</literal>) but non of the external libraries are not available from the Eclipse based workspace, so inconsistent external library index content cannot be recovered by this default mechanism. N4JS IDE contributes its own logic to recover index state of external N4JS libraries. When the default Xtext index recovery runs, then it will trigger a external reload as well. This external reload is guaranteed to run always after the default recovery mechanism.</simpara>
</section>
<section xml:id="subsec:External_Library_Preference_Page">
<title>External Library Preference Page</title>
<simpara>This preference page provides a way to configure the external libraries by adding and removing external library root folders, also allows the user to reorder the configured external library root locations. Besides that, npm packages can be installed into the application as external libraries. Neither removing nor reordering built-in external libraries are supported, hence these operations are disabled for built-ins on the preference page. No modifications will take effect unless the changes are persisted with the <literal>Apply</literal> button. One can reset the configurations to the default state by clicking on the <literal>Restore Defaults</literal> button then on the <literal>Apply</literal> button. The <literal>Reload</literal> button will check whether new type definition files are available for npm dependencies, then reloads the persistent Xtext index content based on the available external libraries. Once the external library reloading has been successfully finished, all dependent workspace projects will be rebuilt as well. From the preference page one can export the installed and used third party npm packages as a target platform. This exported target platform file can be used with the headless compiler. After setting up the headless compiler with this exported target platform file, the headless tool will collect and download all required third party npm dependencies.</simpara>
</section>
</section>
<section xml:id="sec:Headless_External_Library_Support" role="language-n4js">
<title>Headless External Library Support</title>
<simpara>The headless compiler is not capable of supporting built-in libraries. The whole build and Xtext index creation infrastructure is different in the IDE and in the headless case. Also, due to its archive nature (<literal>n4jsc.jar</literal>) of the headless tool, neither the runtime nor the <literal>Mangelhaft</literal> libraries can be loaded into the headless compiler.</simpara>
<simpara>The headless compiler supports downloading, installing and using third party <literal>npm</literal> packages. To enable this feature one has to configure the target platform via the <literal>–targetPlatformFile</literal> (or simply <literal>-tp</literal>) and the <literal>–targetPlatformInstallLocation</literal> (or simply <literal>-tl</literal>) arguments.</simpara>
<simpara>If the target platform file argument is configured, then all third party dependencies declared in the target platform file will be downloaded, installed and made available for all the N4JS projects before the compile (and run) phase. If the target platform file is given but the target platform install location is not specified (via the <literal>–targetPlatformInstallLocation</literal> argument), then a the compilation phase will be aborted and the execution will be interrupted.</simpara>
<simpara>For more convenient continuous integration and testing purposes there are a couple of additional exception cases with respect to the the target platform file and location that users of the headless compiler have to keep in mind. These are the followings:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>–targetPlatformSkipInstall</literal>. Usually dependencies defined in the target platform file will be installed into the folder defined by option <literal>–targetPlatformInstallLocation</literal>. If this flag is provided, this installation will be skipped, assuming the given folder already contains the required files and everything is up-to-date. Users have to use this flag with care, because no checks will be performed whether the location actually contains all required dependencies.</simpara>
</listitem>
<listitem>
<simpara>If <literal>–targetPlatformSkipInstall</literal> is provided the <literal>–targetPlatformInstallLocation</literal> parameter is completely ignored.</simpara>
</listitem>
<listitem>
<simpara>If <literal>–targetPlatformSkipInstall</literal> is provided the <literal>–targetPlatformFile</literal> parameter is completely ignored.</simpara>
</listitem>
<listitem>
<simpara>If neither <literal>–targetPlatformInstallLocation</literal> not <literal>–targetPlatformFile</literal> parameters are specified the headless tool will treat this case as an implicit <literal>–targetPlatformSkipInstall</literal> configuration.</simpara>
</listitem>
</itemizedlist>
<simpara>If the target platform install location is configured, and the target platform file is given as well, then all third party dependencies specified in the target platform file will be downloaded to that given location. If the target platform file is given, but the target platform install location is not specified, then a the compilation phase will be aborted and the execution will be interrupted.</simpara>
<programlisting language="bash" linenumbering="unnumbered">java -jar n4jsc.jar -projectlocations /path/to/the/workspace/root -t allprojects --systemLoader cjs -tp /absolute/path/to/the/file -tl /path/to/the/target/platform/install/location -rw nodejs -r moduleToRun</programlisting>
<section xml:id="_custom-npm-settings">
<title>Custom npm settings</title>
<simpara>In some cases there is a need for custom npm settings, e.g. custom npm registry. Those kind of configurations are
supported via <literal>.npmrc</literal> file (see <link xl:href="https://docs.npmjs.com/files/npmrc">https://docs.npmjs.com/files/npmrc</link>).</simpara>
<simpara>In N4JSIDE user can specify path to his custom configuration file in the preference page.</simpara>
<simpara>For the commandline N4JSC.jar provides special option <literal>-npmrcRootLocation</literal> that allows headless compiler to
use custom settings.</simpara>
</section>
</section>
<section xml:id="sec:Built-in_External_Libraries" role="language-n4js">
<title>Built-in External Libraries / Shipped Code</title>
<simpara>The library manager is provided with a number of built-in external libraries, consisting of:</simpara>
<itemizedlist>
<listitem>
<simpara>default runtime environments and runtime libraries, e.g. <literal>n4js-es5</literal>, <literal>n4js-runtime-es2015</literal>, <literal>n4js-runtime-v8</literal>.</simpara>
</listitem>
<listitem>
<simpara>a library <literal>n4js.lang</literal> providing N4JS implementations for runtime functionality required by some N4JS language features
(currently this contains only dependency injection support, implemented in file <literal>N4Injector.n4js</literal>).</simpara>
</listitem>
<listitem>
<simpara>the mangelhaft test framework.</simpara>
</listitem>
</itemizedlist>
<simpara>At runtime, these appear as default libraries in the library manager and are available in the workspace without any
further installation. However, at the moment, this is only supported within the N4JS IDE, not the <literal>n4jsc.jar</literal>.</simpara>
<simpara>The above libraries are located in the N4JS Git repository in two distinct locations:</simpara>
<itemizedlist>
<listitem>
<simpara>below the top-level folder <literal>n4js-libs</literal>: this is the main source and will be edited by developers working on fixes /
improvements of the runtime environments, libraries, and mangelhaft.</simpara>
</listitem>
<listitem>
<simpara>below the folder <literal>shipped-code</literal> in bundle <literal>org.eclipse.n4js.external.libraries</literal>: this is a copy of the code contained below
top-level folder <literal>n4js-libs</literal>, plus the transpiled output code, plus NPM dependencies.</simpara>
</listitem>
</itemizedlist>
<simpara>The contents of folder <literal>shipped-code</literal> is what will actually be bundled into the N4JS IDE product. These contents should
<emphasis role="strong">never</emphasis> be modified manually. Instead, an MWE2 work flow exists for updating this shipped code: <literal>UpdateShippedCode.mwe2</literal>,
located in its own bundle <literal>org.eclipse.n4js.external.libraries.update</literal>. When executed, this work flow will</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>compile the code below top-level folder <literal>n4js-libs</literal>,</simpara>
</listitem>
<listitem>
<simpara>clean folder <literal>shipped-code</literal>,</simpara>
</listitem>
<listitem>
<simpara>copy everything from top-level folder <literal>n4js-libs</literal> to folder <literal>shipped-code</literal> (including the transpiled output code
generated in step 1, above),</simpara>
</listitem>
<listitem>
<simpara>run <literal>npm install</literal> in those projects below folder <literal>shipped-code</literal>, that have third-party dependencies (currently this
applies only to runtime environment <literal>n4js-node</literal>).</simpara>
</listitem>
</orderedlist>
<simpara>A JUnit test is located in bundle <literal>org.eclipse.n4js.external.libraries.update.tests</literal> that will assert the shipped code is
up-to-date. When this test fails, it should be enough to re-run the MWE2 work flow and commit the resulting changes
in folder <literal>shipped-code</literal>.</simpara>
</section>
<section xml:id="sec:Additional_Notes" role="language-n4js">
<title>Additional Notes</title>
<section xml:id="subsec:Enabling_Built-in_External_Libraries">
<title>Enabling Built-in External Libraries</title>
<simpara>By default, built-in external libraries (such as <emphasis>node_modules</emphasis>, <emphasis>N4JS Language</emphasis>, <emphasis>N4JS Runtime</emphasis> and <emphasis>Mangelhaft</emphasis>),
also known as "shipped code", are only available when the N4JS IDE is running in production mode, i.e. when
<literal>Platform#inDebugMode()</literal> and <literal>Platform#inDevelopmentMode()</literal> both return <literal>false</literal>). This means built-in external libraries
are not available in the N4JS IDE when it is started from Eclipse development environment or when running any
plug-in, plug-in UI and/or SWTBot tests.</simpara>
<simpara>There are two ways of enabling built-in external libraries in NON-production mode:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>start the application with the following VM argument (but note the comment below!):</simpara>
<screen>-Dorg.eclipse.n4js.includesBuiltInLibraries=true</screen>
</listitem>
<listitem>
<simpara>invoke methods <literal>ExternalLibrariesSetupHelper#setupExternalLibraries(boolean, boolean)</literal> with first argument set to <literal>true</literal>,
and <literal>ExternalLibrariesSetupHelper#tearDownExternalLibraries(boolean)</literal> inside the test code. For SWTBot tests there are
corresponding convenience methods provided in <literal>BaseSwtBotTest</literal>. For an example, see <literal>N4jsTasksExampleSwtBotTest</literal>.</simpara>
</listitem>
</orderedlist>
<simpara>The first option is only intended for the case of starting an N4JS IDE from an Eclipse development environment;
in all kinds of tests, the helper methods mentioned above should be used instead (i.e. option 2.). In other
words, the configuration property <literal>org.eclipse.n4js.includesBuiltInLibraries</literal> should only be used in our two launch
configurations "N4JS__IDE.launch" and "N4JS_N4__IDE.launch" that are checked-in to our repository.</simpara>
</section>
</section>
<section xml:id="sec:lmFutureWork">
<title>Future Work</title>
<simpara>Some aspects not covered in current design, but worth consideration in the future</simpara>
<section xml:id="subsec:lmMultipleDependencyScope">
<title>Multiple Dependency Scope</title>
<simpara>npm scope dependencies</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="strong">DEPENDENCY_DEVELOPMENT</emphasis> </term>
<listitem>
<simpara><link xl:href="https://docs.npmjs.com/files/package.json#devdependencies">https://docs.npmjs.com/files/package.json#devdependencies</link></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">DEPENDENCY_PEER</emphasis> </term>
<listitem>
<simpara><link xl:href="https://docs.npmjs.com/files/package.json#peerdependencies">https://docs.npmjs.com/files/package.json#peerdependencies</link></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">DEPENDENCY_BUNDLE</emphasis> </term>
<listitem>
<simpara><link xl:href="https://docs.npmjs.com/files/package.json#bundleddependencies">https://docs.npmjs.com/files/package.json#bundleddependencies</link></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">DEPENDENCY_OPTIONAL</emphasis> </term>
<listitem>
<simpara><link xl:href="https://docs.npmjs.com/files/package.json#optionaldependencies">https://docs.npmjs.com/files/package.json#optionaldependencies</link></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">DEPENDENCY_PROVIDES</emphasis> </term>
<listitem>
<simpara><link xl:href="http://www.rpm.org/wiki/PackagerDocs/Dependencies#Provides">http://www.rpm.org/wiki/PackagerDocs/Dependencies#Provides</link></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">DEPENDENCY_WEAK</emphasis> </term>
<listitem>
<simpara><link xl:href="http://www.rpm.org/wiki/PackagerDocs/Dependencies#Weakdependencies">http://www.rpm.org/wiki/PackagerDocs/Dependencies#Weakdependencies</link></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="subsec:lmRunTestsFromLibrary">
<title>Run Tests from TestLibrary</title>
<simpara>Imagine we are implementing some API, and we want to run tests for that API. Tests are delivered to us as separate package, and there is not direct association between implementation and test projects (tests are not depending on implementation). Still we want to run provided tests to see if our implementation complies with API tests, e.g. AcceptanceTest suite for Application written against application sdk.</simpara>
</section>
</section>
</chapter>
<appendix xml:id="_acronyms">
<title>Acronyms</title>
<informaltable xml:id="AC" role="language-bash" frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="12.5*"/>
<colspec colname="col_2" colwidth="37.5*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="37.5*"/>
<tbody>
<row>
<entry align="center" valign="top"><simpara><literal>CDep</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Compile-Time Dependency</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>RDep</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Run-Time Dependency</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>LDep</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Load-Time Dependency</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>IDep</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Initialization-Time Dependency</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>EDep</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Execution-Time Dependency</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>AC</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Acceptance Criteria</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>ANTLR</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">ANother Tool for Language Recognition</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>API</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Application Programming Interface</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>AST</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Abstract Syntax Tree</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>ASI</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Automatic Semicolon Insertion</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>AST</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Abstract Syntax Tree</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>BNF</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Backus-Naur Form</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>CA</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Content-Assist</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>CSP</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Constraint Satisfaction Problem</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>CLI</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Command Line Interface</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>DOM</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Document Object Model</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>DSL</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Domain Specific Language</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>EBNF</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Extended Backus-Naur Form</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>EMF</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Eclipse Modeling Framework</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>EPL</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Eclipse Public License</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>FQN</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Fully Qualified Name</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>GLB</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Greatest Lower Bound, also known as <emphasis role="strong">infimum</emphasis></emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>GPL</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">GNU General Public License</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>IDE</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Integrated Development Environment</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>IDL</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Interface Definition Language</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>LSP</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Liskov Substitution Principle</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>LUB</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Least Upper Bound, also known as <emphasis role="strong">supremum</emphasis></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>N4JS</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">NumberFour JavaScript</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>UI</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">User Interface</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>UML</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Unified Modeling Language</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>VM</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Virtual Machine</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>XML</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Extensible Markup Language</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>XSLT</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong"><link linkend="XSL">XSL</link> Transformations</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>XSL <anchor xml:id="XSL" xreflabel="[XSL]"/></literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Extensible Stylesheet Language</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>WYSIWYG</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">What You See Is What You Get</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>WLOG</literal></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">without loss of generality</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</appendix>
<appendix xml:id="_licence">
<title>Licence</title>
<simpara>This specification and the accompanying materials is made available
under the terms of the Eclipse Public License v1.0 which accompanies
this distribution, and is available at <link xl:href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</link></simpara>
<bridgehead xml:id="_eclipse-public-license-v-1-0" renderas="sect2">Eclipse Public License - v 1.0</bridgehead>
<simpara>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE
PUBLIC LICENSE (<literal>AGREEMENT</literal>). ANY USE, REPRODUCTION OR DISTRIBUTION OF
THE PROGRAM CONSTITUTES RECIPIENT’S ACCEPTANCE OF THIS AGREEMENT.</simpara>
<bridgehead xml:id="_1-definitions" renderas="sect3">1. DEFINITIONS</bridgehead>
<variablelist>
<varlistentry>
<term><literal>Contribution</literal> means: </term>
<listitem>
<orderedlist numeration="arabic">
<listitem>
<simpara>in the case of the initial Contributor, the initial code and
documentation distributed under this Agreement, and</simpara>
</listitem>
<listitem>
<simpara>in the case of each subsequent Contributor:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>changes to the Program, and</simpara>
</listitem>
<listitem>
<simpara>additions to the Program;</simpara>
<simpara>where such changes and/or additions to the Program originate from and
are distributed by that particular Contributor. A Contribution
’originates’ from a Contributor if it was added to the Program by such
Contributor itself or anyone acting on such Contributor’s behalf.
Contributions do not include additions to the Program which:</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>are separate modules of software distributed in conjunction with the Program
under their own license agreement, and</simpara>
</listitem>
<listitem>
<simpara>are not derivative works of the Program.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Contributor</literal></term>
<listitem>
<simpara>means any person or entity that distributes the Program.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Licensed Patents</literal> </term>
<listitem>
<simpara>mean patent claims licensable by a Contributor
which are necessarily infringed by the use or sale of its Contribution
alone or when combined with the Program.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Program</literal> </term>
<listitem>
<simpara>means the Contributions distributed in accordance with this
Agreement.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Recipient</literal> </term>
<listitem>
<simpara>means anyone who receives the Program under this
Agreement, including all Contributors.</simpara>
</listitem>
</varlistentry>
</variablelist>
<bridgehead xml:id="_2-grant-of-rights" renderas="sect3">2. GRANT OF RIGHTS</bridgehead>
<orderedlist numeration="arabic">
<listitem>
<simpara>Subject to the terms of this Agreement, each Contributor hereby
grants Recipient a non-exclusive, worldwide, royalty-free copyright
license to reproduce, prepare derivative works of, publicly display,
publicly perform, distribute and sublicense the Contribution of such
Contributor, if any, and such derivative works, in source code and
object code form.</simpara>
</listitem>
<listitem>
<simpara>Subject to the terms of this Agreement, each Contributor hereby
grants Recipient a non-exclusive, worldwide, royalty-free patent license
under Licensed Patents to make, use, sell, offer to sell, import and
otherwise transfer the Contribution of such Contributor, if any, in
source code and object code form. This patent license shall apply to the
combination of the Contribution and the Program if, at the time the
Contribution is added by the Contributor, such addition of the
Contribution causes such combination to be covered by the Licensed
Patents. The patent license shall not apply to any other combinations
which include the Contribution. No hardware per se is licensed
hereunder.</simpara>
</listitem>
<listitem>
<simpara>Recipient understands that although each Contributor grants the
licenses to its Contributions set forth herein, no assurances are
provided by any Contributor that the Program does not infringe the
patent or other intellectual property rights of any other entity. Each
Contributor disclaims any liability to Recipient for claims brought by
any other entity based on infringement of intellectual property rights
or otherwise. As a condition to exercising the rights and licenses
granted hereunder, each Recipient hereby assumes sole responsibility to
secure any other intellectual property rights needed, if any. For
example, if a third party patent license is required to allow Recipient
to distribute the Program, it is Recipient’s responsibility to acquire
that license before distributing the Program.</simpara>
</listitem>
<listitem>
<simpara>Each Contributor represents that to its knowledge it has sufficient
copyright rights in its Contribution, if any, to grant the copyright
license set forth in this Agreement.</simpara>
</listitem>
</orderedlist>
<bridgehead xml:id="_3-requirements" renderas="sect3">3. REQUIREMENTS</bridgehead>
<simpara>A Contributor may choose to distribute the Program in object code form
under its own license agreement, provided that:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>it complies with the terms and conditions of this Agreement; and</simpara>
</listitem>
<listitem>
<simpara>its license agreement:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>effectively disclaims on behalf of all Contributors all warranties
and conditions, express and implied, including warranties or conditions
of title and non-infringement, and implied warranties or conditions of
merchantability and fitness for a particular purpose;</simpara>
</listitem>
<listitem>
<simpara>effectively excludes on behalf of all Contributors all liability for
damages, including direct, indirect, special, incidental and
consequential damages, such as lost profits;</simpara>
</listitem>
<listitem>
<simpara>states that any provisions which differ from this Agreement are
offered by that Contributor alone and not by any other party; and</simpara>
</listitem>
<listitem>
<simpara>states that source code for the Program is available from such
Contributor, and informs licensees how to obtain it in a reasonable
manner on or through a medium customarily used for software exchange.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>When the Program is made available in source code form:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>it must be made available under this Agreement; and</simpara>
</listitem>
<listitem>
<simpara>a copy of this Agreement must be included with each copy of the
Program.</simpara>
</listitem>
</orderedlist>
<simpara>Contributors may not remove or alter any copyright notices contained
within the Program.</simpara>
<simpara>Each Contributor must identify itself as the originator of its
Contribution, if any, in a manner that reasonably allows subsequent
Recipients to identify the originator of the Contribution.</simpara>
<bridgehead xml:id="_4-commercial-distribution" renderas="sect3">4. COMMERCIAL DISTRIBUTION</bridgehead>
<simpara>Commercial distributors of software may accept certain responsibilities
with respect to end users, business partners and the like. While this
license is intended to facilitate the commercial use of the Program, the
Contributor who includes the Program in a commercial product offering
should do so in a manner which does not create potential liability for
other Contributors. Therefore, if a Contributor includes the Program in
a commercial product offering, such Contributor (<literal>Commercial
Contributor</literal>) hereby agrees to defend and indemnify every other
Contributor (<literal>Indemnified Contributor</literal>) against any losses, damages
and costs (collectively <literal>Losses</literal>) arising from claims, lawsuits and
other legal actions brought by a third party against the Indemnified
Contributor to the extent caused by the acts or omissions of such
Commercial Contributor in connection with its distribution of the
Program in a commercial product offering. The obligations in this
section do not apply to any claims or Losses relating to any actual or
alleged intellectual property infringement. In order to qualify, an
Indemnified Contributor must: a) promptly notify the Commercial
Contributor in writing of such claim, and b) allow the Commercial
Contributor to control, and cooperate with the Commercial Contributor
in, the defense and any related settlement negotiations. The Indemnified
Contributor may participate in any such claim at its own expense.</simpara>
<simpara>For example, a Contributor might include the Program in a commercial
product offering, Product X. That Contributor is then a Commercial
Contributor. If that Commercial Contributor then makes performance
claims, or offers warranties related to Product X, those performance
claims and warranties are such Commercial Contributor’s responsibility
alone. Under this section, the Commercial Contributor would have to
defend claims against the other Contributors related to those
performance claims and warranties, and if a court requires any other
Contributor to pay any damages as a result, the Commercial Contributor
must pay those damages.</simpara>
<bridgehead xml:id="_5-no-warranty" renderas="sect3">5. NO WARRANTY</bridgehead>
<simpara>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED
ON AN <literal>AS IS</literal> BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES
OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR
A PARTICULAR PURPOSE. Each Recipient is solely responsible for
determining the appropriateness of using and distributing the Program
and assumes all risks associated with its exercise of rights under this
Agreement , including but not limited to the risks and costs of program
errors, compliance with applicable laws, damage to or loss of data,
programs or equipment, and unavailability or interruption of operations.</simpara>
<bridgehead xml:id="_6-disclaimer-of-liability" renderas="sect3">6. DISCLAIMER OF LIABILITY</bridgehead>
<simpara>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR
ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING
WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR
DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</simpara>
<bridgehead xml:id="_7-general" renderas="sect3">7. GENERAL</bridgehead>
<simpara>If any provision of this Agreement is invalid or unenforceable under
applicable law, it shall not affect the validity or enforceability of
the remainder of the terms of this Agreement, and without further action
by the parties hereto, such provision shall be reformed to the minimum
extent necessary to make such provision valid and enforceable.</simpara>
<simpara>If Recipient institutes patent litigation against any entity (including
a cross-claim or counterclaim in a lawsuit) alleging that the Program
itself (excluding combinations of the Program with other software or
hardware) infringes such Recipient’s patent(s), then such Recipient’s
rights granted under Section 2(b) shall terminate as of the date such
litigation is filed.</simpara>
<simpara>All Recipient’s rights under this Agreement shall terminate if it fails
to comply with any of the material terms or conditions of this Agreement
and does not cure such failure in a reasonable period of time after
becoming aware of such noncompliance. If all Recipient’s rights under
this Agreement terminate, Recipient agrees to cease use and distribution
of the Program as soon as reasonably practicable. However, Recipient’s
obligations under this Agreement and any licenses granted by Recipient
relating to the Program shall continue and survive.</simpara>
<simpara>Everyone is permitted to copy and distribute copies of this Agreement,
but in order to avoid inconsistency the Agreement is copyrighted and may
only be modified in the following manner. The Agreement Steward reserves
the right to publish new versions (including revisions) of this
Agreement from time to time. No one other than the Agreement Steward has
the right to modify this Agreement. The Eclipse Foundation is the
initial Agreement Steward. The Eclipse Foundation may assign the
responsibility to serve as the Agreement Steward to a suitable separate
entity. Each new version of the Agreement will be given a distinguishing
version number. The Program (including Contributions) may always be
distributed subject to the version of the Agreement under which it was
received. In addition, after a new version of the Agreement is
published, Contributor may elect to distribute the Program (including
its Contributions) under the new version. Except as expressly stated in
Sections 2(a) and 2(b) above, Recipient receives no rights or licenses
to the intellectual property of any Contributor under this Agreement,
whether expressly, by implication, estoppel or otherwise. All rights in
the Program not expressly granted under this Agreement are reserved.</simpara>
<simpara>This Agreement is governed by the laws of the State of New York and the
intellectual property laws of the United States of America. No party to
this Agreement will bring a legal action under this Agreement more than
one year after the cause of action arose. Each party waives its rights
to a jury trial in any resulting litigation.</simpara>
</appendix>
<appendix xml:id="_bibliography">
<title>Bibliography</title>
<simpara><anchor xml:id="N4JSSpec" xreflabel="[N4JSSpec]"/>N4JS Project. (2018). <emphasis>N4JS Language Specification</emphasis>. Retrieved from <link xl:href="https://www.eclipse.org/n4js/spec/N4JSSpec.html">https://www.eclipse.org/n4js/spec/N4JSSpec.html</link></simpara>
</appendix>
</book>