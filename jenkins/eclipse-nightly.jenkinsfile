/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

pipeline {

    agent any

    options {
        buildDiscarder(
            logRotator(
                numToKeepStr:          '20',
                artifactDaysToKeepStr: '14',
                artifactNumToKeepStr:  '20',
                daysToKeepStr:         '14'))
        disableConcurrentBuilds()
        timeout(time: 6, unit: 'HOURS')
        timestamps()
    }

    environment {
        NODEJS_PATH= '/shared/common/node-v10.15.3-linux-x64/bin'
        YARN_PATH  = '/shared/common/yarn/1.15.2/bin'
        PATH       = "${PATH}"                                          +
                     ':/shared/common/jq/1.6'                           +
                     ':/shared/common/apache-ant-1.9.6/bin'             +
                     ':/shared/common/maven/apache-maven-3.6.0/bin/'    +
                     ':/shared/common/node-v10.15.3-linux-x64/bin'      +
                     ':/shared/common/yarn/1.15.2/bin'                  +
                     ':/shared/common/java/openjdk/jdk-11/bin'
        MAVEN_OPTS = '-Xmx4G'
        JAVA_HOME  = '/shared/common/java/openjdk/jdk-11'
    }

    triggers {
        cron('H 22 * * *') // build every night sometime after 10pm (22:00)
    }

    stages {

        stage('Build & Test') {
            steps {
                wrap([$class: 'Xvnc', takeScreenshot: false, useXauthority: true]) {
                    dir('n4js') {
                        script {
                            def options = [
                                '--batch-mode',
                                '--update-snapshots',
                                '--show-version',
                                '-Dtycho.localArtifacts=ignore',
                                '-Dmaven.test.failure.ignore',
                                '-DWORKSPACE=' + env.WORKSPACE,
                                '-DexcludeJRE'
                            ].join(' ')
                            def profiles = [
                                'buildProduct',
                                'execute-plugin-tests',
                                'execute-plugin-ui-tests',
                                'execute-ecma-tests',
                                'execute-accesscontrol-tests',
                                'execute-smoke-tests'
	                            //'execute-hlc-integration-tests'
                            ].join(',')

                            sh "mvn -P${profiles} ${options} clean verify"
                        }
                    }
                }
//                junit 'n4js/**/failsafe-reports/**/*.xml' // required to set build status! (due to use of '-Dmaven.test.failure.ignore')
                junit 'n4js/**/surefire-reports/**/*.xml'
            }
        }

        stage('Trigger Publishing Build') {
            when { // only if no error/failure/abort occured before
                expression {
                    return currentBuild.currentResult == "SUCCESS"
                }
            }
            steps {
                script {
                    def n4jsCommitId   = sh(returnStdout: true, script: 'cd n4js ; git log -n 1 --pretty=format:"%H"').trim()

                    echo """
Triggering publishing build with the following arguments:
BRANCH_OR_COMMIT: ${n4jsCommitId}
"""

                    build(
                        job:        'publish',
                        wait:       false,
                        parameters: [
                            [$class: 'StringParameterValue', name: 'BRANCH_OR_COMMIT', value: "${n4jsCommitId}"]
                        ])
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: '**/logs/*.log'
            archiveArtifacts allowEmptyArchive: true, artifacts: '**/tests/**/target/**/*-output.txt'
        }
        cleanup {
            deleteDir()
         }
    }
}
