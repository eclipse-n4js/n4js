/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


def MAVEN_OPTIONS = '-U -V -B -e '                                +
                    '-DWORKSPACE=$WORKSPACE '                     +
                    '-Dmaven.test.failure.ignore '                +
                    '-Dmaven.test.redirectTestOutputToFile=true ' +
                    '-Dtycho.localArtifacts=ignore'

def DEBUG_DEPLOY_SUFFIX = ''; // should be empty string by default; use something like '_GH-1234' for debugging the publishing build itself

// the following will be set below in stage 'Compute Version':
def String LANGUAGE_VERSION;
def String N4JS_LIBS_DIST_TAG;


pipeline {

    agent any

    options {
        buildDiscarder(
            logRotator(
                numToKeepStr:          '20',
                artifactDaysToKeepStr: '14',
                artifactNumToKeepStr:  '20',
                daysToKeepStr:         '14'))
        disableConcurrentBuilds()
        timeout(time: 3, unit: 'HOURS')
        timestamps()
    }

    environment {
        NODEJS_PATH= '/shared/common/node-v10.15.3-linux-x64/bin'
        YARN_PATH  = '/shared/common/yarn/1.15.2/bin'
        PATH       = "${PATH}"                                          +
                     ':/shared/common/jq/1.6'                           +
                     ':/shared/common/apache-ant-1.9.6/bin'             +
                     ':/shared/common/maven/apache-maven-3.6.0/bin/'    +
                     ':/shared/common/node-v10.15.3-linux-x64/bin'      +
                     ':/shared/common/yarn/1.15.2/bin'                  +
                     ':/shared/common/java/openjdk/jdk-11/bin'
        MAVEN_OPTS = '-Xmx4G'
        JAVA_HOME  = '/shared/common/java/openjdk/jdk-11'
    }

    stages {

        stage('Compute Version') {
            steps {
                script {
                    sh 'n4js/releng/utils/scripts/compute-version.sh'
                    LANGUAGE_VERSION = sh(returnStdout: true, script: 'jq -r ".languageVersion" n4js/version-info.json').trim();
                    N4JS_LIBS_DIST_TAG = sh(returnStdout: true, script: 'jq -r ".n4jsLibsDistTag" n4js/version-info.json').trim();
                    // note: we never publish any of the n4js-libs in this build,
                    // so we can ignore the other properties in file version-info.json
                }
            }
        }

        stage('Build (no tests)') {
            steps {
                dir('n4js') {
                    sh "mvn $MAVEN_OPTIONS -PbuildProduct -DlanguageVersion=${LANGUAGE_VERSION} -DexcludeJRE -DnoTests clean verify"
                }

                // assert that the headless builder reports the correct version
                script {
                    def versionOfHeadlessBuilder = sh(returnStdout: true, script: 'java -jar n4js/plugins/org.eclipse.n4js.cli/target/new_n4jsc.jar --version').trim();
                    if (versionOfHeadlessBuilder != LANGUAGE_VERSION) {
                        error "headless builder reported an incorrect version: ${versionOfHeadlessBuilder}"
                    }
                }
            }
        }

        stage('Sign macOS product') {
            steps {
                dir('n4js/target/products') {
                    sh "pwd"

                    // sign the macOS product
                    sh """\
                        mv      n4js-ide_macos.zip          unsigned_n4js-ide_macos.zip
                        curl -o n4js-ide_macos.zip -F file=@unsigned_n4js-ide_macos.zip http://build.eclipse.org:31338/macsign.php
                        rm unsigned_n4js-ide_macos.zip
                    """

                    // bundle macOS product into a signed .dmg image
                    sh """\
                        curl -o n4js-ide_macos.dmg -F sign=true -F source=@n4js-ide_macos.zip http://build.eclipse.org:31338/dmg-packager
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // append language version to file names of products
                    sh """
                        cd n4js/target
                        mv n4jsc.jar                n4jsc_${LANGUAGE_VERSION}.jar
                        cd products
                        mv n4js-ide_win.zip         n4js-ide_win_${LANGUAGE_VERSION}.zip
                        mv n4js-ide_macos.zip       n4js-ide_macos_${LANGUAGE_VERSION}.zip
                        mv n4js-ide_macos.dmg       n4js-ide_macos_${LANGUAGE_VERSION}.dmg
                        mv n4js-ide_linux-gtk.zip   n4js-ide_linux-gtk_${LANGUAGE_VERSION}.zip
                    """

                    echo "Deploying version ${LANGUAGE_VERSION} of N4JS IDE and headless builder ..."

                    echo 'START: moving old products / update sites to archive.eclipse.org (those that are older than a week):'
                    sh """\
                        cd /home/data/httpd/download.eclipse.org/n4js
                        find products/nightly -mindepth 1 -maxdepth 1 -type d -not -name LATEST -mtime +7 -print -exec mv {} /home/data/httpd/archive.eclipse.org/n4js/{} \\;
                        find updates/nightly  -mindepth 1 -maxdepth 1 -type d -not -name LATEST -mtime +7 -print -exec mv {} /home/data/httpd/archive.eclipse.org/n4js/{} \\;
                    """
                    echo 'END: moving old products / update sites to archive.eclipse.org'

                    echo 'START: copying new products / update site to download.eclipse.org:'
                    def pathProductsVersion = "/home/data/httpd/download.eclipse.org/n4js/products$DEBUG_DEPLOY_SUFFIX/nightly/$LANGUAGE_VERSION";
                    def pathUpdatesVersion  = "/home/data/httpd/download.eclipse.org/n4js/updates$DEBUG_DEPLOY_SUFFIX/nightly/$LANGUAGE_VERSION";
                    sh """\
                        mkdir -p ${pathProductsVersion}
                        cp       n4js/target/products/*.zip  ${pathProductsVersion}
                        cp       n4js/target/products/*.dmg  ${pathProductsVersion}
                        cp       n4js/target/*.jar           ${pathProductsVersion}

                        mkdir -p ${pathUpdatesVersion}
                        cp -R    n4js/builds/org.eclipse.n4js.product.build/target/repository/*  ${pathUpdatesVersion}
                    """
                    echo 'END: copying new products / update site to download.eclipse.org'

                    echo 'START: updating folder LATEST on download.eclipse.org:'
                    if (N4JS_LIBS_DIST_TAG == 'latest') {
                        def pathProductsLatest = "/home/data/httpd/download.eclipse.org/n4js/products$DEBUG_DEPLOY_SUFFIX/nightly/LATEST";
                        def pathUpdatesLatest  = "/home/data/httpd/download.eclipse.org/n4js/updates$DEBUG_DEPLOY_SUFFIX/nightly/LATEST";
                        sh """\
                            rm -rf   ${pathProductsLatest}
                            mkdir -p ${pathProductsLatest}
                            cp -R    ${pathProductsVersion}/* ${pathProductsLatest}

                            rm -rf   ${pathUpdatesLatest}
                            mkdir -p ${pathUpdatesLatest}
                            cp -R    ${pathUpdatesVersion}/*  ${pathUpdatesLatest}
                        """

                        // create copies of products without version suffix
                        sh """\
                            cp ${pathProductsLatest}/n4jsc_${LANGUAGE_VERSION}.jar               ${pathProductsLatest}/n4jsc.jar
                            cp ${pathProductsLatest}/n4js-ide_win_${LANGUAGE_VERSION}.zip        ${pathProductsLatest}/n4js-ide_win.zip
                            cp ${pathProductsLatest}/n4js-ide_macos_${LANGUAGE_VERSION}.zip      ${pathProductsLatest}/n4js-ide_macos.zip
                            cp ${pathProductsLatest}/n4js-ide_macos_${LANGUAGE_VERSION}.dmg      ${pathProductsLatest}/n4js-ide_macos.dmg
                            cp ${pathProductsLatest}/n4js-ide_linux-gtk_${LANGUAGE_VERSION}.zip  ${pathProductsLatest}/n4js-ide_linux-gtk.zip
                        """
                    } else {
                        echo 'SKIPPED! (because publishing with a dist-tag other than "latest")'
                    }
                    echo 'END: updating folder LATEST on download.eclipse.org:'

                    // show a summary
                    def output = sh returnStdout: true, script: """\
                        echo ******************** Products on download server:
                        ls -l /home/data/httpd/download.eclipse.org/n4js/products$DEBUG_DEPLOY_SUFFIX/nightly
                        echo ******************** Update sites on download server:
                        ls -l /home/data/httpd/download.eclipse.org/n4js/updates$DEBUG_DEPLOY_SUFFIX/nightly
                        echo ******************** Products on archive server:
                        ls -l /home/data/httpd/archive.eclipse.org/n4js/products/nightly
                        echo ******************** Update sites on archive server:
                        ls -l /home/data/httpd/archive.eclipse.org/n4js/updates/nightly
                        echo ********************
                    """

                    echo "$output"
                }
            }
        }
    }

    post {
        cleanup {
            deleteDir()
         }
    }
}
