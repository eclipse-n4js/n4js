/**
 * Copyright (c) 2021 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import * as fs_lib from "fs";
import * as path_lib from "path";
import * as utils from "utils";
import {runN4jsdGenerator} from "generator";
import {Assert} from "org/eclipse/n4js/mangelhaft/assert/Assert";

export public class AbstractN4jsdGeneratorTest {

	@Before
	protected cleanupBefore() {
		this.cleanup();
	}

	@After
	protected cleanupAfter() {
		//this.cleanup();
	}

	protected getTestFolder(): string {
		return process.cwd() + "/test/temp_test_data";
	}

	protected cleanup() {
		fs_lib.rmdirSync(this.getTestFolder(), { recursive: true });
	}

	protected createFile(relativePathAndName: string, content: string) {
		const testFolderPath = this.getTestFolder();
		const pathAndName = testFolderPath + "/" + relativePathAndName;
		let contentAdjusted = utils.trimMultiLineString(content);
		if (contentAdjusted.length > 0) {
			contentAdjusted = contentAdjusted + "\n"; // end non-empty files with an empty line
		}
		utils.mkdirs(path_lib.dirname(pathAndName));
		fs_lib.writeFileSync(pathAndName, contentAdjusted, undefined);
	}

	protected createPackageJson(relativePath: string, projectName: string) {
		const relPathAndName = (relativePath && relativePath.length > 0 ? relativePath + "/" : "")
			+ projectName + "/" + utils.PACKAGE_JSON;
		const obj = {
			"name": projectName,
			"version": "0.0.1",
			"description": "A test project.",
			"author": "Generated by AbstractN4jsdGeneratorTest#createPackageJson().",
			"license": "EPL-1.0",
			"devDependencies": {
				"typescript": "^4.0.5"
			}
		};
		this.createFile(relPathAndName, JSON.stringify(obj, undefined, "\t"));
	}

	protected runN4jsdGen(...args: string) {
		runN4jsdGenerator(args);
	}

	protected assertFileContent(relativePathAndName: string, expectedContent: string) {
		const testFolderPath = this.getTestFolder();
		const pathAndName = testFolderPath + "/" + relativePathAndName;
		Assert.isTrue(fs_lib.existsSync(pathAndName), "file does not exist: " + pathAndName);
		const actualContent = fs_lib.readFileSync(pathAndName, undefined).toString();
		const actualContentTrimmed = utils.trimMultiLineString(actualContent);
		const expectedContentTrimmed = utils.trimMultiLineString(expectedContent);
		Assert.equal(actualContentTrimmed, expectedContentTrimmed,
			"file does not have the expected content: " + relativePathAndName);
	}

	protected assertStringEquals(actual: string, expected: string, message: string = "unexpected string") {
		Assert.equal(actual, expected, message + `
${message}
EXPECTED:
-----------------------------
${expected}
-----------------------------
ACTUAL:
-----------------------------
${actual}
-----------------------------`);
	}
}
