/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


/* XPECT_SETUP org.eclipse.n4js.flowgraphs.tests.N4JSFlowgraphTest END_SETUP */


/**
 * Note:
 *
 * Tests in this file check the desctructuring control flows only.
 */



function Destructuring1() {
	/* Destructuring1 XPECT allEdges ---
		"start" --> x,
		x --> y,
		y --> 1,
		1 --> 2,
		2 --> [1\, 2],
		[1\, 2] --> [x\,y] = [1\, 2],
		[x\,y] = [1\, 2] --> let [x\,y] = [1\, 2];,
		let [x\,y] = [1\, 2]; --> "end"
	--- */
	// Destructuring1 XPECT allPaths --> "start" -> x -> y -> 1 -> 2 -> [1\, 2] -> [x\,y] = [1\, 2] -> let [x\,y] = [1\, 2]; -> "end"
	// Destructuring1 XPECT path from '"start"' to '"end"' -->
	// Destructuring1 XPECT commonPreds of '1' and '2' --> 1
	// Destructuring1 XPECT succs at '"start"' --> x
	// Destructuring1 XPECT succs at 'x' --> y
	// Destructuring1 XPECT succs at 'y' --> 1
	// Destructuring1 XPECT succs at '1' --> 2
	// Destructuring1 XPECT succs at '2' --> [1\, 2]
	// Destructuring1 XPECT succs at '[1, 2]' --> [x\,y] = [1\, 2]
	// Destructuring1 XPECT succs at '[x,y] = [1, 2]' --> let [x\,y] = [1\, 2];
	// Destructuring1 XPECT succs at 'let [x,y] = [1, 2];' --> "end"
	"start";
	let [x,y] = [1, 2];
	"end";
}

function Destructuring2() {
	/* Destructuring2 XPECT allEdges ---
		"start" --> x,
		x --> y,
		y --> 1,
		1 --> 2,
		2 --> 3,
		3 --> [2\, 3],
		[2\, 3] --> [1\, [2\, 3]],
		[1\, [2\, 3]] --> [x\,y] = [1\, [2\, 3]],
		[x\,y] = [1\, [2\, 3]] --> let [x\,y] = [1\, [2\, 3]];,
		let [x\,y] = [1\, [2\, 3]]; --> "end"
	--- */
	/* Destructuring2 XPECT allPaths ---
	   "start" -> x -> y -> 1 -> 2 -> 3
	   -> [2\, 3]
	   -> [1\, [2\, 3]]
	   -> [x\,y] = [1\, [2\, 3]]
	   -> let [x\,y] = [1\, [2\, 3]];
	   -> "end"
	--- */
	// Destructuring2 XPECT path from '"start"' to '"end"' -->
	// Destructuring2 XPECT commonPreds of '1' and '2' --> 1
	// Destructuring2 XPECT succs at '"start"' --> x
	// Destructuring2 XPECT succs at 'x' --> y
	// Destructuring2 XPECT succs at 'y' --> 1
	// Destructuring2 XPECT succs at '1' --> 2
	// Destructuring2 XPECT succs at '2' --> 3
	// Destructuring2 XPECT succs at '3' --> [2\, 3]
	// Destructuring2 XPECT succs at '[2, 3]' --> [1\, [2\, 3]]
	// Destructuring2 XPECT succs at '[1, [2, 3]]' --> [x\,y] = [1\, [2\, 3]]
	// Destructuring2 XPECT succs at '[x,y] = [1, [2, 3]]' --> let [x\,y] = [1\, [2\, 3]];
	// Destructuring2 XPECT succs at 'let [x,y] = [1, [2, 3]];' --> "end"
	"start";
	let [x,y] = [1, [2, 3]];
	"end";
}



function Destructuring3() {
	/* Destructuring3 XPECT allEdges ---
		"start" --> x,
		x --> y,
		y --> 1,
		1 --> 2,
		2 --> {x:1\, y:2},
		{x:1\, y:2} --> {x\,y} = {x:1\, y:2},
		{x\,y} = {x:1\, y:2} --> let {x\,y} = {x:1\, y:2};,
		let {x\,y} = {x:1\, y:2}; --> "end"
	--- */
	/* Destructuring3 XPECT allPaths ---
		"start" -> x -> y -> 1 -> 2
		-> {x:1\, y:2}
		-> {x\,y} = {x:1\, y:2}
		-> let {x\,y} = {x:1\, y:2};
		-> "end"
	--- */
	// Destructuring3 XPECT path from '"start"' to '"end"' -->
	// Destructuring3 XPECT commonPreds of '1' and '2' --> 1
	// Destructuring3 XPECT succs at '"start"' --> x
	// Destructuring3 XPECT succs at 'x' --> y
	// Destructuring3 XPECT succs at 'y' --> 1
	// Destructuring3 XPECT succs at '1' --> 2
	// Destructuring3 XPECT succs at '2' --> {x:1\, y:2}
	// Destructuring3 XPECT succs at '{x:1, y:2}' --> {x\,y} = {x:1\, y:2}
	// Destructuring3 XPECT succs at '{x,y} = {x:1, y:2}' --> let {x\,y} = {x:1\, y:2};
	// Destructuring3 XPECT succs at 'let {x,y} = {x:1, y:2};' --> "end"
	"start";
	let {x,y} = {x:1, y:2};
	"end";
}

function Destructuring4() {
	/* Destructuring4 XPECT allEdges ---
		"start" --> x,
		x --> y,
		y --> 1,
		1 --> 2,
		2 --> {z:2},
		{z:2} --> {x:1\, y:{z:2}},
		{x:1\, y:{z:2}} --> {x\,y} = {x:1\, y:{z:2}},
		{x\,y} = {x:1\, y:{z:2}} --> let {x\,y} = {x:1\, y:{z:2}};,
		let {x\,y} = {x:1\, y:{z:2}}; --> "end"
	--- */
	/* Destructuring4 XPECT allPaths ---
		"start" -> x -> y -> 1 -> 2
		-> {z:2}
		-> {x:1\, y:{z:2}}
		-> {x\,y} = {x:1\, y:{z:2}}
		-> let {x\,y} = {x:1\, y:{z:2}};
		-> "end"
	--- */
	// Destructuring4 XPECT path from '"start"' to '"end"' -->
	// Destructuring4 XPECT commonPreds of '1' and '2' --> 1
	// Destructuring4 XPECT succs at '"start"' --> x
	// Destructuring4 XPECT succs at 'x' --> y
	// Destructuring4 XPECT succs at 'y' --> 1
	// Destructuring4 XPECT succs at '1' --> 2
	// Destructuring4 XPECT succs at '2' --> {z:2}
	// Destructuring4 XPECT succs at '{z:2}' --> {x:1\, y:{z:2}}
	// Destructuring4 XPECT succs at '{x:1, y:{z:2}}' --> {x\,y} = {x:1\, y:{z:2}}
	// Destructuring4 XPECT succs at '{x,y} = {x:1, y:{z:2}}' --> let {x\,y} = {x:1\, y:{z:2}};
	// Destructuring4 XPECT succs at 'let {x,y} = {x:1, y:{z:2}};' --> "end"
	"start";
	let {x,y} = {x:1, y:{z:2}};
	"end";
}

function Destructuring5() {
	/* Destructuring5 XPECT allEdges ---
		"start" --> x,
		x --> y,
		y --> 1,
		1 --> 2,
		2 --> [2],
		[2] --> {x:1\, y:[2]},
		{x:1\, y:[2]} --> {x\,y} = {x:1\, y:[2]},
		{x\,y} = {x:1\, y:[2]} --> let {x\,y} = {x:1\, y:[2]};,
		let {x\,y} = {x:1\, y:[2]}; --> "end"
	--- */
	/* Destructuring4 XPECT allPaths ---
		"start" -> x -> y -> 1 -> 2
		-> [2]
		-> {x:1\, y:[2]}
		-> {x\,y} = {x:1\, y:[2]}
		-> let {x\,y} = {x:1\, y:[2]};
		-> "end"
	--- */
	// Destructuring5 XPECT path from '"start"' to '"end"' -->
	// Destructuring5 XPECT commonPreds of '1' and '2' --> 1
	// Destructuring5 XPECT succs at '"start"' --> x
	// Destructuring5 XPECT succs at 'x' --> y
	// Destructuring5 XPECT succs at 'y' --> 1
	// Destructuring5 XPECT succs at '1' --> 2
	// Destructuring5 XPECT succs at '2' --> [2]
	// Destructuring5 XPECT succs at '[2]' --> {x:1\, y:[2]}
	// Destructuring5 XPECT succs at '{x:1, y:[2]}' --> {x\,y} = {x:1\, y:[2]}
	// Destructuring5 XPECT succs at '{x,y} = {x:1, y:[2]}' --> let {x\,y} = {x:1\, y:[2]};
	// Destructuring5 XPECT succs at 'let {x,y} = {x:1, y:[2]};' --> "end"
	"start";
	let {x,y} = {x:1, y:[2]};
	"end";
}

function Destructuring6() {
	/* Destructuring6 XPECT allEdges ---
		"start" --> x,
		x --> y,
		y --> 1,
		1 --> 2,
		2 --> {y:2},
		{y:2} --> [1\, {y:2}],
		[1\, {y:2}] --> [x\,y] = [1\, {y:2}],
		[x\,y] = [1\, {y:2}] --> let [x\,y] = [1\, {y:2}];,
		let [x\,y] = [1\, {y:2}]; --> "end"
	--- */
	/* Destructuring6 XPECT allPaths ---
	   "start" -> x -> y -> 1 -> 2
	   -> {y:2}
	   -> [1\, {y:2}]
	   -> [x\,y] = [1\, {y:2}]
	   -> let [x\,y] = [1\, {y:2}];
	   -> "end"
	--- */
	// Destructuring6 XPECT path from '"start"' to '"end"' -->
	// Destructuring6 XPECT commonPreds of '1' and '2' --> 1
	// Destructuring6 XPECT succs at '"start"' --> x
	// Destructuring6 XPECT succs at 'x' --> y
	// Destructuring6 XPECT succs at 'y' --> 1
	// Destructuring6 XPECT succs at '1' --> 2
	// Destructuring6 XPECT succs at '2' --> {y:2}
	// Destructuring6 XPECT succs at '{y:2}' --> [1\, {y:2}]
	// Destructuring6 XPECT succs at '[1, {y:2}]' --> [x\,y] = [1\, {y:2}]
	// Destructuring6 XPECT succs at '[x,y] = [1, {y:2}]' --> let [x\,y] = [1\, {y:2}];
	// Destructuring6 XPECT succs at 'let [x,y] = [1, {y:2}];' --> "end"
	"start";
	let [x,y] = [1, {y:2}];
	"end";
}
