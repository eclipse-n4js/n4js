/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


/* XPECT_SETUP org.eclipse.n4js.flowgraphs.tests.N4JSFlowGraphTest END_SETUP */


/**
 * Note:
 *
 * Tests in this file seem similar and redundant but are necessary
 * since all test methods rely on different algorithms. To verify these
 * algorithms it is important that all test methods are tested with
 * all supported language features.
 */


// AnnotationList are ignored
export @Internal public class AnnotationList {}


function DoStatement1() {
	// DoStatement1 XPECT cfContainer --> FunctionDeclaration::Block
	/* DoStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 -Repeat-> 1,
		2 -Exit-> "end"
	--- */
	/* DoStatement1 XPECT allBranches ---
		B0: "start" -> 1 -> 2[B1|B2],
		B1: [B0] -> 1 -> 2[B3|B4],
		B2: [B0] -> [B5],
		B3: [B1] -> 1 -> 2 -> [B5],
		B4: [B1] -> [B5],
		B5: [B2|B3|B4]"end"
	--- */
	/* DoStatement1 backward XPECT allBranches direction 'Backward' ---
		B0: "end" -> 2 -> 1[B1|B2],
		B1: [B0] -> "start",
		B2: [B0] -> 2 -> 1[B3|B4],
		B3: [B2] -> "start",
		B4: [B2] -> 2 -> 1 -> "start"
	--- */
	/* DoStatement1 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 1 -> 2 -> 1 -> 2 -> "end"
	--- */
	/* DoStatement1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> 2 -> 1 -> 2 -> 1 -> "start"
	--- */
	// DoStatement1 XPECT path from '"start"' to '"end"' -->
	// DoStatement1 XPECT path from '2' to '1' -->
	// DoStatement1 XPECT commonPreds of '1' and '"end"' --> 1, 2
	// DoStatement1 XPECT succs at '"start"' --> 1
	// DoStatement1 XPECT succs at '1' --> 2
	// DoStatement1 XPECT succs at '2' --> 1, "end"
	// DoStatement1 XPECT preds at 'do' --> "start"
	// DoStatement1 XPECT succs at 'do' --> "end"
	"start";
	do {
		1;
	} while (2);
	"end";
}

function DoStatementBreak1() {
	// DoStatementBreak1 XPECT cfContainer --> FunctionDeclaration::Block
	/* DoStatementBreak1 XPECT allEdges ---
		"start" --> 1, 1 --> break;, 2 --> 3, 3 -Exit-> "end", 3 -Repeat-> 1,
		break; -Break-> "end"
	--- */
	/* DoStatementBreak1 XPECT allBranches ---
		B0: "start" -> 1 -> break;[b1|B2],
		B10: [B7] -> [B11],
		B11: [B4|B6|B8|b9|B10]"end",
		B2: [B0] -> "end",
		B3: [b1] -> 1 -> break;[b5|B6],
		B4: [b1] -> [B11],
		B6: [B3] -> [B11],
		B7: [b5] -> 1 -> break;[b9|B10],
		B8: [b5] -> [B11],
		b1: [B0] -> 2 -> 3[B3|B4],
		b5: [B3] -> 2 -> 3[B7|B8],
		b9: [B7] -> 2 -> 3 -> [B11]
	--- */
	/* DoStatementBreak1 backward XPECT allBranches direction 'Backward' ---
		B0: "end"[B1|b2],
		B1: [B0] -> break; -> 1[B3|b4],
		B3: [B1] -> "start",
		B6: [b5] -> break; -> 1[B7|b8],
		B7: [B6] -> "start",
		B9: [b8] -> break; -> 1 -> "start",
		b2: [B0] -> [b5],
		b4: [B1] -> [b5],
		b5: [b2|b4]3 -> 2[B6],
		b8: [B6] -> 3 -> 2[B9]
	--- */
	// DoStatementBreak1 XPECT allPaths --> "start" -> 1 -> break; -> "end"
	/* DoStatementBreak1 backward XPECT allPaths direction 'Backward' ---
		"end" -> break; -> 1 -> "start"
	--- */
	// DoStatementBreak1 XPECT path from '"start"' to '"end"' -->
	// DoStatementBreak1 XPECT path from '"start"' notTo '2' -->
	// DoStatementBreak1 XPECT path from '"start"' notTo '3' -->
	// DoStatementBreak1 XPECT path from 'break;' notTo '1' -->
	// DoStatementBreak1 XPECT commonPreds of '1' and '2' --> 2
	// DoStatementBreak1 XPECT commonPreds of 'break' and '1' --> 1
	// DoStatementBreak1 XPECT succs at '"start"' --> 1
	// DoStatementBreak1 XPECT succs at '1' --> break;
	// DoStatementBreak1 XPECT succs type 'Break' at 'break;' --> "end"
	// DoStatementBreak1 XPECT succs at '2' --> 3
	// DoStatementBreak1 XPECT succs at '3' --> 1, "end"
	// DoStatementBreak1 XPECT preds at 'do' --> "start"
	// DoStatementBreak1 XPECT succs at 'do' --> "end"
	"start";
	do {
		1;
		break;
		// DoStatementBreak1 XPECT warnings --> "Dead code. No execution possible after break." at "2;"
		2;
		// DoStatementBreak1 XPECT warnings --> "Dead code. No execution possible after expression statement." at "3"
	} while (3);
	"end";
}

function DoStatementContinue1() {
	// DoStatementContinue1 XPECT cfContainer --> FunctionDeclaration::Block
	/* DoStatementContinue1 XPECT allEdges ---
		"start" --> 1, 1 --> continue;, 2 --> 3, 3 -Exit-> "end", 3 -Repeat-> 1,
		continue; -Continue-> 3
	--- */
	/* DoStatementContinue1 XPECT allBranches ---
		B0: "start" -> 1 -> continue;[B1|b2],
		B11: [B4|B8|B9]"end",
		B1: [B0] -> 3[B3|B4],
		B3: [B1] -> 1 -> continue;[B5|b6],
		B4: [B1] -> [B11],
		B5: [B3] -> 3[B7|B8],
		B7: [B5] -> 1 -> continue;[B9|b10],
		B8: [B5] -> [B11],
		B9: [B7] -> 3 -> [B11],
		b10: [B7] -> [b12],
		b12: [b2|b6|b10]2 -> 3 -> "end",
		b2: [B0] -> [b12],
		b6: [B3] -> [b12]
	--- */
	/* DoStatementContinue1 backward XPECT allBranches direction 'Backward' ---
		B0: "end" -> 3[b1|B2],
		B10: [B8|B9]continue; -> 1[B11|B12],
		B11: [B10] -> "start",
		B12: [B10] -> 3[b13|B14],
		B14: [B12] -> [B16],
		B15: [b13] -> [B16],
		B16: [B14|B15]continue; -> 1 -> "start",
		B2: [B0] -> [B4],
		B3: [b1] -> [B4],
		B4: [B2|B3]continue; -> 1[B5|B6],
		B5: [B4] -> "start",
		B6: [B4] -> 3[b7|B8],
		B8: [B6] -> [B10],
		B9: [b7] -> [B10],
		b13: [B12] -> 2[B15],
		b1: [B0] -> 2[B3],
		b7: [B6] -> 2[B9]
	--- */
	/* DoStatementContinue1 XPECT allPaths ---
		"start" -> 1 -> continue; -> 3 -> "end",
		"start" -> 1 -> continue; -> 3 -> 1 -> continue; -> 3 -> "end",
		"start" -> 1 -> continue; -> 3 -> 1 -> continue; -> 3 -> 1 -> continue; -> 3 -> "end"
	--- */
	/* DoStatementContinue1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 3 -> continue; -> 1 -> "start",
		"end" -> 3 -> continue; -> 1 -> 3 -> continue; -> 1 -> "start",
		"end" -> 3 -> continue; -> 1 -> 3 -> continue; -> 1 -> 3 -> continue; -> 1 -> "start"
	--- */
	// DoStatementContinue1 XPECT path from '"start"' to '"end"' -->
	// DoStatementContinue1 XPECT path from '"start"' notTo '2' -->
	// DoStatementContinue1 XPECT path from 'continue;' to '1' -->
	// DoStatementContinue1 XPECT commonPreds of '1' and '2' --> 2
	// DoStatementContinue1 XPECT commonPreds of '1' and '3' --> 1, 3
	// DoStatementContinue1 XPECT succs at '"start"' --> 1
	// DoStatementContinue1 XPECT succs at '1' --> continue;
	// DoStatementContinue1 XPECT succs type 'Continue' at 'continue;' --> 3
	// DoStatementContinue1 XPECT succs at '2' --> 3
	// DoStatementContinue1 XPECT succs at '3' --> 1, "end"
	// DoStatementContinue1 XPECT preds at 'do' --> "start"
	// DoStatementContinue1 XPECT succs at 'do' --> "end"
	"start";
	do {
		1;
		continue;
		// DoStatementContinue1 XPECT warnings --> "Dead code. No execution possible after continue." at "2;"
		2;
	} while (3);
	"end";
}



function WhileStatement1() {
	// WhileStatement1 XPECT cfContainer --> FunctionDeclaration::Block
	/* WhileStatement1 XPECT allEdges ---
		"start" --> 1,
		1 -Repeat-> 2,
		2 --> 1,
		1 -Exit-> "end"
	--- */
	/* WhileStatement1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B1: [B0] -> 2 -> 1[B3|B4],
		B2: [B0] -> [B5],
		B3: [B1] -> 2 -> 1 -> [B5],
		B4: [B1] -> [B5],
		B5: [B2|B3|B4]"end"
	--- */
	/* WhileStatement1 backward XPECT allBranches direction 'Backward' ---
		B0: "end" -> 1[B1|B2],
		B1: [B0] -> "start",
		B2: [B0] -> 2 -> 1[B3|B4],
		B3: [B2] -> "start",
		B4: [B2] -> 2 -> 1[B5|B6],
		B5: [B4] -> "start",
		B6: [B4] -> 2
	--- */
	/* WhileStatement1 XPECT allPaths ---
		"start" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 -> 2 -> 1 -> "end"
	--- */
	/* WhileStatement1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 1 -> 2 -> 1 -> "start",
		"end" -> 1 -> 2 -> 1 -> 2 -> 1 -> "start",
		"end" -> 1 -> 2 -> 1 -> 2 -> 1 -> 2
	--- */
	// WhileStatement1 XPECT path from '"start"' to '"end"' -->
	// WhileStatement1 XPECT path from '2' to '"end"' -->
	// WhileStatement1 XPECT commonPreds of '1' and '2' --> 1, 2
	// WhileStatement1 XPECT commonPreds of '1' and '"end"' --> 1
	// WhileStatement1 XPECT succs at '"start"' --> 1
	// WhileStatement1 XPECT succs at '1' --> 2, "end"
	// WhileStatement1 XPECT succs type 'Repeat' at '1' --> 2
	// WhileStatement1 XPECT succs at '2' --> 1
	// WhileStatement1 XPECT preds at 'while' --> "start"
	// WhileStatement1 XPECT succs at 'while' --> "end"
	"start";
	while (1) {
		2;
	}
	"end";
}

function WhileStatementBreak1() {
	// WhileStatementBreak1 XPECT cfContainer --> FunctionDeclaration::Block
	/* WhileStatementBreak1 XPECT allEdges ---
		"start" --> 1, 1 -Exit-> "end", 1 -Repeat-> 2, 2 --> break;, 3 --> 1,
		break; -Break-> "end"
	--- */
	/* WhileStatementBreak1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B10: [B7|b8|B9]"end",
		B1: [B0] -> 2 -> break;[b3|B4],
		B2: [B0] -> [B5],
		B4: [B1] -> [B5],
		B5: [B2|B4]"end",
		B6: [b3] -> 2 -> break;[b8|B9],
		B7: [b3] -> [B10],
		B9: [B6] -> [B10],
		b3: [B1] -> 3 -> 1[B6|B7],
		b8: [B6] -> 3 -> 1 -> [B10]
	--- */
	/* WhileStatementBreak1 backward XPECT allBranches direction 'Backward' ---
		B0: "end"[B1|B2],
		B1: [B0] -> [B3],
		B2: [B0] -> break; -> 2 -> [B3],
		B3: [B1|B2]1[B4|b5],
		B4: [B3] -> "start",
		B6: [b5] -> break; -> 2 -> 1[B7|b8],
		B7: [B6] -> "start",
		B9: [b8] -> break; -> 2,
		b5: [B3] -> 3[B6],
		b8: [B6] -> 3[B9]
	--- */
	/* WhileStatementBreak1 XPECT allPaths ---
		"start" -> 1 -> "end",
		"start" -> 1 -> 2 -> break; -> "end"
	--- */
	/* WhileStatementBreak1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start", "end" -> break; -> 2 -> 1 -> "start"
	--- */
	// WhileStatementBreak1 XPECT path from '"start"' to '"end"' -->
	// WhileStatementBreak1 XPECT path from '"start"' notTo '3' -->
	// WhileStatementBreak1 XPECT path from '2' notTo '1' -->
	// WhileStatementBreak1 XPECT path from '3' to '2' -->
	// WhileStatementBreak1 XPECT commonPreds of '1' and '2' --> 1
	// WhileStatementBreak1 XPECT commonPreds of '1' and '"end"' --> 1
	// WhileStatementBreak1 XPECT commonPreds of 'break;' and '"end"' --> 1, break;
	// WhileStatementBreak1 XPECT commonPreds of 'break;' and '3' --> 3
	// WhileStatementBreak1 XPECT commonPreds of '2' and '"end"' --> 1, 2
	// WhileStatementBreak1 XPECT succs at '"start"' --> 1
	// WhileStatementBreak1 XPECT succs at '1' --> 2, "end"
	// WhileStatementBreak1 XPECT succs type 'Repeat' at '1' --> 2
	// WhileStatementBreak1 XPECT succs at '2' --> break;
	// WhileStatementBreak1 XPECT succs type 'Break' at 'break;' --> "end"
	// WhileStatementBreak1 XPECT succs at '3' --> 1
	// WhileStatementBreak1 XPECT preds at 'while' --> "start"
	// WhileStatementBreak1 XPECT succs at 'while' --> "end"
	"start";
	while (1) {
		2;
		break;
		// WhileStatementBreak1 XPECT warnings --> "Dead code. No execution possible after break." at "3;"
		3;
	}
	"end";
}

function WhileStatementContinue1() {
	// WhileStatementContinue1 XPECT cfContainer --> FunctionDeclaration::Block
	/* WhileStatementContinue1 XPECT allEdges ---
		"start" --> 1, 1 -Exit-> "end", 1 -Repeat-> 2, 2 --> continue;, 3 --> 1,
		continue; -Continue-> 1
	--- */
	/* WhileStatementContinue1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B1: [B0] -> 2 -> continue;[B3|b4],
		B2: [B0] -> [B9],
		B3: [B1] -> 1[B5|B6],
		B5: [B3] -> 2 -> continue;[B7|b8],
		B6: [B3] -> [B9],
		B7: [B5] -> 1 -> [B9],
		B9: [B2|B6|B7]"end",
		b10: [b4|b8]3 -> 1 -> "end",
		b4: [B1] -> [b10],
		b8: [B5] -> [b10]
	--- */
	/* WhileStatementContinue1 backward XPECT allBranches direction 'Backward' ---
		B0: "end" -> 1[B1|b2|B3],
		B10: [B8|B9]continue; -> 2 -> 1[B11|b12|B13],
		B11: [B10] -> "start",
		B13: [B10] -> [B15],
		B14: [b12] -> [B15],
		B15: [B13|B14]continue; -> 2,
		B1: [B0] -> "start",
		B3: [B0] -> [B5],
		B4: [b2] -> [B5],
		B5: [B3|B4]continue; -> 2 -> 1[B6|b7|B8],
		B6: [B5] -> "start",
		B8: [B5] -> [B10],
		B9: [b7] -> [B10],
		b12: [B10] -> 3[B14],
		b2: [B0] -> 3[B4],
		b7: [B5] -> 3[B9]
	--- */
	/* WhileStatementContinue1 XPECT allPaths ---
		"start" -> 1 -> "end",
		"start" -> 1 -> 2 -> continue; -> 1 -> "end",
		"start" -> 1 -> 2 -> continue; -> 1 -> 2 -> continue; -> 1 -> "end"
	--- */
	/* WhileStatementContinue1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start", "end" -> 1 -> continue; -> 2 -> 1 -> "start",
		"end" -> 1 -> continue; -> 2 -> 1 -> continue; -> 2 -> 1 -> "start", "end" -> 1 -> continue; -> 2 -> 1 -> continue; -> 2 -> 1 -> continue; -> 2
	--- */
	// WhileStatementContinue1 XPECT path from '"start"' to '"end"' -->
	// WhileStatementContinue1 XPECT path from '"start"' notTo '3' -->
	// WhileStatementContinue1 XPECT path from '2' to '1' -->
	// WhileStatementContinue1 XPECT path from '3' to '2' -->
	// WhileStatementContinue1 XPECT commonPreds of '1' and '2' --> 1, 2
	// WhileStatementContinue1 XPECT commonPreds of '1' and '"end"' --> 1
	// WhileStatementContinue1 XPECT commonPreds of 'continue;' and '"end"' --> 1, continue;
	// WhileStatementContinue1 XPECT commonPreds of 'continue;' and '3' --> 3
	// WhileStatementContinue1 XPECT commonPreds of '2' and '"end"' --> 1, 2
	// WhileStatementContinue1 XPECT succs at '"start"' --> 1
	// WhileStatementContinue1 XPECT succs at '1' --> 2, "end"
	// WhileStatementContinue1 XPECT succs type 'Repeat' at '1' --> 2
	// WhileStatementContinue1 XPECT succs at '2' --> continue;
	// WhileStatementContinue1 XPECT succs type 'Continue' at 'continue;' --> 1
	// WhileStatementContinue1 XPECT succs at '3' --> 1
	// WhileStatementContinue1 XPECT preds at 'while' --> "start"
	// WhileStatementContinue1 XPECT succs at 'while' --> "end"
	"start";
	while (1) {
		2;
		continue;
		// WhileStatementContinue1 XPECT warnings --> "Dead code. No execution possible after continue." at "3;"
		3;
	}
	"end";
}
