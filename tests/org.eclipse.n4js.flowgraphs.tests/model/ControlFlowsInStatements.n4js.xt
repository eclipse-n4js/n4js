/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


/* XPECT_SETUP org.eclipse.n4js.flowgraphs.tests.N4JSFlowgraphTest END_SETUP */


/**
 * Note:
 *
 * Tests in this file seem similar and redundant but are necessary
 * since all test methods rely on different algorithms. To very these
 * algorithms it is important that all test methods are tested with
 * all supported language features.
 */


// AnnotationList are ignored
export @Internal public class AnnotationList {}


function Block1() {
	/* Block1 XPECT allEdges ---
		"start" --> 1,
		1 --> "end"
	--- */
	// Block1 XPECT allPaths --> "start" -> 1 -> "end"
	// Block1 XPECT allPaths direction 'Backward' --> "end" -> 1 -> "start"
	// Block1 XPECT path from '"start"' to '"end"' -->
	// Block1 XPECT commonPreds of '1' and '"start"' --> "start"
	// Block1 XPECT succs at '"start"' --> 1
	// Block1 XPECT succs at '1' --> "end"
	"start";
	{
		1;
	}
	"end";
}

function Block2() {
	/* Block2 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> "end"
	--- */
	// Block2 XPECT allPaths --> "start" -> 1 -> 2 -> "end"
	// Block2 XPECT allPaths direction 'Backward' --> "end" -> 2 -> 1 -> "start"
	// Block2 XPECT path from '"start"' to '"end"' -->
	// Block2 XPECT commonPreds of '"start"' and '2' --> "start"
	// Block2 XPECT succs at '"start"' --> 1
	// Block2 XPECT succs at '1' --> 2
	// Block2 XPECT succs at '2' --> "end"
	"start";
	{
		1;
		{
			2;
		}
	}
	"end";
}

function Block3() {
	/* Block3 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> "end"
	--- */
	// Block3 XPECT allPaths --> "start" -> 1 -> 2 -> "end"
	// Block3 XPECT allPaths direction 'Backward' --> "end" -> 2 -> 1 -> "start"
	// Block3 XPECT path from '"start"' to '"end"' -->
	// Block3 XPECT commonPreds of '"end"' and '"start"' --> "start"
	// Block3 XPECT succs at '"start"' --> 1
	// Block3 XPECT succs at '1' --> 2
	// Block3 XPECT succs at '2' --> "end"
	"start";
	{
		{
			1;
		}
		2;
	}
	"end";
}

function DoStatement1() {
	/* DoStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 -Repeat-> 1,
		2 --> "end"
	--- */
	/* DoStatement1 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 1 -> 2 -> 1 -> 2 -> "end"
	--- */
	/* DoStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> 2 -> 1 -> 2 -> 1 -> "start"
	--- */
	// DoStatement1 XPECT path from '"start"' to '"end"' -->
	// DoStatement1 XPECT path from '2' to '1' -->
	// DoStatement1 XPECT commonPreds of '1' and '"end"' --> 1, 2
	// DoStatement1 XPECT succs at '"start"' --> 1
	// DoStatement1 XPECT succs at '1' --> 2
	// DoStatement1 XPECT succs at '2' --> 1, "end"
	"start";
	do {
		1;
	} while (2);
	"end";
}

function DoStatementBreak1() {
	/* DoStatementBreak1 XPECT allEdges ---
		"start" --> 1,
		1 --> break;,
		2 --> 3,
		3 -Repeat-> 1,
		3 --> "end",
		break; -Break-> "end"
	--- */
	// DoStatementBreak1 XPECT allPaths --> "start" -> 1 -> break; -> "end"
	/* DoStatementBreak1 XPECT allPaths direction 'Backward' ---
		"end" -> 3 -> 2,
		"end" -> break; -> 1 -> "start",
		"end" -> break; -> 1 -> 3 -> 2
	--- */
	// DoStatementBreak1 XPECT path from '"start"' to '"end"' -->
	// DoStatementBreak1 XPECT path from '"start"' notTo '2' -->
	// DoStatementBreak1 XPECT path from '"start"' notTo '3' -->
	// DoStatementBreak1 XPECT path from 'break;' notTo '1' -->
	// DoStatementBreak1 XPECT commonPreds of '1' and '2' --> 2
	// DoStatementBreak1 XPECT commonPreds of 'break' and '1' --> 1
	// DoStatementBreak1 XPECT succs at '"start"' --> 1
	// DoStatementBreak1 XPECT succs at '1' --> break;
	// DoStatementBreak1 XPECT succs type 'Break' at 'break;' --> "end"
	// DoStatementBreak1 XPECT succs at '2' --> 3
	// DoStatementBreak1 XPECT succs at '3' --> 1, "end"
	"start";
	do {
		1;
		break;
		// DoStatementBreak1 XPECT warnings --> "Dead code. No execution possible after break." at "2; 	} while (3"
		2;
	} while (3);
	"end";
}

function DoStatementContinue1() {
	/* DoStatementContinue1 XPECT allEdges ---
		"start" --> 1,
		1 --> continue;,
		continue; -Continue-> 3,
		2 --> 3,
		3 -Repeat-> 1,
		3 --> "end"
	--- */
	/* DoStatementContinue1 XPECT allPaths ---
		"start" -> 1 -> continue; -> 3 -> "end",
		"start" -> 1 -> continue; -> 3 -> 1 -> continue; -> 3 -> "end",
		"start" -> 1 -> continue; -> 3 -> 1 -> continue; -> 3 -> 1 -> continue; -> 3 -> "end"
	--- */
	/* DoStatementContinue1 XPECT allPaths direction 'Backward' ---
		"end" -> 3 -> 2, "end" -> 3 -> continue; -> 1 -> "start",
		"end" -> 3 -> continue; -> 1 -> 3 -> 2,
		"end" -> 3 -> continue; -> 1 -> 3 -> continue; -> 1 -> "start",
		"end" -> 3 -> continue; -> 1 -> 3 -> continue; -> 1 -> 3 -> 2,
		"end" -> 3 -> continue; -> 1 -> 3 -> continue; -> 1 -> 3 -> continue; -> 1 -> "start"
	--- */
	// DoStatementContinue1 XPECT path from '"start"' to '"end"' -->
	// DoStatementContinue1 XPECT path from '"start"' notTo '2' -->
	// DoStatementContinue1 XPECT path from 'continue;' to '1' -->
	// DoStatementContinue1 XPECT commonPreds of '1' and '2' --> 2
	// DoStatementContinue1 XPECT commonPreds of '1' and '3' --> 1, 3
	// DoStatementContinue1 XPECT succs at '"start"' --> 1
	// DoStatementContinue1 XPECT succs at '1' --> continue;
	// DoStatementContinue1 XPECT succs type 'Continue' at 'continue;' --> 3
	// DoStatementContinue1 XPECT succs at '2' --> 3
	// DoStatementContinue1 XPECT succs at '3' --> 1, "end"
	"start";
	do {
		1;
		continue;
		// DoStatementContinue1 XPECT warnings --> "Dead code. No execution possible after continue." at "2"
		2;
	} while (3);
	"end";
}

function ForStatement1() {
	/* ForStatement1 XPECT allEdges ---
		"start" --> ;,
		; -Repeat-> ;
	--- */
	// ForStatement1 XPECT allPaths --> "start" -> ; -> ; -> ;
	// ForStatement1 XPECT allPaths direction 'Backward' --> "end"
	// ForStatement1 XPECT path from '"start"' notTo '"end"' -->
	// ForStatement1 XPECT path from '"start"' to ' ;' -->
	// ForStatement1 XPECT path from ' ;' to ' ;' -->
	// ForStatement1 XPECT commonPreds of ' ;' and '"end"' -->
	// ForStatement1 XPECT commonPreds of ' ;' and '"start"' --> "start"
	// ForStatement1 XPECT succs at '"start"' --> ;
	// ForStatement1 XPECT succs at ' ;' --> ;
	"start";
	for (;;) ;
	// ForStatement1 XPECT warnings --> "Dead code. No execution possible after ForStatement." at ""end""
	"end";
}

function ForStatement2() {
	/* ForStatement2 XPECT allEdges ---
		"start" --> 5,
		5 -Repeat-> 5
	--- */
	// ForStatement2 XPECT allPaths --> "start" -> 5 -> 5 -> 5
	// ForStatement2 XPECT allPaths direction 'Backward' --> "end"
	// ForStatement2 XPECT path from '"start"' notTo '"end"' -->
	// ForStatement2 XPECT path from '"start"' to '5' -->
	// ForStatement2 XPECT path from '5' to '5' -->
	// ForStatement2 XPECT commonPreds of '5' and '"end"' -->
	// ForStatement2 XPECT commonPreds of '5' and '"start"' --> "start"
	// ForStatement2 XPECT succs at '"start"' --> 5
	// ForStatement2 XPECT succs at '5' --> 5
	"start";
	for (;;) 5;
	// ForStatement2 XPECT warnings --> "Dead code. No execution possible after ForStatement." at ""end""
	"end";
}

function ForStatement3() {
	/* ForStatement3 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 -Repeat-> 5,
		5 --> 3,
		3 --> 2,
		2 --> "end"
	--- */
	/* ForStatement3 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 5 -> 3 -> 2 -> "end",
		"start" -> 1 -> 2 -> 5 -> 3 -> 2 -> 5 -> 3 -> 2 -> "end"
	--- */
	/* ForStatement3 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 1 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> 1 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> 1 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> 3 -> 5
	--- */
	// ForStatement3 XPECT path from '"start"' to '"end"' -->
	// ForStatement3 XPECT path from '3' to '2' -->
	// ForStatement3 XPECT commonPreds of '5' and '"end"' --> 2, 5
	// ForStatement3 XPECT commonPreds of '2' and '3' --> 2, 3
	// ForStatement3 XPECT succs at '"start"' --> 1
	// ForStatement3 XPECT succs at '1' --> 2
	// ForStatement3 XPECT succs at '2' --> 5, "end"
	// ForStatement3 XPECT succs type 'Repeat' at '2' --> 5
	// ForStatement3 XPECT succs at '5' --> 3
	// ForStatement3 XPECT succs at '3' --> 2
	"start";
	for (1;2;3) 5;
	"end";
}

function ForStatement4() {
	/* ForStatement4 XPECT allEdges ---
		"start" --> 1,
		1 --> 5,
		5 --> 3,
		3 -Repeat-> 5
	--- */
	// ForStatement4 XPECT allPaths --> "start" -> 1 -> 5 -> 3 -> 5 -> 3 -> 5 -> 3
	// ForStatement4 XPECT allPaths direction 'Backward' --> "end"
	// ForStatement4 XPECT path from '"start"' notTo '"end"' -->
	// ForStatement4 XPECT path from '3' to '5' -->
	// ForStatement4 XPECT commonPreds of '1' and '3' --> 1
	// ForStatement4 XPECT commonPreds of '5' and '3' --> 3, 5
	// ForStatement4 XPECT commonPreds of '5' and '"end"' -->
	// ForStatement4 XPECT succs at '"start"' --> 1
	// ForStatement4 XPECT succs at '1' --> 5
	// ForStatement4 XPECT succs at '5' --> 3
	// ForStatement4 XPECT succs type 'Repeat' at '3' --> 5
	"start";
	for (1;;3) 5;
	// ForStatement4 XPECT warnings --> "Dead code. No execution possible after ForStatement." at ""end""
	"end";
}

function ForStatement5() {
	/* ForStatement5 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 -Repeat-> 5,
		5 --> 2,
		2 --> "end"
	--- */
	/* ForStatement5 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 5 -> 2 -> "end",
		"start" -> 1 -> 2 -> 5 -> 2 -> 5 -> 2 -> "end"
	--- */
	/* ForStatement5 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 1 -> "start",
		"end" -> 2 -> 5 -> 2 -> 1 -> "start",
		"end" -> 2 -> 5 -> 2 -> 5 -> 2 -> 1 -> "start",
		"end" -> 2 -> 5 -> 2 -> 5 -> 2 -> 5
	--- */
	// ForStatement5 XPECT path from '"start"' to '"end"' -->
	// ForStatement5 XPECT path from '5' to '"end"' -->
	// ForStatement5 XPECT commonPreds of '2' and '5' --> 2, 5
	// ForStatement5 XPECT commonPreds of '"end"' and '5' --> 2, 5
	// ForStatement5 XPECT succs at '"start"' --> 1
	// ForStatement5 XPECT succs at '1' --> 2
	// ForStatement5 XPECT succs at '2' --> 5, "end"
	// ForStatement5 XPECT succs type 'Repeat' at '2' --> 5
	// ForStatement5 XPECT succs at '5' --> 2
	"start";
	for (1;2;) 5;
	"end";
}

function ForStatement6() {
	/* ForStatement6 XPECT allEdges ---
		"start" --> 2,
		2 -Repeat-> 5,
		5 --> 3,
		3 --> 2,
		2 --> "end"
	--- */
	/* ForStatement6 XPECT allPaths ---
		"start" -> 2 -> "end",
		"start" -> 2 -> 5 -> 3 -> 2 -> "end",
		"start" -> 2 -> 5 -> 3 -> 2 -> 5 -> 3 -> 2 -> "end"
	--- */
	/* ForStatement6 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> 3 -> 5
	--- */
	// ForStatement6 XPECT path from '"start"' to '"end"' -->
	// ForStatement6 XPECT path from '2' to '3' -->
	// ForStatement6 XPECT commonPreds of '2' and '5' --> 2, 5
	// ForStatement6 XPECT commonPreds of '"end"' and '5' --> 2, 5
	// ForStatement6 XPECT succs at '"start"' --> 2
	// ForStatement6 XPECT succs at '2' --> 5, "end"
	// ForStatement6 XPECT succs type 'Repeat' at '2' --> 5
	// ForStatement6 XPECT succs at '5' --> 3
	// ForStatement6 XPECT succs at '3' --> 2
	"start";
	for (;2;3) 5;
	"end";
}

function ForStatement7() {
	/* ForStatement7 XPECT allEdges ---
		"start" --> 5,
		5 --> 3,
		3 -Repeat-> 5
	--- */
	// ForStatement7 XPECT allPaths --> "start" -> 5 -> 3 -> 5 -> 3 -> 5 -> 3
	// ForStatement7 XPECT allPaths direction 'Backward' --> "end"
	// ForStatement7 XPECT path from '"start"' notTo '"end"' -->
	// ForStatement7 XPECT path from '5' notTo '"end"' -->
	// ForStatement7 XPECT commonPreds of '5' and '3' --> 3, 5
	// ForStatement7 XPECT succs at '"start"' --> 5
	// ForStatement7 XPECT succs at '5' --> 3
	// ForStatement7 XPECT succs type 'Repeat' at '3' --> 5
	"start";
	for (;;3) 5;
	// ForStatement7 XPECT warnings --> "Dead code. No execution possible after ForStatement." at ""end""
	"end";
}

function ForStatement8() {
	/* ForStatement8 XPECT allEdges ---
		"start" --> 2,
		2 -Repeat-> 5,
		5 --> 2,
		2 --> "end"
	--- */
	/* ForStatement8 XPECT allPaths ---
		"start" -> 2 -> "end",
		"start" -> 2 -> 5 -> 2 -> "end",
		"start" -> 2 -> 5 -> 2 -> 5 -> 2 -> "end"
	--- */
	/* ForStatement8 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> "start",
		"end" -> 2 -> 5 -> 2 -> "start",
		"end" -> 2 -> 5 -> 2 -> 5 -> 2 -> "start",
		"end" -> 2 -> 5 -> 2 -> 5 -> 2 -> 5
	--- */
	// ForStatement8 XPECT path from '"start"' to '"end"' -->
	// ForStatement8 XPECT path from '5' to '"end"' -->
	// ForStatement8 XPECT commonPreds of '2' and '5' --> 2, 5
	// ForStatement8 XPECT succs at '"start"' --> 2
	// ForStatement8 XPECT succs at '2' --> 5, "end"
	// ForStatement8 XPECT succs type 'Repeat' at '2' --> 5
	// ForStatement8 XPECT succs at '5' --> 2
	"start";
	for (;2;) 5;
	"end";
}

function ForStatement9() {
	/* ForStatement9 XPECT allEdges ---
		"start" --> 1,
		1 --> 5,
		5 -Repeat-> 5
	--- */
	// ForStatement9 XPECT allPaths --> "start" -> 1 -> 5 -> 5 -> 5
	// ForStatement9 XPECT allPaths direction 'Backward' --> "end"
	// ForStatement9 XPECT path from '"start"' notTo '"end"' -->
	// ForStatement9 XPECT path from '5' notTo '"end"' -->
	// ForStatement9 XPECT commonPreds of '1' and '5' --> 1
	// ForStatement9 XPECT commonPreds of '1' and '1' --> 1
	// ForStatement9 XPECT commonPreds of '5' and '5' --> 5
	// ForStatement9 XPECT succs at '"start"' --> 1
	// ForStatement9 XPECT succs at '1' --> 5
	// ForStatement9 XPECT succs at '5' --> 5
	"start";
	for (1;;) 5;
	// ForStatement9 XPECT warnings --> "Dead code. No execution possible after ForStatement." at ""end""
	"end";
}

function ForOfStatement1() {
	/* ForOfStatement1 XPECT allEdges ---
		"start" --> i,
		i --> 1,
		1 --> 2,
		2 --> [1\,2],
		[1\,2] -Repeat-> 3,
		[1\,2] --> "end",
		3 -Repeat-> 3,
		3 --> "end"
	--- */
	/* ForOfStatement1 XPECT allPaths ---
		"start" -> i -> 1 -> 2 -> [1\,2] -> "end",
		"start" -> i -> 1 -> 2 -> [1\,2] -> 3 -> "end",
		"start" -> i -> 1 -> 2 -> [1\,2] -> 3 -> 3 -> "end"
	--- */
	/* ForOfStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 3 -> 3 -> 3,
		"end" -> 3 -> 3 -> [1\,2] -> 2 -> 1 -> i -> "start",
		"end" -> 3 -> [1\,2] -> 2 -> 1 -> i -> "start",
		"end" -> [1\,2] -> 2 -> 1 -> i -> "start"
	--- */
	// ForOfStatement1 XPECT path from '"start"' to '"end"' -->
	// ForOfStatement1 XPECT path from '3' to '3' -->
	// ForOfStatement1 XPECT path from '3' notTo '[1,2]' -->
	// ForOfStatement1 XPECT commonPreds of '3' and '"end"' --> 3, [1\,2]
	// ForOfStatement1 XPECT commonPreds of '3' and '[1,2]' --> [1\,2]
	// ForOfStatement1 XPECT succs at '"start"' --> i
	// ForOfStatement1 XPECT succs at 'i' --> 1
	// ForOfStatement1 XPECT succs at '1' --> 2
	// ForOfStatement1 XPECT succs at '2' --> [1\,2]
	// ForOfStatement1 XPECT succs type 'Repeat' at '[1,2]' --> 3
	// ForOfStatement1 XPECT succs at '[1,2]' --> 3, "end"
	// ForOfStatement1 XPECT succs at '3' --> 3, "end"
	"start";
	for (var i in [1,2]) 3;
	"end";
}

function ForInStatement1() {
	/* ForInStatement1 XPECT allEdges ---
		"start" --> i,
		i --> 1,
		1 --> 2,
		2 --> [1\,2],
		[1\,2] -Repeat-> 3,
		[1\,2] --> "end",
		3 -Repeat-> 3,
		3 --> "end"
	--- */
	/* ForInStatement1 XPECT allPaths ---
		"start" -> i -> 1 -> 2 -> [1\,2] -> "end",
		"start" -> i -> 1 -> 2 -> [1\,2] -> 3 -> "end",
		"start" -> i -> 1 -> 2 -> [1\,2] -> 3 -> 3 -> "end"
	--- */
	/* ForInStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 3 -> 3 -> 3,
		"end" -> 3 -> 3 -> [1\,2] -> 2 -> 1 -> i -> "start",
		"end" -> 3 -> [1\,2] -> 2 -> 1 -> i -> "start",
		"end" -> [1\,2] -> 2 -> 1 -> i -> "start"
	--- */
	// ForInStatement1 XPECT path from '"start"' to '"end"' -->
	// ForInStatement1 XPECT path from '3' to '3' -->
	// ForInStatement1 XPECT path from '3' notTo '[1,2]' -->
	// ForInStatement1 XPECT commonPreds of '3' and '"end"' --> 3, [1\,2]
	// ForInStatement1 XPECT commonPreds of '3' and '[1,2]' --> [1\,2]
	// ForInStatement1 XPECT succs at '"start"' --> i
	// ForInStatement1 XPECT succs at 'i' --> 1
	// ForInStatement1 XPECT succs at '1' --> 2
	// ForInStatement1 XPECT succs at '2' --> [1\,2]
	// ForInStatement1 XPECT succs type 'Repeat' at '[1,2]' --> 3
	// ForInStatement1 XPECT succs at '[1,2]' --> 3, "end"
	// ForInStatement1 XPECT succs at '3' --> 3, "end"
	"start";
	for (var i of [1,2]) 3;
	"end";
}

function ForStatementVarDecl1() {
	/* ForStatementVarDecl1 XPECT allEdges ---
		"start" --> 0,
		0 --> i=0,
		i=0 --> 2,
		2 -Repeat-> 5,
		5 --> 3,
		3 --> 2,
		2 --> "end"
	--- */
	/* ForStatementVarDecl1 XPECT allPaths ---
		"start" -> 0 -> i=0 -> 2 -> "end",
		"start" -> 0 -> i=0 -> 2 -> 5 -> 3 -> 2 -> "end",
		"start" -> 0 -> i=0 -> 2 -> 5 -> 3 -> 2 -> 5 -> 3 -> 2 -> "end"
	--- */
	/* ForStatementVarDecl1 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> 3 -> 5,
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> i=0 -> 0 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> i=0 -> 0 -> "start",
		"end" -> 2 -> i=0 -> 0 -> "start"
	--- */
	// ForStatementVarDecl1 XPECT path from '"start"' to '"end"' -->
	// ForStatementVarDecl1 XPECT path from 'i=0' to '3' -->
	// ForStatementVarDecl1 XPECT commonPreds of 'i=0' and '2' --> i=0
	// ForStatementVarDecl1 XPECT succs at '"start"' --> 0
	// ForStatementVarDecl1 XPECT succs at '0' --> i=0
	// ForStatementVarDecl1 XPECT succs at 'i=0' --> 2
	// ForStatementVarDecl1 XPECT succs at '2' --> 5, "end"
	// ForStatementVarDecl1 XPECT succs type 'Repeat' at '2' --> 5
	// ForStatementVarDecl1 XPECT succs at '5' --> 3
	// ForStatementVarDecl1 XPECT succs at '3' --> 2
	"start";
	for (var i=0; 2; 3) 5;
	"end";
}

function ForStatementVarDecl2() {
	/* ForStatementVarDecl2 XPECT allEdges ---
		"start" --> 0,
		0 --> i=0,
		i=0 --> 1,
		1 --> j=1,
		j=1 --> 2,
		2 -Repeat-> 5,
		5 --> 3,
		3 --> 2,
		2 --> "end"
	--- */
	/* ForStatementVarDecl2 XPECT allPaths ---
		"start" -> 0 -> i=0 -> 1 -> j=1 -> 2 -> "end",
		"start" -> 0 -> i=0 -> 1 -> j=1 -> 2 -> 5 -> 3 -> 2 -> "end",
		"start" -> 0 -> i=0 -> 1 -> j=1 -> 2 -> 5 -> 3 -> 2 -> 5 -> 3 -> 2 -> "end"
	--- */
	/* ForStatementVarDecl2 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> 3 -> 5,
		"end" -> 2 -> 3 -> 5 -> 2 -> 3 -> 5 -> 2 -> j=1 -> 1 -> i=0 -> 0 -> "start",
		"end" -> 2 -> 3 -> 5 -> 2 -> j=1 -> 1 -> i=0 -> 0 -> "start",
		"end" -> 2 -> j=1 -> 1 -> i=0 -> 0 -> "start"
	--- */
	// ForStatementVarDecl2 XPECT path from '"start"' to '"end"' -->
	// ForStatementVarDecl2 XPECT path from 'i=0' to 'j=1' -->
	// ForStatementVarDecl2 XPECT commonPreds of 'j=1' and 'i=0' --> i=0
	// ForStatementVarDecl2 XPECT succs at '"start"' --> 0
	// ForStatementVarDecl2 XPECT succs at '0' --> i=0
	// ForStatementVarDecl2 XPECT succs at 'i=0' --> 1
	// ForStatementVarDecl2 XPECT succs at '1' --> j=1
	// ForStatementVarDecl2 XPECT succs at 'j=1' --> 2
	// ForStatementVarDecl2 XPECT succs at '2' --> 5, "end"
	// ForStatementVarDecl2 XPECT succs type 'Repeat' at '2' --> 5
	// ForStatementVarDecl2 XPECT succs at '5' --> 3
	// ForStatementVarDecl2 XPECT succs at '3' --> 2
	"start";
	for (var i=0, j=1; 2; 3) 5;
	"end";
}

function ForStatementBreak1() {
	/* ForStatementBreak1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 -Repeat-> break;,
		break; -Break-> "end",
		3 --> 2,
		2 --> "end"
	--- */
	/* ForStatementBreak1 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> break; -> "end"
	--- */
	/* ForStatementBreak1 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 1 -> "start",
		"end" -> 2 -> 3,
		"end" -> break; -> 2 -> 1 -> "start",
		"end" -> break; -> 2 -> 3
	--- */
	// ForStatementBreak1 XPECT path from '"start"' to '"end"' -->
	// ForStatementBreak1 XPECT path from '3' to '"end"' -->
	// ForStatementBreak1 XPECT path from '"start"' notTo '3' -->
	// ForStatementBreak1 XPECT commonPreds of '3' and '2' --> 3
	// ForStatementBreak1 XPECT commonPreds of 'break;' and '2' --> 2
	// ForStatementBreak1 XPECT commonPreds of '"end"' and '3' --> 3
	// ForStatementBreak1 XPECT succs at '"start"' --> 1
	// ForStatementBreak1 XPECT succs at '1' --> 2
	// ForStatementBreak1 XPECT succs at '2' --> break;, "end"
	// ForStatementBreak1 XPECT succs type 'Repeat' at '2' --> break;
	// ForStatementBreak1 XPECT succs type 'Break' at 'break;' --> "end"
	// ForStatementBreak1 XPECT succs at '3' --> 2
	"start";
	// ForStatementBreak1 XPECT warnings --> "Dead code. No execution possible after ExpressionStatement." at "3"
	for (1;2;3) break;
	"end";
}

function ForStatementContinue1() {
	/* ForStatementContinue1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 -Repeat-> continue;,
		continue; -Continue-> 3,
		3 --> 2,
		2 --> "end"
	--- */
	/* ForStatementContinue1 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> continue; -> 3 -> 2 -> "end",
		"start" -> 1 -> 2 -> continue; -> 3 -> 2 -> continue; -> 3 -> 2 -> "end"
	--- */
	/* ForStatementContinue1 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 1 -> "start",
		"end" -> 2 -> 3 -> continue; -> 2 -> 1 -> "start",
		"end" -> 2 -> 3 -> continue; -> 2 -> 3 -> continue; -> 2 -> 1 -> "start",
		"end" -> 2 -> 3 -> continue; -> 2 -> 3 -> continue; -> 2 -> 3 -> continue;
	--- */
	// ForStatementContinue1 XPECT path from '"start"' to '"end"' -->
	// ForStatementContinue1 XPECT path from '3' to '"end"' -->
	// ForStatementContinue1 XPECT path from '"start"' to '3' -->
	// ForStatementContinue1 XPECT commonPreds of '3' and '2' --> 2, 3
	// ForStatementContinue1 XPECT commonPreds of 'continue;' and '2' --> 2, continue;
	// ForStatementContinue1 XPECT commonPreds of '"end"' and '3' --> 2, 3
	// ForStatementContinue1 XPECT succs at '"start"' --> 1
	// ForStatementContinue1 XPECT succs at '1' --> 2
	// ForStatementContinue1 XPECT succs at '2' --> continue;, "end"
	// ForStatementContinue1 XPECT succs type 'Repeat' at '2' --> continue;
	// ForStatementContinue1 XPECT succs type 'Continue' at 'continue;' --> 3
	// ForStatementContinue1 XPECT succs at '3' --> 2
	"start";
	for (1;2;3) continue;
	"end";
}

function ForStatementContinue2() {
	/* ForStatementContinue2 XPECT allEdges ---
		"start" --> 2,
		2 -Repeat-> continue;,
		continue; -Continue-> 3,
		3 --> 2,
		2 --> "end"
	--- */
	/* ForStatementContinue2 XPECT allPaths ---
		"start" -> 2 -> "end",
		"start" -> 2 -> continue; -> 3 -> 2 -> "end",
		"start" -> 2 -> continue; -> 3 -> 2 -> continue; -> 3 -> 2 -> "end"
	--- */
	/* ForStatementContinue2 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> "start",
		"end" -> 2 -> 3 -> continue; -> 2 -> "start",
		"end" -> 2 -> 3 -> continue; -> 2 -> 3 -> continue; -> 2 -> "start",
		"end" -> 2 -> 3 -> continue; -> 2 -> 3 -> continue; -> 2 -> 3 -> continue;
	--- */
	// ForStatementContinue2 XPECT path from '"start"' to '"end"' -->
	// ForStatementContinue2 XPECT path from '3' to '"end"' -->
	// ForStatementContinue2 XPECT path from '"start"' to '3' -->
	// ForStatementContinue2 XPECT commonPreds of '3' and '2' --> 2, 3
	// ForStatementContinue2 XPECT commonPreds of 'continue;' and '2' --> 2, continue;
	// ForStatementContinue2 XPECT commonPreds of '"end"' and '3' --> 2, 3
	// ForStatementContinue2 XPECT succs at '"start"' --> 2
	// ForStatementContinue2 XPECT succs at '2' --> continue;, "end"
	// ForStatementContinue2 XPECT succs type 'Repeat' at '2' --> continue;
	// ForStatementContinue2 XPECT succs type 'Continue' at 'continue;' --> 3
	// ForStatementContinue2 XPECT succs at '3' --> 2
	"start";
	for (;2;3) continue;
	"end";
}

function ForStatementContinue3() {
	/* ForStatementContinue3 XPECT allEdges ---
		"start" --> 2,
		2 -Repeat-> continue;,
		continue; -Continue-> 2,
		2 --> "end"
	--- */
	/* ForStatementContinue3 XPECT allPaths ---
		"start" -> 2 -> "end",
		"start" -> 2 -> continue; -> 2 -> "end",
		"start" -> 2 -> continue; -> 2 -> continue; -> 2 -> "end"
	--- */
	/* ForStatementContinue3 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> "start",
		"end" -> 2 -> continue; -> 2 -> "start",
		"end" -> 2 -> continue; -> 2 -> continue; -> 2 -> "start",
		"end" -> 2 -> continue; -> 2 -> continue; -> 2 -> continue;
	--- */
	// ForStatementContinue3 XPECT path from '"start"' to '"end"' -->
	// ForStatementContinue3 XPECT path from 'continue;' to '"end"' -->
	// ForStatementContinue3 XPECT commonPreds of 'continue;' and '2' --> 2, continue;
	// ForStatementContinue3 XPECT commonPreds of '"end"' and 'continue;' --> 2, continue;
	// ForStatementContinue3 XPECT succs at '"start"' --> 2
	// ForStatementContinue3 XPECT succs at '2' --> continue;, "end"
	// ForStatementContinue3 XPECT succs type 'Repeat' at '2' --> continue;
	// ForStatementContinue3 XPECT succs type 'Continue' at 'continue;' --> 2
	// ForStatementContinue3 XPECT succs at 'continue;' --> 2
	"start";
	for (;2;) continue;
	"end";
}

function ForStatementContinue4() {
	/* ForStatementContinue4 XPECT allEdges ---
		"start" --> continue;,
		continue; -Continue|Repeat-> continue;
	--- */
	/* ForStatementContinue4 XPECT allPaths ---
		"start" -> continue; -> continue; -> continue;
	--- */
	// ForStatementContinue4 XPECT allPaths direction 'Backward' --> "end"
	// ForStatementContinue4 XPECT path from '"start"' notTo '"end"' -->
	// ForStatementContinue4 XPECT path from 'continue;' to 'continue;' -->
	// ForStatementContinue4 XPECT path from 'continue;' notTo '"end"' -->
	// ForStatementContinue4 XPECT commonPreds of 'continue;' and '"end"' -->
	// ForStatementContinue4 XPECT succs at '"start"' --> continue;
	// ForStatementContinue4 XPECT succs at 'continue;' --> continue;
	"start";
	for (;;) continue;
	// ForStatementContinue4 XPECT warnings --> "Dead code. No execution possible after ForStatement." at ""end""
	"end";
}



function IfStatement1() {
	/* IfStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		1 --> 3,
		2 --> "end",
		3 --> "end"
	--- */
	/* IfStatement1 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 3 -> "end"
	--- */
	/* IfStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 2 -> 1 -> "start",
		"end" -> 3 -> 1 -> "start"
	--- */
	// IfStatement1 XPECT path from '"start"' to '"end"' -->
	// IfStatement1 XPECT path from '"start"' to '2' -->
	// IfStatement1 XPECT path from '"start"' to '3' -->
	// IfStatement1 XPECT path from '2' notTo '3' -->
	// IfStatement1 XPECT commonPreds of '2' and '3' --> 1
	// IfStatement1 XPECT commonPreds of '"end"' and '2' --> 2, 1
	// IfStatement1 XPECT commonPreds of '"end"' and '3' --> 3, 1
	// IfStatement1 XPECT succs at '"start"' --> 1
	// IfStatement1 XPECT succs at '1' --> 2,3
	// IfStatement1 XPECT succs at '2' --> "end"
	// IfStatement1 XPECT succs at '3' --> "end"
	"start";
	if (1) 2; else 3;
	"end";
}

function IfStatement2() {
	/* IfStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> "end",
		1 --> "end"
	--- */
	/* IfStatement2 XPECT allPaths ---
		"start" -> 1 -> 2 -> "end",
		"start" -> 1 -> "end"
	--- */
	/* IfStatement2 XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 2 -> 1 -> "start"
	--- */
	// IfStatement2 XPECT path from '"start"' to '"end"' -->
	// IfStatement2 XPECT path from '"start"' to '2' -->
	// IfStatement2 XPECT path from '2' to '"end"' -->
	// IfStatement2 XPECT commonPreds of '1' and '2' --> 1
	// IfStatement2 XPECT commonPreds of '"end"' and '2' --> 1, 2
	// IfStatement2 XPECT succs at '"start"' --> 1
	// IfStatement2 XPECT succs at '1' --> 2,"end"
	// IfStatement2 XPECT succs at '2' --> "end"
	"start";
	if (1) 2;
	"end";
}



function SwitchCase1() {
	/* SwitchCase1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> 3,
		1 --> "end",
		3 --> "end"
	--- */
	/* SwitchCase1 XPECT allPaths ---
		"start" -> 1 -> 2 -> 3 -> "end",
		"start" -> 1 -> "end"
	---	*/
	/* SwitchCase1 XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 3 -> 2 -> 1 -> "start"
	--- */
	// SwitchCase1 XPECT path from '"start"' to '"end"' -->
	// SwitchCase1 XPECT commonPreds of '"end"' and '3' --> 1, 3
	// SwitchCase1 XPECT commonPreds of '2' and '3' --> 2
	// SwitchCase1 XPECT succs at '"start"' --> 1
	// SwitchCase1 XPECT succs at '1' --> 2 , "end"
	// SwitchCase1 XPECT succs at '2' --> 3
	// SwitchCase1 XPECT succs at '3' --> "end"
	"start";
	switch (1) {
		case 2: 3;
	}
	"end";
}

function SwitchCaseFallThrough() {
	/* SwitchCaseFallThrough XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		1 --> 4,
		1 --> "end",
		2 --> 3,
		3 --> 4,
		4 --> 5,
		5 --> "end"
	--- */
	/* SwitchCaseFallThrough XPECT allPaths ---
		"start" -> 1 -> 2 -> 3 -> 4 -> 5 -> "end",
		"start" -> 1 -> 4 -> 5 -> "end",
		"start" -> 1 -> "end"
	--- */
	/* SwitchCaseFallThrough XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 5 -> 4 -> 1 -> "start",
		"end" -> 5 -> 4 -> 3 -> 2 -> 1 -> "start"
	--- */
	// SwitchCaseFallThrough XPECT path from '"start"' to '"end"' -->
	// SwitchCaseFallThrough XPECT path from '3' to '5' -->
	// SwitchCaseFallThrough XPECT commonPreds of '"end"' and '3' --> 1, 3
	// SwitchCaseFallThrough XPECT commonPreds of '5' and '3' --> 1, 3
	// SwitchCaseFallThrough XPECT commonPreds of '5' and '"end"' --> 1, 5
	// SwitchCaseFallThrough XPECT succs at '"start"' --> 1
	// SwitchCaseFallThrough XPECT succs at '1' --> 2, 4, "end"
	// SwitchCaseFallThrough XPECT succs at '2' --> 3
	// SwitchCaseFallThrough XPECT succs at '3' --> 4
	// SwitchCaseFallThrough XPECT succs at '4' --> 5
	// SwitchCaseFallThrough XPECT succs at '5' --> "end"
	"start";
	switch (1) {
		case 2: 3;
		case 4: 5;
	}
	"end";
}

function SwitchCaseBreak1() {
	/* SwitchCaseBreak1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		1 --> 4,
		1 --> "end",
		2 --> 3,
		3 --> break;,
		break; -Break-> "end",
		4 --> 5,
		5 --> break;,
		break; -Break-> "end"
	--- */
	/* SwitchCaseBreak1 XPECT allPaths ---
		"start" -> 1 -> 2 -> 3 -> break; -> "end",
		"start" -> 1 -> 4 -> 5 -> break; -> "end",
		"start" -> 1 -> "end"
	--- */
	/* SwitchCaseBreak1 XPECT allPaths direction 'Backward' ---
		"end", "end" -> 1 -> "start",
		"end" -> break; -> 3 -> 2 -> 1 -> "start",
		"end" -> break; -> 5 -> 4,
		"end" -> break; -> 5 -> 4 -> 1 -> "start"
	--- */
	// SwitchCaseBreak1 XPECT path from '"start"' to '"end"' -->
	// SwitchCaseBreak1 XPECT path from '3' notTo '5' -->
	// SwitchCaseBreak1 XPECT commonPreds of '3' and '5' --> 1
	// SwitchCaseBreak1 XPECT commonPreds of '3' and '"end"' --> 1, 3
	// SwitchCaseBreak1 XPECT commonPreds of '5' and '"end"' --> 1, 5
	// SwitchCaseBreak1 XPECT succs at '"start"' --> 1
	// SwitchCaseBreak1 XPECT succs at '1' --> 2, 4, "end"
	// SwitchCaseBreak1 XPECT succs at '2' --> 3
	// SwitchCaseBreak1 XPECT succs at '3' --> break;
	// SwitchCaseBreak1 XPECT succs type 'Break' at 'break;' --> "end"
	// SwitchCaseBreak1 XPECT succs at '3' --> break;
	// SwitchCaseBreak1 XPECT succs at '5' --> break;
	// SwitchCaseBreak1 XPECT succs type 'Break' at 'break;' --> "end"
	"start";
	switch (1) {
		case 2: 3; break;
		case 4: 5; break;
	}
	"end";
}

function SwitchCaseDefault1() {
	/* SwitchCaseDefault1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		1 --> 5,
		2 --> 3,
		3 --> 5,
		5 --> "end"
	--- */
	/* SwitchCaseDefault1 XPECT allPaths ---
	"start" -> 1 -> 2 -> 3 -> 5 -> "end",
	"start" -> 1 -> 5 -> "end"
	--- */
	/* SwitchCaseDefault1 XPECT allPaths direction 'Backward' ---
		"end" -> 5 -> 1 -> "start",
		"end" -> 5 -> 3 -> 2 -> 1 -> "start"
	--- */
	// SwitchCaseDefault1 XPECT path from '"start"' to '"end"' -->
	// SwitchCaseDefault1 XPECT path from '3' to '5' -->
	// SwitchCaseDefault1 XPECT commonPreds of '3' and '5' --> 1, 3
	// SwitchCaseDefault1 XPECT commonPreds of '3' and '"end"' --> 1, 3
	// SwitchCaseDefault1 XPECT commonPreds of '5' and '"end"' --> 5
	// SwitchCaseDefault1 XPECT succs at '"start"' --> 1
	// SwitchCaseDefault1 XPECT succs at '1' --> 2, 5
	// SwitchCaseDefault1 XPECT succs at '2' --> 3
	// SwitchCaseDefault1 XPECT succs at '3' --> 5
	// SwitchCaseDefault1 XPECT succs at '5' --> "end"
	"start";
	switch (1) {
		case 2: 3;
		default: 5;
	}
	"end";
}

function SwitchCaseDefault2() {
	/* SwitchCaseDefault2 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		1 --> 5,
		2 --> 3,
		3 --> break;,
		break; -Break-> "end",
		5 --> "end"
	--- */
	/* SwitchCaseDefault2 XPECT allPaths ---
		"start" -> 1 -> 2 -> 3 -> break; -> "end",
		"start" -> 1 -> 5 -> "end"
	--- */
	/* SwitchCaseDefault2 XPECT allPaths direction 'Backward' ---
		"end" -> 5, "end" -> 5 -> 1 -> "start",
		"end" -> break; -> 3 -> 2 -> 1 -> "start"
	--- */
	// SwitchCaseDefault2 XPECT path from '"start"' to '"end"' -->
	// SwitchCaseDefault2 XPECT path from '3' notTo '5' -->
	// SwitchCaseDefault2 XPECT commonPreds of '3' and '5' --> 1
	// SwitchCaseDefault2 XPECT commonPreds of '3' and '"end"' --> 1, 3
	// SwitchCaseDefault2 XPECT commonPreds of '5' and '"end"' --> 1, 5
	// SwitchCaseDefault2 XPECT succs at '"start"' --> 1
	// SwitchCaseDefault2 XPECT succs at '1' --> 2, 5
	// SwitchCaseDefault2 XPECT succs at '2' --> 3
	// SwitchCaseDefault2 XPECT succs at '3' --> break;
	// SwitchCaseDefault2 XPECT succs type 'Break' at 'break;' --> "end"
	// SwitchCaseDefault2 XPECT succs at '5' --> "end"
	"start";
	switch (1) {
		case 2: 3; break;
		default: 5;
	}
	"end";
}

function WhileStatement1() {
	/* WhileStatement1 XPECT allEdges ---
		"start" --> 1,
		1 -Repeat-> 2,
		2 --> 1,
		1 --> "end"
	--- */
	/* WhileStatement1 XPECT allPaths ---
	"start" -> 1 -> "end",
	"start" -> 1 -> 2 -> 1 -> "end",
	"start" -> 1 -> 2 -> 1 -> 2 -> 1 -> "end"
	--- */
	/* WhileStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 1 -> 2 -> 1 -> "start",
		"end" -> 1 -> 2 -> 1 -> 2 -> 1 -> "start",
		"end" -> 1 -> 2 -> 1 -> 2 -> 1 -> 2
	--- */
	// WhileStatement1 XPECT path from '"start"' to '"end"' -->
	// WhileStatement1 XPECT path from '2' to '"end"' -->
	// WhileStatement1 XPECT commonPreds of '1' and '2' --> 1, 2
	// WhileStatement1 XPECT commonPreds of '1' and '"end"' --> 1
	// WhileStatement1 XPECT succs at '"start"' --> 1
	// WhileStatement1 XPECT succs at '1' --> 2, "end"
	// WhileStatement1 XPECT succs type 'Repeat' at '1' --> 2
	// WhileStatement1 XPECT succs at '2' --> 1
	"start";
	while (1) {
		2;
	}
	"end";
}

function WhileStatementBreak1() {
	/* WhileStatementBreak1 XPECT allEdges ---
		"start" --> 1,
		1 -Repeat-> 2,
		2 --> break;,
		break; -Break-> "end",
		3 --> 1,
		1 --> "end"
	--- */
	/* WhileStatementBreak1 XPECT allPaths ---
	"start" -> 1 -> "end",
	"start" -> 1 -> 2 -> break; -> "end"
	--- */
	/* WhileStatementBreak1 XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 1 -> 3, "end" -> break; -> 2 -> 1 -> "start",
		"end" -> break; -> 2 -> 1 -> 3
	--- */
	// WhileStatementBreak1 XPECT path from '"start"' to '"end"' -->
	// WhileStatementBreak1 XPECT path from '"start"' notTo '3' -->
	// WhileStatementBreak1 XPECT path from '2' notTo '1' -->
	// WhileStatementBreak1 XPECT path from '3' to '2' -->
	// WhileStatementBreak1 XPECT commonPreds of '1' and '2' --> 1
	// WhileStatementBreak1 XPECT commonPreds of '1' and '"end"' --> 1
	// WhileStatementBreak1 XPECT commonPreds of 'break;' and '"end"' --> 1, break;
	// WhileStatementBreak1 XPECT commonPreds of 'break;' and '3' --> 3
	// WhileStatementBreak1 XPECT commonPreds of '2' and '"end"' --> 1, 2
	// WhileStatementBreak1 XPECT succs at '"start"' --> 1
	// WhileStatementBreak1 XPECT succs at '1' --> 2, "end"
	// WhileStatementBreak1 XPECT succs type 'Repeat' at '1' --> 2
	// WhileStatementBreak1 XPECT succs at '2' --> break;
	// WhileStatementBreak1 XPECT succs type 'Break' at 'break;' --> "end"
	// WhileStatementBreak1 XPECT succs at '3' --> 1
	"start";
	while (1) {
		2;
		break;
		// WhileStatementBreak1 XPECT warnings --> "Dead code. No execution possible after break." at "3"
		3;
	}
	"end";
}

function WhileStatementContinue1() {
	/* WhileStatementContinue1 XPECT allEdges ---
		"start" --> 1,
		1 -Repeat-> 2,
		2 --> continue;,
		continue; -Continue-> 1,
		3 --> 1,
		1 --> "end"
	--- */
	/* WhileStatementContinue1 XPECT allPaths ---
	"start" -> 1 -> "end",
	"start" -> 1 -> 2 -> continue; -> 1 -> "end",
	"start" -> 1 -> 2 -> continue; -> 1 -> 2 -> continue; -> 1 -> "end"
	--- */
	/* WhileStatementContinue1 XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start", "end" -> 1 -> 3,
		"end" -> 1 -> continue; -> 2 -> 1 -> "start",
		"end" -> 1 -> continue; -> 2 -> 1 -> 3,
		"end" -> 1 -> continue; -> 2 -> 1 -> continue; -> 2 -> 1 -> "start",
		"end" -> 1 -> continue; -> 2 -> 1 -> continue; -> 2 -> 1 -> 3,
		"end" -> 1 -> continue; -> 2 -> 1 -> continue; -> 2 -> 1 -> continue; -> 2
	--- */
	// WhileStatementContinue1 XPECT path from '"start"' to '"end"' -->
	// WhileStatementContinue1 XPECT path from '"start"' notTo '3' -->
	// WhileStatementContinue1 XPECT path from '2' to '1' -->
	// WhileStatementContinue1 XPECT path from '3' to '2' -->
	// WhileStatementContinue1 XPECT commonPreds of '1' and '2' --> 1, 2
	// WhileStatementContinue1 XPECT commonPreds of '1' and '"end"' --> 1
	// WhileStatementContinue1 XPECT commonPreds of 'continue;' and '"end"' --> 1, continue;
	// WhileStatementContinue1 XPECT commonPreds of 'continue;' and '3' --> 3
	// WhileStatementContinue1 XPECT commonPreds of '2' and '"end"' --> 1, 2
	// WhileStatementContinue1 XPECT succs at '"start"' --> 1
	// WhileStatementContinue1 XPECT succs at '1' --> 2, "end"
	// WhileStatementContinue1 XPECT succs type 'Repeat' at '1' --> 2
	// WhileStatementContinue1 XPECT succs at '2' --> continue;
	// WhileStatementContinue1 XPECT succs type 'Continue' at 'continue;' --> 1
	// WhileStatementContinue1 XPECT succs at '3' --> 1
	"start";
	while (1) {
		2;
		continue;
		// WhileStatementContinue1 XPECT warnings --> "Dead code. No execution possible after continue." at "3"
		3;
	}
	"end";
}

function EmptyStatement() {
	/* EmptyStatement XPECT allEdges ---
		"start" --> ;,
		; --> "end"
	--- */
	// EmptyStatement XPECT allPaths --> "start" -> ; -> "end"
	// EmptyStatement XPECT allPaths direction 'Backward' --> "end" -> ; -> "start"
	// EmptyStatement XPECT path from '"start"' to '"end"' -->
	// EmptyStatement XPECT commonPreds of ' ;' and '"end"' -->  ;
	// EmptyStatement XPECT succs at '"start"' -->  ;
	// EmptyStatement XPECT succs at ' ;' --> "end"
	"start";
	 ;
	"end";
}

function ReturnStatement1() {
	/* ReturnStatement1 XPECT allEdges ---
		"start" --> return;
	--- */
	// ReturnStatement1 XPECT allPaths --> "start" -> return;
	// ReturnStatement1 XPECT allPaths direction 'Backward' --> "end", return; -> "start"
	// ReturnStatement1 XPECT path from '"start"' notTo '"end"' -->
	// ReturnStatement1 XPECT commonPreds of 'return;' and '"end"' -->
	// ReturnStatement1 XPECT succs at '"start"' --> return;
	"start";
	 return;
	// ReturnStatement1 XPECT warnings --> "Dead code. No execution possible after return." at ""end""
	"end";
}

function ReturnStatement2() : int {
	/* ReturnStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> return 1;
	--- */
	// ReturnStatement2 XPECT allPaths --> "start" -> 1 -> return 1;
	// ReturnStatement2 XPECT allPaths direction 'Backward' --> "end", return 1; -> 1 -> "start"
	// ReturnStatement2 XPECT path from '"start"' notTo '"end"' -->
	// ReturnStatement2 XPECT commonPreds of 'return 1;' and '"end"' -->
	// ReturnStatement2 XPECT succs at '"start"' --> 1
	// ReturnStatement2 XPECT succs at '1' --> return 1;
	"start";
	 return 1;
	// ReturnStatement2 XPECT warnings --> "Dead code. No execution possible after return." at ""end""
	"end";
}

function ReturnStatement3() {
	/* ReturnStatement3 XPECT allEdges ---
		"start" --> 1,
		1 --> return;,
		1 --> "end"
	--- */
	/* ReturnStatement3 XPECT allPaths ---
	   "start" -> 1 -> return;,
	   "start" -> 1 -> "end"
	--- */
	/* ReturnStatement3 XPECT allPaths direction 'Backward' ---
		"end",
		"end" -> 1 -> "start",
		return; -> 1 -> "start"
	---	*/
	// ReturnStatement3 XPECT path from '"start"' to '"end"' -->
	// ReturnStatement3 XPECT path from 'return;' notTo '"end"' -->
	// ReturnStatement3 XPECT commonPreds of 'return;' and '"end"' --> 1
	// ReturnStatement3 XPECT succs at '"start"' --> 1
	// ReturnStatement3 XPECT succs at '1' --> return;, "end"
	"start";
	if (1) {
	 	return;
	}
	"end";
}


// ReturnStatement4 XPECT warnings --> "Variable names should start with lower case letter." at "ReturnStatement4"
let ReturnStatement4 = function() {
	/* ReturnStatement4 XPECT allEdges ---
		"start" --> return;
	--- */
	// ReturnStatement4 XPECT allPaths --> "start" -> return;
	// ReturnStatement4 XPECT allPaths direction 'Backward' --> "end", return; -> "start"
	// ReturnStatement4 XPECT path from '"start"' notTo '"end"' -->
	// ReturnStatement4 XPECT commonPreds of 'return;' and '"end"' -->
	// ReturnStatement4 XPECT succs at '"start"' --> return;
	// ReturnStatement4 XPECT succs at 'return;' -->
	"start";
	return;
	// ReturnStatement4 XPECT warnings --> "Dead code. No execution possible after return." at ""end""
	"end";
};


class ReturnStatement5 {
    get getterReturnStatement5() {
    	/* ReturnStatement5 XPECT allEdges ---
			"start" --> return;
		--- */
		// ReturnStatement5 XPECT allPaths --> "start" -> return;
		// ReturnStatement5 XPECT allPaths direction 'Backward' --> "end", return; -> "start"
		// ReturnStatement5 XPECT path from '"start"' notTo '"end"' -->
		// ReturnStatement5 XPECT commonPreds of 'return;' and '"end"' -->
		// ReturnStatement5 XPECT succs at '"start"' --> return;
		// ReturnStatement5 XPECT succs at 'return;' -->
		"start";
		// ReturnStatement5 XPECT errors --> "Return statement must have an expression of type void" at "return;"
        return;
		// ReturnStatement5 XPECT warnings --> "Dead code. No execution possible after return." at ""end""
		"end";
    }
}

function ThrowStatement1() {
	/* ThrowStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> throw 1;
	--- */
	// ThrowStatement1 XPECT allPaths --> "start" -> 1 -> throw 1;
	// ThrowStatement1 XPECT allPaths direction 'Backward' --> "end", throw 1; -> 1 -> "start"
	// ThrowStatement1 XPECT path from '"start"' notTo '"end"' -->
	// ThrowStatement1 XPECT commonPreds of 'throw 1;' and '"end"' -->
	// ThrowStatement1 XPECT succs at '"start"' --> 1
	// ThrowStatement1 XPECT succs at '1' --> throw 1;
	"start";
	throw 1;
	// ThrowStatement1 XPECT warnings --> "Dead code. No execution possible after throw." at ""end""
	"end";
}

function ThrowStatement2() {
	/* ThrowStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> throw 2;,
		1 --> "end"
	--- */
	/* ThrowStatement2 XPECT allPaths ---
	   "start" -> 1 -> 2 -> throw 2;,
	   "start" -> 1 -> "end"
	--- */
	/* ThrowStatement2 XPECT allPaths direction 'Backward' ---
		"end",
		"end" -> 1 -> "start",
		throw 2; -> 2 -> 1 -> "start"
	---	*/
	// ThrowStatement2 XPECT path from '"start"' to '"end"' -->
	// ThrowStatement2 XPECT path from 'throw 2;' notTo '"end"' -->
	// ThrowStatement2 XPECT commonPreds of 'throw 2;' and '"end"' --> 1
	// ThrowStatement2 XPECT succs at '"start"' --> 1
	// ThrowStatement2 XPECT succs at '1' --> 2, "end"
	// ThrowStatement2 XPECT succs at '2' --> throw 2;
	"start";
	if (1) {
		throw 2;
	}
	"end";
}

// ThrowStatement3 XPECT warnings --> "Variable names should start with lower case letter." at "ThrowStatement3"
let ThrowStatement3 = function() {
	/* ThrowStatement3 XPECT allEdges ---
		"start" --> 1,
		1 --> throw 1;
	--- */
	// ThrowStatement3 XPECT allPaths --> "start" -> 1 -> throw 1;
	// ThrowStatement3 XPECT allPaths direction 'Backward' --> "end", throw 1; -> 1 -> "start"
	// ThrowStatement3 XPECT path from '"start"' notTo '"end"' -->
	// ThrowStatement3 XPECT commonPreds of '1' and '"end"' -->
	// ThrowStatement3 XPECT succs at '"start"' --> 1
	// ThrowStatement3 XPECT succs at '1' --> throw 1;
	// ThrowStatement3 XPECT succs at 'throw 1;' -->
	"start";
	throw 1;
	// ThrowStatement3 XPECT warnings --> "Dead code. No execution possible after throw." at ""end""
	"end";
};


class ThrowStatement4 {
    get getterReturnStatement5() {
    	/* ThrowStatement4 XPECT allEdges ---
			"start" --> 1,
			1 --> throw 1;
		--- */
		// ThrowStatement4 XPECT allPaths --> "start" -> 1 -> throw 1;
		/* ThrowStatement4 XPECT allPaths direction 'Backward' ---
			"end",
			throw 1; -> 1 -> "start"
		---	*/
		// ThrowStatement4 XPECT path from '"start"' notTo '"end"' -->
		// ThrowStatement4 XPECT commonPreds of 'throw 1;' and '"end"' -->
		// ThrowStatement4 XPECT succs at '1' --> throw 1;
		// ThrowStatement4 XPECT succs at 'throw 1;' -->
		"start";
        throw 1;
		// ThrowStatement4 XPECT warnings --> "Dead code. No execution possible after throw." at ""end""
		"end";
    }
}

function TryCatchStatement1() {
	/* TryCatchStatement1 XPECT allEdges ---
		"start" --> 1,
		2 --> "end",
		1 --> "end"
	--- */
	// TryCatchStatement1 XPECT allPaths --> "start" -> 1 -> "end"
	/* TryCatchStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 2
	---	*/
	// TryCatchStatement1 XPECT path from '"start"' to '"end"' -->
	// TryCatchStatement1 XPECT commonPreds of '1' and '2' -->
	// TryCatchStatement1 XPECT succs at '"start"' --> 1
	// TryCatchStatement1 XPECT succs at '1' --> "end"
	// TryCatchStatement1 XPECT succs at '2' --> "end"
	"start";
	try {
		1;
	} catch (e) {
		2;
	}
	"end";
}

function TryCatchFinallyStatement1() {
	/* TryCatchFinallyStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 3,
		2 --> 3,
		3 --> "end"
	--- */
	// TryCatchFinallyStatement1 XPECT allPaths --> "start" -> 1 -> 3 -> "end"
	/* TryCatchFinallyStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 3 -> 1 -> "start",
		"end" -> 3 -> 2
	---	*/
	// TryCatchFinallyStatement1 XPECT path from '"start"' to '"end"' -->
	// TryCatchFinallyStatement1 XPECT commonPreds of '1' and '3' --> 1
	// TryCatchFinallyStatement1 XPECT succs at '"start"' --> 1
	// TryCatchFinallyStatement1 XPECT succs at '1' --> 3
	// TryCatchFinallyStatement1 XPECT succs at '2' --> 3
	// TryCatchFinallyStatement1 XPECT succs at '3' --> "end"
	"start";
	try {
		1;
	} catch (e) {
		2;
	} finally {
		3;
	}
	"end";
}

function ThrowTryCatchStatement1() {
	/* ThrowTryCatchStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> throw 2;,
		throw 2; -Throw-> 3,
		3 --> "end"
	--- */
	// ThrowTryCatchStatement1 XPECT allPaths --> "start" -> 1 -> 2 -> throw 2; -> 3 -> "end"
	/* ThrowTryCatchStatement1 XPECT allPaths direction 'Backward' ---
		"end",
		"end" -> 3 -> throw 2; -> 2 -> 1 -> "start"
	---	*/
	// ThrowTryCatchStatement1 XPECT path from '"start"' to '"end"' -->
	// ThrowTryCatchStatement1 XPECT commonPreds of '3' and '2' -->    2
	// ThrowTryCatchStatement1 XPECT succs at '"start"' --> 1
	// ThrowTryCatchStatement1 XPECT succs at '1' --> 2
	// ThrowTryCatchStatement1 XPECT succs at '2' --> throw 2;
	// ThrowTryCatchStatement1 XPECT succs at 'throw 2;' --> 3
	// ThrowTryCatchStatement1 XPECT succs at '3' --> "end"
	"start";
	try {
		1;
		throw 2;

	} catch (e) {
		3;
	}
	"end";
}

function ThrowTryCatchStatement2() {
	/* ThrowTryCatchStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> "end",
		2 --> 3,
		3 --> throw 3;
	--- */
	// ThrowTryCatchStatement2 XPECT allPaths --> "start" -> 1 -> "end"
	/* ThrowTryCatchStatement2 XPECT allPaths direction 'Backward' ---
		"end",
		"end" -> 1 -> "start",
		throw 3; -> 3 -> 2
	---	*/
	// ThrowTryCatchStatement2 XPECT path from '"start"' to '"end"' -->
	// ThrowTryCatchStatement2 XPECT commonPreds of '3' and '2' --> 2
	// ThrowTryCatchStatement2 XPECT succs at '"start"' --> 1
	// ThrowTryCatchStatement2 XPECT succs at '1' --> "end"
	// ThrowTryCatchStatement2 XPECT succs at '2' --> 3
	// ThrowTryCatchStatement2 XPECT succs at '3' --> throw 3;
	"start";
	try {
		1;
	} catch (e) {
		2;
		throw 3;
	}
	"end";
}

function ThrowTryCatchStatement3() {
	/* ThrowTryCatchStatement3 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> 3,
		3 --> throw 3;,
		throw 3; -Throw-> 4,
		4 --> "end",
		5 --> "end"
	--- */
	// ThrowTryCatchStatement3 XPECT allPaths --> "start" -> 1 -> 2 -> 3 -> throw 3; -> 4 -> "end"
	/* ThrowTryCatchStatement3 XPECT allPaths direction 'Backward' ---
		"end",
		"end" -> 4 -> throw 3; -> 3 -> 2 -> 1 -> "start",
		"end" -> 5
	--- */
	// ThrowTryCatchStatement3 XPECT path from '"start"' to '"end"' -->
	// ThrowTryCatchStatement3 XPECT commonPreds of '4' and '2' --> 2
	// ThrowTryCatchStatement3 XPECT succs at '"start"' --> 1
	// ThrowTryCatchStatement3 XPECT succs at '1' --> 2
	// ThrowTryCatchStatement3 XPECT succs at '2' --> 3
	// ThrowTryCatchStatement3 XPECT succs at '3' --> throw 3;
	// ThrowTryCatchStatement3 XPECT succs at 'throw 3;' --> 4
	// ThrowTryCatchStatement3 XPECT succs at '4' --> "end"
	// ThrowTryCatchStatement3 XPECT succs at '5' --> "end"
	"start";
	try {
		1;
		try {
			2;
			throw 3;
		} catch (e) {
			4;
		}
	} catch (e) {
		5;
	}
	"end";
}

function ThrowTryCatchStatement4() {
	/* ThrowTryCatchStatement4 XPECT allEdges ---
		"start" --> 1,
		1 --> "end",
		2 --> 3,
		3 --> throw 3;,
		throw 3; -Throw-> 4,
		4 --> 5,
		5 --> "end"
	--- */
	// ThrowTryCatchStatement4 XPECT allPaths --> "start" -> 1 -> "end"
	/* ThrowTryCatchStatement4 XPECT allPaths direction 'Backward' ---
		"end" -> 1 -> "start",
		"end" -> 5,
		"end" -> 5 -> 4 -> throw 3; -> 3 -> 2
	--- */
	// ThrowTryCatchStatement4 XPECT path from '"start"' to '"end"' -->
	// ThrowTryCatchStatement4 XPECT commonPreds of '4' and '2' --> 2
	// ThrowTryCatchStatement4 XPECT succs at '"start"' --> 1
	// ThrowTryCatchStatement4 XPECT succs at '2' --> 3
	// ThrowTryCatchStatement4 XPECT succs at '3' --> throw 3;
	// ThrowTryCatchStatement4 XPECT succs at 'throw 3;' --> 4
	// ThrowTryCatchStatement4 XPECT succs at '4' --> 5
	// ThrowTryCatchStatement4 XPECT succs at '5' --> "end"
	"start";
	try {
		1;
	} catch (e) {
		try {
			2;
			throw 3;
		} catch (ee) {
			4;
		}
		5;
	}
	"end";
}

function ThrowTryFinallyStatement1() {
	/* ThrowTryFinallyStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> throw 2;,
		throw 2; -Throw-> 3,
		3 --> "end"
	--- */
	// ThrowTryFinallyStatement1 XPECT allPaths --> "start" -> 1 -> 2 -> throw 2; -> 3
	/* ThrowTryFinallyStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 3,
		3 -> throw 2; -> 2 -> 1 -> "start"
	--- */
	// ThrowTryFinallyStatement1 XPECT path from '"start"' to '"end"' -->
	// ThrowTryFinallyStatement1 XPECT commonPreds of '3' and '2' -->    2
	// ThrowTryFinallyStatement1 XPECT succs at '"start"' --> 1
	// ThrowTryFinallyStatement1 XPECT succs at '1' --> 2
	// ThrowTryFinallyStatement1 XPECT succs at '2' --> throw 2;
	// ThrowTryFinallyStatement1 XPECT succs at 'throw 2;' --> 3
	// ThrowTryFinallyStatement1 XPECT succs at '3' --> "end"
	"start";
	try {
		1;
		throw 2;

	} finally {
		3;
	}
	// ThrowTryFinallyStatement1 XPECT warnings --> "Dead code. No execution possible after TryStatement." at ""end""
	"end";
}

function ThrowTryFinallyStatement2() {
	/* ThrowTryFinallyStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> 3,
		3 --> throw 3;
	--- */
	// ThrowTryFinallyStatement2 XPECT allPaths --> "start" -> 1 -> 2 -> 3 -> throw 3;
	/* ThrowTryFinallyStatement2 XPECT allPaths direction 'Backward' ---
		"end",
		throw 3; -> 3 -> 2 -> 1 -> "start"
	--- */
	// ThrowTryFinallyStatement2 XPECT path from '"start"' notTo '"end"' -->
	// ThrowTryFinallyStatement2 XPECT commonPreds of '1' and '2' --> 1
	// ThrowTryFinallyStatement2 XPECT succs at '"start"' --> 1
	// ThrowTryFinallyStatement2 XPECT succs at '1' --> 2
	// ThrowTryFinallyStatement2 XPECT succs at '2' --> 3
	// ThrowTryFinallyStatement2 XPECT succs at '3' --> throw 3;
	// ThrowTryFinallyStatement2 XPECT succs at 'throw 3;' -->
	"start";
	try {
		1;
	} finally {
		2;
		throw 3;
	}
	// ThrowTryFinallyStatement2 XPECT warnings --> "Dead code. No execution possible after TryStatement." at ""end""
	"end";
}

function ThrowTryFinallyStatement3() {
	/* ThrowTryFinallyStatement3 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> 3,
		3 --> throw 3;,
		throw 3; -Throw-> 4,
		4 --> 5,
		5 --> "end"
	--- */
	// ThrowTryFinallyStatement3 XPECT allPaths --> "start" -> 1 -> 2 -> 3 -> throw 3; -> 4 -> 5 -> "end"
	/* ThrowTryFinallyStatement3 XPECT allPaths direction 'Backward' ---
		"end" -> 5,
		"end" -> 5 -> 4 -> throw 3; -> 3 -> 2 -> 1 -> "start"
	--- */
	// ThrowTryFinallyStatement3 XPECT path from '"start"' to '"end"' -->
	// ThrowTryFinallyStatement3 XPECT commonPreds of '4' and '2' --> 2
	// ThrowTryFinallyStatement3 XPECT succs at '"start"' --> 1
	// ThrowTryFinallyStatement3 XPECT succs at '1' --> 2
	// ThrowTryFinallyStatement3 XPECT succs at '2' --> 3
	// ThrowTryFinallyStatement3 XPECT succs at '3' --> throw 3;
	// ThrowTryFinallyStatement3 XPECT succs at 'throw 3;' --> 4
	// ThrowTryFinallyStatement3 XPECT succs at '4' --> 5
	// ThrowTryFinallyStatement3 XPECT succs at '5' --> "end"
	"start";
	try {
		1;
	} finally {
		try {
			2;
			throw 3;
		} catch (e) {
			4;
		}
		5;
	}
	"end";
}

function ThrowTryCatchFinallyStatement1() {
	/* ThrowTryCatchFinallyStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> throw 2;,
		throw 2; -Throw-> 3,
		3 --> 4,
		4 --> "end"
	--- */
	// ThrowTryCatchFinallyStatement1 XPECT allPaths --> "start" -> 1 -> 2 -> throw 2; -> 3 -> 4 -> "end"
	/* ThrowTryCatchFinallyStatement1 XPECT allPaths direction 'Backward' ---
		"end" -> 4,
		"end" -> 4 -> 3 -> throw 2; -> 2 -> 1 -> "start"
	--- */
	// ThrowTryCatchFinallyStatement1 XPECT path from '"start"' to '"end"' -->
	// ThrowTryCatchFinallyStatement1 XPECT commonPreds of '3' and '4' --> 3
	// ThrowTryCatchFinallyStatement1 XPECT succs at '"start"' --> 1
	// ThrowTryCatchFinallyStatement1 XPECT succs at '1' --> 2
	// ThrowTryCatchFinallyStatement1 XPECT succs at '2' --> throw 2;
	// ThrowTryCatchFinallyStatement1 XPECT succs at 'throw 2;' --> 3
	// ThrowTryCatchFinallyStatement1 XPECT succs at '3' --> 4
	// ThrowTryCatchFinallyStatement1 XPECT succs at '4' --> "end"
	"start";
	try {
		1;
		throw 2;

	} catch (e) {
		3;
	} finally {
		4;
	}
	"end";
}

function ThrowTryCatchFinallyStatement2() {
	/* ThrowTryCatchFinallyStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> 4,
		2 --> 3,
		3 --> throw 3;,
		throw 3; -Throw-> 4,
		4 --> "end"
	--- */
	// ThrowTryCatchFinallyStatement2 XPECT allPaths --> "start" -> 1 -> 4 -> "end"
	/* ThrowTryCatchFinallyStatement2 XPECT allPaths direction 'Backward' ---
		"end" -> 4,
		"end" -> 4 -> 1 -> "start",
		4 -> throw 3; -> 3 -> 2
	---	*/
	// ThrowTryCatchFinallyStatement2 XPECT path from '"start"' to '"end"' -->
	// ThrowTryCatchFinallyStatement2 XPECT commonPreds of '3' and '4' --> 3
	// ThrowTryCatchFinallyStatement2 XPECT succs at '"start"' --> 1
	// ThrowTryCatchFinallyStatement2 XPECT succs at '1' --> 4
	// ThrowTryCatchFinallyStatement2 XPECT succs at '2' --> 3
	// ThrowTryCatchFinallyStatement2 XPECT succs at '3' --> throw 3;
	// ThrowTryCatchFinallyStatement2 XPECT succs at 'throw 3;' --> 4
	// ThrowTryCatchFinallyStatement2 XPECT succs at '4' --> "end"
	"start";
	try {
		1;

	} catch (e) {
		2;
		throw 3;

	} finally {
		4;
	}
	"end";
}


function WithStatement1() {
	/* WithStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> "end"
	--- */
	// WithStatement1 XPECT allPaths --> "start" -> 1 -> 2 -> "end"
	// WithStatement1 XPECT allPaths direction 'Backward' --> "end" -> 2 -> 1 -> "start"
	// WithStatement1 XPECT path from '"start"' to '"end"' -->
	// WithStatement1 XPECT commonPreds of '1' and '2' --> 1
	// WithStatement1 XPECT succs at '"start"' --> 1
	// WithStatement1 XPECT succs at '1' --> 2
	// WithStatement1 XPECT succs at '2' --> "end"
	"start";
	// WithStatement1 XPECT errors --> "With statement not allowed." at "with"
	with (1) 2;
	"end";
}

function WithStatement2() {
	/* WithStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> 2,
		2 --> "end"
	--- */
	// WithStatement2 XPECT allPaths --> "start" -> 1 -> 2 -> "end"
	// WithStatement2 XPECT allPaths direction 'Backward' --> "end" -> 2 -> 1 -> "start"
	// WithStatement2 XPECT path from '"start"' to '"end"' -->
	// WithStatement2 XPECT commonPreds of '1' and '2' --> 1
	// WithStatement2 XPECT succs at '"start"' --> 1
	// WithStatement2 XPECT succs at '1' --> 2
	// WithStatement2 XPECT succs at '2' --> "end"
	"start";
	// WithStatement2 XPECT errors --> "With statement not allowed." at "with"
	with (1) {
		2;
	}
	"end";
}


function VariableStatement1() {
	/* VariableStatement1 XPECT allEdges ---
		"start" --> 1,
		1 --> x = 1,
		x = 1 --> let x = 1;,
		let x = 1; --> "end"
	--- */
	// VariableStatement1 XPECT allPaths --> "start" -> 1 -> x = 1 -> let x = 1; -> "end"
	// VariableStatement1 XPECT allPaths direction 'Backward' --> "end" -> let x = 1; -> x = 1 -> 1 -> "start"
	// VariableStatement1 XPECT path from '"start"' to '"end"' -->
	// VariableStatement1 XPECT commonPreds of '1' and 'x = 1' --> 1
	// VariableStatement1 XPECT succs at '"start"' --> 1
	// VariableStatement1 XPECT succs at '1' --> x = 1
	// VariableStatement1 XPECT succs at 'x = 1' --> let x = 1;
	// VariableStatement1 XPECT succs at 'let x = 1;' --> "end"
	"start";
	let x = 1;
	"end";
}

function VariableStatement2() {
	/* VariableStatement2 XPECT allEdges ---
		"start" --> 1,
		1 --> x = 1,
		x = 1 --> var x = 1;,
		var x = 1; --> "end"
	--- */
	// VariableStatement2 XPECT allPaths --> "start" -> 1 -> x = 1 -> var x = 1; -> "end"
	// VariableStatement2 XPECT allPaths direction 'Backward' --> "end" -> var x = 1; -> x = 1 -> 1 -> "start"
	// VariableStatement2 XPECT path from '"start"' to '"end"' -->
	// VariableStatement2 XPECT commonPreds of '1' and 'x = 1' --> 1
	// VariableStatement2 XPECT succs at '"start"' --> 1
	// VariableStatement2 XPECT succs at '1' --> x = 1
	// VariableStatement2 XPECT succs at 'x = 1' --> var x = 1;
	// VariableStatement2 XPECT succs at 'var x = 1;' --> "end"
	"start";
	var x = 1;
	"end";
}

function VariableStatement3() {
	/* VariableStatement3 XPECT allEdges ---
		"start" --> x,
		x --> y,
		y --> z,
		z --> let x\, y\, z;,
		let x\, y\, z; --> "end"
	--- */
	// VariableStatement3 XPECT allPaths --> "start" -> x -> y -> z -> let x\, y\, z; -> "end"
	// VariableStatement3 XPECT allPaths direction 'Backward' --> "end" -> let x\, y\, z; -> z -> y -> x -> "start"
	// VariableStatement3 XPECT path from '"start"' to '"end"' -->
	// VariableStatement3 XPECT commonPreds of 'y' and 'x' --> x
	// VariableStatement3 XPECT succs at '"start"' --> x
	// VariableStatement3 XPECT succs at 'x' --> y
	// VariableStatement3 XPECT succs at 'y' --> z
	// VariableStatement3 XPECT succs at 'z' --> let x\, y\, z;
	// VariableStatement3 XPECT succs at 'let x, y, z;' --> "end"
	"start";
	let x, y, z;
	"end";
}

