/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


/* XPECT_SETUP org.eclipse.n4js.flowgraphs.tests.N4JSFlowGraphTest END_SETUP */


/**
 * Note:
 *
 * Tests in this file seem similar and redundant but are necessary
 * since all test methods rely on different algorithms. To verify these
 * algorithms it is important that all test methods are tested with
 * all supported language features.
 */



function SimpleD1and() {
	/* SimpleD1and XPECT allEdges ---
		"start" --> 1,
		1 && 2 --> "end",
		1 -IfTrue-> 2,
		1 -IfFalse-> 1 && 2,
		2 --> 1 && 2
	--- */
	/* SimpleD1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B1: [B0] -> 2 -> [B3],
		B2: [B0] -> [B3],
		B3: [B1|B2]1 && 2 -> "end"
	--- */
	/* SimpleD1and XPECT allPaths ---
		"start" -> 1 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "end"
	--- */
	/* SimpleD1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	1 && 2;
	"end";
}

function SimpleD1or() {
	/* SimpleD1or XPECT allEdges ---
		"start" --> 1,
		1 -IfFalse-> 2,
		1 -IfTrue-> 1 || 2,
		1 || 2 --> "end",
		2 --> 1 || 2
	--- */
	/* SimpleD1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B1: [B0] -> 2 -> [B3],
		B2: [B0] -> [B3],
		B3: [B1|B2]1 || 2 -> "end"
	--- */
	/* SimpleD1or XPECT allPaths ---
		"start" -> 1 -> 1 || 2 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "end"
	--- */
	/* SimpleD1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	1 || 2;
	"end";
}

function SimpleT1and() {
	/* SimpleT1and XPECT allEdges ---
		"start" --> 1, 1 && 2 && 3 --> "end", 1 && 2 -IfFalse-> 1 && 2 && 3,
		1 && 2 -IfTrue-> 3, 1 -IfFalse-> 1 && 2 && 3, 1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 && 3
	--- */
	/* SimpleT1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B5],
		B3: [B1] -> 3 -> [B5], B4: [B1] -> [B5], B5: [B2|B3|B4]1 && 2 && 3 -> "end"
	--- */
	/* SimpleT1and XPECT allPaths ---
		"start" -> 1 -> 1 && 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 1 && 2 && 3 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end"
	--- */
	/* SimpleT1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 && 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 && 3 -> 1 -> "start", "end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	1 && 2 && 3;
	"end";
}

function SimpleT1or() {
	/* SimpleT1or XPECT allEdges ---
		"start" --> 1, 1 -IfFalse-> 2, 1 -IfTrue-> 1 || 2 || 3, 1 || 2 -IfFalse-> 3,
		1 || 2 -IfTrue-> 1 || 2 || 3, 1 || 2 || 3 --> "end", 2 --> 1 || 2, 3 --> 1 || 2 || 3
	--- */
	/* SimpleT1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2[B3|B4], B2: [B0] -> [B5],
		B3: [B1] -> 3 -> [B5], B4: [B1] -> [B5], B5: [B2|B3|B4]1 || 2 || 3 -> "end"
	--- */
	/* SimpleT1or XPECT allPaths ---
		"start" -> 1 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 1 || 2 || 3 -> "end", "start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end"
	--- */
	/* SimpleT1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 || 3 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	1 || 2 || 3;
	"end";
}

function SimpleT1mixed1() {
	/* SimpleT1mixed1 XPECT allEdges ---
		"start" --> 1, 1 && 2 -IfFalse-> 3, 1 && 2 -IfTrue-> 1 && 2 || 3,
		1 && 2 || 3 --> "end", 1 -IfFalse-> 3, 1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 || 3
	--- */
	/* SimpleT1mixed1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B5],
		B3: [B1] -> [B5], B4: [B1] -> [B6], B5: [B2|B3]3 -> [B6], B6: [B4|B5]1 && 2 || 3 -> "end"
	--- */
	/* SimpleT1mixed1 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 && 2 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 3 -> 1 && 2 || 3 -> "end"
	--- */
	/* SimpleT1mixed1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 || 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 -> "start"
	--- */
	"start";
	1 && 2 || 3;
	"end";
}

function SimpleT1mixed2() {
	/* SimpleT1mixed2 XPECT allEdges ---
		"start" --> 1, 1 -IfFalse-> 2, 1 -IfTrue-> 1 || 2 && 3, 1 || 2 && 3 --> "end",
		2 && 3 --> 1 || 2 && 3, 2 -IfFalse-> 1 || 2 && 3, 2 -IfTrue-> 3, 3 --> 2 && 3
	--- */
	/* SimpleT1mixed2 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2[B3|B4], B2: [B0] -> [B5],
		B3: [B1] -> 3 -> 2 && 3 -> [B5], B4: [B1] -> [B5], B5: [B2|B3|B4]1 || 2 && 3 -> "end"
	--- */
	/* SimpleT1mixed2 XPECT allPaths ---
		"start" -> 1 -> 1 || 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 && 3 -> "end", "start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end"
	--- */
	/* SimpleT1mixed2 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 && 3 -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 1 || 2 && 3 -> 2 -> 1 -> "start"
	--- */
	"start";
	1 || 2 && 3;
	"end";
}

function SimpleT1mixed3() {
	/* SimpleT1mixed3 XPECT allEdges ---
		"start" --> 1, (1 || 2) && 3 --> "end", (1 || 2) -IfFalse-> (1 || 2) && 3,
		(1 || 2) -IfTrue-> 3, 1 -IfFalse-> 2, 1 -IfTrue-> 3, 1 || 2 --> (1 || 2), 2 --> 1 || 2,
		3 --> (1 || 2) && 3
	--- */
	/* SimpleT1mixed3 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B6], B5: [B2|B3]3 -> [B6],
		B6: [B4|B5](1 || 2) && 3 -> "end"
	--- */
	/* SimpleT1mixed3 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end", "start" -> 1 -> 3 -> (1 || 2) && 3 -> "end"
	--- */
	/* SimpleT1mixed3 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2) && 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start", "end" -> (1 || 2) && 3 -> 3 -> 1 -> "start"
	--- */
	"start";
	(1 || 2) && 3;
	"end";
}

function SimpleQ1mixed1() {
	/* SimpleQ1mixed1 XPECT allEdges ---
		"start" --> 1, (1 || 2) && (3 || 4) --> "end",
		(1 || 2) -IfFalse-> (1 || 2) && (3 || 4), (1 || 2) -IfTrue-> 3, (3 || 4) --> (1 || 2) && (3 || 4), 1 -IfFalse-> 2,
		1 -IfTrue-> 3, 1 || 2 --> (1 || 2), 2 --> 1 || 2, 3 -IfFalse-> 4,
		3 -IfTrue-> (1 || 2) && (3 || 4), 3 || 4 --> (3 || 4), 4 --> 3 || 4
	--- */
	/* SimpleQ1mixed1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B8], B5: [B2|B3]3[B6|B7],
		B6: [B5] -> 4 -> 3 || 4 -> (3 || 4) -> [B8], B7: [B5] -> [B8], B8: [B4|B6|B7](1 || 2) && (3 || 4) -> "end"
	--- */
	/* SimpleQ1mixed1 XPECT allPaths ---
		"start" -> 1 -> 3 -> (1 || 2) && (3 || 4) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> (1 || 2) && (3 || 4) -> "end",
		"start" -> 1 -> 3 -> 4 -> 3 || 4 -> (3 || 4) -> (1 || 2) && (3 || 4) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && (3 || 4) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> 4 -> 3 || 4 -> (3 || 4) -> (1 || 2) && (3 || 4) -> "end"
	--- */
	/* SimpleQ1mixed1 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2) && (3 || 4) -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && (3 || 4) -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && (3 || 4) -> (3 || 4) -> 3 || 4 -> 4 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && (3 || 4) -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && (3 || 4) -> (3 || 4) -> 3 || 4 -> 4 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 || 2) && (3 || 4);
	"end";
}

function SimpleQ1mixed2() {
	/* SimpleQ1mixed2 XPECT allEdges ---
		"start" --> 1, (1 && 2) -IfFalse-> 3, (1 && 2) -IfTrue-> (1 && 2) || (3 && 4),
		(1 && 2) || (3 && 4) --> "end", (3 && 4) --> (1 && 2) || (3 && 4), 1 && 2 --> (1 && 2), 1 -IfFalse-> 3,
		1 -IfTrue-> 2, 2 --> 1 && 2, 3 && 4 --> (3 && 4), 3 -IfFalse-> (1 && 2) || (3 && 4),
		3 -IfTrue-> 4, 4 --> 3 && 4
	--- */
	/* SimpleQ1mixed2 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2 -> (1 && 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B8], B5: [B2|B3]3[B6|B7],
		B6: [B5] -> 4 -> 3 && 4 -> (3 && 4) -> [B8], B7: [B5] -> [B8], B8: [B4|B6|B7](1 && 2) || (3 && 4) -> "end"
	--- */
	/* SimpleQ1mixed2 XPECT allPaths ---
		"start" -> 1 -> 3 -> (1 && 2) || (3 && 4) -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> (1 && 2) -> (1 && 2) || (3 && 4) -> "end",
		"start" -> 1 -> 3 -> 4 -> 3 && 4 -> (3 && 4) -> (1 && 2) || (3 && 4) -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> (1 && 2) -> 3 -> (1 && 2) || (3 && 4) -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> (1 && 2) -> 3 -> 4 -> 3 && 4 -> (3 && 4) -> (1 && 2) || (3 && 4) -> "end"
	--- */
	/* SimpleQ1mixed2 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 && 2) || (3 && 4) -> 3 -> 1 -> "start",
		"end" -> (1 && 2) || (3 && 4) -> (1 && 2) -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2) || (3 && 4) -> (3 && 4) -> 3 && 4 -> 4 -> 3 -> 1 -> "start",
		"end" -> (1 && 2) || (3 && 4) -> 3 -> (1 && 2) -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2) || (3 && 4) -> (3 && 4) -> 3 && 4 -> 4 -> 3 -> (1 && 2) -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 && 2) || (3 && 4);
	"end";
}

function SimpleQ1mixed3() {
	/* SimpleQ1mixed3 XPECT allEdges ---
		"start" --> 1, (1 && 2 && 3 || 4) --> "end", 1 && 2 && 3 -IfFalse-> 4,
		1 && 2 && 3 -IfTrue-> 1 && 2 && 3 || 4, 1 && 2 && 3 || 4 --> (1 && 2 && 3 || 4), 1 && 2 -IfFalse-> 4,
		1 && 2 -IfTrue-> 3, 1 -IfFalse-> 4, 1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 && 3,
		4 --> 1 && 2 && 3 || 4
	--- */
	/* SimpleQ1mixed3 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 1 && 2 && 3[B5|B6], B4: [B1] -> [B7], B5: [B3] -> [B7], B6: [B3] -> [B8], B7: [B2|B4|B5]4 -> [B8],
		B8: [B6|B7]1 && 2 && 3 || 4 -> (1 && 2 && 3 || 4) -> "end"
	--- */
	/* SimpleQ1mixed3 XPECT allPaths ---
		"start" -> 1 -> 4 -> 1 && 2 && 3 || 4 -> (1 && 2 && 3 || 4) -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 4 -> 1 && 2 && 3 || 4 -> (1 && 2 && 3 || 4) -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> 1 && 2 && 3 || 4 -> (1 && 2 && 3 || 4) -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> 4 -> 1 && 2 && 3 || 4 -> (1 && 2 && 3 || 4) -> "end"
	--- */
	/* SimpleQ1mixed3 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 && 2 && 3 || 4) -> 1 && 2 && 3 || 4 -> 4 -> 1 -> "start",
		"end" -> (1 && 2 && 3 || 4) -> 1 && 2 && 3 || 4 -> 4 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2 && 3 || 4) -> 1 && 2 && 3 || 4 -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2 && 3 || 4) -> 1 && 2 && 3 || 4 -> 4 -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 && 2 && 3 || 4);
	"end";
}

function SimpleQ1mixed4() {
	/* SimpleQ1mixed4 XPECT allEdges ---
		"start" --> 1, (1 || 2 && 3 && 4) --> "end", 1 -IfFalse-> 2,
		1 -IfTrue-> 1 || 2 && 3 && 4, 1 || 2 && 3 && 4 --> (1 || 2 && 3 && 4), 2 && 3 && 4 --> 1 || 2 && 3 && 4,
		2 && 3 -IfFalse-> 1 || 2 && 3 && 4, 2 && 3 -IfTrue-> 4, 2 -IfFalse-> 1 || 2 && 3 && 4, 2 -IfTrue-> 3, 3 --> 2 && 3,
		4 --> 2 && 3 && 4
	--- */
	/* SimpleQ1mixed4 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 2 && 3[B5|B6], B4: [B1] -> [B7], B5: [B3] -> 4 -> 2 && 3 && 4 -> [B7], B6: [B3] -> [B7],
		B7: [B2|B4|B5|B6]1 || 2 && 3 && 4 -> (1 || 2 && 3 && 4) -> "end"
	--- */
	/* SimpleQ1mixed4 XPECT allPaths ---
		"start" -> 1 -> 1 || 2 && 3 && 4 -> (1 || 2 && 3 && 4) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 && 3 && 4 -> (1 || 2 && 3 && 4) -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 && 4 -> (1 || 2 && 3 && 4) -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 4 -> 2 && 3 && 4 -> 1 || 2 && 3 && 4 -> (1 || 2 && 3 && 4) -> "end"
	--- */
	/* SimpleQ1mixed4 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2 && 3 && 4) -> 1 || 2 && 3 && 4 -> 1 -> "start",
		"end" -> (1 || 2 && 3 && 4) -> 1 || 2 && 3 && 4 -> 2 -> 1 -> "start",
		"end" -> (1 || 2 && 3 && 4) -> 1 || 2 && 3 && 4 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> (1 || 2 && 3 && 4) -> 1 || 2 && 3 && 4 -> 2 && 3 && 4 -> 4 -> 2 && 3 -> 3 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 || 2 && 3 && 4);
	"end";
}

function IfD1and() {
	/* IfD1and XPECT allEdges ---
		"start" --> 1,
		1 -IfTrue-> 2,
		2 --> 1 && 2,
		1 && 2 -IfFalse-> "else",
		1 && 2 -IfTrue-> "then",
		1 -IfFalse-> "else",
		"then" --> "end",
		"else" --> "end"
	--- */
	/* IfD1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B1: [B0] -> 2 -> 1 && 2[B3|B4],
		B2: [B0] -> [B5],
		B3: [B1] -> "then" -> [B6],
		B4: [B1] -> [B5],
		B5: [B2|B4]"else" -> [B6],
		B6: [B3|B5]"end"
	--- */
	/* IfD1and XPECT allPaths ---
		"start" -> 1 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "then" -> "end"
	--- */
	/* IfD1and backward XPECT allPaths direction 'Backward' ---
		"end" -> "else" -> 1 -> "start",
		"end" -> "else" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> "then" -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	if (1 && 2)
		"then";
	else
		"else";
	"end";
}

function IfD1or() {
	/* IfD1or XPECT allEdges ---
		"start" --> 1,
		1 -IfFalse-> 2,
		1 -IfTrue-> "then",
		2 --> 1 || 2,
		1 || 2 -IfFalse-> "else",
		1 || 2 -IfTrue-> "then",
		"else" --> "end",
		"then" --> "end"
	--- */
	/* IfD1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B1: [B0] -> 2 -> 1 || 2[B3|B4],
		B2: [B0] -> [B5],
		B3: [B1] -> [B5],
		B4: [B1] -> "else" -> [B6],
		B5: [B2|B3]"then" -> [B6],
		B6: [B4|B5]"end"
	--- */
	/* IfD1or XPECT allPaths ---
		"start" -> 1 -> "then" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "then" -> "end"
	--- */
	/* IfD1or backward XPECT allPaths direction 'Backward' ---
		"end" -> "then" -> 1 -> "start",
		"end" -> "else" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> "then" -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	if (1 || 2)
		"then";
	else
		"else";
	"end";
}

function IfT1and() {
	/* IfT1and XPECT allEdges ---
		"start" --> 1,
		1 -IfFalse-> "else",
		1 -IfTrue-> 2,
		2 --> 1 && 2,
		1 && 2 -IfFalse-> "else",
		1 && 2 -IfTrue-> 3,
		3 --> 1 && 2 && 3,
		1 && 2 && 3 -IfFalse-> "else",
		1 && 2 && 3 -IfTrue-> "then",
		"else" --> "end",
		"then" --> "end"
	--- */
	/* IfT1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2],
		B1: [B0] -> 2 -> 1 && 2[B3|B4],
		B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 1 && 2 && 3[B5|B6],
		B4: [B1] -> [B7],
		B5: [B3] -> "then" -> [B8],
		B6: [B3] -> [B7],
		B7: [B2|B4|B6]"else" -> [B8],
		B8: [B5|B7]"end"
	--- */
	/* IfT1and XPECT allPaths ---
		"start" -> 1 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "then" -> "end"
	--- */
	/* IfT1and backward XPECT allPaths direction 'Backward' ---
		"end" -> "else" -> 1 -> "start",
		"end" -> "else" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> "else" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> "then" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	if (1 && 2 && 3)
		"then";
	else
		"else";
	"end";
}

function IfT1or() {
	/* IfT1or XPECT allEdges ---
		"else" --> "end", "start" --> 1, "then" --> "end", 1 -IfFalse-> 2,
		1 -IfTrue-> "then", 1 || 2 -IfFalse-> 3, 1 || 2 -IfTrue-> "then", 1 || 2 || 3 -IfFalse-> "else",
		1 || 2 || 3 -IfTrue-> "then", 2 --> 1 || 2, 3 --> 1 || 2 || 3
	--- */
	/* IfT1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 1 || 2 || 3[B5|B6], B4: [B1] -> [B7], B5: [B3] -> [B7], B6: [B3] -> "else" -> [B8],
		B7: [B2|B4|B5]"then" -> [B8], B8: [B6|B7]"end"
	--- */
	/* IfT1or XPECT allPaths ---
		"start" -> 1 -> "then" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "then" -> "end", "start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "then" -> "end"
	--- */
	/* IfT1or backward XPECT allPaths direction 'Backward' ---
		"end" -> "else" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> "then" -> 1 -> "start", "end" -> "then" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> "then" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	if (1 || 2 || 3)
		"then";
	else
		"else";
	"end";
}

function IfT1mixed1() {
	/* IfT1mixed1 XPECT allEdges ---
		"else" --> "end", "start" --> 1, "then" --> "end", 1 && 2 -IfFalse-> 3,
		1 && 2 -IfTrue-> "then", 1 && 2 || 3 -IfFalse-> "else", 1 && 2 || 3 -IfTrue-> "then", 1 -IfFalse-> 3,
		1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 || 3
	--- */
	/* IfT1mixed1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B5],
		B3: [B1] -> [B5], B4: [B1] -> [B8], B5: [B2|B3]3 -> 1 && 2 || 3[B6|B7], B6: [B5] -> [B8],
		B7: [B5] -> "else" -> [B9], B8: [B4|B6]"then" -> [B9], B9: [B7|B8]"end"
	--- */
	/* IfT1mixed1 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 && 2 -> "then" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "else" -> "end", "start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "then" -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "else" -> "end", "start" -> 1 -> 3 -> 1 && 2 || 3 -> "then" -> "end"
	--- */
	/* IfT1mixed1 backward XPECT allPaths direction 'Backward' ---
		"end" -> "else" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> "else" -> 1 && 2 || 3 -> 3 -> 1 -> "start", "end" -> "then" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> "then" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> "then" -> 1 && 2 || 3 -> 3 -> 1 -> "start"
	--- */
	"start";
	if (1 && 2 || 3)
		"then";
	else
		"else";
	"end";
}

function IfT1mixed2() {
	/* IfT1mixed2 XPECT allEdges ---
		"else" --> "end", "start" --> 1, "then" --> "end", 1 -IfFalse-> 2,
		1 -IfTrue-> "then", 1 || 2 && 3 -IfFalse-> "else", 1 || 2 && 3 -IfTrue-> "then",
		2 && 3 --> 1 || 2 && 3, 2 -IfFalse-> "else", 2 -IfTrue-> 3, 3 --> 2 && 3
	--- */
	/* IfT1mixed2 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 2 && 3 -> 1 || 2 && 3[B5|B6], B4: [B1] -> [B8], B5: [B3] -> [B7], B6: [B3] -> [B8],
		B7: [B2|B5]"then" -> [B9], B8: [B4|B6]"else" -> [B9], B9: [B7|B8]"end"
	--- */
	/* IfT1mixed2 XPECT allPaths ---
		"start" -> 1 -> "then" -> "end", "start" -> 1 -> 2 -> "else" -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "else" -> "end", "start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "then" -> "end"
	--- */
	/* IfT1mixed2 backward XPECT allPaths direction 'Backward' ---
		"end" -> "else" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> "else" -> 2 -> 1 -> "start", "end" -> "then" -> 1 -> "start",
		"end" -> "then" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start"
	--- */
	"start";
	if (1 || 2 && 3)
		"then";
	else
		"else";
	"end";
}

function IfT1mixed3() {
	/* IfT1mixed3 XPECT allEdges ---
		"else" --> "end", "start" --> 1, "then" --> "end",
		(1 || 2) && 3 -IfFalse-> "else", (1 || 2) && 3 -IfTrue-> "then", (1 || 2) -IfFalse-> "else",
		(1 || 2) -IfTrue-> 3, 1 -IfFalse-> 2, 1 -IfTrue-> 3, 1 || 2 --> (1 || 2), 2 --> 1 || 2,
		3 --> (1 || 2) && 3
	--- */
	/* IfT1mixed3 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B8], B5: [B2|B3]3 -> (1 || 2) && 3[B6|B7],
		B6: [B5] -> "then" -> [B9], B7: [B5] -> [B8], B8: [B4|B7]"else" -> [B9], B9: [B6|B8]"end"
	--- */
	/* IfT1mixed3 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "then" -> "end", "start" -> 1 -> 3 -> (1 || 2) && 3 -> "else" -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "then" -> "end"
	--- */
	/* IfT1mixed3 backward XPECT allPaths direction 'Backward' ---
		"end" -> "else" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> "else" -> (1 || 2) && 3 -> 3 -> 1 -> "start", "end" -> "else" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> "then" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start", "end" -> "then" -> (1 || 2) && 3 -> 3 -> 1 -> "start"
	--- */
	"start";
	if ((1 || 2) && 3)
		"then";
	else
		"else";
	"end";
}


function ConditionalD1and() {
	/* ConditionalD1and XPECT allEdges ---
		"else" --> (1 && 2) ? "then" : "else", "start" --> 1,
		"then" --> (1 && 2) ? "then" : "else", (1 && 2) -IfFalse-> "else", (1 && 2) -IfTrue-> "then",
		(1 && 2) ? "then" : "else" --> "end", 1 && 2 --> (1 && 2), 1 -IfFalse-> "else", 1 -IfTrue-> 2, 2 --> 1 && 2
	--- */
	/* ConditionalD1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2 -> (1 && 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> "then" -> [B6], B4: [B1] -> [B5], B5: [B2|B4]"else" -> [B6],
		B6: [B3|B5](1 && 2) ? "then" : "else" -> "end"
	--- */
	/* ConditionalD1and XPECT allPaths ---
		"start" -> 1 -> "else" -> (1 && 2) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> (1 && 2) -> "else" -> (1 && 2) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> (1 && 2) -> "then" -> (1 && 2) ? "then" : "else" -> "end"
	--- */
	/* ConditionalD1and backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 && 2) ? "then" : "else" -> "else" -> (1 && 2) -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2) ? "then" : "else" -> "else" -> 1 -> "start",
		"end" -> (1 && 2) ? "then" : "else" -> "then" -> (1 && 2) -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 && 2) ?
		"then"
	:
		"else";
	"end";
}

function ConditionalD1or() {
	/* ConditionalD1or XPECT allEdges ---
		"else" --> (1 || 2) ? "then" : "else", "start" --> 1,
		"then" --> (1 || 2) ? "then" : "else", (1 || 2) -IfFalse-> "else", (1 || 2) -IfTrue-> "then",
		(1 || 2) ? "then" : "else" --> "end", 1 -IfFalse-> 2, 1 -IfTrue-> "then", 1 || 2 --> (1 || 2), 2 --> 1 || 2
	--- */
	/* ConditionalD1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> "else" -> [B6], B5: [B2|B3]"then" -> [B6],
		B6: [B4|B5](1 || 2) ? "then" : "else" -> "end"
	--- */
	/* ConditionalD1or XPECT allPaths ---
		"start" -> 1 -> "then" -> (1 || 2) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "else" -> (1 || 2) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "then" -> (1 || 2) ? "then" : "else" -> "end"
	--- */
	/* ConditionalD1or backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2) ? "then" : "else" -> "else" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) ? "then" : "else" -> "then" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start", "end" -> (1 || 2) ? "then" : "else" -> "then" -> 1 -> "start"
	--- */
	"start";
	(1 || 2) ?
		"then"
	:
		"else";
	"end";
}

function ConditionalT1and() {
	/* ConditionalT1and XPECT allEdges ---
		"else" --> (1 && 2 && 3) ? "then" : "else", "start" --> 1,
		"then" --> (1 && 2 && 3) ? "then" : "else", (1 && 2 && 3) -IfFalse-> "else", (1 && 2 && 3) -IfTrue-> "then",
		(1 && 2 && 3) ? "then" : "else" --> "end", 1 && 2 && 3 --> (1 && 2 && 3), 1 && 2 -IfFalse-> "else", 1 && 2 -IfTrue-> 3,
		1 -IfFalse-> "else", 1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 && 3
	--- */
	/* ConditionalT1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 1 && 2 && 3 -> (1 && 2 && 3)[B5|B6], B4: [B1] -> [B7], B5: [B3] -> "then" -> [B8], B6: [B3] -> [B7],
		B7: [B2|B4|B6]"else" -> [B8], B8: [B5|B7](1 && 2 && 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1and XPECT allPaths ---
		"start" -> 1 -> "else" -> (1 && 2 && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "else" -> (1 && 2 && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> (1 && 2 && 3) -> "else" -> (1 && 2 && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> (1 && 2 && 3) -> "then" -> (1 && 2 && 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1and backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 && 2 && 3) ? "then" : "else" -> "else" -> (1 && 2 && 3) -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2 && 3) ? "then" : "else" -> "else" -> 1 && 2 -> 2 -> 1 -> "start", "end" -> (1 && 2 && 3) ? "then" : "else" -> "else" -> 1 -> "start",
		"end" -> (1 && 2 && 3) ? "then" : "else" -> "then" -> (1 && 2 && 3) -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 && 2 && 3) ?
		"then"
	:
		"else";
	"end";
}

function ConditionalT1or() {
	/* ConditionalT1or XPECT allEdges ---
		"else" --> (1 || 2 || 3) ? "then" : "else", "start" --> 1,
		"then" --> (1 || 2 || 3) ? "then" : "else", (1 || 2 || 3) -IfFalse-> "else", (1 || 2 || 3) -IfTrue-> "then",
		(1 || 2 || 3) ? "then" : "else" --> "end", 1 -IfFalse-> 2, 1 -IfTrue-> "then", 1 || 2 -IfFalse-> 3,
		1 || 2 -IfTrue-> "then", 1 || 2 || 3 --> (1 || 2 || 3), 2 --> 1 || 2, 3 --> 1 || 2 || 3
	--- */
	/* ConditionalT1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 1 || 2 || 3 -> (1 || 2 || 3)[B5|B6], B4: [B1] -> [B7], B5: [B3] -> [B7], B6: [B3] -> "else" -> [B8],
		B7: [B2|B4|B5]"then" -> [B8], B8: [B6|B7](1 || 2 || 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1or XPECT allPaths ---
		"start" -> 1 -> "then" -> (1 || 2 || 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "then" -> (1 || 2 || 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> (1 || 2 || 3) -> "else" -> (1 || 2 || 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> (1 || 2 || 3) -> "then" -> (1 || 2 || 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1or backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2 || 3) ? "then" : "else" -> "else" -> (1 || 2 || 3) -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2 || 3) ? "then" : "else" -> "then" -> (1 || 2 || 3) -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start", "end" -> (1 || 2 || 3) ? "then" : "else" -> "then" -> 1 -> "start",
		"end" -> (1 || 2 || 3) ? "then" : "else" -> "then" -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 || 2 || 3) ?
		"then"
	:
		"else";
	"end";
}

function ConditionalT1mixed1() {
	/* ConditionalT1mixed1 XPECT allEdges ---
		"else" --> (1 && 2 || 3) ? "then" : "else", "start" --> 1,
		"then" --> (1 && 2 || 3) ? "then" : "else", (1 && 2 || 3) -IfFalse-> "else", (1 && 2 || 3) -IfTrue-> "then",
		(1 && 2 || 3) ? "then" : "else" --> "end", 1 && 2 -IfFalse-> 3, 1 && 2 -IfTrue-> "then", 1 && 2 || 3 --> (1 && 2 || 3),
		1 -IfFalse-> 3, 1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 || 3
	--- */
	/* ConditionalT1mixed1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B5],
		B3: [B1] -> [B5], B4: [B1] -> [B8], B5: [B2|B3]3 -> 1 && 2 || 3 -> (1 && 2 || 3)[B6|B7],
		B6: [B5] -> [B8], B7: [B5] -> "else" -> [B9], B8: [B4|B6]"then" -> [B9],
		B9: [B7|B8](1 && 2 || 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1mixed1 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 && 2 -> "then" -> (1 && 2 || 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> (1 && 2 || 3) -> "else" -> (1 && 2 || 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> (1 && 2 || 3) -> "then" -> (1 && 2 || 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> (1 && 2 || 3) -> "else" -> (1 && 2 || 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> (1 && 2 || 3) -> "then" -> (1 && 2 || 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1mixed1 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 && 2 || 3) ? "then" : "else" -> "else" -> (1 && 2 || 3) -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2 || 3) ? "then" : "else" -> "else" -> (1 && 2 || 3) -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> (1 && 2 || 3) ? "then" : "else" -> "then" -> (1 && 2 || 3) -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> (1 && 2 || 3) ? "then" : "else" -> "then" -> (1 && 2 || 3) -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> (1 && 2 || 3) ? "then" : "else" -> "then" -> 1 && 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	(1 && 2 || 3) ?
		"then"
	:
		"else";
	"end";
}

function ConditionalT1mixed2() {
	/* ConditionalT1mixed2 XPECT allEdges ---
		"else" --> (1 || 2 && 3) ? "then" : "else", "start" --> 1,
		"then" --> (1 || 2 && 3) ? "then" : "else", (1 || 2 && 3) -IfFalse-> "else", (1 || 2 && 3) -IfTrue-> "then",
		(1 || 2 && 3) ? "then" : "else" --> "end", 1 -IfFalse-> 2, 1 -IfTrue-> "then", 1 || 2 && 3 --> (1 || 2 && 3),
		2 && 3 --> 1 || 2 && 3, 2 -IfFalse-> "else", 2 -IfTrue-> 3, 3 --> 2 && 3
	--- */
	/* ConditionalT1mixed2 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 2 && 3 -> 1 || 2 && 3 -> (1 || 2 && 3)[B5|B6], B4: [B1] -> [B8], B5: [B3] -> [B7], B6: [B3] -> [B8],
		B7: [B2|B5]"then" -> [B9], B8: [B4|B6]"else" -> [B9], B9: [B7|B8](1 || 2 && 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1mixed2 XPECT allPaths ---
		"start" -> 1 -> "then" -> (1 || 2 && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> "else" -> (1 || 2 && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> (1 || 2 && 3) -> "else" -> (1 || 2 && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> (1 || 2 && 3) -> "then" -> (1 || 2 && 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1mixed2 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2 && 3) ? "then" : "else" -> "else" -> (1 || 2 && 3) -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> (1 || 2 && 3) ? "then" : "else" -> "else" -> 2 -> 1 -> "start",
		"end" -> (1 || 2 && 3) ? "then" : "else" -> "then" -> (1 || 2 && 3) -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> (1 || 2 && 3) ? "then" : "else" -> "then" -> 1 -> "start"
	--- */
	"start";
	(1 || 2 && 3) ?
		"then"
	:
		"else";
	"end";
}

function ConditionalT1mixed3() {
	/* ConditionalT1mixed3 XPECT allEdges ---
		"else" --> ((1 || 2) && 3) ? "then" : "else", "start" --> 1,
		"then" --> ((1 || 2) && 3) ? "then" : "else", ((1 || 2) && 3) -IfFalse-> "else", ((1 || 2) && 3) -IfTrue-> "then",
		((1 || 2) && 3) ? "then" : "else" --> "end", (1 || 2) && 3 --> ((1 || 2) && 3), (1 || 2) -IfFalse-> "else",
		(1 || 2) -IfTrue-> 3, 1 -IfFalse-> 2, 1 -IfTrue-> 3, 1 || 2 --> (1 || 2), 2 --> 1 || 2,
		3 --> (1 || 2) && 3
	--- */
	/* ConditionalT1mixed3 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B8],
		B5: [B2|B3]3 -> (1 || 2) && 3 -> ((1 || 2) && 3)[B6|B7], B6: [B5] -> "then" -> [B9], B7: [B5] -> [B8], B8: [B4|B7]"else" -> [B9],
		B9: [B6|B8]((1 || 2) && 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1mixed3 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "else" -> ((1 || 2) && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> ((1 || 2) && 3) -> "else" -> ((1 || 2) && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> ((1 || 2) && 3) -> "then" -> ((1 || 2) && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> ((1 || 2) && 3) -> "else" -> ((1 || 2) && 3) ? "then" : "else" -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> ((1 || 2) && 3) -> "then" -> ((1 || 2) && 3) ? "then" : "else" -> "end"
	--- */
	/* ConditionalT1mixed3 backward XPECT allPaths direction 'Backward' ---
		"end" -> ((1 || 2) && 3) ? "then" : "else" -> "else" -> ((1 || 2) && 3) -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> ((1 || 2) && 3) ? "then" : "else" -> "else" -> ((1 || 2) && 3) -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> ((1 || 2) && 3) ? "then" : "else" -> "else" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> ((1 || 2) && 3) ? "then" : "else" -> "then" -> ((1 || 2) && 3) -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> ((1 || 2) && 3) ? "then" : "else" -> "then" -> ((1 || 2) && 3) -> (1 || 2) && 3 -> 3 -> 1 -> "start"
	--- */
	"start";
	((1 || 2) && 3) ?
		"then"
	:
		"else";
	"end";
}


function ForD1and() {
	/* ForD1and XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 && 2 -LoopEnter-> "loop",
		1 && 2 -LoopExit-> "end", 1 -IfTrue-> 2, 1 -LoopExit-> "end", 2 --> 1 && 2
	--- */
	/* ForD1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B7] -> [B11], B11: [B2|B4|B6|B8|B9|B10]"end",
		B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B11], B3: [B1] -> "loop" -> 1[B5|B6], B4: [B1] -> [B11],
		B5: [B3] -> 2 -> 1 && 2[B7|B8], B6: [B3] -> [B11], B7: [B5] -> "loop" -> 1[B9|B10], B8: [B5] -> [B11],
		B9: [B7] -> 2 -> 1 && 2 -> [B11]
	--- */
	/* ForD1and XPECT allPaths ---
		"start" -> 1 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end"
	--- */
	/* ForD1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 -> "start"
	--- */
	"start";
	for (; 1 && 2 ;)
		"loop";
	"end";
}

function ForD1or() {
	/* ForD1or XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 -IfFalse-> 2, 1 -LoopEnter-> "loop",
		1 || 2 -LoopEnter-> "loop", 1 || 2 -LoopExit-> "end", 2 --> 1 || 2
	--- */
	/* ForD1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B7|B8]"loop" -> 1 -> 2 -> 1 || 2 -> [B11],
		B11: [B4|B9|B10]"end", B1: [B0] -> 2 -> 1 || 2[B3|B4], B2: [B0] -> [B5], B3: [B1] -> [B5],
		B4: [B1] -> [B11], B5: [B2|B3]"loop" -> 1[B6|B7], B6: [B5] -> 2 -> 1 || 2[B8|B9],
		B7: [B5] -> [B10], B8: [B6] -> [B10], B9: [B6] -> [B11]
	--- */
	/* ForD1or XPECT allPaths ---
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end", "start" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end", "start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end"
	--- */
	/* ForD1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	for (; 1 || 2 ;)
		"loop";
	"end";
}

function ForT1and() {
	/* ForT1and XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 && 2 && 3 -LoopEnter-> "loop",
		1 && 2 && 3 -LoopExit-> "end", 1 && 2 -IfTrue-> 3, 1 && 2 -LoopExit-> "end", 1 -IfTrue-> 2,
		1 -LoopExit-> "end", 2 --> 1 && 2, 3 --> 1 && 2 && 3
	--- */
	/* ForT1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B7] -> [B17], B11: [B9] -> "loop" -> 1[B13|B14],
		B12: [B9] -> [B17], B13: [B11] -> 2 -> 1 && 2[B15|B16], B14: [B11] -> [B17],
		B15: [B13] -> 3 -> 1 && 2 && 3 -> [B17], B16: [B13] -> [B17], B17: [B2|B4|B6|B8|B10|B12|B14|B15|B16]"end",
		B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B17], B3: [B1] -> 3 -> 1 && 2 && 3[B5|B6], B4: [B1] -> [B17],
		B5: [B3] -> "loop" -> 1[B7|B8], B6: [B3] -> [B17], B7: [B5] -> 2 -> 1 && 2[B9|B10], B8: [B5] -> [B17],
		B9: [B7] -> 3 -> 1 && 2 && 3[B11|B12]
	--- */
	/* ForT1and XPECT allPaths ---
		"start" -> 1 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end"
	--- */
	/* ForT1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "start"
	--- */
	"start";
	for (; 1 && 2 && 3 ;)
		"loop";
	"end";
}

function ForT1or() {
	/* ForT1or XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 -IfFalse-> 2, 1 -LoopEnter-> "loop",
		1 || 2 -IfFalse-> 3, 1 || 2 -LoopEnter-> "loop", 1 || 2 || 3 -LoopEnter-> "loop",
		1 || 2 || 3 -LoopExit-> "end", 2 --> 1 || 2, 3 --> 1 || 2 || 3
	--- */
	/* ForT1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> 3 -> 1 || 2 || 3[B12|B13],
		B11: [B8] -> [B14], B12: [B10] -> [B14], B13: [B10] -> [B15],
		B14: [B9|B11|B12]"loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> [B15], B15: [B6|B13|B14]"end", B1: [B0] -> 2 -> 1 || 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 1 || 2 || 3[B5|B6], B4: [B1] -> [B7], B5: [B3] -> [B7], B6: [B3] -> [B15],
		B7: [B2|B4|B5]"loop" -> 1[B8|B9], B8: [B7] -> 2 -> 1 || 2[B10|B11], B9: [B7] -> [B14]
	--- */
	/* ForT1or XPECT allPaths ---
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end", "start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end", "start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end"
	--- */
	/* ForT1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	for (; 1 || 2 || 3 ;)
		"loop";
	"end";
}

function ForT1mixed1() {
	/* ForT1mixed1 XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 && 2 -IfFalse-> 3,
		1 && 2 -LoopEnter-> "loop", 1 && 2 || 3 -LoopEnter-> "loop", 1 && 2 || 3 -LoopExit-> "end", 1 -IfFalse-> 3,
		1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 || 3
	--- */
	/* ForT1mixed1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> [B13], B11: [B9] -> [B13],
		B12: [B9] -> [B16], B13: [B10|B11]3 -> 1 && 2 || 3[B14|B15], B14: [B13] -> [B16],
		B15: [B13] -> [B20], B16: [B12|B14]"loop" -> 1[B17|B18], B17: [B16] -> 2 -> 1 && 2 -> [B19],
		B18: [B16] -> [B19], B19: [B17|B18]3 -> 1 && 2 || 3 -> [B20], B1: [B0] -> 2 -> 1 && 2[B3|B4],
		B20: [B7|B15|B19]"end", B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B8],
		B5: [B2|B3]3 -> 1 && 2 || 3[B6|B7], B6: [B5] -> [B8], B7: [B5] -> [B20], B8: [B4|B6]"loop" -> 1[B9|B10],
		B9: [B8] -> 2 -> 1 && 2[B11|B12]
	--- */
	/* ForT1mixed1 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end"
	--- */
	/* ForT1mixed1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "start"
	--- */
	"start";
	for (; 1 && 2 || 3 ;)
		"loop";
	"end";
}

function ForT1mixed2() {
	/* ForT1mixed2 XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 -IfFalse-> 2, 1 -LoopEnter-> "loop",
		1 || 2 && 3 -LoopEnter-> "loop", 1 || 2 && 3 -LoopExit-> "end", 2 && 3 --> 1 || 2 && 3, 2 -IfTrue-> 3,
		2 -LoopExit-> "end", 3 --> 2 && 3
	--- */
	/* ForT1mixed2 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> 3 -> 2 && 3 -> 1 || 2 && 3[B12|B13],
		B11: [B8] -> [B17], B12: [B10] -> [B14], B13: [B10] -> [B17],
		B14: [B9|B12]"loop" -> 1 -> 2[B15|B16], B15: [B14] -> 3 -> 2 && 3 -> 1 || 2 && 3 -> [B17], B16: [B14] -> [B17],
		B17: [B4|B6|B11|B13|B15|B16]"end", B1: [B0] -> 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 2 && 3 -> 1 || 2 && 3[B5|B6], B4: [B1] -> [B17], B5: [B3] -> [B7], B6: [B3] -> [B17],
		B7: [B2|B5]"loop" -> 1[B8|B9], B8: [B7] -> 2[B10|B11], B9: [B7] -> [B14]
	--- */
	/* ForT1mixed2 XPECT allPaths ---
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end", "start" -> 1 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end", "start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end", "start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end"
	--- */
	/* ForT1mixed2 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> "start"
	--- */
	"start";
	for (; 1 || 2 && 3 ;)
		"loop";
	"end";
}

function ForT1mixed3() {
	/* ForT1mixed3 XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, (1 || 2) && 3 -LoopEnter-> "loop",
		(1 || 2) && 3 -LoopExit-> "end", (1 || 2) -IfTrue-> 3, (1 || 2) -LoopExit-> "end", 1 -IfFalse-> 2,
		1 -IfTrue-> 3, 1 || 2 --> (1 || 2), 2 --> 1 || 2, 3 --> (1 || 2) && 3
	--- */
	/* ForT1mixed3 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> [B12], B11: [B8] -> [B20],
		B12: [B9|B10]3 -> (1 || 2) && 3[B13|B14], B13: [B12] -> "loop" -> 1[B15|B16], B14: [B12] -> [B20],
		B15: [B13] -> 2 -> 1 || 2 -> (1 || 2)[B17|B18], B16: [B13] -> [B19], B17: [B15] -> [B19], B18: [B15] -> [B20],
		B19: [B16|B17]3 -> (1 || 2) && 3 -> [B20], B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4], B20: [B4|B7|B11|B14|B18|B19]"end",
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B20], B5: [B2|B3]3 -> (1 || 2) && 3[B6|B7],
		B6: [B5] -> "loop" -> 1[B8|B9], B7: [B5] -> [B20], B8: [B6] -> 2 -> 1 || 2 -> (1 || 2)[B10|B11],
		B9: [B6] -> [B12]
	--- */
	/* ForT1mixed3 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end", "start" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end"
	--- */
	/* ForT1mixed3 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start", "end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start", "end" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start", "end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	for (; (1 || 2) && 3 ;)
		"loop";
	"end";
}


function WhileD1and() {
	/* WhileD1and XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 && 2 -LoopEnter-> "loop",
		1 && 2 -LoopExit-> "end", 1 -IfTrue-> 2, 1 -LoopExit-> "end", 2 --> 1 && 2
	--- */
	/* WhileD1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B7] -> [B11], B11: [B2|B4|B6|B8|B9|B10]"end",
		B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B11], B3: [B1] -> "loop" -> 1[B5|B6], B4: [B1] -> [B11],
		B5: [B3] -> 2 -> 1 && 2[B7|B8], B6: [B3] -> [B11], B7: [B5] -> "loop" -> 1[B9|B10], B8: [B5] -> [B11],
		B9: [B7] -> 2 -> 1 && 2 -> [B11]
	--- */
	/* WhileD1and XPECT allPaths ---
		"start" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end"
	--- */
	/* WhileD1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "start"
	--- */
	"start";
	while (1 && 2)
		"loop";
	"end";
}

function WhileD1or() {
	/* WhileD1or XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 -IfFalse-> 2, 1 -LoopEnter-> "loop",
		1 || 2 -LoopEnter-> "loop", 1 || 2 -LoopExit-> "end", 2 --> 1 || 2
	--- */
	/* WhileD1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B7|B8]"loop" -> 1 -> 2 -> 1 || 2 -> [B11],
		B11: [B4|B9|B10]"end", B1: [B0] -> 2 -> 1 || 2[B3|B4], B2: [B0] -> [B5], B3: [B1] -> [B5],
		B4: [B1] -> [B11], B5: [B2|B3]"loop" -> 1[B6|B7], B6: [B5] -> 2 -> 1 || 2[B8|B9],
		B7: [B5] -> [B10], B8: [B6] -> [B10], B9: [B6] -> [B11]
	--- */
	/* WhileD1or XPECT allPaths ---
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end", "start" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end", "start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end"
	--- */
	/* WhileD1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	while (1 || 2)
		"loop";
	"end";
}

function WhileT1and() {
	/* WhileT1and XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 && 2 && 3 -LoopEnter-> "loop",
		1 && 2 && 3 -LoopExit-> "end", 1 && 2 -IfTrue-> 3, 1 && 2 -LoopExit-> "end", 1 -IfTrue-> 2,
		1 -LoopExit-> "end", 2 --> 1 && 2, 3 --> 1 && 2 && 3
	--- */
	/* WhileT1and XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B7] -> [B17], B11: [B9] -> "loop" -> 1[B13|B14],
		B12: [B9] -> [B17], B13: [B11] -> 2 -> 1 && 2[B15|B16], B14: [B11] -> [B17],
		B15: [B13] -> 3 -> 1 && 2 && 3 -> [B17], B16: [B13] -> [B17], B17: [B2|B4|B6|B8|B10|B12|B14|B15|B16]"end",
		B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B17], B3: [B1] -> 3 -> 1 && 2 && 3[B5|B6], B4: [B1] -> [B17],
		B5: [B3] -> "loop" -> 1[B7|B8], B6: [B3] -> [B17], B7: [B5] -> 2 -> 1 && 2[B9|B10], B8: [B5] -> [B17],
		B9: [B7] -> 3 -> 1 && 2 && 3[B11|B12]
	--- */
	/* WhileT1and XPECT allPaths ---
		"start" -> 1 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end"
	--- */
	/* WhileT1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start", "end" -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 -> "start"
	--- */
	"start";
	while (1 && 2 && 3)
		"loop";
	"end";
}

function WhileT1or() {
	/* WhileT1or XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 -IfFalse-> 2, 1 -LoopEnter-> "loop",
		1 || 2 -IfFalse-> 3, 1 || 2 -LoopEnter-> "loop", 1 || 2 || 3 -LoopEnter-> "loop",
		1 || 2 || 3 -LoopExit-> "end", 2 --> 1 || 2, 3 --> 1 || 2 || 3
	--- */
	/* WhileT1or XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> 3 -> 1 || 2 || 3[B12|B13],
		B11: [B8] -> [B14], B12: [B10] -> [B14], B13: [B10] -> [B15],
		B14: [B9|B11|B12]"loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> [B15], B15: [B6|B13|B14]"end", B1: [B0] -> 2 -> 1 || 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 1 || 2 || 3[B5|B6], B4: [B1] -> [B7], B5: [B3] -> [B7], B6: [B3] -> [B15],
		B7: [B2|B4|B5]"loop" -> 1[B8|B9], B8: [B7] -> 2 -> 1 || 2[B10|B11], B9: [B7] -> [B14]
	--- */
	/* WhileT1or XPECT allPaths ---
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end", "start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end", "start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end"
	--- */
	/* WhileT1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start", "end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	while (1 || 2 || 3)
		"loop";
	"end";
}

function WhileT1mixed1() {
	/* WhileT1mixed1 XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 && 2 -IfFalse-> 3,
		1 && 2 -LoopEnter-> "loop", 1 && 2 || 3 -LoopEnter-> "loop", 1 && 2 || 3 -LoopExit-> "end", 1 -IfFalse-> 3,
		1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 || 3
	--- */
	/* WhileT1mixed1 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> [B13], B11: [B9] -> [B13],
		B12: [B9] -> [B16], B13: [B10|B11]3 -> 1 && 2 || 3[B14|B15], B14: [B13] -> [B16],
		B15: [B13] -> [B20], B16: [B12|B14]"loop" -> 1[B17|B18], B17: [B16] -> 2 -> 1 && 2 -> [B19],
		B18: [B16] -> [B19], B19: [B17|B18]3 -> 1 && 2 || 3 -> [B20], B1: [B0] -> 2 -> 1 && 2[B3|B4],
		B20: [B7|B15|B19]"end", B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B8],
		B5: [B2|B3]3 -> 1 && 2 || 3[B6|B7], B6: [B5] -> [B8], B7: [B5] -> [B20], B8: [B4|B6]"loop" -> 1[B9|B10],
		B9: [B8] -> 2 -> 1 && 2[B11|B12]
	--- */
	/* WhileT1mixed1 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end"
	--- */
	/* WhileT1mixed1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "start"
	--- */
	"start";
	while (1 && 2 || 3)
		"loop";
	"end";
}

function WhileT1mixed2() {
	/* WhileT1mixed2 XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, 1 -IfFalse-> 2, 1 -LoopEnter-> "loop",
		1 || 2 && 3 -LoopEnter-> "loop", 1 || 2 && 3 -LoopExit-> "end", 2 && 3 --> 1 || 2 && 3, 2 -IfTrue-> 3,
		2 -LoopExit-> "end", 3 --> 2 && 3
	--- */
	/* WhileT1mixed2 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> 3 -> 2 && 3 -> 1 || 2 && 3[B12|B13],
		B11: [B8] -> [B17], B12: [B10] -> [B14], B13: [B10] -> [B17],
		B14: [B9|B12]"loop" -> 1 -> 2[B15|B16], B15: [B14] -> 3 -> 2 && 3 -> 1 || 2 && 3 -> [B17], B16: [B14] -> [B17],
		B17: [B4|B6|B11|B13|B15|B16]"end", B1: [B0] -> 2[B3|B4], B2: [B0] -> [B7],
		B3: [B1] -> 3 -> 2 && 3 -> 1 || 2 && 3[B5|B6], B4: [B1] -> [B17], B5: [B3] -> [B7], B6: [B3] -> [B17],
		B7: [B2|B5]"loop" -> 1[B8|B9], B8: [B7] -> 2[B10|B11], B9: [B7] -> [B14]
	--- */
	/* WhileT1mixed2 XPECT allPaths ---
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end", "start" -> 1 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end", "start" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end", "start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end"
	--- */
	/* WhileT1mixed2 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start", "end" -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "start",
		"end" -> 2 -> 1 -> "start"
	--- */
	"start";
	while (1 || 2 && 3)
		"loop";
	"end";
}

function WhileT1mixed3() {
	/* WhileT1mixed3 XPECT allEdges ---
		"loop" -LoopRepeat-> 1, "start" --> 1, (1 || 2) && 3 -LoopEnter-> "loop",
		(1 || 2) && 3 -LoopExit-> "end", (1 || 2) -IfTrue-> 3, (1 || 2) -LoopExit-> "end", 1 -IfFalse-> 2,
		1 -IfTrue-> 3, 1 || 2 --> (1 || 2), 2 --> 1 || 2, 3 --> (1 || 2) && 3
	--- */
	/* WhileT1mixed3 XPECT allBranches ---
		B0: "start" -> 1[B1|B2], B10: [B8] -> [B12], B11: [B8] -> [B20],
		B12: [B9|B10]3 -> (1 || 2) && 3[B13|B14], B13: [B12] -> "loop" -> 1[B15|B16], B14: [B12] -> [B20],
		B15: [B13] -> 2 -> 1 || 2 -> (1 || 2)[B17|B18], B16: [B13] -> [B19], B17: [B15] -> [B19], B18: [B15] -> [B20],
		B19: [B16|B17]3 -> (1 || 2) && 3 -> [B20], B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4], B20: [B4|B7|B11|B14|B18|B19]"end",
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B20], B5: [B2|B3]3 -> (1 || 2) && 3[B6|B7],
		B6: [B5] -> "loop" -> 1[B8|B9], B7: [B5] -> [B20], B8: [B6] -> 2 -> 1 || 2 -> (1 || 2)[B10|B11],
		B9: [B6] -> [B12]
	--- */
	/* WhileT1mixed3 XPECT allPaths ---
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end"
	--- */
	/* WhileT1mixed3 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "start"
	--- */
	"start";
	while ((1 || 2) && 3)
		"loop";
	"end";
}



function DoWhileD1and() {
	/* DoWhileD1and XPECT allEdges ---
		"loop" --> 1, "start" --> "loop", 1 && 2 -LoopExit-> "end",
		1 && 2 -LoopReenter-> "loop", 1 -IfTrue-> 2, 1 -LoopExit-> "end", 2 --> 1 && 2
	--- */
	/* DoWhileD1and XPECT allBranches ---
		B0: "start" -> "loop" -> 1[B1|B2], B1: [B0] -> 2 -> 1 && 2[B3|B4],
		B2: [B0] -> [B7], B3: [B1] -> "loop" -> 1[B5|B6], B4: [B1] -> [B7],
		B5: [B3] -> 2 -> 1 && 2 -> [B7], B6: [B3] -> [B7], B7: [B2|B4|B5|B6]"end"
	--- */
	/* DoWhileD1and XPECT allPaths ---
		"start" -> "loop" -> 1 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "end", "start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end"
	--- */
	/* DoWhileD1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> "start", "end" -> 1 -> "loop" -> "start",
		"end" -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> "start"
	--- */
	"start";
	do
		"loop";
	while (1 && 2)
	"end";
}

function DoWhileD1or() {
	/* DoWhileD1or XPECT allEdges ---
		"loop" --> 1, "start" --> "loop", 1 -IfFalse-> 2, 1 -LoopReenter-> "loop",
		1 || 2 -LoopExit-> "end", 1 || 2 -LoopReenter-> "loop", 2 --> 1 || 2
	--- */
	/* DoWhileD1or XPECT allBranches ---
		B0: "start" -> "loop" -> 1[B1|B2], B1: [B0] -> "loop" -> 1 -> [B3],
		B2: [B0] -> [B3], B3: [B1|B2]2 -> 1 || 2[B4|B5], B4: [B3] -> "loop" -> 1 -> 2 -> 1 || 2 -> [B6],
		B5: [B3] -> [B6], B6: [B4|B5]"end"
	--- */
	/* DoWhileD1or XPECT allPaths ---
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end", "start" -> "loop" -> 1 -> 2 -> 1 || 2 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> "end"
	--- */
	/* DoWhileD1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> "start", "end" -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> "start"
	--- */
	"start";
	do
		"loop";
	while (1 || 2)
	"end";
}

function DoWhileT1and() {
	/* DoWhileT1and XPECT allEdges ---
		"loop" --> 1, "start" --> "loop", 1 && 2 && 3 -LoopExit-> "end",
		1 && 2 && 3 -LoopReenter-> "loop", 1 && 2 -IfTrue-> 3, 1 && 2 -LoopExit-> "end", 1 -IfTrue-> 2,
		1 -LoopExit-> "end", 2 --> 1 && 2, 3 --> 1 && 2 && 3
	--- */
	/* DoWhileT1and XPECT allBranches ---
		B0: "start" -> "loop" -> 1[B1|B2], B10: [B7] -> [B11],
		B11: [B2|B4|B6|B8|B9|B10]"end", B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B11],
		B3: [B1] -> 3 -> 1 && 2 && 3[B5|B6], B4: [B1] -> [B11], B5: [B3] -> "loop" -> 1[B7|B8], B6: [B3] -> [B11],
		B7: [B5] -> 2 -> 1 && 2[B9|B10], B8: [B5] -> [B11], B9: [B7] -> 3 -> 1 && 2 && 3 -> [B11]
	--- */
	/* DoWhileT1and XPECT allPaths ---
		"start" -> "loop" -> 1 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "end", "start" -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 && 3 -> "end"
	--- */
	/* DoWhileT1and backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> "start", "end" -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> "start", "end" -> 1 -> "loop" -> "start",
		"end" -> 1 -> "loop" -> 1 && 2 && 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> "start"
	--- */
	"start";
	do
		"loop";
	while (1 && 2 && 3)
	"end";
}

function DoWhileT1or() {
	/* DoWhileT1or XPECT allEdges ---
		"loop" --> 1, "start" --> "loop", 1 -IfFalse-> 2, 1 -LoopReenter-> "loop",
		1 || 2 -IfFalse-> 3, 1 || 2 -LoopReenter-> "loop", 1 || 2 || 3 -LoopExit-> "end",
		1 || 2 || 3 -LoopReenter-> "loop", 2 --> 1 || 2, 3 --> 1 || 2 || 3
	--- */
	/* DoWhileT1or XPECT allBranches ---
		B0: "start" -> "loop" -> 1[B1|B2], B1: [B0] -> "loop" -> 1 -> [B3],
		B2: [B0] -> [B3], B3: [B1|B2]2 -> 1 || 2[B4|B5], B4: [B3] -> "loop" -> 1 -> 2 -> 1 || 2 -> [B6],
		B5: [B3] -> [B6], B6: [B4|B5]3 -> 1 || 2 || 3[B7|B8],
		B7: [B6] -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> [B9], B8: [B6] -> [B9], B9: [B7|B8]"end"
	--- */
	/* DoWhileT1or XPECT allPaths ---
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end", "start" -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> 3 -> 1 || 2 || 3 -> "end"
	--- */
	/* DoWhileT1or backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> 1 || 2 || 3 -> 3 -> 1 || 2 -> 2 -> 1 -> "loop" -> "start"
	--- */
	"start";
	do
		"loop";
	while (1 || 2 || 3)
	"end";
}

function DoWhileT1mixed1() {
	/* DoWhileT1mixed1 XPECT allEdges ---
		"loop" --> 1, "start" --> "loop", 1 && 2 -IfFalse-> 3,
		1 && 2 -LoopReenter-> "loop", 1 && 2 || 3 -LoopExit-> "end", 1 && 2 || 3 -LoopReenter-> "loop",
		1 -IfFalse-> 3, 1 -IfTrue-> 2, 2 --> 1 && 2, 3 --> 1 && 2 || 3
	--- */
	/* DoWhileT1mixed1 XPECT allBranches ---
		B0: "start" -> "loop" -> 1[B1|B2], B10: [B8] -> 2 -> 1 && 2 -> [B12],
		B11: [B8] -> [B12], B12: [B10|B11]3 -> 1 && 2 || 3 -> [B13], B13: [B9|B12]"end",
		B1: [B0] -> 2 -> 1 && 2[B3|B4], B2: [B0] -> [B7], B3: [B1] -> "loop" -> 1[B5|B6], B4: [B1] -> [B7],
		B5: [B3] -> 2 -> 1 && 2 -> [B7], B6: [B3] -> [B7], B7: [B2|B4|B5|B6]3 -> 1 && 2 || 3[B8|B9],
		B8: [B7] -> "loop" -> 1[B10|B11], B9: [B7] -> [B13]
	--- */
	/* DoWhileT1mixed1 XPECT allPaths ---
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end", "start" -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 2 -> 1 && 2 -> 3 -> 1 && 2 || 3 -> "end",
		"start" -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "loop" -> 1 -> 3 -> 1 && 2 || 3 -> "end"
	--- */
	/* DoWhileT1mixed1 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> "start", "end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 && 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> 1 && 2 || 3 -> 3 -> 1 -> "loop" -> "start"
	--- */
	"start";
	do
		"loop";
	while (1 && 2 || 3)
	"end";
}

function DoWhileT1mixed2() {
	/* DoWhileT1mixed2 XPECT allEdges ---
		"loop" --> 1, "start" --> "loop", 1 -IfFalse-> 2, 1 -LoopReenter-> "loop",
		1 || 2 && 3 -LoopExit-> "end", 1 || 2 && 3 -LoopReenter-> "loop", 2 && 3 --> 1 || 2 && 3, 2 -IfTrue-> 3,
		2 -LoopExit-> "end", 3 --> 2 && 3
	--- */
	/* DoWhileT1mixed2 XPECT allBranches ---
		B0: "start" -> "loop" -> 1[B1|B2], B10: [B5|B7|B8|B9]"end",
		B1: [B0] -> "loop" -> 1 -> [B3], B2: [B0] -> [B3], B3: [B1|B2]2[B4|B5],
		B4: [B3] -> 3 -> 2 && 3 -> 1 || 2 && 3[B6|B7], B5: [B3] -> [B10], B6: [B4] -> "loop" -> 1 -> 2[B8|B9], B7: [B4] -> [B10],
		B8: [B6] -> 3 -> 2 && 3 -> 1 || 2 && 3 -> [B10], B9: [B6] -> [B10]
	--- */
	/* DoWhileT1mixed2 XPECT allPaths ---
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> "end",
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> "loop" -> 1 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "loop" -> 1 -> 2 -> 3 -> 2 && 3 -> 1 || 2 && 3 -> "end"
	--- */
	/* DoWhileT1mixed2 backward XPECT allPaths direction 'Backward' ---
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 -> "loop" -> "start",
		"end" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> "start",
		"end" -> 2 -> 1 -> "loop" -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 -> "loop" -> "start",
		"end" -> 2 -> 1 -> "loop" -> 1 || 2 && 3 -> 2 && 3 -> 3 -> 2 -> 1 -> "loop" -> "start"
	--- */
	"start";
	do
		"loop";
	while (1 || 2 && 3)
	"end";
}

function DoWhileT1mixed3() {
	/* DoWhileT1mixed3 XPECT allEdges ---
		"loop" --> 1, "start" --> "loop", (1 || 2) && 3 -LoopExit-> "end",
		(1 || 2) && 3 -LoopReenter-> "loop", (1 || 2) -IfTrue-> 3, (1 || 2) -LoopExit-> "end", 1 -IfFalse-> 2,
		1 -IfTrue-> 3, 1 || 2 --> (1 || 2), 2 --> 1 || 2, 3 --> (1 || 2) && 3
	--- */
	/* DoWhileT1mixed3 XPECT allBranches ---
		B0: "start" -> "loop" -> 1[B1|B2], B10: [B8] -> [B12], B11: [B8] -> [B13],
		B12: [B9|B10]3 -> (1 || 2) && 3 -> [B13], B13: [B4|B7|B11|B12]"end", B1: [B0] -> 2 -> 1 || 2 -> (1 || 2)[B3|B4],
		B2: [B0] -> [B5], B3: [B1] -> [B5], B4: [B1] -> [B13], B5: [B2|B3]3 -> (1 || 2) && 3[B6|B7],
		B6: [B5] -> "loop" -> 1[B8|B9], B7: [B5] -> [B13], B8: [B6] -> 2 -> 1 || 2 -> (1 || 2)[B10|B11],
		B9: [B6] -> [B12]
	--- */
	/* DoWhileT1mixed3 XPECT allPaths ---
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> "end",
		"start" -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 2 -> 1 || 2 -> (1 || 2) -> 3 -> (1 || 2) && 3 -> "end",
		"start" -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "loop" -> 1 -> 3 -> (1 || 2) && 3 -> "end"
	--- */
	/* DoWhileT1mixed3 backward XPECT allPaths direction 'Backward' ---
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> "start",
		"end" -> (1 || 2) -> 1 || 2 -> 2 -> 1 -> "loop" -> (1 || 2) && 3 -> 3 -> 1 -> "loop" -> "start"
	--- */
	"start";
	do
		"loop";
	while ((1 || 2) && 3)
	"end";
}



function NotShortCircuit3() {
	/* NotShortCircuit3 XPECT allEdges ---
		"start" --> a,
		a --> 0,
		0 --> [0],
		[0] -IfFalse-> 1,
		[0] -IfTrue-> [0] || [1],
		[0] || [1] --> ([0] || [1]),
		1 --> [1],
		[1] --> [0] || [1],
		([0] || [1]) -LoopEnter-> "loop",
		([0] || [1]) -LoopExit-> "end",
		"loop" -LoopEnter|LoopRepeat-> "loop",
		"loop" -LoopExit|LoopRepeat-> "end"
	--- */
	/* NotShortCircuit3 XPECT allBranches ---
		B0: "start" -> a -> 0 -> [0][B1|B2], B1: [B0] -> 1 -> [1] -> [B3],
		B2: [B0] -> [B3], B3: [B1|B2][0] || [1] -> ([0] || [1])[B4|B5], B4: [B3] -> "loop"[B6|B7],
		B5: [B3] -> [B8], B6: [B4] -> "loop" -> [B8], B7: [B4] -> [B8], B8: [B5|B6|B7]"end"
	--- */
	/* NotShortCircuit3 XPECT allPaths ---
		"start" -> a -> 0 -> [0] -> [0] || [1] -> ([0] || [1]) -> "end",
		"start" -> a -> 0 -> [0] -> [0] || [1] -> ([0] || [1]) -> "loop" -> "end",
		"start" -> a -> 0 -> [0] -> 1 -> [1] -> [0] || [1] -> ([0] || [1]) -> "end",
		"start" -> a -> 0 -> [0] -> [0] || [1] -> ([0] || [1]) -> "loop" -> "loop" -> "end",
		"start" -> a -> 0 -> [0] -> 1 -> [1] -> [0] || [1] -> ([0] || [1]) -> "loop" -> "end",
		"start" -> a -> 0 -> [0] -> 1 -> [1] -> [0] || [1] -> ([0] || [1]) -> "loop" -> "loop" -> "end"
	--- */
	/* NotShortCircuit3 backward XPECT allPaths direction 'Backward' ---
		"end" -> ([0] || [1]) -> [0] || [1] -> [0] -> 0 -> a -> "start",
		"end" -> "loop" -> ([0] || [1]) -> [0] || [1] -> [0] -> 0 -> a -> "start",
		"end" -> ([0] || [1]) -> [0] || [1] -> [1] -> 1 -> [0] -> 0 -> a -> "start",
		"end" -> "loop" -> "loop" -> ([0] || [1]) -> [0] || [1] -> [0] -> 0 -> a -> "start",
		"end" -> "loop" -> ([0] || [1]) -> [0] || [1] -> [1] -> 1 -> [0] -> 0 -> a -> "start",
		"end" -> "loop" -> "loop" -> ([0] || [1]) -> [0] || [1] -> [1] -> 1 -> [0] -> 0 -> a -> "start"
	--- */
	"start";
	for (let a of ([0] || [1])) {
	    "loop"
	}
	"end";
}

