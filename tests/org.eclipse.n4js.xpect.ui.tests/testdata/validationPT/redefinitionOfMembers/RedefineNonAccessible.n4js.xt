/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.ui.tests.N4JSXpectPluginTest

	Workspace {
		Project "Project1" {
			Folder "src" {
				ThisFile {}
			}
			File "package.json" { from="package1.json" }
		}

		Project "Project2" {
			Folder "src" {
				File "Remote.n4js" {}
			}
			File "package.json" { from="package2.json" }
		}
	}

	END_SETUP
*/


import { C_field } from "Remote";
import { C_accessorConcrete } from "Remote";
import { C_accessorAbstract } from "Remote";
import { C_methodConcrete } from "Remote";
import { C_methodAbstract } from "Remote";
import { I_methodConcrete } from "Remote";
import { I_methodAbstract } from "Remote";
import { I_field } from "Remote";
import { I_accessorConcrete } from "Remote";
import { I_accessorAbstract } from "Remote";
import { C_staticMembers } from "Remote";
import { I_staticMembers } from "Remote";

// -------------------------------------------------------------------------------------------------------------------

// XPECT noerrors -->
class D00 extends C_field {
	// XPECT errors --> "The field D00.f1 cannot override or implement non-accessible field C_field.f1." at "f1"
	@Override public f1;
	// XPECT errors --> "The field D00.f2 cannot override or implement non-accessible field C_field.f2." at "f2"
	@Override public f2;
	// XPECT errors --> "The field D00.f3 cannot override or implement non-accessible field C_field.f3." at "f3"
	@Override public f3;
}

// XPECT noerrors -->
class D01 extends C_accessorConcrete {
	// XPECT errors --> "The getter D01.g1 cannot override or implement non-accessible getter C_accessorConcrete.g1." at "g1"
	@Override public get g1() {return null;}
	// XPECT errors --> "The getter D01.g2 cannot override or implement non-accessible getter C_accessorConcrete.g2." at "g2"
	@Override public get g2() {return null;}
	// XPECT errors --> "The getter D01.g3 cannot override or implement non-accessible getter C_accessorConcrete.g3." at "g3"
	@Override public get g3() {return null;}
	// XPECT errors --> "The setter D01.s1 cannot override or implement non-accessible setter C_accessorConcrete.s1." at "s1"
	@Override public set s1(value) {}
	// XPECT errors --> "The setter D01.s2 cannot override or implement non-accessible setter C_accessorConcrete.s2." at "s2"
	@Override public set s2(value) {}
	// XPECT errors --> "The setter D01.s3 cannot override or implement non-accessible setter C_accessorConcrete.s3." at "s3"
	@Override public set s3(value) {}
}

// XPECT errors --> "Cannot extend class C_accessorAbstract: cannot implement one or more non-accessible abstract members: getter C_accessorAbstract.ga1, getter C_accessorAbstract.ga3, getter C_accessorAbstract.ga2, setter C_accessorAbstract.sa1, setter C_accessorAbstract.sa3 and setter C_accessorAbstract.sa2." at "C_accessorAbstract"
class D02 extends C_accessorAbstract {
}

// the following case, i.e. impossible extends/implements for abstract classes and interfaces, could be allowed, because
// the abstract class/interface need not provide implementations for the non-accessible abstract members, but we decided
// to disallow this as well (for now):
// XPECT errors --> "Cannot extend class C_accessorAbstract: cannot implement one or more non-accessible abstract members: getter C_accessorAbstract.ga1, getter C_accessorAbstract.ga3, getter C_accessorAbstract.ga2, setter C_accessorAbstract.sa1, setter C_accessorAbstract.sa3 and setter C_accessorAbstract.sa2." at "C_accessorAbstract"
abstract class D02b extends C_accessorAbstract {
}

// XPECT errors --> "Cannot extend class C_accessorAbstract: cannot implement one or more non-accessible abstract members: getter C_accessorAbstract.ga1, getter C_accessorAbstract.ga3, getter C_accessorAbstract.ga2, setter C_accessorAbstract.sa1, setter C_accessorAbstract.sa3 and setter C_accessorAbstract.sa2." at "C_accessorAbstract"
class D03 extends C_accessorAbstract {
	// XPECT errors --> "The getter D03.ga1 cannot override or implement non-accessible getter C_accessorAbstract.ga1." at "ga1"
	@Override public get ga1() {return null;}
	// XPECT errors --> "The getter D03.ga2 cannot override or implement non-accessible getter C_accessorAbstract.ga2." at "ga2"
	@Override public get ga2() {return null;}
	// XPECT errors --> "The getter D03.ga3 cannot override or implement non-accessible getter C_accessorAbstract.ga3." at "ga3"
	@Override public get ga3() {return null;}
	// XPECT errors --> "The setter D03.sa1 cannot override or implement non-accessible setter C_accessorAbstract.sa1." at "sa1"
	@Override public set sa1(value) {}
	// XPECT errors --> "The setter D03.sa2 cannot override or implement non-accessible setter C_accessorAbstract.sa2." at "sa2"
	@Override public set sa2(value) {}
	// XPECT errors --> "The setter D03.sa3 cannot override or implement non-accessible setter C_accessorAbstract.sa3." at "sa3"
	@Override public set sa3(value) {}
}

// XPECT noerrors -->
class D04 extends C_methodConcrete {
	// XPECT errors --> "The method D04.m1 cannot override or implement non-accessible method C_methodConcrete.m1." at "m1"
	@Override public m1() {}
	// XPECT errors --> "The method D04.m2 cannot override or implement non-accessible method C_methodConcrete.m2." at "m2"
	@Override public m2() {}
	// XPECT errors --> "The method D04.m3 cannot override or implement non-accessible method C_methodConcrete.m3." at "m3"
	@Override public m3() {}
}

// XPECT errors --> "Cannot extend class C_methodAbstract: cannot implement one or more non-accessible abstract members: method C_methodAbstract.ma1, method C_methodAbstract.ma3 and method C_methodAbstract.ma2." at "C_methodAbstract"
class D05 extends C_methodAbstract {
}

// the following case, i.e. impossible extends/implements for abstract classes and interfaces, could be allowed, because
// the abstract class/interface need not provide implementations for the non-accessible abstract members, but we decided
// to disallow this as well (for now):
// XPECT errors --> "Cannot extend class C_methodAbstract: cannot implement one or more non-accessible abstract members: method C_methodAbstract.ma1, method C_methodAbstract.ma3 and method C_methodAbstract.ma2." at "C_methodAbstract"
abstract class D05b extends C_methodAbstract {
}

// XPECT errors --> "Cannot extend class C_methodAbstract: cannot implement one or more non-accessible abstract members: method C_methodAbstract.ma1, method C_methodAbstract.ma3 and method C_methodAbstract.ma2." at "C_methodAbstract"
class D06 extends C_methodAbstract {
	// XPECT errors --> "The method D06.ma1 cannot override or implement non-accessible method C_methodAbstract.ma1." at "ma1"
	@Override public ma1() {}
	// XPECT errors --> "The method D06.ma2 cannot override or implement non-accessible method C_methodAbstract.ma2." at "ma2"
	@Override public ma2() {}
	// XPECT errors --> "The method D06.ma3 cannot override or implement non-accessible method C_methodAbstract.ma3." at "ma3"
	@Override public ma3() {}
}

// -------------------------------------------------------------------------------------------------------------------

// XPECT noerrors -->
class D10 implements I_field {
	// XPECT errors --> "The field D10.f1 cannot override or implement non-accessible field I_field.f1." at "f1"
	@Override public f1;
	// XPECT errors --> "The field D10.f2 cannot override or implement non-accessible field I_field.f2." at "f2"
	@Override public f2;
}

// XPECT noerrors -->
class D11 implements I_accessorConcrete {
	// XPECT errors --> "The getter D11.g1 cannot override or implement non-accessible getter I_accessorConcrete.g1." at "g1"
	@Override public get g1() {return null;}
	// XPECT errors --> "The getter D11.g2 cannot override or implement non-accessible getter I_accessorConcrete.g2." at "g2"
	@Override public get g2() {return null;}
	// XPECT errors --> "The setter D11.s1 cannot override or implement non-accessible setter I_accessorConcrete.s1." at "s1"
	@Override public set s1(value) {}
	// XPECT errors --> "The setter D11.s2 cannot override or implement non-accessible setter I_accessorConcrete.s2." at "s2"
	@Override public set s2(value) {}
}

// XPECT errors --> "Cannot implement interface I_accessorAbstract: cannot implement one or more non-accessible abstract members: getter I_accessorAbstract.ga1, getter I_accessorAbstract.ga2, setter I_accessorAbstract.sa1 and setter I_accessorAbstract.sa2." at "I_accessorAbstract"
class D12 implements I_accessorAbstract {
}

// the following case, i.e. impossible extends/implements for abstract classes and interfaces, could be allowed, because
// the abstract class/interface need not provide implementations for the non-accessible abstract members, but we decided
// to disallow this as well (for now):
// XPECT errors --> "Cannot implement interface I_accessorAbstract: cannot implement one or more non-accessible abstract members: getter I_accessorAbstract.ga1, getter I_accessorAbstract.ga2, setter I_accessorAbstract.sa1 and setter I_accessorAbstract.sa2." at "I_accessorAbstract"
abstract class D12b implements I_accessorAbstract {
}

// XPECT errors --> "Cannot implement interface I_accessorAbstract: cannot implement one or more non-accessible abstract members: getter I_accessorAbstract.ga1, getter I_accessorAbstract.ga2, setter I_accessorAbstract.sa1 and setter I_accessorAbstract.sa2." at "I_accessorAbstract"
class D13 implements I_accessorAbstract {
	// XPECT errors --> "The getter D13.ga1 cannot override or implement non-accessible getter I_accessorAbstract.ga1." at "ga1"
	@Override public get ga1() {return null;}
	// XPECT errors --> "The getter D13.ga2 cannot override or implement non-accessible getter I_accessorAbstract.ga2." at "ga2"
	@Override public get ga2() {return null;}
	// XPECT errors --> "The setter D13.sa1 cannot override or implement non-accessible setter I_accessorAbstract.sa1." at "sa1"
	@Override public set sa1(value) {}
	// XPECT errors --> "The setter D13.sa2 cannot override or implement non-accessible setter I_accessorAbstract.sa2." at "sa2"
	@Override public set sa2(value) {}
}

// XPECT noerrors -->
class D14 implements I_methodConcrete {
	// XPECT errors --> "The method D14.m1 cannot override or implement non-accessible method I_methodConcrete.m1." at "m1"
	@Override public m1() {}
	// XPECT errors --> "The method D14.m2 cannot override or implement non-accessible method I_methodConcrete.m2." at "m2"
	@Override public m2() {}
}

// XPECT errors --> "Cannot implement interface I_methodAbstract: cannot implement one or more non-accessible abstract members: method I_methodAbstract.ma1 and method I_methodAbstract.ma2." at "I_methodAbstract"
class D15 implements I_methodAbstract {
}

// the following case, i.e. impossible extends/implements for abstract classes and interfaces, could be allowed, because
// the abstract class/interface need not provide implementations for the non-accessible abstract members, but we decided
// to disallow this as well (for now):
// XPECT errors --> "Cannot implement interface I_methodAbstract: cannot implement one or more non-accessible abstract members: method I_methodAbstract.ma1 and method I_methodAbstract.ma2." at "I_methodAbstract"
abstract class D15b implements I_methodAbstract {
}

// XPECT errors --> "Cannot implement interface I_methodAbstract: cannot implement one or more non-accessible abstract members: method I_methodAbstract.ma1 and method I_methodAbstract.ma2." at "I_methodAbstract"
class D16 implements I_methodAbstract {
	// XPECT errors --> "The method D16.ma1 cannot override or implement non-accessible method I_methodAbstract.ma1." at "ma1"
	@Override public ma1() {}
	// XPECT errors --> "The method D16.ma2 cannot override or implement non-accessible method I_methodAbstract.ma2." at "ma2"
	@Override public ma2() {}
}

// -------------------------------------------------------------------------------------------------------------------

// XPECT noerrors -->
interface I20 extends I_field {
	// XPECT errors --> "The field I20.f1 cannot override or implement non-accessible field I_field.f1." at "f1"
	@Override public f1;
	// XPECT errors --> "The field I20.f2 cannot override or implement non-accessible field I_field.f2." at "f2"
	@Override public f2;
}

// XPECT noerrors -->
interface D21 extends I_accessorConcrete {
	// XPECT errors --> "The getter D21.g1 cannot override or implement non-accessible getter I_accessorConcrete.g1." at "g1"
	@Override public get g1() {return null;}
	// XPECT errors --> "The getter D21.g2 cannot override or implement non-accessible getter I_accessorConcrete.g2." at "g2"
	@Override public get g2() {return null;}
	// XPECT errors --> "The setter D21.s1 cannot override or implement non-accessible setter I_accessorConcrete.s1." at "s1"
	@Override public set s1(value) {}
	// XPECT errors --> "The setter D21.s2 cannot override or implement non-accessible setter I_accessorConcrete.s2." at "s2"
	@Override public set s2(value) {}
}

// XPECT errors --> "Cannot extend interface I_accessorAbstract: cannot implement one or more non-accessible abstract members: setter I_accessorAbstract.sa1, setter I_accessorAbstract.sa2, getter I_accessorAbstract.ga1 and getter I_accessorAbstract.ga2." at "I_accessorAbstract"
interface D22 extends I_accessorAbstract {
}

// XPECT errors --> "Cannot extend interface I_accessorAbstract: cannot implement one or more non-accessible abstract members: setter I_accessorAbstract.sa1, setter I_accessorAbstract.sa2, getter I_accessorAbstract.ga1 and getter I_accessorAbstract.ga2." at "I_accessorAbstract"
interface D23 extends I_accessorAbstract {
	// XPECT errors --> "The getter D23.ga1 cannot override or implement non-accessible getter I_accessorAbstract.ga1." at "ga1"
	@Override public get ga1() {return null;}
	// XPECT errors --> "The getter D23.ga2 cannot override or implement non-accessible getter I_accessorAbstract.ga2." at "ga2"
	@Override public get ga2() {return null;}
	// XPECT errors --> "The setter D23.sa1 cannot override or implement non-accessible setter I_accessorAbstract.sa1." at "sa1"
	@Override public set sa1(value) {}
	// XPECT errors --> "The setter D23.sa2 cannot override or implement non-accessible setter I_accessorAbstract.sa2." at "sa2"
	@Override public set sa2(value) {}
}

// XPECT noerrors -->
interface I24 extends I_methodConcrete {
	// XPECT errors --> "The method I24.m1 cannot override or implement non-accessible method I_methodConcrete.m1." at "m1"
	@Override public m1() {}
	// XPECT errors --> "The method I24.m2 cannot override or implement non-accessible method I_methodConcrete.m2." at "m2"
	@Override public m2() {}
}

// XPECT errors --> "Cannot extend interface I_methodAbstract: cannot implement one or more non-accessible abstract members: method I_methodAbstract.ma1 and method I_methodAbstract.ma2." at "I_methodAbstract"
interface I25 extends I_methodAbstract {
}

// the following case, i.e. impossible extends/implements for abstract classes and interfaces, could be allowed, because
// the abstract class/interface need not provide implementations for the non-accessible abstract members, but we decided
// to disallow this as well (for now):
// XPECT errors --> "Cannot extend interface I_methodAbstract: cannot implement one or more non-accessible abstract members: method I_methodAbstract.ma1 and method I_methodAbstract.ma2." at "I_methodAbstract"
interface I25b extends I_methodAbstract {
}

// XPECT errors --> "Cannot extend interface I_methodAbstract: cannot implement one or more non-accessible abstract members: method I_methodAbstract.ma1 and method I_methodAbstract.ma2." at "I_methodAbstract"
interface I26 extends I_methodAbstract {
	// XPECT errors --> "The method I26.ma1 cannot override or implement non-accessible method I_methodAbstract.ma1." at "ma1"
	@Override public ma1() {}
	// XPECT errors --> "The method I26.ma2 cannot override or implement non-accessible method I_methodAbstract.ma2." at "ma2"
	@Override public ma2() {}
}

// -------------------------------------------------------------------------------------------------------------------

class D30 extends C_staticMembers {
	// XPECT errors --> "The static method D30.ms1 cannot override or implement non-accessible static method C_staticMembers.ms1." at "ms1"
	@Override @Internal public static ms1() {}
	// XPECT errors --> "The static method D30.ms2 cannot override or implement non-accessible static method C_staticMembers.ms2." at "ms2"
	@Override project static ms2() {}
	// XPECT errors --> "The static method D30.ms3 cannot override or implement non-accessible static method C_staticMembers.ms3." at "ms3"
	@Override private static ms3() {}
}

// note: no overriding in the following cases! (static methods from interfaces are not inherited)
class D31 implements I_staticMembers {
	// XPECT noerrors -->
	@Internal public static ms1() {}
	// XPECT noerrors -->
	project static ms2() {}
}

// note: no overriding in the following cases! (static methods from interfaces are not inherited)
interface I32 extends I_staticMembers {
	// XPECT noerrors -->
	@Internal public static ms1() {}
	// XPECT noerrors -->
	project static ms2() {}
}

// -------------------------------------------------------------------------------------------------------------------
