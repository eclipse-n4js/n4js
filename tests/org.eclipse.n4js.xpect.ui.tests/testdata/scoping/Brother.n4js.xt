/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.ui.tests.N4JSXpectPluginTest

	// Suppress all issues related to run-time dependency validation, because this file tests that linking / scoping / etc.
	// can cope with *all* cycles at compile time, even those cases that are disallowed by RunTimeDependencyValidator:
	IssueConfiguration {
		IssueCode "LTD_ILLEGAL_LOADTIME_REFERENCE" { enabled = false }
		IssueCode "LTD_LOADTIME_DEPENDENCY_CONFLICT" { enabled = false }
		IssueCode "LTD_IMPORT_OF_LOADTIME_DEPENDENCY_TARGET" { enabled = false }
	}

	Workspace {
		JavaProject "N4JSXpectTests" {
			Folder "model" {
				Folder "scoping" {
					ThisFile {}
					File "Sister.n4js" {}
					File "Child.n4js" {}
				}
			}
			File "package.json" { from="../../package.json" }
		}
	}

   END_SETUP
 */

// XPECT scope at 'from |"scoping/Sister"' --> scoping.Child, scoping.Sister
import { Sister as SisterObject } from "scoping/Sister"
import { Child } from "scoping/Child"

export class Brother {
/* XPECT scope at SisterObject ---
Array, Boolean, Brother, Child, Date, Error, EvalError, Function, Generator,
Iterable,
Iterable2, Iterable3, Iterable4, Iterable5, Iterable6, Iterable7, Iterable8, Iterable9,
Iterator, IteratorEntry,
JSON, Math, MigrationContext, MigrationController,
N4Accessor, N4Annotation, N4Class, N4Classifier, N4DataField, N4Element, N4Enum,
N4EnumType, N4Interface, N4Member, N4Method, N4NamedElement, N4Object, N4Provider,
N4StringBasedEnum, N4StringBasedEnumType,
N4Type, N4ApiNotImplementedError, Number, Object, Promise, RangeError, ReferenceError, RegExp, !Sister,
SisterObject, String, Symbol, SyntaxError, TEMP_ReturnTypeOfMatchExec, TypeError, URIError, any, boolean, console, i18nKey,
number, int, pathSelector, scoping.Brother.Brother, scoping.Child.Child,
scoping.Sister.Sister, string, symbol, typeName, undefined, void
---*/
	project getSister() : SisterObject { return null; }
	project getChild() : Child { return null; }
}

var brother : Brother = new Brother();
/* XPECT scope at getSister ---
__proto__, constructor, getChild, getSister, hasOwnProperty, isPrototypeOf,
propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
/* XPECT scope at getBrother ---
__proto__, constructor, getBrother, getChild, hasOwnProperty, isPrototypeOf,
propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
brother = brother.getSister().getBrother();
var sister : SisterObject = new SisterObject();
/* XPECT scope at getBrother ---
__proto__, constructor, getBrother, getChild, hasOwnProperty, isPrototypeOf,
propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
brother = sister.getBrother();
