/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.n4idl.spec.tests.N4IDLSpecTest END_SETUP */

class G # 1 <T> {
	value: T;

	static <T> staticMethodGen(p:T): T {
		return null;
	}
}

// B represents the versions 1 and 2 (because there is no explicit version 2 of B)
class B # 1 {
	// actual version of A depends on the context in which B is used
	a: A;
}

class A # 1 {
	b: B;

	arr: Array<B>;

	gb: G<B>;

	foo(): B {
		return null;
	}
}

class A # 2 {
	b: B;

	arr: Array<B>;

	gb: G<B>;

	foo(): B {
		return null;
	}
}

@Migration
function migration(b1: B # 1) : B # 2 {
	let b2 = new B#2();

	// XPECT version of b1.a --> 1
	b1.a;

	// XPECT version of b1.a.b --> 1
	b1.a.b;

	// XPECT version of b1.a.arr[0] --> 1
	b1.a.arr[0];

	// XPECT version of b1.a.gb.value --> 1
	b1.a.gb.value;

	// XPECT version of b1.a.foo() --> 1
	b1.a.foo();

	// XPECT version of b2.a --> 2
	b2.a;

	// XPECT version of b2.a.b --> 2
	b2.a.b;

	// XPECT version of b2.a.arr[0] --> 2
	b2.a.arr[0];

	// XPECT version of b2.a.gb.value --> 2
	b2.a.gb.value;

	// XPECT version of b2.a.foo() --> 2
	b2.a.foo();


	let g2b1: G#2<B#1>;
	// XPECT errors --> "Requested version 2 exceeds the maximal version 1 of the current context." at "B#2"
	let g1b2: G#1<B#2>;
	// XPECT version of g2b1.value --> 1
	g2b1.value;
	// XPECT version of g1b2.value --> 2
	g1b2.value;


	// ================================================================================================================
	// subtyping

	let a1: A#1;
	let a2: A#2;
	// XPECT errors --> "A#1 is not a subtype of A#2." at "a1"
	a2 = a1;
	// XPECT errors --> "A#2 is not a subtype of A#1." at "a2"
	a1 = a2;
	// XPECT errors ---
	// "A#1 is not a subtype of T." at "a1"
	// "T is not a subtype of A#2." at "G#1.staticMethodGen(a1)"
	// ---
	a2 = G#1.staticMethodGen(a1);


	// XPECT errors --> "A#2 is not a subtype of A#1." at "new A#2()"
	a1 = new A#2();
	// XPECT errors --> "A#1 is not a subtype of A#2." at "new A#1()"
	a2 = new A#1();

	let a1or2: A#1 | A#2;
	
	/*  XPECT warnings --- 
	"An intersection type should not contain more than one class. Otherwise there cannot exist a value of such a type." at "A#1"
	"An intersection type should not contain more than one class. Otherwise there cannot exist a value of such a type." at "A#2"
	--- */
	let a1and2: A#1 & A#2;
	// XPECT errors --> "union{A#1,A#2} is not a subtype of A#1." at "a1or2"
	a1 = a1or2;
	// XPECT errors --> "union{A#1,A#2} is not a subtype of A#2." at "a1or2"
	a2 = a1or2;
	// XPECT noerrors -->
	a1 = a1and2;
	// XPECT noerrors -->
	a2 = a1and2;

	// ================================================================================================================
	// version in formal parameters, return types, function expressions, IterableN, destructuring

	let arg1 = a1;
	let arg2 = a2;
	let fn = (p1:A#1, p2:A#2): Iterable2<A#2,A#1> => { return [p2, p1]; };
	// XPECT errors ---
	// "A#2 is not a subtype of A#1." at "arg2"
	// "A#1 is not a subtype of A#2." at "arg1"
	// ---
	[a2,a1] = fn(arg2,arg1);
	// XPECT errors ---
	// "Variable a1 cannot hold destructured value at index 0: A#2 is not a subtype of A#1." at "a1"
	// "Variable a2 cannot hold destructured value at index 1: A#1 is not a subtype of A#2." at "a2"
	// ---
	[a1,a2] = fn(arg1,arg2);
	// XPECT noerrors -->
	[a2,a1] = fn(arg1,arg2);

	let fnObj = (p1:A#1, p2:A#2): ~Object with {prop1: A#1, prop2: A#2} => { return {prop1:p1, prop2:p2}; };
	// XPECT errors ---
	// "Variable a1 cannot hold destructured value of property 'prop2': A#2 is not a subtype of A#1." at "a1"
	// "Variable a2 cannot hold destructured value of property 'prop1': A#1 is not a subtype of A#2." at "a2"
	// ---
	({prop2: a1, prop1: a2} = fnObj(arg1,arg2));
	// XPECT noerrors -->
	({prop1: a1, prop2: a2} = fnObj(arg1,arg2));

	return b2;
}
