/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.n4idl.spec.tests.N4IDLSpecTest END_SETUP */

class A#1 { 	field : B }
class A#2 { field : B }

class B#1 {}
class B#2Â {}

class C#1 extends B {}
class C#2 extends B {}

class D#1 extends C {}
class D#2 extends C {}

class Client#1 {}

@Migration function mA(a : A#1) : A#2 { return null; }
@Migration function mB(a : B#1) : B#2 { return null; }
@Migration function mC(a : C#1) : C#2 { return null; }

@Migration function mAA(a1 : A#1, a2 : A#1) : A#2 { return null; }
@Migration function mAB(a : A#1, b : B#1) : A#2 { return null; }
@Migration function mAC(a : A#1, c : C#1) : A#2 { return null; }

@Migration function mBA(b : B#1, a : A#1) : B#2 { return null; }
@Migration function mBB(b1 : B#1, b2 : B#1) : B#2 { return null; }
@Migration function mBC(b : B#1, c : C#1) : B#2 { return null; }

@Migration function mCA(b : C#1, a : A#1) : B#2 { return null; }
@Migration function mCB(b1 : C#1, b2 : B#1) : B#2 { return null; }
@Migration function mCC(b : C#1, c : C#1) : B#2 { return null; }

@Migration function mAint(a : A#1, i : int) : A#2 { return null; }
@Migration function mAstring(a : A#1, s : string) : A#2 { return null; }
@Migration function mAtype(a : A#1, t : type{B#1}) : A#2 { return null; }

@Migration function primitiveFirst(i : int, a : A#1) : A#2 { return null; }

@Migration function typesOnlyA(t : type{A#1}) : type{A#2} { return null; }
@Migration function typesOnlyB(t : type{B#1}) : type{B#2} { return null; }

@Migration function multiTypesOnlyA(t1 : type{A#1}, t2 : type{B#1}) : type{A#2} { return null; }
@Migration function multiTypesOnlyB(t1 : type{B#1}, t2 : type{A#1}) : type{B#2} { return null; }

@Migration function unambiguousTypesOnly1(t1 : type{B#1}, t2 : type{C#1}) : type{B#2} { return null; }
@Migration function unambiguousTypesOnly2(t1 : type{C#1}, t2 : type{B#1}) : type{B#2} { return null; }

@Migration function client(c : Client#1) : Client#2 {
	// XPECT migrateScope --> "mA" 
	migrate(new A#1());
	// XPECT migrateScope --> "mB"
	migrate(new B#1());
	// XPECT migrateScope --> "mC"
	migrate(new C#1());

	// XPECT migrateScope --> "mAA"
	migrate(new A#1(), new A#1());
	// XPECT migrateScope --> "mAB"
	migrate(new A#1(), new B#1());
	// XPECT migrateScope --> "mAC"
	migrate(new A#1(), new C#1());
	
	// XPECT migrateScope --> "mBA"
	migrate(new B#1(), new A#1());
	// XPECT migrateScope --> "mBB"
	migrate(new B#1(), new B#1());
	// XPECT migrateScope --> "mBC"
	migrate(new B#1(), new C#1());
	
	// XPECT migrateScope --> "mCA"
	migrate(new C#1(), new A#1());
	// XPECT migrateScope --> "mCB"
	migrate(new C#1(), new B#1());
	// XPECT migrateScope --> "mCC"
	migrate(new C#1(), new C#1());
	
	// XPECT migrateScope at migrate --> "mC"
	migrate(new D#1());
	// XPECT migrateScope --> "mAC"
	migrate(new A#1(), new D#1());
	// XPECT migrateScope --> "mBC"
	migrate(new B#1(), new D#1());
	// XPECT migrateScope --> "mCC"
	migrate(new C#1(), new D#1());
	// XPECT migrateScope --> "mCC"
	migrate(new D#1(), new D#1());
	
	// with primitives
	// XPECT migrateScope --> "mAint"
	migrate(new A#1(), 12);
	
	// XPECT migrateScope --> "mAstring"
	migrate(new A#1(), "hello");
	
	// with type{} values
	// XPECT migrateScope --> "mAtype"
	migrate(new A#1(), D#1);
	// XPECT migrateScope --> "mAtype"
	migrate(new A#1(), C#1);
	
	// type{} arguments only
	// XPECT migrateScope --> "typesOnlyA"
	migrate(A#1);
	// XPECT migrateScope --> "typesOnlyB"
	migrate(B#1);
	// XPECT migrateScope --> "typesOnlyB"
	migrate(C#1);
	
	// XPECT migrateScope --> "multiTypesOnlyA"
	migrate(A#1, B#1);
	// XPECT migrateScope --> "multiTypesOnlyB"
	migrate(B#1, A#1);
	
	/* XPECT warnings ---
		"Cannot un-ambiguously resolve the migration to handle this migrate call. Candidates are \n	 - unambiguousTypesOnly1 (type{B#1}, type{C#1}) => (type{B#2})\n	 - unambiguousTypesOnly2 (type{C#1}, type{B#1}) => (type{B#2})." at "migrate"
	 --- */
	migrate(D#1, D#1);
	
	// primitives as first arguments
	// XPECT migrateScope --> "primitiveFirst"
	migrate(1, new A#1());
	
	return null;
}