/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.n4idl.spec.tests.N4IDLSpecTest END_SETUP */


///// migrations without parameter nor return value

@Migration
// exported migration without parameters nor return value XPECT errors --> "Migrations must explicitly declare a return type." at "f1"
export public function f1() {}

@Migration
// non-exported migration without parameters nor return value XPECT errors --> "Migrations must explicitly declare a return type." at "f2"
function f2() {}

@Migration
// exported migration without parameters and void return value XPECT errors --> "Migrations must declare at least one parameter and a (non-void) return value." at "f3"
export public function f3() : void {}

@Migration
// non-exported migration without parameters and void return value XPECT errors --> "Migrations must declare at least one parameter and a (non-void) return value." at "f4"
function f4() : void {}

@Migration
// non-exported migration without parameters and implicit void return value XPECT errors --> "Migrations must explicitly declare a return type." at "f5"
function f5() { return null; }


///// migrations without parameter but with return value

class A#1 {}
class A#2 {}

@Migration
// exported migration without parameters but with return value XPECT errors --> "Migrations must declare at least one parameter and a (non-void) return value." at "f6"
export public function f6() : A#2 { return null; }

@Migration
// non-exported migration without parameters but with return value XPECT errors --> "Migrations must declare at least one parameter and a (non-void) return value." at "f7"
function f7() : A#2 { return null; }

///// migrations with parameter(s) but without return value

@Migration
// exported migration with parameters but without return value XPECT errors --> "Migrations must explicitly declare a return type." at "f8"
export public function f8(in1 : A#1) {}

@Migration
// non-exported migration with parameters but without return value XPECT errors --> "Migrations must explicitly declare a return type." at "f9"
function f9(in1 : A#2, in2 : A#2) {}

@Migration
// exported migration with parameters but with void return value XPECT errors --> "Migrations must declare at least one parameter and a (non-void) return value." at "f10"
export public function f10(in1 : A#1) : void {}

@Migration
// non-exported migration with parameters but with (implicit) void return value XPECT errors --> "Migrations must explicitly declare a return type." at "f11"
function f11(in1 : A#2, in2 : A#2) { return null; }

@Migration
// migration with composed source types XPECT errors --> "Migrations must not specify composed types (union or intersection) as source or target types." at "in1 : union{A#2, A#1}"
function f12(in1 : union{A#2, A#1}) : A#1 { return null; }

@Migration(1,2)
// migration with composed and primitive source type XPECT errors --> "Migrations must not specify composed types (union or intersection) as source or target types." at "in2 : union{A#2, A#1}"
function f13(in1 : int, in2 : union{A#2, A#1}) : A#1 { return null; }

@Migration(2,1)
// migration with composed and versioned source type XPECT errors --> "Migrations must not specify composed types (union or intersection) as source or target types." at "in2 : union{A#2, A#1}"
function f14(in1 : A#2, in2 : union{A#2, A#1}) : A#1 { return null; }

@Migration(2,1)
// migration with composed and versioned source type XPECT errors --> "Migrations must not specify composed types (union or intersection) as source or target types." at "in1 : union{A#2, A#1}"
function f15(in1 : union{A#2, A#1}, in2 : A#2) : A#1 { return null; }

@Migration(2,1)
/* migration with two composed source types XPECT errors --- 
   "Migrations must not specify composed types (union or intersection) as source or target types." at "in1 : union{A#2, A#1}"
   "Migrations must not specify composed types (union or intersection) as source or target types." at "in2 : union{A#2, A#1}"
--- */
function f16(in1 : union{A#2, A#1}, in2 : union{A#2, A#1}) : A#1 { return null; }