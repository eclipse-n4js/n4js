package org.eclipse.n4js.ui.editor.syntaxcoloring;

import org.eclipse.xtext.*;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Await", "Await_1", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "CommercialAtEqualsSignGreaterThanSign", "For", "Get", "Let", "New", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=152;
    public static final int RULE_STRUCTMODSUFFIX=146;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int RULE_ZWNJ=161;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=148;
    public static final int Get=59;
    public static final int RULE_ML_COMMENT=150;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=156;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=145;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=166;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=165;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Await_1=31;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=155;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=160;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=61;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=147;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=153;
    public static final int Super=37;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=58;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=158;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=163;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=149;
    public static final int RULE_STRING=129;
    public static final int CommercialAtEqualsSignGreaterThanSign=57;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=151;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=162;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=159;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=154;
    public static final int RULE_BOM=164;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=167;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=157;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=60;
    public static final int Await=30;


        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);

        }


        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA3_0 = input.LA(1);


                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA3_0==CommercialAt) ) {s = 1;}

                        else if ( (LA3_0==Private) ) {s = 2;}

                        else if ( (LA3_0==Project) ) {s = 3;}

                        else if ( (LA3_0==Protected) ) {s = 4;}

                        else if ( (LA3_0==Public) ) {s = 5;}

                        else if ( (LA3_0==External) ) {s = 6;}

                        else if ( (LA3_0==Abstract) ) {s = 7;}

                        else if ( (LA3_0==Static) ) {s = 8;}

                        else if ( (LA3_0==Const) ) {s = 9;}

                        else if ( (LA3_0==Class) ) {s = 10;}

                        else if ( (LA3_0==Interface) ) {s = 11;}

                        else if ( (LA3_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}

                        else if ( (LA3_0==Import) ) {s = 13;}

                        else if ( (LA3_0==Export) ) {s = 14;}

                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||LA3_0==HyphenMinusHyphenMinus||LA3_0==SolidusEqualsSign||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_HEX_INT && LA3_0<=RULE_LEGACY_OCTAL_INT)||LA3_0==RULE_SCIENTIFIC_INT||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_INT) ) {s = 15;}


                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA3_1 = input.LA(1);


                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA3_2 = input.LA(1);


                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA3_3 = input.LA(1);


                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA3_4 = input.LA(1);


                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA3_5 = input.LA(1);


                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA3_6 = input.LA(1);


                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA3_7 = input.LA(1);


                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA3_8 = input.LA(1);


                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA3_9 = input.LA(1);


                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA3_10 = input.LA(1);


                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA3_11 = input.LA(1);


                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}


                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
       class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "308:2: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA19_0 = input.LA(1);


                        int index19_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA19_0==CommercialAt) ) {s = 1;}

                        else if ( (LA19_0==Private) ) {s = 2;}

                        else if ( (LA19_0==Project) ) {s = 3;}

                        else if ( (LA19_0==Protected) ) {s = 4;}

                        else if ( (LA19_0==Public) ) {s = 5;}

                        else if ( (LA19_0==External) ) {s = 6;}

                        else if ( (LA19_0==Abstract) ) {s = 7;}

                        else if ( (LA19_0==Static) ) {s = 8;}

                        else if ( (LA19_0==Const) && (synpred7_InternalN4JSParser())) {s = 9;}

                        else if ( (LA19_0==Class) ) {s = 10;}

                        else if ( (LA19_0==Interface) ) {s = 11;}

                        else if ( (LA19_0==Enum) && (synpred7_InternalN4JSParser())) {s = 12;}

                        else if ( (LA19_0==Function) ) {s = 13;}

                        else if ( (LA19_0==Var) && (synpred7_InternalN4JSParser())) {s = 14;}

                        else if ( (LA19_0==Let) ) {s = 15;}

                        else if ( ((LA19_0>=Intersection && LA19_0<=Implements)||LA19_0==Promisify||LA19_0==Delete||(LA19_0>=Target && LA19_0<=Await_1)||(LA19_0>=False && LA19_0<=Super)||LA19_0==Union||(LA19_0>=Yield && LA19_0<=This)||(LA19_0>=From && LA19_0<=Void)||LA19_0==Get||(LA19_0>=New && LA19_0<=Set)||LA19_0==PlusSignPlusSign||LA19_0==HyphenMinusHyphenMinus||LA19_0==SolidusEqualsSign||LA19_0==As||LA19_0==Of||LA19_0==ExclamationMark||LA19_0==LeftParenthesis||LA19_0==PlusSign||LA19_0==HyphenMinus||LA19_0==Solidus||LA19_0==LessThanSign||LA19_0==LeftSquareBracket||LA19_0==LeftCurlyBracket||LA19_0==Tilde||LA19_0==RULE_DOUBLE||(LA19_0>=RULE_HEX_INT && LA19_0<=RULE_LEGACY_OCTAL_INT)||LA19_0==RULE_SCIENTIFIC_INT||LA19_0==RULE_IDENTIFIER||LA19_0==RULE_STRING||(LA19_0>=RULE_TEMPLATE_HEAD && LA19_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA19_0==RULE_INT) ) {s = 16;}


                        input.seek(index19_0);
                        if ( s>=0 ) return s;
                        break;

            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "420:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) ) ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) ) ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA25_8 = input.LA(1);


                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_8==Function) ) {s = 13;}

                        else if ( (LA25_8==Private) ) {s = 2;}

                        else if ( (LA25_8==Project) ) {s = 3;}

                        else if ( (LA25_8==Protected) ) {s = 4;}

                        else if ( (LA25_8==Public) ) {s = 5;}

                        else if ( (LA25_8==External) ) {s = 6;}

                        else if ( (LA25_8==Abstract) ) {s = 7;}

                        else if ( (LA25_8==Static) ) {s = 8;}

                        else if ( (LA25_8==Const) ) {s = 9;}

                        else if ( (LA25_8==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_8==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_8==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_8==Let||LA25_8==Var) ) {s = 14;}


                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA25_5 = input.LA(1);


                        int index25_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_5==Function) ) {s = 13;}

                        else if ( (LA25_5==Private) ) {s = 2;}

                        else if ( (LA25_5==Project) ) {s = 3;}

                        else if ( (LA25_5==Protected) ) {s = 4;}

                        else if ( (LA25_5==Public) ) {s = 5;}

                        else if ( (LA25_5==External) ) {s = 6;}

                        else if ( (LA25_5==Abstract) ) {s = 7;}

                        else if ( (LA25_5==Static) ) {s = 8;}

                        else if ( (LA25_5==Const) ) {s = 9;}

                        else if ( (LA25_5==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_5==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_5==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_5==Let||LA25_5==Var) ) {s = 14;}


                        input.seek(index25_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA25_6 = input.LA(1);


                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_6==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_6==Private) ) {s = 2;}

                        else if ( (LA25_6==Project) ) {s = 3;}

                        else if ( (LA25_6==Protected) ) {s = 4;}

                        else if ( (LA25_6==Public) ) {s = 5;}

                        else if ( (LA25_6==External) ) {s = 6;}

                        else if ( (LA25_6==Abstract) ) {s = 7;}

                        else if ( (LA25_6==Static) ) {s = 8;}

                        else if ( (LA25_6==Const) ) {s = 9;}

                        else if ( (LA25_6==Let||LA25_6==Var) ) {s = 14;}

                        else if ( (LA25_6==Function) ) {s = 13;}

                        else if ( (LA25_6==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_6==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}


                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA25_18 = input.LA(1);


                        int index25_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_18==Function) ) {s = 13;}

                        else if ( (LA25_18==Private) ) {s = 2;}

                        else if ( (LA25_18==Project) ) {s = 3;}

                        else if ( (LA25_18==Protected) ) {s = 4;}

                        else if ( (LA25_18==Public) ) {s = 5;}

                        else if ( (LA25_18==External) ) {s = 6;}

                        else if ( (LA25_18==Abstract) ) {s = 7;}

                        else if ( (LA25_18==Static) ) {s = 8;}

                        else if ( (LA25_18==Const) ) {s = 9;}

                        else if ( (LA25_18==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_18==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_18==EOF||LA25_18==Let||LA25_18==Var||LA25_18==Comma||(LA25_18>=Colon && LA25_18<=Semicolon)||LA25_18==EqualsSign||LA25_18==RightCurlyBracket||LA25_18==RULE_ML_COMMENT||LA25_18==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_18==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}


                        input.seek(index25_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA25_22 = input.LA(1);


                        int index25_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_22==EOF||LA25_22==Comma||(LA25_22>=Colon && LA25_22<=Semicolon)||LA25_22==EqualsSign||LA25_22==RightCurlyBracket||LA25_22==RULE_ML_COMMENT||LA25_22==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_22==Tilde) && (synpred10_InternalN4JSParser())) {s = 23;}

                        else if ( (LA25_22==RULE_IDENTIFIER) && (synpred10_InternalN4JSParser())) {s = 24;}

                        else if ( (LA25_22==Yield) && (synpred10_InternalN4JSParser())) {s = 25;}

                        else if ( (LA25_22==Get) && (synpred10_InternalN4JSParser())) {s = 26;}

                        else if ( (LA25_22==Set) && (synpred10_InternalN4JSParser())) {s = 27;}

                        else if ( (LA25_22==Let) && (synpred10_InternalN4JSParser())) {s = 28;}

                        else if ( (LA25_22==Project) && (synpred10_InternalN4JSParser())) {s = 29;}

                        else if ( (LA25_22==External) && (synpred10_InternalN4JSParser())) {s = 30;}

                        else if ( (LA25_22==Abstract) && (synpred10_InternalN4JSParser())) {s = 31;}

                        else if ( (LA25_22==Static) && (synpred10_InternalN4JSParser())) {s = 32;}

                        else if ( (LA25_22==As) && (synpred10_InternalN4JSParser())) {s = 33;}

                        else if ( (LA25_22==From) && (synpred10_InternalN4JSParser())) {s = 34;}

                        else if ( (LA25_22==Constructor) && (synpred10_InternalN4JSParser())) {s = 35;}

                        else if ( (LA25_22==Of) && (synpred10_InternalN4JSParser())) {s = 36;}

                        else if ( (LA25_22==Target) && (synpred10_InternalN4JSParser())) {s = 37;}

                        else if ( (LA25_22==Type) && (synpred10_InternalN4JSParser())) {s = 38;}

                        else if ( (LA25_22==Union) && (synpred10_InternalN4JSParser())) {s = 39;}

                        else if ( (LA25_22==Intersection) && (synpred10_InternalN4JSParser())) {s = 40;}

                        else if ( (LA25_22==This) && (synpred10_InternalN4JSParser())) {s = 41;}

                        else if ( (LA25_22==Await) && (synpred10_InternalN4JSParser())) {s = 42;}

                        else if ( (LA25_22==Promisify) && (synpred10_InternalN4JSParser())) {s = 43;}

                        else if ( (LA25_22==Await_1) && (synpred10_InternalN4JSParser())) {s = 44;}

                        else if ( (LA25_22==Implements) && (synpred10_InternalN4JSParser())) {s = 45;}

                        else if ( (LA25_22==Interface) && (synpred10_InternalN4JSParser())) {s = 46;}

                        else if ( (LA25_22==Private) && (synpred10_InternalN4JSParser())) {s = 47;}

                        else if ( (LA25_22==Protected) && (synpred10_InternalN4JSParser())) {s = 48;}

                        else if ( (LA25_22==Public) && (synpred10_InternalN4JSParser())) {s = 49;}


                        input.seek(index25_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA25_19 = input.LA(1);


                        int index25_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_19==EOF||LA25_19==Let||LA25_19==Var||LA25_19==Comma||(LA25_19>=Colon && LA25_19<=Semicolon)||LA25_19==EqualsSign||LA25_19==RightCurlyBracket||LA25_19==RULE_ML_COMMENT||LA25_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_19==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_19==Private) ) {s = 2;}

                        else if ( (LA25_19==Project) ) {s = 3;}

                        else if ( (LA25_19==Protected) ) {s = 4;}

                        else if ( (LA25_19==Public) ) {s = 5;}

                        else if ( (LA25_19==External) ) {s = 6;}

                        else if ( (LA25_19==Abstract) ) {s = 7;}

                        else if ( (LA25_19==Static) ) {s = 8;}

                        else if ( (LA25_19==Const) ) {s = 9;}

                        else if ( (LA25_19==Function) ) {s = 13;}

                        else if ( (LA25_19==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_19==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}


                        input.seek(index25_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA25_21 = input.LA(1);


                        int index25_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_21==Function) ) {s = 13;}

                        else if ( (LA25_21==Private) ) {s = 2;}

                        else if ( (LA25_21==Project) ) {s = 3;}

                        else if ( (LA25_21==Protected) ) {s = 4;}

                        else if ( (LA25_21==Public) ) {s = 5;}

                        else if ( (LA25_21==External) ) {s = 6;}

                        else if ( (LA25_21==Abstract) ) {s = 7;}

                        else if ( (LA25_21==Static) ) {s = 8;}

                        else if ( (LA25_21==Const) ) {s = 9;}

                        else if ( (LA25_21==EOF||LA25_21==Let||LA25_21==Var||LA25_21==Comma||(LA25_21>=Colon && LA25_21<=Semicolon)||LA25_21==EqualsSign||LA25_21==RightCurlyBracket||LA25_21==RULE_ML_COMMENT||LA25_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_21==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_21==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_21==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}


                        input.seek(index25_21);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA25_3 = input.LA(1);


                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_3==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_3==Private) ) {s = 2;}

                        else if ( (LA25_3==Project) ) {s = 3;}

                        else if ( (LA25_3==Protected) ) {s = 4;}

                        else if ( (LA25_3==Public) ) {s = 5;}

                        else if ( (LA25_3==External) ) {s = 6;}

                        else if ( (LA25_3==Abstract) ) {s = 7;}

                        else if ( (LA25_3==Static) ) {s = 8;}

                        else if ( (LA25_3==Const) ) {s = 9;}

                        else if ( (LA25_3==Let||LA25_3==Var) ) {s = 14;}

                        else if ( (LA25_3==Function) ) {s = 13;}

                        else if ( (LA25_3==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_3==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}


                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA25_4 = input.LA(1);


                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_4==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_4==Private) ) {s = 2;}

                        else if ( (LA25_4==Project) ) {s = 3;}

                        else if ( (LA25_4==Protected) ) {s = 4;}

                        else if ( (LA25_4==Public) ) {s = 5;}

                        else if ( (LA25_4==External) ) {s = 6;}

                        else if ( (LA25_4==Abstract) ) {s = 7;}

                        else if ( (LA25_4==Static) ) {s = 8;}

                        else if ( (LA25_4==Const) ) {s = 9;}

                        else if ( (LA25_4==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_4==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_4==Let||LA25_4==Var) ) {s = 14;}

                        else if ( (LA25_4==Function) ) {s = 13;}


                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA25_16 = input.LA(1);


                        int index25_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_16==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_16==Private) ) {s = 2;}

                        else if ( (LA25_16==Project) ) {s = 3;}

                        else if ( (LA25_16==Protected) ) {s = 4;}

                        else if ( (LA25_16==Public) ) {s = 5;}

                        else if ( (LA25_16==External) ) {s = 6;}

                        else if ( (LA25_16==Abstract) ) {s = 7;}

                        else if ( (LA25_16==Static) ) {s = 8;}

                        else if ( (LA25_16==Const) ) {s = 9;}

                        else if ( (LA25_16==EOF||LA25_16==Let||LA25_16==Var||LA25_16==Comma||(LA25_16>=Colon && LA25_16<=Semicolon)||LA25_16==EqualsSign||LA25_16==RightCurlyBracket||LA25_16==RULE_ML_COMMENT||LA25_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_16==Function) ) {s = 13;}

                        else if ( (LA25_16==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_16==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}


                        input.seek(index25_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA25_9 = input.LA(1);


                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_9==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_9==Private) ) {s = 15;}

                        else if ( (LA25_9==Project) ) {s = 16;}

                        else if ( (LA25_9==Protected) ) {s = 17;}

                        else if ( (LA25_9==Public) ) {s = 18;}

                        else if ( (LA25_9==External) ) {s = 19;}

                        else if ( (LA25_9==Abstract) ) {s = 20;}

                        else if ( (LA25_9==Static) ) {s = 21;}

                        else if ( (LA25_9==Const) ) {s = 9;}

                        else if ( ((LA25_9>=Intersection && LA25_9<=Implements)||LA25_9==Promisify||LA25_9==Target||(LA25_9>=Await && LA25_9<=Await_1)||LA25_9==Union||(LA25_9>=Yield && LA25_9<=This)||LA25_9==From||LA25_9==This_1||(LA25_9>=Type && LA25_9<=Void)||(LA25_9>=Get && LA25_9<=Let)||LA25_9==Set||LA25_9==Var||LA25_9==As||LA25_9==Of||(LA25_9>=QuestionMark && LA25_9<=LeftSquareBracket)||LA25_9==LeftCurlyBracket||LA25_9==Tilde||LA25_9==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA25_9==Interface) ) {s = 22;}

                        else if ( (LA25_9==Function) ) {s = 13;}

                        else if ( (LA25_9==Class) && (synpred9_InternalN4JSParser())) {s = 10;}


                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA25_2 = input.LA(1);


                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_2==Function) ) {s = 13;}

                        else if ( (LA25_2==Private) ) {s = 2;}

                        else if ( (LA25_2==Project) ) {s = 3;}

                        else if ( (LA25_2==Protected) ) {s = 4;}

                        else if ( (LA25_2==Public) ) {s = 5;}

                        else if ( (LA25_2==External) ) {s = 6;}

                        else if ( (LA25_2==Abstract) ) {s = 7;}

                        else if ( (LA25_2==Static) ) {s = 8;}

                        else if ( (LA25_2==Const) ) {s = 9;}

                        else if ( (LA25_2==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_2==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_2==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_2==Let||LA25_2==Var) ) {s = 14;}


                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA25_17 = input.LA(1);


                        int index25_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_17==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_17==Private) ) {s = 2;}

                        else if ( (LA25_17==Project) ) {s = 3;}

                        else if ( (LA25_17==Protected) ) {s = 4;}

                        else if ( (LA25_17==Public) ) {s = 5;}

                        else if ( (LA25_17==External) ) {s = 6;}

                        else if ( (LA25_17==Abstract) ) {s = 7;}

                        else if ( (LA25_17==Static) ) {s = 8;}

                        else if ( (LA25_17==Const) ) {s = 9;}

                        else if ( (LA25_17==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_17==EOF||LA25_17==Let||LA25_17==Var||LA25_17==Comma||(LA25_17>=Colon && LA25_17<=Semicolon)||LA25_17==EqualsSign||LA25_17==RightCurlyBracket||LA25_17==RULE_ML_COMMENT||LA25_17==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_17==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_17==Function) ) {s = 13;}


                        input.seek(index25_17);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA25_7 = input.LA(1);


                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_7==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_7==Private) ) {s = 2;}

                        else if ( (LA25_7==Project) ) {s = 3;}

                        else if ( (LA25_7==Protected) ) {s = 4;}

                        else if ( (LA25_7==Public) ) {s = 5;}

                        else if ( (LA25_7==External) ) {s = 6;}

                        else if ( (LA25_7==Abstract) ) {s = 7;}

                        else if ( (LA25_7==Static) ) {s = 8;}

                        else if ( (LA25_7==Const) ) {s = 9;}

                        else if ( (LA25_7==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_7==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_7==Let||LA25_7==Var) ) {s = 14;}

                        else if ( (LA25_7==Function) ) {s = 13;}


                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA25_15 = input.LA(1);


                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_15==EOF||LA25_15==Let||LA25_15==Var||LA25_15==Comma||(LA25_15>=Colon && LA25_15<=Semicolon)||LA25_15==EqualsSign||LA25_15==RightCurlyBracket||LA25_15==RULE_ML_COMMENT||LA25_15==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_15==Function) ) {s = 13;}

                        else if ( (LA25_15==Private) ) {s = 2;}

                        else if ( (LA25_15==Project) ) {s = 3;}

                        else if ( (LA25_15==Protected) ) {s = 4;}

                        else if ( (LA25_15==Public) ) {s = 5;}

                        else if ( (LA25_15==External) ) {s = 6;}

                        else if ( (LA25_15==Abstract) ) {s = 7;}

                        else if ( (LA25_15==Static) ) {s = 8;}

                        else if ( (LA25_15==Const) ) {s = 9;}

                        else if ( (LA25_15==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_15==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_15==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}


                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA25_20 = input.LA(1);


                        int index25_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_20==EOF||LA25_20==Let||LA25_20==Var||LA25_20==Comma||(LA25_20>=Colon && LA25_20<=Semicolon)||LA25_20==EqualsSign||LA25_20==RightCurlyBracket||LA25_20==RULE_ML_COMMENT||LA25_20==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_20==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_20==Private) ) {s = 2;}

                        else if ( (LA25_20==Project) ) {s = 3;}

                        else if ( (LA25_20==Protected) ) {s = 4;}

                        else if ( (LA25_20==Public) ) {s = 5;}

                        else if ( (LA25_20==External) ) {s = 6;}

                        else if ( (LA25_20==Abstract) ) {s = 7;}

                        else if ( (LA25_20==Static) ) {s = 8;}

                        else if ( (LA25_20==Const) ) {s = 9;}

                        else if ( (LA25_20==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_20==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_20==Function) ) {s = 13;}


                        input.seek(index25_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA25_0 = input.LA(1);


                        int index25_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_0==CommercialAt) && (synpred8_InternalN4JSParser())) {s = 1;}

                        else if ( (LA25_0==Private) ) {s = 2;}

                        else if ( (LA25_0==Project) ) {s = 3;}

                        else if ( (LA25_0==Protected) ) {s = 4;}

                        else if ( (LA25_0==Public) ) {s = 5;}

                        else if ( (LA25_0==External) ) {s = 6;}

                        else if ( (LA25_0==Abstract) ) {s = 7;}

                        else if ( (LA25_0==Static) ) {s = 8;}

                        else if ( (LA25_0==Const) ) {s = 9;}

                        else if ( (LA25_0==Class) && (synpred9_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_0==Interface) && (synpred10_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_0==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_0==Function) ) {s = 13;}

                        else if ( (LA25_0==Let||LA25_0==Var) ) {s = 14;}


                        input.seek(index25_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "765:4: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA49_2 = input.LA(1);


                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_2==EOF) ) {s = 7;}

                        else if ( (LA49_2==CommercialAt) && (synpred15_InternalN4JSParser())) {s = 8;}

                        else if ( (LA49_2==Private) && (synpred15_InternalN4JSParser())) {s = 9;}

                        else if ( (LA49_2==Project) && (synpred15_InternalN4JSParser())) {s = 10;}

                        else if ( (LA49_2==Protected) && (synpred15_InternalN4JSParser())) {s = 11;}

                        else if ( (LA49_2==Public) && (synpred15_InternalN4JSParser())) {s = 12;}

                        else if ( (LA49_2==External) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA49_2==Abstract) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA49_2==Static) && (synpred15_InternalN4JSParser())) {s = 15;}

                        else if ( (LA49_2==Const) && (synpred15_InternalN4JSParser())) {s = 16;}

                        else if ( (LA49_2==Class) && (synpred15_InternalN4JSParser())) {s = 17;}

                        else if ( (LA49_2==Interface) && (synpred15_InternalN4JSParser())) {s = 18;}

                        else if ( (LA49_2==Enum) && (synpred15_InternalN4JSParser())) {s = 19;}

                        else if ( (LA49_2==Import) && (synpred15_InternalN4JSParser())) {s = 20;}

                        else if ( (LA49_2==Export) && (synpred15_InternalN4JSParser())) {s = 21;}

                        else if ( (LA49_2==LeftCurlyBracket) && (synpred15_InternalN4JSParser())) {s = 22;}

                        else if ( (LA49_2==Function) && (synpred15_InternalN4JSParser())) {s = 23;}

                        else if ( (LA49_2==Var) && (synpred15_InternalN4JSParser())) {s = 24;}

                        else if ( (LA49_2==Let) && (synpred15_InternalN4JSParser())) {s = 25;}

                        else if ( (LA49_2==Semicolon) && (synpred15_InternalN4JSParser())) {s = 26;}

                        else if ( (LA49_2==RULE_IDENTIFIER) && (synpred15_InternalN4JSParser())) {s = 27;}

                        else if ( (LA49_2==Yield) && (synpred15_InternalN4JSParser())) {s = 28;}

                        else if ( (LA49_2==Get) && (synpred15_InternalN4JSParser())) {s = 29;}

                        else if ( (LA49_2==Set) && (synpred15_InternalN4JSParser())) {s = 30;}

                        else if ( (LA49_2==As) && (synpred15_InternalN4JSParser())) {s = 31;}

                        else if ( (LA49_2==From) && (synpred15_InternalN4JSParser())) {s = 32;}

                        else if ( (LA49_2==Constructor) && (synpred15_InternalN4JSParser())) {s = 33;}

                        else if ( (LA49_2==Of) && (synpred15_InternalN4JSParser())) {s = 34;}

                        else if ( (LA49_2==Target) && (synpred15_InternalN4JSParser())) {s = 35;}

                        else if ( (LA49_2==Type) && (synpred15_InternalN4JSParser())) {s = 36;}

                        else if ( (LA49_2==Union) && (synpred15_InternalN4JSParser())) {s = 37;}

                        else if ( (LA49_2==Intersection) && (synpred15_InternalN4JSParser())) {s = 38;}

                        else if ( (LA49_2==This) && (synpred15_InternalN4JSParser())) {s = 39;}

                        else if ( (LA49_2==Await) && (synpred15_InternalN4JSParser())) {s = 40;}

                        else if ( (LA49_2==Promisify) && (synpred15_InternalN4JSParser())) {s = 41;}

                        else if ( (LA49_2==Await_1) && (synpred15_InternalN4JSParser())) {s = 42;}

                        else if ( (LA49_2==Implements) && (synpred15_InternalN4JSParser())) {s = 43;}

                        else if ( (LA49_2==LeftParenthesis) && (synpred15_InternalN4JSParser())) {s = 44;}

                        else if ( (LA49_2==New) && (synpred15_InternalN4JSParser())) {s = 45;}

                        else if ( (LA49_2==This_1) && (synpred15_InternalN4JSParser())) {s = 46;}

                        else if ( (LA49_2==Super) && (synpred15_InternalN4JSParser())) {s = 47;}

                        else if ( (LA49_2==LessThanSign) && (synpred15_InternalN4JSParser())) {s = 48;}

                        else if ( (LA49_2==RULE_DOUBLE) && (synpred15_InternalN4JSParser())) {s = 49;}

                        else if ( (LA49_2==RULE_INT) && (synpred15_InternalN4JSParser())) {s = 50;}

                        else if ( (LA49_2==RULE_BINARY_INT) && (synpred15_InternalN4JSParser())) {s = 51;}

                        else if ( (LA49_2==RULE_OCTAL_INT) && (synpred15_InternalN4JSParser())) {s = 52;}

                        else if ( (LA49_2==RULE_LEGACY_OCTAL_INT) && (synpred15_InternalN4JSParser())) {s = 53;}

                        else if ( (LA49_2==RULE_HEX_INT) && (synpred15_InternalN4JSParser())) {s = 54;}

                        else if ( (LA49_2==RULE_SCIENTIFIC_INT) && (synpred15_InternalN4JSParser())) {s = 55;}

                        else if ( (LA49_2==True) && (synpred15_InternalN4JSParser())) {s = 56;}

                        else if ( (LA49_2==False) && (synpred15_InternalN4JSParser())) {s = 57;}

                        else if ( (LA49_2==RULE_STRING) && (synpred15_InternalN4JSParser())) {s = 58;}

                        else if ( (LA49_2==Null) && (synpred15_InternalN4JSParser())) {s = 59;}

                        else if ( (LA49_2==Solidus) && (synpred15_InternalN4JSParser())) {s = 60;}

                        else if ( (LA49_2==SolidusEqualsSign) && (synpred15_InternalN4JSParser())) {s = 61;}

                        else if ( (LA49_2==LeftSquareBracket) && (synpred15_InternalN4JSParser())) {s = 62;}

                        else if ( (LA49_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred15_InternalN4JSParser())) {s = 63;}

                        else if ( (LA49_2==RULE_TEMPLATE_HEAD) && (synpred15_InternalN4JSParser())) {s = 64;}

                        else if ( (LA49_2==Delete) && (synpred15_InternalN4JSParser())) {s = 65;}

                        else if ( (LA49_2==Void) && (synpred15_InternalN4JSParser())) {s = 66;}

                        else if ( (LA49_2==Typeof) && (synpred15_InternalN4JSParser())) {s = 67;}

                        else if ( (LA49_2==PlusSignPlusSign) && (synpred15_InternalN4JSParser())) {s = 68;}

                        else if ( (LA49_2==HyphenMinusHyphenMinus) && (synpred15_InternalN4JSParser())) {s = 69;}

                        else if ( (LA49_2==PlusSign) && (synpred15_InternalN4JSParser())) {s = 70;}

                        else if ( (LA49_2==HyphenMinus) && (synpred15_InternalN4JSParser())) {s = 71;}

                        else if ( (LA49_2==Tilde) && (synpred15_InternalN4JSParser())) {s = 72;}

                        else if ( (LA49_2==ExclamationMark) && (synpred15_InternalN4JSParser())) {s = 73;}

                        else if ( (LA49_2==If) && (synpred15_InternalN4JSParser())) {s = 74;}

                        else if ( (LA49_2==Do) && (synpred15_InternalN4JSParser())) {s = 75;}

                        else if ( (LA49_2==While) && (synpred15_InternalN4JSParser())) {s = 76;}

                        else if ( (LA49_2==For) && (synpred15_InternalN4JSParser())) {s = 77;}

                        else if ( (LA49_2==Continue) && (synpred15_InternalN4JSParser())) {s = 78;}

                        else if ( (LA49_2==Break) && (synpred15_InternalN4JSParser())) {s = 79;}

                        else if ( (LA49_2==Return) && (synpred15_InternalN4JSParser())) {s = 80;}

                        else if ( (LA49_2==With) && (synpred15_InternalN4JSParser())) {s = 81;}

                        else if ( (LA49_2==Switch) && (synpred15_InternalN4JSParser())) {s = 82;}

                        else if ( (LA49_2==Throw) && (synpred15_InternalN4JSParser())) {s = 83;}

                        else if ( (LA49_2==Try) && (synpred15_InternalN4JSParser())) {s = 84;}

                        else if ( (LA49_2==Debugger) && (synpred15_InternalN4JSParser())) {s = 85;}

                        else if ( (LA49_2==RightCurlyBracket) && (synpred15_InternalN4JSParser())) {s = 86;}

                        else if ( (LA49_2==Else) && (synpred15_InternalN4JSParser())) {s = 87;}

                        else if ( (LA49_2==Default) && (synpred15_InternalN4JSParser())) {s = 88;}

                        else if ( (LA49_2==Case) && (synpred15_InternalN4JSParser())) {s = 89;}


                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA49_5 = input.LA(1);


                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_InternalN4JSParser()) ) {s = 89;}

                        else if ( (true) ) {s = 6;}


                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA49_7 = input.LA(1);


                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_7==EOF) && (synpred15_InternalN4JSParser())) {s = 90;}


                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA49_0 = input.LA(1);


                        int index49_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_0==Semicolon) ) {s = 1;}

                        else if ( (LA49_0==EOF) ) {s = 2;}

                        else if ( (LA49_0==RULE_EOL) && (synpred15_InternalN4JSParser())) {s = 3;}

                        else if ( (LA49_0==RULE_ML_COMMENT) && (synpred15_InternalN4JSParser())) {s = 4;}

                        else if ( (LA49_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA49_0>=Intersection && LA49_0<=Implements)||(LA49_0>=Promisify && LA49_0<=Default)||(LA49_0>=Private && LA49_0<=Break)||(LA49_0>=Class && LA49_0<=With)||(LA49_0>=For && LA49_0<=Var)||LA49_0==PlusSignPlusSign||LA49_0==HyphenMinusHyphenMinus||LA49_0==SolidusEqualsSign||(LA49_0>=As && LA49_0<=If)||LA49_0==Of||LA49_0==ExclamationMark||LA49_0==LeftParenthesis||LA49_0==PlusSign||LA49_0==HyphenMinus||LA49_0==Solidus||LA49_0==LessThanSign||(LA49_0>=CommercialAt && LA49_0<=LeftSquareBracket)||LA49_0==LeftCurlyBracket||LA49_0==Tilde||LA49_0==RULE_DOUBLE||(LA49_0>=RULE_HEX_INT && LA49_0<=RULE_LEGACY_OCTAL_INT)||LA49_0==RULE_SCIENTIFIC_INT||LA49_0==RULE_IDENTIFIER||LA49_0==RULE_STRING||(LA49_0>=RULE_TEMPLATE_HEAD && LA49_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA49_0==RULE_INT) ) {s = 6;}


                        input.seek(index49_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA49_1 = input.LA(1);


                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}


                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1000:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA67_1 = input.LA(1);


                        int index67_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_InternalN4JSParser()) ) {s = 86;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index67_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 67, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1017:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA68_1 = input.LA(1);


                        int index68_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_InternalN4JSParser()) ) {s = 86;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index68_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\76\uffff";
    static final String dfa_68s = "\1\4\1\0\74\uffff";
    static final String dfa_69s = "\1\u0094\1\0\74\uffff";
    static final String dfa_70s = "\2\uffff\1\2\72\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\74\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\7\uffff\4\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            ""
    };

    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1276:4: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA79_1 = input.LA(1);


                        int index79_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index79_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1344:4: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA82_1 = input.LA(1);


                        int index82_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index82_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1412:4: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA85_1 = input.LA(1);


                        int index85_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index85_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1480:4: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA88_1 = input.LA(1);


                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\117\uffff";
    static final String dfa_74s = "\1\4\12\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_75s = "\1\u0094\12\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_76s = "\13\uffff\1\3\1\uffff\1\4\22\uffff\1\6\37\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_77s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\13\1\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\57\uffff}>";
    static final String[] dfa_78s = {
            "\1\31\1\24\1\36\1\uffff\1\34\1\37\1\4\1\7\1\104\1\113\1\6\1\12\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\106\1\10\1\110\1\26\1\40\1\33\1\35\1\105\1\uffff\1\40\1\11\2\40\1\111\1\30\1\101\1\17\1\32\3\uffff\1\23\3\40\1\27\1\40\1\107\5\uffff\1\101\1\20\1\14\1\40\1\21\1\112\1\13\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\101\1\100\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\15\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\16\2\uffff\1\40\11\uffff\2\40\7\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "1975:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA115_0 = input.LA(1);


                        int index115_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA115_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA115_0==Private) ) {s = 2;}

                        else if ( (LA115_0==Project) ) {s = 3;}

                        else if ( (LA115_0==Protected) ) {s = 4;}

                        else if ( (LA115_0==Public) ) {s = 5;}

                        else if ( (LA115_0==External) ) {s = 6;}

                        else if ( (LA115_0==Abstract) ) {s = 7;}

                        else if ( (LA115_0==Static) ) {s = 8;}

                        else if ( (LA115_0==Const) ) {s = 9;}

                        else if ( (LA115_0==Function) ) {s = 10;}

                        else if ( (LA115_0==Var) && (synpred44_InternalN4JSParser())) {s = 11;}

                        else if ( (LA115_0==Let) ) {s = 12;}

                        else if ( (LA115_0==Semicolon) ) {s = 13;}

                        else if ( (LA115_0==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA115_0==Yield) ) {s = 15;}

                        else if ( (LA115_0==Get) ) {s = 16;}

                        else if ( (LA115_0==Set) ) {s = 17;}

                        else if ( (LA115_0==As) ) {s = 18;}

                        else if ( (LA115_0==From) ) {s = 19;}

                        else if ( (LA115_0==Constructor) ) {s = 20;}

                        else if ( (LA115_0==Of) ) {s = 21;}

                        else if ( (LA115_0==Target) ) {s = 22;}

                        else if ( (LA115_0==Type) ) {s = 23;}

                        else if ( (LA115_0==Union) ) {s = 24;}

                        else if ( (LA115_0==Intersection) ) {s = 25;}

                        else if ( (LA115_0==This) ) {s = 26;}

                        else if ( (LA115_0==Await) ) {s = 27;}

                        else if ( (LA115_0==Promisify) ) {s = 28;}

                        else if ( (LA115_0==Await_1) ) {s = 29;}

                        else if ( (LA115_0==Implements) ) {s = 30;}

                        else if ( (LA115_0==Interface) ) {s = 31;}

                        else if ( (LA115_0==Delete||LA115_0==Typeof||LA115_0==Class||(LA115_0>=False && LA115_0<=Super)||(LA115_0>=Null && LA115_0<=True)||LA115_0==Void||LA115_0==New||LA115_0==PlusSignPlusSign||LA115_0==HyphenMinusHyphenMinus||LA115_0==SolidusEqualsSign||LA115_0==ExclamationMark||LA115_0==LeftParenthesis||LA115_0==PlusSign||LA115_0==HyphenMinus||LA115_0==Solidus||LA115_0==LessThanSign||(LA115_0>=CommercialAt && LA115_0<=LeftSquareBracket)||LA115_0==Tilde||LA115_0==RULE_DOUBLE||(LA115_0>=RULE_HEX_INT && LA115_0<=RULE_LEGACY_OCTAL_INT)||LA115_0==RULE_SCIENTIFIC_INT||LA115_0==RULE_STRING||(LA115_0>=RULE_TEMPLATE_HEAD && LA115_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA115_0==RULE_INT) ) {s = 32;}

                        else if ( (LA115_0==If) ) {s = 64;}

                        else if ( (LA115_0==While||LA115_0==For||LA115_0==Do) ) {s = 65;}

                        else if ( (LA115_0==Continue) ) {s = 68;}

                        else if ( (LA115_0==Break) ) {s = 69;}

                        else if ( (LA115_0==Return) ) {s = 70;}

                        else if ( (LA115_0==With) ) {s = 71;}

                        else if ( (LA115_0==Switch) ) {s = 72;}

                        else if ( (LA115_0==Throw) ) {s = 73;}

                        else if ( (LA115_0==Try) ) {s = 74;}

                        else if ( (LA115_0==Debugger) ) {s = 75;}


                        input.seek(index115_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA115_1 = input.LA(1);


                        int index115_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA115_2 = input.LA(1);


                        int index115_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA115_3 = input.LA(1);


                        int index115_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA115_4 = input.LA(1);


                        int index115_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA115_5 = input.LA(1);


                        int index115_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA115_6 = input.LA(1);


                        int index115_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA115_7 = input.LA(1);


                        int index115_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA115_8 = input.LA(1);


                        int index115_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA115_9 = input.LA(1);


                        int index115_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred44_InternalN4JSParser()) ) {s = 11;}


                        input.seek(index115_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA115_10 = input.LA(1);


                        int index115_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA115_12 = input.LA(1);


                        int index115_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_InternalN4JSParser()) ) {s = 11;}

                        else if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA115_14 = input.LA(1);


                        int index115_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA115_15 = input.LA(1);


                        int index115_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA115_16 = input.LA(1);


                        int index115_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA115_17 = input.LA(1);


                        int index115_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA115_18 = input.LA(1);


                        int index115_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA115_19 = input.LA(1);


                        int index115_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA115_20 = input.LA(1);


                        int index115_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA115_21 = input.LA(1);


                        int index115_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA115_22 = input.LA(1);


                        int index115_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA115_23 = input.LA(1);


                        int index115_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA115_24 = input.LA(1);


                        int index115_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA115_25 = input.LA(1);


                        int index115_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA115_26 = input.LA(1);


                        int index115_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA115_27 = input.LA(1);


                        int index115_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA115_28 = input.LA(1);


                        int index115_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA115_29 = input.LA(1);


                        int index115_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA115_30 = input.LA(1);


                        int index115_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA115_31 = input.LA(1);


                        int index115_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}


                        input.seek(index115_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\1\4\12\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_80s = "\1\u0094\12\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_81s = "\13\uffff\1\3\1\uffff\1\4\21\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_82s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\13\1\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\60\uffff}>";
    static final String[] dfa_83s = {
            "\1\30\1\23\1\35\1\uffff\1\33\1\36\1\4\1\7\1\104\1\113\1\6\1\12\3\uffff\1\2\1\3\1\37\2\uffff\1\5\1\106\1\10\1\110\1\25\1\37\1\32\1\34\1\105\1\uffff\1\37\1\11\2\37\1\111\1\27\1\101\1\37\1\31\3\uffff\1\22\3\37\1\26\1\37\1\107\5\uffff\1\101\1\17\1\14\1\37\1\20\1\112\1\13\5\uffff\1\37\1\uffff\1\37\1\uffff\1\37\7\uffff\1\21\1\101\1\100\1\uffff\1\24\2\uffff\1\37\2\uffff\1\37\2\uffff\1\37\1\uffff\1\37\1\uffff\1\37\1\uffff\1\15\1\37\3\uffff\2\37\2\uffff\1\1\2\uffff\1\37\3\uffff\1\37\1\uffff\4\37\1\uffff\1\37\1\uffff\1\16\2\uffff\1\37\11\uffff\2\37\7\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "2033:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA116_0 = input.LA(1);


                        int index116_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA116_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA116_0==Private) ) {s = 2;}

                        else if ( (LA116_0==Project) ) {s = 3;}

                        else if ( (LA116_0==Protected) ) {s = 4;}

                        else if ( (LA116_0==Public) ) {s = 5;}

                        else if ( (LA116_0==External) ) {s = 6;}

                        else if ( (LA116_0==Abstract) ) {s = 7;}

                        else if ( (LA116_0==Static) ) {s = 8;}

                        else if ( (LA116_0==Const) ) {s = 9;}

                        else if ( (LA116_0==Function) ) {s = 10;}

                        else if ( (LA116_0==Var) && (synpred48_InternalN4JSParser())) {s = 11;}

                        else if ( (LA116_0==Let) ) {s = 12;}

                        else if ( (LA116_0==Semicolon) ) {s = 13;}

                        else if ( (LA116_0==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA116_0==Get) ) {s = 15;}

                        else if ( (LA116_0==Set) ) {s = 16;}

                        else if ( (LA116_0==As) ) {s = 17;}

                        else if ( (LA116_0==From) ) {s = 18;}

                        else if ( (LA116_0==Constructor) ) {s = 19;}

                        else if ( (LA116_0==Of) ) {s = 20;}

                        else if ( (LA116_0==Target) ) {s = 21;}

                        else if ( (LA116_0==Type) ) {s = 22;}

                        else if ( (LA116_0==Union) ) {s = 23;}

                        else if ( (LA116_0==Intersection) ) {s = 24;}

                        else if ( (LA116_0==This) ) {s = 25;}

                        else if ( (LA116_0==Await) ) {s = 26;}

                        else if ( (LA116_0==Promisify) ) {s = 27;}

                        else if ( (LA116_0==Await_1) ) {s = 28;}

                        else if ( (LA116_0==Implements) ) {s = 29;}

                        else if ( (LA116_0==Interface) ) {s = 30;}

                        else if ( (LA116_0==Delete||LA116_0==Typeof||LA116_0==Class||(LA116_0>=False && LA116_0<=Super)||LA116_0==Yield||(LA116_0>=Null && LA116_0<=True)||LA116_0==Void||LA116_0==New||LA116_0==PlusSignPlusSign||LA116_0==HyphenMinusHyphenMinus||LA116_0==SolidusEqualsSign||LA116_0==ExclamationMark||LA116_0==LeftParenthesis||LA116_0==PlusSign||LA116_0==HyphenMinus||LA116_0==Solidus||LA116_0==LessThanSign||(LA116_0>=CommercialAt && LA116_0<=LeftSquareBracket)||LA116_0==Tilde||LA116_0==RULE_DOUBLE||(LA116_0>=RULE_HEX_INT && LA116_0<=RULE_LEGACY_OCTAL_INT)||LA116_0==RULE_SCIENTIFIC_INT||LA116_0==RULE_STRING||(LA116_0>=RULE_TEMPLATE_HEAD && LA116_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA116_0==RULE_INT) ) {s = 31;}

                        else if ( (LA116_0==If) ) {s = 64;}

                        else if ( (LA116_0==While||LA116_0==For||LA116_0==Do) ) {s = 65;}

                        else if ( (LA116_0==Continue) ) {s = 68;}

                        else if ( (LA116_0==Break) ) {s = 69;}

                        else if ( (LA116_0==Return) ) {s = 70;}

                        else if ( (LA116_0==With) ) {s = 71;}

                        else if ( (LA116_0==Switch) ) {s = 72;}

                        else if ( (LA116_0==Throw) ) {s = 73;}

                        else if ( (LA116_0==Try) ) {s = 74;}

                        else if ( (LA116_0==Debugger) ) {s = 75;}


                        input.seek(index116_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA116_1 = input.LA(1);


                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA116_2 = input.LA(1);


                        int index116_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA116_3 = input.LA(1);


                        int index116_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA116_4 = input.LA(1);


                        int index116_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA116_5 = input.LA(1);


                        int index116_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA116_6 = input.LA(1);


                        int index116_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA116_7 = input.LA(1);


                        int index116_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA116_8 = input.LA(1);


                        int index116_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA116_9 = input.LA(1);


                        int index116_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred48_InternalN4JSParser()) ) {s = 11;}


                        input.seek(index116_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA116_10 = input.LA(1);


                        int index116_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA116_12 = input.LA(1);


                        int index116_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_InternalN4JSParser()) ) {s = 11;}

                        else if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA116_14 = input.LA(1);


                        int index116_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA116_15 = input.LA(1);


                        int index116_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA116_16 = input.LA(1);


                        int index116_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA116_17 = input.LA(1);


                        int index116_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA116_18 = input.LA(1);


                        int index116_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA116_19 = input.LA(1);


                        int index116_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA116_20 = input.LA(1);


                        int index116_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA116_21 = input.LA(1);


                        int index116_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA116_22 = input.LA(1);


                        int index116_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA116_23 = input.LA(1);


                        int index116_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA116_24 = input.LA(1);


                        int index116_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA116_25 = input.LA(1);


                        int index116_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA116_26 = input.LA(1);


                        int index116_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA116_27 = input.LA(1);


                        int index116_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA116_28 = input.LA(1);


                        int index116_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA116_29 = input.LA(1);


                        int index116_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA116_30 = input.LA(1);


                        int index116_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 31;}


                        input.seek(index116_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_84s = "\115\uffff";
    static final String dfa_85s = "\1\4\1\0\113\uffff";
    static final String dfa_86s = "\1\u0094\1\0\113\uffff";
    static final String dfa_87s = "\2\uffff\1\2\111\uffff\1\1";
    static final String dfa_88s = "\1\uffff\1\0\113\uffff}>";
    static final String[] dfa_89s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\5\uffff\7\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            ""
    };

    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "2097:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA117_1 = input.LA(1);


                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "2117:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA118_1 = input.LA(1);


                        int index118_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index118_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 2207:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_90s = "\42\uffff";
    static final String dfa_91s = "\1\4\1\0\40\uffff";
    static final String dfa_92s = "\1\176\1\0\40\uffff";
    static final String dfa_93s = "\2\uffff\1\1\1\2\36\uffff";
    static final String dfa_94s = "\1\0\1\1\40\uffff}>";
    static final String[] dfa_95s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\2\3\1\uffff\1\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            ""
    };

    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final char[] dfa_91 = DFA.unpackEncodedStringToUnsignedChars(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[][] dfa_95 = unpackEncodedStringArray(dfa_95s);

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "2269:1: ( ( ( ( ruleBindingPattern ) )=>VariableBindingParserRuleCall_0= ruleVariableBinding ) | VariableDeclarationParserRuleCall_1= ruleVariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA123_0 = input.LA(1);


                        int index123_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA123_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA123_0==LeftSquareBracket) && (synpred54_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA123_0>=Intersection && LA123_0<=Implements)||(LA123_0>=Promisify && LA123_0<=Abstract)||LA123_0==External||(LA123_0>=Private && LA123_0<=Project)||LA123_0==Public||LA123_0==Static||LA123_0==Target||(LA123_0>=Await && LA123_0<=Await_1)||LA123_0==Union||(LA123_0>=Yield && LA123_0<=This)||LA123_0==From||LA123_0==This_1||(LA123_0>=Type && LA123_0<=Void)||(LA123_0>=Get && LA123_0<=Let)||LA123_0==Set||LA123_0==As||LA123_0==Of||(LA123_0>=QuestionMark && LA123_0<=CommercialAt)||LA123_0==Tilde||LA123_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index123_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA123_1 = input.LA(1);


                        int index123_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index123_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "2288:1: ( ( ( ( ruleBindingPattern ) )=>VariableBindingParserRuleCall_0= norm1_VariableBinding ) | VariableDeclarationParserRuleCall_1= norm1_VariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA124_0 = input.LA(1);


                        int index124_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA124_0==LeftSquareBracket) && (synpred55_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA124_0>=Intersection && LA124_0<=Implements)||(LA124_0>=Promisify && LA124_0<=Abstract)||LA124_0==External||(LA124_0>=Private && LA124_0<=Project)||LA124_0==Public||LA124_0==Static||LA124_0==Target||(LA124_0>=Await && LA124_0<=Await_1)||LA124_0==Union||(LA124_0>=Yield && LA124_0<=This)||LA124_0==From||LA124_0==This_1||(LA124_0>=Type && LA124_0<=Void)||(LA124_0>=Get && LA124_0<=Let)||LA124_0==Set||LA124_0==As||LA124_0==Of||(LA124_0>=QuestionMark && LA124_0<=CommercialAt)||LA124_0==Tilde||LA124_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index124_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA124_1 = input.LA(1);


                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_96s = "\41\uffff";
    static final String dfa_97s = "\1\4\1\0\37\uffff";
    static final String dfa_98s = "\1\176\1\0\37\uffff";
    static final String dfa_99s = "\2\uffff\1\1\1\2\35\uffff";
    static final String dfa_100s = "\1\0\1\1\37\uffff}>";
    static final String[] dfa_101s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\2\3\1\uffff\1\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            ""
    };

    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "2307:1: ( ( ( ( norm1_BindingPattern ) )=>VariableBindingParserRuleCall_0= norm2_VariableBinding ) | VariableDeclarationParserRuleCall_1= norm2_VariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA125_0 = input.LA(1);


                        int index125_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA125_0==LeftSquareBracket) && (synpred56_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA125_0>=Intersection && LA125_0<=Implements)||(LA125_0>=Promisify && LA125_0<=Abstract)||LA125_0==External||(LA125_0>=Private && LA125_0<=Project)||LA125_0==Public||LA125_0==Static||LA125_0==Target||(LA125_0>=Await && LA125_0<=Await_1)||LA125_0==Union||LA125_0==This||LA125_0==From||LA125_0==This_1||(LA125_0>=Type && LA125_0<=Void)||(LA125_0>=Get && LA125_0<=Let)||LA125_0==Set||LA125_0==As||LA125_0==Of||(LA125_0>=QuestionMark && LA125_0<=CommercialAt)||LA125_0==Tilde||LA125_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index125_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA125_1 = input.LA(1);


                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "2326:1: ( ( ( ( norm1_BindingPattern ) )=>VariableBindingParserRuleCall_0= norm3_VariableBinding ) | VariableDeclarationParserRuleCall_1= norm3_VariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA126_0 = input.LA(1);


                        int index126_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA126_0==LeftSquareBracket) && (synpred57_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA126_0>=Intersection && LA126_0<=Implements)||(LA126_0>=Promisify && LA126_0<=Abstract)||LA126_0==External||(LA126_0>=Private && LA126_0<=Project)||LA126_0==Public||LA126_0==Static||LA126_0==Target||(LA126_0>=Await && LA126_0<=Await_1)||LA126_0==Union||LA126_0==This||LA126_0==From||LA126_0==This_1||(LA126_0>=Type && LA126_0<=Void)||(LA126_0>=Get && LA126_0<=Let)||LA126_0==Set||LA126_0==As||LA126_0==Of||(LA126_0>=QuestionMark && LA126_0<=CommercialAt)||LA126_0==Tilde||LA126_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index126_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA126_1 = input.LA(1);


                        int index126_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index126_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "2345:1: ( ( ( ( ruleBindingPattern ) )=>VariableBindingParserRuleCall_0= norm4_VariableBinding ) | VariableDeclarationParserRuleCall_1= ruleVariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA127_0 = input.LA(1);


                        int index127_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA127_0==LeftSquareBracket) && (synpred58_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA127_0>=Intersection && LA127_0<=Implements)||(LA127_0>=Promisify && LA127_0<=Abstract)||LA127_0==External||(LA127_0>=Private && LA127_0<=Project)||LA127_0==Public||LA127_0==Static||LA127_0==Target||(LA127_0>=Await && LA127_0<=Await_1)||LA127_0==Union||(LA127_0>=Yield && LA127_0<=This)||LA127_0==From||LA127_0==This_1||(LA127_0>=Type && LA127_0<=Void)||(LA127_0>=Get && LA127_0<=Let)||LA127_0==Set||LA127_0==As||LA127_0==Of||(LA127_0>=QuestionMark && LA127_0<=CommercialAt)||LA127_0==Tilde||LA127_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index127_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA127_1 = input.LA(1);


                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "2366:1: ( ( ( ( norm1_BindingPattern ) )=>VariableBindingParserRuleCall_0= norm6_VariableBinding ) | VariableDeclarationParserRuleCall_1= norm2_VariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA128_0 = input.LA(1);


                        int index128_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA128_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA128_0==LeftSquareBracket) && (synpred59_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA128_0>=Intersection && LA128_0<=Implements)||(LA128_0>=Promisify && LA128_0<=Abstract)||LA128_0==External||(LA128_0>=Private && LA128_0<=Project)||LA128_0==Public||LA128_0==Static||LA128_0==Target||(LA128_0>=Await && LA128_0<=Await_1)||LA128_0==Union||LA128_0==This||LA128_0==From||LA128_0==This_1||(LA128_0>=Type && LA128_0<=Void)||(LA128_0>=Get && LA128_0<=Let)||LA128_0==Set||LA128_0==As||LA128_0==Of||(LA128_0>=QuestionMark && LA128_0<=CommercialAt)||LA128_0==Tilde||LA128_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index128_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA128_1 = input.LA(1);


                        int index128_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index128_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\45\uffff";
    static final String dfa_103s = "\1\4\37\0\5\uffff";
    static final String dfa_104s = "\1\176\37\0\5\uffff";
    static final String dfa_105s = "\40\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String dfa_106s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\5\uffff}>";
    static final String[] dfa_107s = {
            "\1\16\1\12\1\33\1\uffff\1\5\1\34\1\36\1\26\2\uffff\1\25\4\uffff\1\35\1\24\3\uffff\1\37\1\uffff\1\27\1\uffff\1\6\1\uffff\1\3\1\4\7\uffff\1\15\1\uffff\1\20\1\2\3\uffff\1\31\1\uffff\1\11\1\uffff\1\13\1\1\7\uffff\1\21\1\23\1\uffff\1\22\23\uffff\1\30\3\uffff\1\32\22\uffff\1\17\4\uffff\1\14\2\uffff\1\10\14\uffff\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "2655:3: ( ( ( ( ( ( ({...}?) ) ( ( ruleBindingIdentifier ) ) EqualsSign ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_0_0_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_0_0_0_1_0= ruleBindingIdentifier ) ) EqualsSignKeyword_1_0_0_0_2= EqualsSign ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= ruleAssignmentExpression ) ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) ( EqualsSign | Colon ) ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_1_0_0_0= ruleBindingIdentifier ) ) ( ( EqualsSign | Colon )=> ( (EqualsSignKeyword_1_1_0_1_0_0_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_0_1_0= ruleAssignmentExpression ) ) ) | (TypeScriptTypeRefParserRuleCall_1_1_0_1_0_1_0= ruleTypeScriptTypeRef (EqualsSignKeyword_1_1_0_1_0_1_1_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_1_1_1_0= ruleAssignmentExpression ) ) )? ) ) ) ) ) | ( ( ( ( ({...}?) ) ( ( ruleBindingIdentifier ) ) ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_2_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_2_0_1_0= ruleBindingIdentifier ) ) ) ) | ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_3_0= ruleBindingIdentifier ) ) | ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_4_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_4_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA136_1 = input.LA(1);


                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA136_2 = input.LA(1);


                        int index136_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA136_3 = input.LA(1);


                        int index136_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA136_4 = input.LA(1);


                        int index136_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA136_5 = input.LA(1);


                        int index136_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA136_6 = input.LA(1);


                        int index136_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA136_7 = input.LA(1);


                        int index136_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA136_8 = input.LA(1);


                        int index136_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA136_9 = input.LA(1);


                        int index136_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA136_10 = input.LA(1);


                        int index136_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA136_11 = input.LA(1);


                        int index136_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA136_12 = input.LA(1);


                        int index136_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA136_13 = input.LA(1);


                        int index136_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA136_14 = input.LA(1);


                        int index136_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA136_15 = input.LA(1);


                        int index136_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred71_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index136_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA136_16 = input.LA(1);


                        int index136_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA136_17 = input.LA(1);


                        int index136_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA136_18 = input.LA(1);


                        int index136_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA136_19 = input.LA(1);


                        int index136_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA136_20 = input.LA(1);


                        int index136_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA136_21 = input.LA(1);


                        int index136_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA136_22 = input.LA(1);


                        int index136_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA136_23 = input.LA(1);


                        int index136_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA136_24 = input.LA(1);


                        int index136_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA136_25 = input.LA(1);


                        int index136_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA136_26 = input.LA(1);


                        int index136_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA136_27 = input.LA(1);


                        int index136_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA136_28 = input.LA(1);


                        int index136_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA136_29 = input.LA(1);


                        int index136_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA136_30 = input.LA(1);


                        int index136_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 :
                        int LA136_31 = input.LA(1);


                        int index136_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred72_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index136_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "2756:3: ( ( ( ( ( ( ({...}?) ) ( ( ruleBindingIdentifier ) ) EqualsSign ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_0_0_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_0_0_0_1_0= ruleBindingIdentifier ) ) EqualsSignKeyword_1_0_0_0_2= EqualsSign ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) ( EqualsSign | Colon ) ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_1_0_0_0= ruleBindingIdentifier ) ) ( ( EqualsSign | Colon )=> ( (EqualsSignKeyword_1_1_0_1_0_0_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_0_1_0= norm1_AssignmentExpression ) ) ) | (TypeScriptTypeRefParserRuleCall_1_1_0_1_0_1_0= ruleTypeScriptTypeRef (EqualsSignKeyword_1_1_0_1_0_1_1_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_1_1_1_0= norm1_AssignmentExpression ) ) )? ) ) ) ) ) | ( ( ( ( ({...}?) ) ( ( ruleBindingIdentifier ) ) ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_2_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_2_0_1_0= ruleBindingIdentifier ) ) ) ) | ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_3_0= ruleBindingIdentifier ) ) | ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_4_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_4_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA140_1 = input.LA(1);


                        int index140_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA140_2 = input.LA(1);


                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA140_3 = input.LA(1);


                        int index140_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA140_4 = input.LA(1);


                        int index140_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA140_5 = input.LA(1);


                        int index140_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA140_6 = input.LA(1);


                        int index140_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA140_7 = input.LA(1);


                        int index140_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA140_8 = input.LA(1);


                        int index140_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA140_9 = input.LA(1);


                        int index140_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA140_10 = input.LA(1);


                        int index140_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA140_11 = input.LA(1);


                        int index140_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA140_12 = input.LA(1);


                        int index140_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA140_13 = input.LA(1);


                        int index140_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA140_14 = input.LA(1);


                        int index140_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA140_15 = input.LA(1);


                        int index140_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred76_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}


                        input.seek(index140_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA140_16 = input.LA(1);


                        int index140_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA140_17 = input.LA(1);


                        int index140_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA140_18 = input.LA(1);


                        int index140_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA140_19 = input.LA(1);


                        int index140_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA140_20 = input.LA(1);


                        int index140_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA140_21 = input.LA(1);


                        int index140_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA140_22 = input.LA(1);


                        int index140_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA140_23 = input.LA(1);


                        int index140_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA140_24 = input.LA(1);


                        int index140_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA140_25 = input.LA(1);


                        int index140_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA140_26 = input.LA(1);


                        int index140_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA140_27 = input.LA(1);


                        int index140_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA140_28 = input.LA(1);


                        int index140_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA140_29 = input.LA(1);


                        int index140_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA140_30 = input.LA(1);


                        int index140_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 :
                        int LA140_31 = input.LA(1);


                        int index140_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 35;}

                        else if ( (synpred77_InternalN4JSParser()) ) {s = 36;}


                        input.seek(index140_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_108s = "\44\uffff";
    static final String dfa_109s = "\1\4\36\0\5\uffff";
    static final String dfa_110s = "\1\176\36\0\5\uffff";
    static final String dfa_111s = "\37\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String dfa_112s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\5\uffff}>";
    static final String[] dfa_113s = {
            "\1\16\1\12\1\32\1\uffff\1\5\1\33\1\35\1\25\2\uffff\1\24\4\uffff\1\34\1\23\3\uffff\1\36\1\uffff\1\26\1\uffff\1\6\1\uffff\1\3\1\4\7\uffff\1\15\2\uffff\1\2\3\uffff\1\30\1\uffff\1\11\1\uffff\1\13\1\1\7\uffff\1\20\1\22\1\uffff\1\21\23\uffff\1\27\3\uffff\1\31\22\uffff\1\17\4\uffff\1\14\2\uffff\1\10\14\uffff\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final char[] dfa_109 = DFA.unpackEncodedStringToUnsignedChars(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[][] dfa_113 = unpackEncodedStringArray(dfa_113s);

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "2857:3: ( ( ( ( ( ( ({...}?) ) ( ( norm1_BindingIdentifier ) ) EqualsSign ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_0_0_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_0_0_0_1_0= norm1_BindingIdentifier ) ) EqualsSignKeyword_1_0_0_0_2= EqualsSign ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm2_AssignmentExpression ) ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) ( EqualsSign | Colon ) ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_1_0_0_0= norm1_BindingIdentifier ) ) ( ( EqualsSign | Colon )=> ( (EqualsSignKeyword_1_1_0_1_0_0_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_0_1_0= norm2_AssignmentExpression ) ) ) | (TypeScriptTypeRefParserRuleCall_1_1_0_1_0_1_0= ruleTypeScriptTypeRef (EqualsSignKeyword_1_1_0_1_0_1_1_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_1_1_1_0= norm2_AssignmentExpression ) ) )? ) ) ) ) ) | ( ( ( ( ({...}?) ) ( ( norm1_BindingIdentifier ) ) ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_2_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_2_0_1_0= norm1_BindingIdentifier ) ) ) ) | ( ( ( norm1_BindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_3_0= norm1_BindingIdentifier ) ) | ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_4_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_4_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA144_1 = input.LA(1);


                        int index144_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA144_2 = input.LA(1);


                        int index144_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA144_3 = input.LA(1);


                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA144_4 = input.LA(1);


                        int index144_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA144_5 = input.LA(1);


                        int index144_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA144_6 = input.LA(1);


                        int index144_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA144_7 = input.LA(1);


                        int index144_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA144_8 = input.LA(1);


                        int index144_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA144_9 = input.LA(1);


                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA144_10 = input.LA(1);


                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA144_11 = input.LA(1);


                        int index144_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA144_12 = input.LA(1);


                        int index144_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA144_13 = input.LA(1);


                        int index144_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA144_14 = input.LA(1);


                        int index144_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA144_15 = input.LA(1);


                        int index144_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred81_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index144_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA144_16 = input.LA(1);


                        int index144_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA144_17 = input.LA(1);


                        int index144_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA144_18 = input.LA(1);


                        int index144_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA144_19 = input.LA(1);


                        int index144_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA144_20 = input.LA(1);


                        int index144_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA144_21 = input.LA(1);


                        int index144_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA144_22 = input.LA(1);


                        int index144_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA144_23 = input.LA(1);


                        int index144_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA144_24 = input.LA(1);


                        int index144_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA144_25 = input.LA(1);


                        int index144_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA144_26 = input.LA(1);


                        int index144_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA144_27 = input.LA(1);


                        int index144_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA144_28 = input.LA(1);


                        int index144_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA144_29 = input.LA(1);


                        int index144_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA144_30 = input.LA(1);


                        int index144_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred79_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred82_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index144_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "2958:3: ( ( ( ( ( ( ({...}?) ) ( ( norm1_BindingIdentifier ) ) EqualsSign ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_0_0_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_0_0_0_1_0= norm1_BindingIdentifier ) ) EqualsSignKeyword_1_0_0_0_2= EqualsSign ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) ( EqualsSign | Colon ) ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_1_0_0_0= norm1_BindingIdentifier ) ) ( ( EqualsSign | Colon )=> ( (EqualsSignKeyword_1_1_0_1_0_0_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_0_1_0= norm3_AssignmentExpression ) ) ) | (TypeScriptTypeRefParserRuleCall_1_1_0_1_0_1_0= ruleTypeScriptTypeRef (EqualsSignKeyword_1_1_0_1_0_1_1_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_1_0_1_0_1_1_1_0= norm3_AssignmentExpression ) ) )? ) ) ) ) ) | ( ( ( ( ({...}?) ) ( ( norm1_BindingIdentifier ) ) ) )=> ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_2_0_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_2_0_1_0= norm1_BindingIdentifier ) ) ) ) | ( ( ( norm1_BindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_3_0= norm1_BindingIdentifier ) ) | ( ( (DeclaredTypeRefTypeRefNoTrailingLineBreakParserRuleCall_1_4_0_0= ruleTypeRefNoTrailingLineBreak ) ) ( (NameBindingIdentifierParserRuleCall_1_4_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA148_1 = input.LA(1);


                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA148_2 = input.LA(1);


                        int index148_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA148_3 = input.LA(1);


                        int index148_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA148_4 = input.LA(1);


                        int index148_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA148_5 = input.LA(1);


                        int index148_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA148_6 = input.LA(1);


                        int index148_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA148_7 = input.LA(1);


                        int index148_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA148_8 = input.LA(1);


                        int index148_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA148_9 = input.LA(1);


                        int index148_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA148_10 = input.LA(1);


                        int index148_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA148_11 = input.LA(1);


                        int index148_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA148_12 = input.LA(1);


                        int index148_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA148_13 = input.LA(1);


                        int index148_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA148_14 = input.LA(1);


                        int index148_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA148_15 = input.LA(1);


                        int index148_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred83_InternalN4JSParser()) ) {s = 31;}

                        else if ( (synpred86_InternalN4JSParser()) ) {s = 32;}

                        else if ( (true) ) {s = 33;}


                        input.seek(index148_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA148_16 = input.LA(1);


                        int index148_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA148_17 = input.LA(1);


                        int index148_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA148_18 = input.LA(1);


                        int index148_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA148_19 = input.LA(1);


                        int index148_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA148_20 = input.LA(1);


                        int index148_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA148_21 = input.LA(1);


                        int index148_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA148_22 = input.LA(1);


                        int index148_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA148_23 = input.LA(1);


                        int index148_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA148_24 = input.LA(1);


                        int index148_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA148_25 = input.LA(1);


                        int index148_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA148_26 = input.LA(1);


                        int index148_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA148_27 = input.LA(1);


                        int index148_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA148_28 = input.LA(1);


                        int index148_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA148_29 = input.LA(1);


                        int index148_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA148_30 = input.LA(1);


                        int index148_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalN4JSParser()) ) {s = 34;}

                        else if ( (synpred87_InternalN4JSParser()) ) {s = 35;}


                        input.seek(index148_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "3061:1: ( ( ( ( ruleBindingPattern ) )=>ExportedVariableBindingParserRuleCall_0= ruleExportedVariableBinding ) | ExportedVariableDeclarationParserRuleCall_1= ruleExportedVariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA149_0 = input.LA(1);


                        int index149_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA149_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA149_0==LeftSquareBracket) && (synpred88_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA149_0>=Intersection && LA149_0<=Implements)||(LA149_0>=Promisify && LA149_0<=Abstract)||LA149_0==External||(LA149_0>=Private && LA149_0<=Project)||LA149_0==Public||LA149_0==Static||LA149_0==Target||(LA149_0>=Await && LA149_0<=Await_1)||LA149_0==Union||(LA149_0>=Yield && LA149_0<=This)||LA149_0==From||LA149_0==This_1||(LA149_0>=Type && LA149_0<=Void)||(LA149_0>=Get && LA149_0<=Let)||LA149_0==Set||LA149_0==As||LA149_0==Of||(LA149_0>=QuestionMark && LA149_0<=CommercialAt)||LA149_0==Tilde||LA149_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index149_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA149_1 = input.LA(1);


                        int index149_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index149_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "3080:1: ( ( ( ( norm1_BindingPattern ) )=>ExportedVariableBindingParserRuleCall_0= norm1_ExportedVariableBinding ) | ExportedVariableDeclarationParserRuleCall_1= norm1_ExportedVariableDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA150_0 = input.LA(1);


                        int index150_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA150_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA150_0==LeftSquareBracket) && (synpred89_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA150_0>=Intersection && LA150_0<=Implements)||(LA150_0>=Promisify && LA150_0<=Abstract)||LA150_0==External||(LA150_0>=Private && LA150_0<=Project)||LA150_0==Public||LA150_0==Static||LA150_0==Target||(LA150_0>=Await && LA150_0<=Await_1)||LA150_0==Union||LA150_0==This||LA150_0==From||LA150_0==This_1||(LA150_0>=Type && LA150_0<=Void)||(LA150_0>=Get && LA150_0<=Let)||LA150_0==Set||LA150_0==As||LA150_0==Of||(LA150_0>=QuestionMark && LA150_0<=CommercialAt)||LA150_0==Tilde||LA150_0==RULE_IDENTIFIER) ) {s = 3;}


                        input.seek(index150_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA150_1 = input.LA(1);


                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}


                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_114s = "\1\0\1\4\1\2\2\uffff\1\1\1\uffff\1\3\123\uffff}>";
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_114;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "3368:157: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA155_0 = input.LA(1);


                        int index155_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_0==Semicolon) ) {s = 1;}

                        else if ( (LA155_0==EOF) ) {s = 2;}

                        else if ( (LA155_0==RULE_EOL) && (synpred94_InternalN4JSParser())) {s = 3;}

                        else if ( (LA155_0==RULE_ML_COMMENT) && (synpred94_InternalN4JSParser())) {s = 4;}

                        else if ( (LA155_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA155_0>=Intersection && LA155_0<=Implements)||(LA155_0>=Promisify && LA155_0<=Default)||(LA155_0>=Private && LA155_0<=Break)||(LA155_0>=Class && LA155_0<=With)||(LA155_0>=For && LA155_0<=Var)||LA155_0==PlusSignPlusSign||LA155_0==HyphenMinusHyphenMinus||LA155_0==SolidusEqualsSign||(LA155_0>=As && LA155_0<=If)||LA155_0==Of||LA155_0==ExclamationMark||LA155_0==LeftParenthesis||LA155_0==PlusSign||LA155_0==HyphenMinus||LA155_0==Solidus||LA155_0==LessThanSign||(LA155_0>=CommercialAt && LA155_0<=LeftSquareBracket)||LA155_0==LeftCurlyBracket||LA155_0==Tilde||LA155_0==RULE_DOUBLE||(LA155_0>=RULE_HEX_INT && LA155_0<=RULE_LEGACY_OCTAL_INT)||LA155_0==RULE_SCIENTIFIC_INT||LA155_0==RULE_IDENTIFIER||LA155_0==RULE_STRING||(LA155_0>=RULE_TEMPLATE_HEAD && LA155_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA155_0==RULE_INT) ) {s = 6;}


                        input.seek(index155_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA155_5 = input.LA(1);


                        int index155_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_InternalN4JSParser()) ) {s = 89;}

                        else if ( (true) ) {s = 6;}


                        input.seek(index155_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA155_2 = input.LA(1);


                        int index155_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_2==EOF) ) {s = 7;}

                        else if ( (LA155_2==CommercialAt) && (synpred94_InternalN4JSParser())) {s = 8;}

                        else if ( (LA155_2==Private) && (synpred94_InternalN4JSParser())) {s = 9;}

                        else if ( (LA155_2==Project) && (synpred94_InternalN4JSParser())) {s = 10;}

                        else if ( (LA155_2==Protected) && (synpred94_InternalN4JSParser())) {s = 11;}

                        else if ( (LA155_2==Public) && (synpred94_InternalN4JSParser())) {s = 12;}

                        else if ( (LA155_2==External) && (synpred94_InternalN4JSParser())) {s = 13;}

                        else if ( (LA155_2==Abstract) && (synpred94_InternalN4JSParser())) {s = 14;}

                        else if ( (LA155_2==Static) && (synpred94_InternalN4JSParser())) {s = 15;}

                        else if ( (LA155_2==Const) && (synpred94_InternalN4JSParser())) {s = 16;}

                        else if ( (LA155_2==Class) && (synpred94_InternalN4JSParser())) {s = 17;}

                        else if ( (LA155_2==Interface) && (synpred94_InternalN4JSParser())) {s = 18;}

                        else if ( (LA155_2==Enum) && (synpred94_InternalN4JSParser())) {s = 19;}

                        else if ( (LA155_2==Import) && (synpred94_InternalN4JSParser())) {s = 20;}

                        else if ( (LA155_2==Export) && (synpred94_InternalN4JSParser())) {s = 21;}

                        else if ( (LA155_2==LeftCurlyBracket) && (synpred94_InternalN4JSParser())) {s = 22;}

                        else if ( (LA155_2==Function) && (synpred94_InternalN4JSParser())) {s = 23;}

                        else if ( (LA155_2==Var) && (synpred94_InternalN4JSParser())) {s = 24;}

                        else if ( (LA155_2==Let) && (synpred94_InternalN4JSParser())) {s = 25;}

                        else if ( (LA155_2==Semicolon) && (synpred94_InternalN4JSParser())) {s = 26;}

                        else if ( (LA155_2==RULE_IDENTIFIER) && (synpred94_InternalN4JSParser())) {s = 27;}

                        else if ( (LA155_2==Yield) && (synpred94_InternalN4JSParser())) {s = 28;}

                        else if ( (LA155_2==Get) && (synpred94_InternalN4JSParser())) {s = 29;}

                        else if ( (LA155_2==Set) && (synpred94_InternalN4JSParser())) {s = 30;}

                        else if ( (LA155_2==As) && (synpred94_InternalN4JSParser())) {s = 31;}

                        else if ( (LA155_2==From) && (synpred94_InternalN4JSParser())) {s = 32;}

                        else if ( (LA155_2==Constructor) && (synpred94_InternalN4JSParser())) {s = 33;}

                        else if ( (LA155_2==Of) && (synpred94_InternalN4JSParser())) {s = 34;}

                        else if ( (LA155_2==Target) && (synpred94_InternalN4JSParser())) {s = 35;}

                        else if ( (LA155_2==Type) && (synpred94_InternalN4JSParser())) {s = 36;}

                        else if ( (LA155_2==Union) && (synpred94_InternalN4JSParser())) {s = 37;}

                        else if ( (LA155_2==Intersection) && (synpred94_InternalN4JSParser())) {s = 38;}

                        else if ( (LA155_2==This) && (synpred94_InternalN4JSParser())) {s = 39;}

                        else if ( (LA155_2==Await) && (synpred94_InternalN4JSParser())) {s = 40;}

                        else if ( (LA155_2==Promisify) && (synpred94_InternalN4JSParser())) {s = 41;}

                        else if ( (LA155_2==Await_1) && (synpred94_InternalN4JSParser())) {s = 42;}

                        else if ( (LA155_2==Implements) && (synpred94_InternalN4JSParser())) {s = 43;}

                        else if ( (LA155_2==LeftParenthesis) && (synpred94_InternalN4JSParser())) {s = 44;}

                        else if ( (LA155_2==New) && (synpred94_InternalN4JSParser())) {s = 45;}

                        else if ( (LA155_2==This_1) && (synpred94_InternalN4JSParser())) {s = 46;}

                        else if ( (LA155_2==Super) && (synpred94_InternalN4JSParser())) {s = 47;}

                        else if ( (LA155_2==LessThanSign) && (synpred94_InternalN4JSParser())) {s = 48;}

                        else if ( (LA155_2==RULE_DOUBLE) && (synpred94_InternalN4JSParser())) {s = 49;}

                        else if ( (LA155_2==RULE_INT) && (synpred94_InternalN4JSParser())) {s = 50;}

                        else if ( (LA155_2==RULE_BINARY_INT) && (synpred94_InternalN4JSParser())) {s = 51;}

                        else if ( (LA155_2==RULE_OCTAL_INT) && (synpred94_InternalN4JSParser())) {s = 52;}

                        else if ( (LA155_2==RULE_LEGACY_OCTAL_INT) && (synpred94_InternalN4JSParser())) {s = 53;}

                        else if ( (LA155_2==RULE_HEX_INT) && (synpred94_InternalN4JSParser())) {s = 54;}

                        else if ( (LA155_2==RULE_SCIENTIFIC_INT) && (synpred94_InternalN4JSParser())) {s = 55;}

                        else if ( (LA155_2==True) && (synpred94_InternalN4JSParser())) {s = 56;}

                        else if ( (LA155_2==False) && (synpred94_InternalN4JSParser())) {s = 57;}

                        else if ( (LA155_2==RULE_STRING) && (synpred94_InternalN4JSParser())) {s = 58;}

                        else if ( (LA155_2==Null) && (synpred94_InternalN4JSParser())) {s = 59;}

                        else if ( (LA155_2==Solidus) && (synpred94_InternalN4JSParser())) {s = 60;}

                        else if ( (LA155_2==SolidusEqualsSign) && (synpred94_InternalN4JSParser())) {s = 61;}

                        else if ( (LA155_2==LeftSquareBracket) && (synpred94_InternalN4JSParser())) {s = 62;}

                        else if ( (LA155_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred94_InternalN4JSParser())) {s = 63;}

                        else if ( (LA155_2==RULE_TEMPLATE_HEAD) && (synpred94_InternalN4JSParser())) {s = 64;}

                        else if ( (LA155_2==Delete) && (synpred94_InternalN4JSParser())) {s = 65;}

                        else if ( (LA155_2==Void) && (synpred94_InternalN4JSParser())) {s = 66;}

                        else if ( (LA155_2==Typeof) && (synpred94_InternalN4JSParser())) {s = 67;}

                        else if ( (LA155_2==PlusSignPlusSign) && (synpred94_InternalN4JSParser())) {s = 68;}

                        else if ( (LA155_2==HyphenMinusHyphenMinus) && (synpred94_InternalN4JSParser())) {s = 69;}

                        else if ( (LA155_2==PlusSign) && (synpred94_InternalN4JSParser())) {s = 70;}

                        else if ( (LA155_2==HyphenMinus) && (synpred94_InternalN4JSParser())) {s = 71;}

                        else if ( (LA155_2==Tilde) && (synpred94_InternalN4JSParser())) {s = 72;}

                        else if ( (LA155_2==ExclamationMark) && (synpred94_InternalN4JSParser())) {s = 73;}

                        else if ( (LA155_2==If) && (synpred94_InternalN4JSParser())) {s = 74;}

                        else if ( (LA155_2==Do) && (synpred94_InternalN4JSParser())) {s = 75;}

                        else if ( (LA155_2==While) && (synpred94_InternalN4JSParser())) {s = 76;}

                        else if ( (LA155_2==For) && (synpred94_InternalN4JSParser())) {s = 77;}

                        else if ( (LA155_2==Continue) && (synpred94_InternalN4JSParser())) {s = 78;}

                        else if ( (LA155_2==Break) && (synpred94_InternalN4JSParser())) {s = 79;}

                        else if ( (LA155_2==Return) && (synpred94_InternalN4JSParser())) {s = 80;}

                        else if ( (LA155_2==With) && (synpred94_InternalN4JSParser())) {s = 81;}

                        else if ( (LA155_2==Switch) && (synpred94_InternalN4JSParser())) {s = 82;}

                        else if ( (LA155_2==Throw) && (synpred94_InternalN4JSParser())) {s = 83;}

                        else if ( (LA155_2==Try) && (synpred94_InternalN4JSParser())) {s = 84;}

                        else if ( (LA155_2==Debugger) && (synpred94_InternalN4JSParser())) {s = 85;}

                        else if ( (LA155_2==RightCurlyBracket) && (synpred94_InternalN4JSParser())) {s = 86;}

                        else if ( (LA155_2==Else) && (synpred94_InternalN4JSParser())) {s = 87;}

                        else if ( (LA155_2==Default) && (synpred94_InternalN4JSParser())) {s = 88;}

                        else if ( (LA155_2==Case) && (synpred94_InternalN4JSParser())) {s = 89;}


                        input.seek(index155_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA155_7 = input.LA(1);


                        int index155_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_7==EOF) && (synpred94_InternalN4JSParser())) {s = 90;}


                        input.seek(index155_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA155_1 = input.LA(1);


                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}


                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_115s = "\101\uffff";
    static final String dfa_116s = "\1\4\1\0\77\uffff";
    static final String dfa_117s = "\1\u0094\1\0\77\uffff";
    static final String dfa_118s = "\2\uffff\1\2\75\uffff\1\1";
    static final String dfa_119s = "\1\uffff\1\0\77\uffff}>";
    static final String[] dfa_120s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\7\uffff\1\2\1\1\2\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            ""
    };

    static final short[] dfa_115 = DFA.unpackEncodedString(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[][] dfa_120 = unpackEncodedStringArray(dfa_120s);

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "3466:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( CommercialAt | Await_1 | LeftParenthesis | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( CommercialAt | Await_1 | LeftParenthesis | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA174_1 = input.LA(1);


                        int index174_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index174_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_121s = "\1\4\2\uffff\1\0\74\uffff";
    static final String dfa_122s = "\1\u0094\2\uffff\1\0\74\uffff";
    static final String dfa_123s = "\1\uffff\2\1\1\uffff\1\2\72\uffff\1\3";
    static final String dfa_124s = "\1\0\2\uffff\1\1\74\uffff}>";
    static final String[] dfa_125s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\7\uffff\1\4\1\3\2\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\77\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            "\1\uffff",
            ""
    };
    static final char[] dfa_121 = DFA.unpackEncodedStringToUnsignedChars(dfa_121s);
    static final char[] dfa_122 = DFA.unpackEncodedStringToUnsignedChars(dfa_122s);
    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final short[] dfa_124 = DFA.unpackEncodedString(dfa_124s);
    static final short[][] dfa_125 = unpackEncodedStringArray(dfa_125s);

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_121;
            this.max = dfa_122;
            this.accept = dfa_123;
            this.special = dfa_124;
            this.transition = dfa_125;
        }
        public String getDescription() {
            return "3497:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( CommercialAt | Await_1 | LeftParenthesis | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( CommercialAt | Await_1 | LeftParenthesis | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA173_0 = input.LA(1);


                        int index173_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA173_0==Var) && (synpred97_InternalN4JSParser())) {s = 1;}

                        else if ( (LA173_0==Const) && (synpred97_InternalN4JSParser())) {s = 2;}

                        else if ( (LA173_0==Let) ) {s = 3;}

                        else if ( ((LA173_0>=Intersection && LA173_0<=Implements)||(LA173_0>=Promisify && LA173_0<=Abstract)||(LA173_0>=External && LA173_0<=Function)||(LA173_0>=Private && LA173_0<=Delete)||LA173_0==Public||LA173_0==Static||(LA173_0>=Target && LA173_0<=Await_1)||LA173_0==Class||(LA173_0>=False && LA173_0<=Super)||LA173_0==Union||(LA173_0>=Yield && LA173_0<=This)||(LA173_0>=From && LA173_0<=Void)||LA173_0==Get||(LA173_0>=New && LA173_0<=Set)||LA173_0==PlusSignPlusSign||LA173_0==HyphenMinusHyphenMinus||LA173_0==SolidusEqualsSign||LA173_0==As||LA173_0==Of||LA173_0==ExclamationMark||LA173_0==LeftParenthesis||LA173_0==PlusSign||LA173_0==HyphenMinus||LA173_0==Solidus||LA173_0==LessThanSign||(LA173_0>=CommercialAt && LA173_0<=LeftSquareBracket)||LA173_0==LeftCurlyBracket||LA173_0==Tilde||LA173_0==RULE_DOUBLE||(LA173_0>=RULE_HEX_INT && LA173_0<=RULE_LEGACY_OCTAL_INT)||LA173_0==RULE_SCIENTIFIC_INT||LA173_0==RULE_IDENTIFIER||LA173_0==RULE_STRING||(LA173_0>=RULE_TEMPLATE_HEAD && LA173_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA173_0==RULE_INT) ) {s = 4;}

                        else if ( (LA173_0==Semicolon) ) {s = 63;}


                        input.seek(index173_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA173_3 = input.LA(1);


                        int index173_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}


                        input.seek(index173_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_126s = "\40\uffff";
    static final String dfa_127s = "\2\4\14\125\1\4\3\125\4\4\5\125\1\uffff\3\0\1\uffff";
    static final String dfa_128s = "\2\176\12\147\1\156\1\147\1\176\3\156\4\176\5\147\1\uffff\3\0\1\uffff";
    static final String dfa_129s = "\33\uffff\1\2\3\uffff\1\1";
    static final String dfa_130s = "\34\uffff\1\1\1\2\1\0\1\uffff}>";
    static final String[] dfa_131s = {
            "\1\21\1\14\1\26\1\uffff\1\24\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\23\1\25\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\33\1\uffff\1\17\1\33\7\uffff\1\3\1\5\1\uffff\1\4\23\uffff\1\12\3\uffff\1\15\22\uffff\3\33\2\uffff\1\33\2\uffff\1\33\14\uffff\1\1",
            "\3\33\1\uffff\4\33\2\uffff\1\33\4\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\2\33\7\uffff\1\33\1\uffff\2\33\3\uffff\1\33\3\uffff\1\33\10\uffff\2\33\1\uffff\1\33\23\uffff\1\33\2\uffff\1\35\1\34\10\uffff\2\33\1\uffff\1\33\1\uffff\4\33\1\uffff\1\33\24\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33\6\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\3\33\1\uffff\4\33\2\uffff\1\33\4\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\2\33\7\uffff\1\33\1\uffff\2\33\3\uffff\1\33\3\uffff\1\33\10\uffff\2\33\1\uffff\1\33\23\uffff\1\33\2\uffff\1\35\1\34\10\uffff\2\33\3\uffff\4\33\1\uffff\1\33\24\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33\6\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33\6\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33\6\uffff\1\33",
            "\3\33\1\uffff\4\33\2\uffff\1\33\4\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\2\33\7\uffff\1\33\1\uffff\2\33\3\uffff\1\33\3\uffff\1\33\10\uffff\2\33\1\uffff\1\33\23\uffff\1\33\2\uffff\1\35\1\34\10\uffff\2\33\3\uffff\4\33\1\uffff\1\33\24\uffff\1\33",
            "\3\33\1\uffff\4\33\2\uffff\1\33\4\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\2\33\7\uffff\1\33\1\uffff\2\33\3\uffff\1\33\3\uffff\1\33\10\uffff\2\33\1\uffff\1\33\23\uffff\1\33\2\uffff\1\35\1\34\10\uffff\2\33\3\uffff\4\33\1\uffff\1\33\24\uffff\1\33",
            "\3\33\1\uffff\4\33\2\uffff\1\33\4\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\2\33\7\uffff\1\33\1\uffff\2\33\3\uffff\1\33\3\uffff\1\33\10\uffff\2\33\1\uffff\1\33\23\uffff\1\33\2\uffff\1\35\1\34\10\uffff\2\33\3\uffff\4\33\1\uffff\1\33\24\uffff\1\33",
            "\3\33\1\uffff\4\33\2\uffff\1\33\4\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\2\33\7\uffff\1\33\1\uffff\2\33\3\uffff\1\33\3\uffff\1\33\10\uffff\2\33\1\uffff\1\33\23\uffff\1\33\2\uffff\1\35\1\34\10\uffff\2\33\3\uffff\4\33\1\uffff\1\33\24\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\35\1\36\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final char[] dfa_128 = DFA.unpackEncodedStringToUnsignedChars(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final short[][] dfa_131 = unpackEncodedStringArray(dfa_131s);

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = dfa_126;
            this.eof = dfa_126;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "3504:2: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( CommercialAt | Await_1 | LeftParenthesis | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( CommercialAt | Await_1 | LeftParenthesis | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA165_30 = input.LA(1);


                        int index165_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}


                        input.seek(index165_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA165_28 = input.LA(1);


                        int index165_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}


                        input.seek(index165_28);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA165_29 = input.LA(1);


                        int index165_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 27;}


                        input.seek(index165_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_132s = "\1\4\75\uffff";
    static final String dfa_133s = "\1\u0094\75\uffff";
    static final String dfa_134s = "\1\uffff\74\1\1\2";
    static final String dfa_135s = "\1\0\75\uffff}>";
    static final String[] dfa_136s = {
            "\1\24\1\17\1\30\1\uffff\1\27\1\31\1\33\1\13\2\uffff\1\12\1\60\3\uffff\1\32\1\11\1\64\2\uffff\1\34\1\uffff\1\14\1\uffff\1\21\1\66\1\26\1\2\2\uffff\1\61\1\uffff\1\51\1\37\1\uffff\1\23\1\uffff\1\5\1\25\3\uffff\1\16\1\53\1\36\1\50\1\22\1\65\7\uffff\1\6\1\10\1\35\1\7\7\uffff\1\67\1\uffff\1\70\1\uffff\1\55\7\uffff\1\15\3\uffff\1\20\2\uffff\1\74\2\uffff\1\3\1\75\1\uffff\1\71\1\uffff\1\72\1\uffff\1\54\2\uffff\1\40\3\uffff\1\1\1\56\2\uffff\1\57\2\uffff\1\73\3\uffff\1\41\1\uffff\1\46\1\43\1\44\1\45\1\uffff\1\47\1\uffff\1\4\2\uffff\1\52\11\uffff\1\63\1\62\7\uffff\1\42",
            ""
    };
    static final char[] dfa_132 = DFA.unpackEncodedStringToUnsignedChars(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final short[] dfa_134 = DFA.unpackEncodedString(dfa_134s);
    static final short[] dfa_135 = DFA.unpackEncodedString(dfa_135s);
    static final short[][] dfa_136 = unpackEncodedStringArray(dfa_136s);

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_132;
            this.max = dfa_133;
            this.accept = dfa_134;
            this.special = dfa_135;
            this.transition = dfa_136;
        }
        public String getDescription() {
            return "3646:3: ( ( CommercialAt | Await_1 | LeftParenthesis | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA158_0 = input.LA(1);


                        int index158_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA158_0==CommercialAt) && (synpred99_InternalN4JSParser())) {s = 1;}

                        else if ( (LA158_0==Await_1) && (synpred99_InternalN4JSParser())) {s = 2;}

                        else if ( (LA158_0==LeftParenthesis) && (synpred99_InternalN4JSParser())) {s = 3;}

                        else if ( (LA158_0==RULE_IDENTIFIER) && (synpred99_InternalN4JSParser())) {s = 4;}

                        else if ( (LA158_0==Yield) && (synpred99_InternalN4JSParser())) {s = 5;}

                        else if ( (LA158_0==Get) && (synpred99_InternalN4JSParser())) {s = 6;}

                        else if ( (LA158_0==Set) && (synpred99_InternalN4JSParser())) {s = 7;}

                        else if ( (LA158_0==Let) && (synpred99_InternalN4JSParser())) {s = 8;}

                        else if ( (LA158_0==Project) && (synpred99_InternalN4JSParser())) {s = 9;}

                        else if ( (LA158_0==External) && (synpred99_InternalN4JSParser())) {s = 10;}

                        else if ( (LA158_0==Abstract) && (synpred99_InternalN4JSParser())) {s = 11;}

                        else if ( (LA158_0==Static) && (synpred99_InternalN4JSParser())) {s = 12;}

                        else if ( (LA158_0==As) && (synpred99_InternalN4JSParser())) {s = 13;}

                        else if ( (LA158_0==From) && (synpred99_InternalN4JSParser())) {s = 14;}

                        else if ( (LA158_0==Constructor) && (synpred99_InternalN4JSParser())) {s = 15;}

                        else if ( (LA158_0==Of) && (synpred99_InternalN4JSParser())) {s = 16;}

                        else if ( (LA158_0==Target) && (synpred99_InternalN4JSParser())) {s = 17;}

                        else if ( (LA158_0==Type) && (synpred99_InternalN4JSParser())) {s = 18;}

                        else if ( (LA158_0==Union) && (synpred99_InternalN4JSParser())) {s = 19;}

                        else if ( (LA158_0==Intersection) && (synpred99_InternalN4JSParser())) {s = 20;}

                        else if ( (LA158_0==This) && (synpred99_InternalN4JSParser())) {s = 21;}

                        else if ( (LA158_0==Await) && (synpred99_InternalN4JSParser())) {s = 22;}

                        else if ( (LA158_0==Promisify) && (synpred99_InternalN4JSParser())) {s = 23;}

                        else if ( (LA158_0==Implements) && (synpred99_InternalN4JSParser())) {s = 24;}

                        else if ( (LA158_0==Interface) && (synpred99_InternalN4JSParser())) {s = 25;}

                        else if ( (LA158_0==Private) && (synpred99_InternalN4JSParser())) {s = 26;}

                        else if ( (LA158_0==Protected) && (synpred99_InternalN4JSParser())) {s = 27;}

                        else if ( (LA158_0==Public) && (synpred99_InternalN4JSParser())) {s = 28;}

                        else if ( (LA158_0==New) && (synpred99_InternalN4JSParser())) {s = 29;}

                        else if ( (LA158_0==This_1) && (synpred99_InternalN4JSParser())) {s = 30;}

                        else if ( (LA158_0==Super) && (synpred99_InternalN4JSParser())) {s = 31;}

                        else if ( (LA158_0==LessThanSign) && (synpred99_InternalN4JSParser())) {s = 32;}

                        else if ( (LA158_0==RULE_DOUBLE) && (synpred99_InternalN4JSParser())) {s = 33;}

                        else if ( (LA158_0==RULE_INT) && (synpred99_InternalN4JSParser())) {s = 34;}

                        else if ( (LA158_0==RULE_BINARY_INT) && (synpred99_InternalN4JSParser())) {s = 35;}

                        else if ( (LA158_0==RULE_OCTAL_INT) && (synpred99_InternalN4JSParser())) {s = 36;}

                        else if ( (LA158_0==RULE_LEGACY_OCTAL_INT) && (synpred99_InternalN4JSParser())) {s = 37;}

                        else if ( (LA158_0==RULE_HEX_INT) && (synpred99_InternalN4JSParser())) {s = 38;}

                        else if ( (LA158_0==RULE_SCIENTIFIC_INT) && (synpred99_InternalN4JSParser())) {s = 39;}

                        else if ( (LA158_0==True) && (synpred99_InternalN4JSParser())) {s = 40;}

                        else if ( (LA158_0==False) && (synpred99_InternalN4JSParser())) {s = 41;}

                        else if ( (LA158_0==RULE_STRING) && (synpred99_InternalN4JSParser())) {s = 42;}

                        else if ( (LA158_0==Null) && (synpred99_InternalN4JSParser())) {s = 43;}

                        else if ( (LA158_0==Solidus) && (synpred99_InternalN4JSParser())) {s = 44;}

                        else if ( (LA158_0==SolidusEqualsSign) && (synpred99_InternalN4JSParser())) {s = 45;}

                        else if ( (LA158_0==LeftSquareBracket) && (synpred99_InternalN4JSParser())) {s = 46;}

                        else if ( (LA158_0==LeftCurlyBracket) && (synpred99_InternalN4JSParser())) {s = 47;}

                        else if ( (LA158_0==Function) && (synpred99_InternalN4JSParser())) {s = 48;}

                        else if ( (LA158_0==Class) && (synpred99_InternalN4JSParser())) {s = 49;}

                        else if ( (LA158_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred99_InternalN4JSParser())) {s = 50;}

                        else if ( (LA158_0==RULE_TEMPLATE_HEAD) && (synpred99_InternalN4JSParser())) {s = 51;}

                        else if ( (LA158_0==Delete) && (synpred99_InternalN4JSParser())) {s = 52;}

                        else if ( (LA158_0==Void) && (synpred99_InternalN4JSParser())) {s = 53;}

                        else if ( (LA158_0==Typeof) && (synpred99_InternalN4JSParser())) {s = 54;}

                        else if ( (LA158_0==PlusSignPlusSign) && (synpred99_InternalN4JSParser())) {s = 55;}

                        else if ( (LA158_0==HyphenMinusHyphenMinus) && (synpred99_InternalN4JSParser())) {s = 56;}

                        else if ( (LA158_0==PlusSign) && (synpred99_InternalN4JSParser())) {s = 57;}

                        else if ( (LA158_0==HyphenMinus) && (synpred99_InternalN4JSParser())) {s = 58;}

                        else if ( (LA158_0==Tilde) && (synpred99_InternalN4JSParser())) {s = 59;}

                        else if ( (LA158_0==ExclamationMark) && (synpred99_InternalN4JSParser())) {s = 60;}

                        else if ( (LA158_0==RightParenthesis) ) {s = 61;}


                        input.seek(index158_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "3808:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( CommercialAt | Await_1 | LeftParenthesis | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( CommercialAt | Await_1 | LeftParenthesis | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA192_1 = input.LA(1);


                        int index192_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 2;}


                        input.seek(index192_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA191 extends DFA {

        public DFA191(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 191;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_121;
            this.max = dfa_122;
            this.accept = dfa_123;
            this.special = dfa_124;
            this.transition = dfa_125;
        }
        public String getDescription() {
            return "3839:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( CommercialAt | Await_1 | LeftParenthesis | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( CommercialAt | Await_1 | LeftParenthesis | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA191_0 = input.LA(1);


                        int index191_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_0==Var) && (synpred101_InternalN4JSParser())) {s = 1;}

                        else if ( (LA191_0==Const) && (synpred101_InternalN4JSParser())) {s = 2;}

                        else if ( (LA191_0==Let) ) {s = 3;}

                        else if ( ((LA191_0>=Intersection && LA191_0<=Implements)||(LA191_0>=Promisify && LA191_0<=Abstract)||(LA191_0>=External && LA191_0<=Function)||(LA191_0>=Private && LA191_0<=Delete)||LA191_0==Public||LA191_0==Static||(LA191_0>=Target && LA191_0<=Await_1)||LA191_0==Class||(LA191_0>=False && LA191_0<=Super)||LA191_0==Union||(LA191_0>=Yield && LA191_0<=This)||(LA191_0>=From && LA191_0<=Void)||LA191_0==Get||(LA191_0>=New && LA191_0<=Set)||LA191_0==PlusSignPlusSign||LA191_0==HyphenMinusHyphenMinus||LA191_0==SolidusEqualsSign||LA191_0==As||LA191_0==Of||LA191_0==ExclamationMark||LA191_0==LeftParenthesis||LA191_0==PlusSign||LA191_0==HyphenMinus||LA191_0==Solidus||LA191_0==LessThanSign||(LA191_0>=CommercialAt && LA191_0<=LeftSquareBracket)||LA191_0==LeftCurlyBracket||LA191_0==Tilde||LA191_0==RULE_DOUBLE||(LA191_0>=RULE_HEX_INT && LA191_0<=RULE_LEGACY_OCTAL_INT)||LA191_0==RULE_SCIENTIFIC_INT||LA191_0==RULE_IDENTIFIER||LA191_0==RULE_STRING||(LA191_0>=RULE_TEMPLATE_HEAD && LA191_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA191_0==RULE_INT) ) {s = 4;}

                        else if ( (LA191_0==Semicolon) ) {s = 63;}


                        input.seek(index191_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA191_3 = input.LA(1);


                        int index191_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}


                        input.seek(index191_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 191, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_137s = "\37\uffff";
    static final String dfa_138s = "\2\4\13\125\1\4\3\125\4\4\5\125\1\uffff\3\0\1\uffff";
    static final String dfa_139s = "\2\176\11\147\1\156\1\147\1\176\3\156\4\176\5\147\1\uffff\3\0\1\uffff";
    static final String dfa_140s = "\32\uffff\1\2\3\uffff\1\1";
    static final String dfa_141s = "\33\uffff\1\2\1\0\1\1\1\uffff}>";
    static final String[] dfa_142s = {
            "\1\20\1\13\1\25\1\uffff\1\23\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\22\1\24\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\1\uffff\1\32\1\uffff\1\16\1\32\7\uffff\1\2\1\4\1\uffff\1\3\23\uffff\1\11\3\uffff\1\14\22\uffff\3\32\2\uffff\1\32\2\uffff\1\32\14\uffff\1\1",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\10\uffff\2\32\1\uffff\1\32\23\uffff\1\32\2\uffff\1\34\1\33\10\uffff\2\32\1\uffff\1\32\1\uffff\4\32\1\uffff\1\32\24\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32\6\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\10\uffff\2\32\1\uffff\1\32\23\uffff\1\32\2\uffff\1\34\1\33\10\uffff\2\32\3\uffff\4\32\1\uffff\1\32\24\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32\6\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32\6\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32\6\uffff\1\32",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\10\uffff\2\32\1\uffff\1\32\23\uffff\1\32\2\uffff\1\34\1\33\10\uffff\2\32\3\uffff\4\32\1\uffff\1\32\24\uffff\1\32",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\10\uffff\2\32\1\uffff\1\32\23\uffff\1\32\2\uffff\1\34\1\33\10\uffff\2\32\3\uffff\4\32\1\uffff\1\32\24\uffff\1\32",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\10\uffff\2\32\1\uffff\1\32\23\uffff\1\32\2\uffff\1\34\1\33\10\uffff\2\32\3\uffff\4\32\1\uffff\1\32\24\uffff\1\32",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\10\uffff\2\32\1\uffff\1\32\23\uffff\1\32\2\uffff\1\34\1\33\10\uffff\2\32\3\uffff\4\32\1\uffff\1\32\24\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\34\1\35\11\uffff\1\32\3\uffff\2\32\1\uffff\1\32",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = dfa_137;
            this.eof = dfa_137;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "3846:2: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( CommercialAt | Await_1 | LeftParenthesis | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( CommercialAt | Await_1 | LeftParenthesis | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA183_28 = input.LA(1);


                        int index183_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 26;}


                        input.seek(index183_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA183_29 = input.LA(1);


                        int index183_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 26;}


                        input.seek(index183_29);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA183_27 = input.LA(1);


                        int index183_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 26;}


                        input.seek(index183_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 183, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_143s = {
            "\1\23\1\16\1\27\1\uffff\1\26\1\30\1\32\1\12\2\uffff\1\11\1\60\3\uffff\1\31\1\10\1\64\2\uffff\1\33\1\uffff\1\13\1\uffff\1\20\1\66\1\25\1\2\2\uffff\1\61\1\uffff\1\51\1\37\1\uffff\1\22\1\uffff\1\34\1\24\3\uffff\1\15\1\53\1\36\1\50\1\21\1\65\7\uffff\1\5\1\7\1\35\1\6\7\uffff\1\67\1\uffff\1\70\1\uffff\1\55\7\uffff\1\14\3\uffff\1\17\2\uffff\1\74\2\uffff\1\3\1\75\1\uffff\1\71\1\uffff\1\72\1\uffff\1\54\2\uffff\1\40\3\uffff\1\1\1\56\2\uffff\1\57\2\uffff\1\73\3\uffff\1\41\1\uffff\1\46\1\43\1\44\1\45\1\uffff\1\47\1\uffff\1\4\2\uffff\1\52\11\uffff\1\63\1\62\7\uffff\1\42",
            ""
    };
    static final short[][] dfa_143 = unpackEncodedStringArray(dfa_143s);

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_132;
            this.max = dfa_133;
            this.accept = dfa_134;
            this.special = dfa_135;
            this.transition = dfa_143;
        }
        public String getDescription() {
            return "3988:3: ( ( CommercialAt | Await_1 | LeftParenthesis | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA176_0 = input.LA(1);


                        int index176_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA176_0==CommercialAt) && (synpred103_InternalN4JSParser())) {s = 1;}

                        else if ( (LA176_0==Await_1) && (synpred103_InternalN4JSParser())) {s = 2;}

                        else if ( (LA176_0==LeftParenthesis) && (synpred103_InternalN4JSParser())) {s = 3;}

                        else if ( (LA176_0==RULE_IDENTIFIER) && (synpred103_InternalN4JSParser())) {s = 4;}

                        else if ( (LA176_0==Get) && (synpred103_InternalN4JSParser())) {s = 5;}

                        else if ( (LA176_0==Set) && (synpred103_InternalN4JSParser())) {s = 6;}

                        else if ( (LA176_0==Let) && (synpred103_InternalN4JSParser())) {s = 7;}

                        else if ( (LA176_0==Project) && (synpred103_InternalN4JSParser())) {s = 8;}

                        else if ( (LA176_0==External) && (synpred103_InternalN4JSParser())) {s = 9;}

                        else if ( (LA176_0==Abstract) && (synpred103_InternalN4JSParser())) {s = 10;}

                        else if ( (LA176_0==Static) && (synpred103_InternalN4JSParser())) {s = 11;}

                        else if ( (LA176_0==As) && (synpred103_InternalN4JSParser())) {s = 12;}

                        else if ( (LA176_0==From) && (synpred103_InternalN4JSParser())) {s = 13;}

                        else if ( (LA176_0==Constructor) && (synpred103_InternalN4JSParser())) {s = 14;}

                        else if ( (LA176_0==Of) && (synpred103_InternalN4JSParser())) {s = 15;}

                        else if ( (LA176_0==Target) && (synpred103_InternalN4JSParser())) {s = 16;}

                        else if ( (LA176_0==Type) && (synpred103_InternalN4JSParser())) {s = 17;}

                        else if ( (LA176_0==Union) && (synpred103_InternalN4JSParser())) {s = 18;}

                        else if ( (LA176_0==Intersection) && (synpred103_InternalN4JSParser())) {s = 19;}

                        else if ( (LA176_0==This) && (synpred103_InternalN4JSParser())) {s = 20;}

                        else if ( (LA176_0==Await) && (synpred103_InternalN4JSParser())) {s = 21;}

                        else if ( (LA176_0==Promisify) && (synpred103_InternalN4JSParser())) {s = 22;}

                        else if ( (LA176_0==Implements) && (synpred103_InternalN4JSParser())) {s = 23;}

                        else if ( (LA176_0==Interface) && (synpred103_InternalN4JSParser())) {s = 24;}

                        else if ( (LA176_0==Private) && (synpred103_InternalN4JSParser())) {s = 25;}

                        else if ( (LA176_0==Protected) && (synpred103_InternalN4JSParser())) {s = 26;}

                        else if ( (LA176_0==Public) && (synpred103_InternalN4JSParser())) {s = 27;}

                        else if ( (LA176_0==Yield) && (synpred103_InternalN4JSParser())) {s = 28;}

                        else if ( (LA176_0==New) && (synpred103_InternalN4JSParser())) {s = 29;}

                        else if ( (LA176_0==This_1) && (synpred103_InternalN4JSParser())) {s = 30;}

                        else if ( (LA176_0==Super) && (synpred103_InternalN4JSParser())) {s = 31;}

                        else if ( (LA176_0==LessThanSign) && (synpred103_InternalN4JSParser())) {s = 32;}

                        else if ( (LA176_0==RULE_DOUBLE) && (synpred103_InternalN4JSParser())) {s = 33;}

                        else if ( (LA176_0==RULE_INT) && (synpred103_InternalN4JSParser())) {s = 34;}

                        else if ( (LA176_0==RULE_BINARY_INT) && (synpred103_InternalN4JSParser())) {s = 35;}

                        else if ( (LA176_0==RULE_OCTAL_INT) && (synpred103_InternalN4JSParser())) {s = 36;}

                        else if ( (LA176_0==RULE_LEGACY_OCTAL_INT) && (synpred103_InternalN4JSParser())) {s = 37;}

                        else if ( (LA176_0==RULE_HEX_INT) && (synpred103_InternalN4JSParser())) {s = 38;}

                        else if ( (LA176_0==RULE_SCIENTIFIC_INT) && (synpred103_InternalN4JSParser())) {s = 39;}

                        else if ( (LA176_0==True) && (synpred103_InternalN4JSParser())) {s = 40;}

                        else if ( (LA176_0==False) && (synpred103_InternalN4JSParser())) {s = 41;}

                        else if ( (LA176_0==RULE_STRING) && (synpred103_InternalN4JSParser())) {s = 42;}

                        else if ( (LA176_0==Null) && (synpred103_InternalN4JSParser())) {s = 43;}

                        else if ( (LA176_0==Solidus) && (synpred103_InternalN4JSParser())) {s = 44;}

                        else if ( (LA176_0==SolidusEqualsSign) && (synpred103_InternalN4JSParser())) {s = 45;}

                        else if ( (LA176_0==LeftSquareBracket) && (synpred103_InternalN4JSParser())) {s = 46;}

                        else if ( (LA176_0==LeftCurlyBracket) && (synpred103_InternalN4JSParser())) {s = 47;}

                        else if ( (LA176_0==Function) && (synpred103_InternalN4JSParser())) {s = 48;}

                        else if ( (LA176_0==Class) && (synpred103_InternalN4JSParser())) {s = 49;}

                        else if ( (LA176_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred103_InternalN4JSParser())) {s = 50;}

                        else if ( (LA176_0==RULE_TEMPLATE_HEAD) && (synpred103_InternalN4JSParser())) {s = 51;}

                        else if ( (LA176_0==Delete) && (synpred103_InternalN4JSParser())) {s = 52;}

                        else if ( (LA176_0==Void) && (synpred103_InternalN4JSParser())) {s = 53;}

                        else if ( (LA176_0==Typeof) && (synpred103_InternalN4JSParser())) {s = 54;}

                        else if ( (LA176_0==PlusSignPlusSign) && (synpred103_InternalN4JSParser())) {s = 55;}

                        else if ( (LA176_0==HyphenMinusHyphenMinus) && (synpred103_InternalN4JSParser())) {s = 56;}

                        else if ( (LA176_0==PlusSign) && (synpred103_InternalN4JSParser())) {s = 57;}

                        else if ( (LA176_0==HyphenMinus) && (synpred103_InternalN4JSParser())) {s = 58;}

                        else if ( (LA176_0==Tilde) && (synpred103_InternalN4JSParser())) {s = 59;}

                        else if ( (LA176_0==ExclamationMark) && (synpred103_InternalN4JSParser())) {s = 60;}

                        else if ( (LA176_0==RightParenthesis) ) {s = 61;}


                        input.seek(index176_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_144s = "\3\uffff\32\35\2\uffff";
    static final String dfa_145s = "\1\4\2\uffff\32\135\2\uffff";
    static final String dfa_146s = "\1\176\2\uffff\32\144\2\uffff";
    static final String dfa_147s = "\1\uffff\2\1\32\uffff\1\3\1\2";
    static final String dfa_148s = "\1\6\2\uffff\1\16\1\7\1\0\1\10\1\17\1\25\1\1\1\11\1\20\1\26\1\2\1\12\1\21\1\27\1\3\1\13\1\22\1\30\1\4\1\14\1\23\1\31\1\5\1\15\1\24\1\32\2\uffff}>";
    static final String[] dfa_149s = {
            "\1\23\1\16\1\30\1\uffff\1\26\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\25\1\27\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\3\uffff\1\21\10\uffff\1\5\1\7\1\uffff\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            ""
    };
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = dfa_137;
            this.eof = dfa_144;
            this.min = dfa_145;
            this.max = dfa_146;
            this.accept = dfa_147;
            this.special = dfa_148;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "4808:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>TypeScriptTypeRefParserRuleCall_1_0_1= ruleTypeScriptTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= ruleBindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA213_5 = input.LA(1);


                        int index213_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_5==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_5==EOF||LA213_5==RightParenthesis) ) {s = 29;}


                        input.seek(index213_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA213_9 = input.LA(1);


                        int index213_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_9==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_9==EOF||LA213_9==RightParenthesis) ) {s = 29;}


                        input.seek(index213_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA213_13 = input.LA(1);


                        int index213_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_13==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_13==EOF||LA213_13==RightParenthesis) ) {s = 29;}


                        input.seek(index213_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA213_17 = input.LA(1);


                        int index213_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_17==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_17==EOF||LA213_17==RightParenthesis) ) {s = 29;}


                        input.seek(index213_17);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA213_21 = input.LA(1);


                        int index213_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_21==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_21==EOF||LA213_21==RightParenthesis) ) {s = 29;}


                        input.seek(index213_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA213_25 = input.LA(1);


                        int index213_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_25==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_25==EOF||LA213_25==RightParenthesis) ) {s = 29;}


                        input.seek(index213_25);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA213_0 = input.LA(1);


                        int index213_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_0==LeftCurlyBracket) && (synpred110_InternalN4JSParser())) {s = 1;}

                        else if ( (LA213_0==LeftSquareBracket) && (synpred110_InternalN4JSParser())) {s = 2;}

                        else if ( (LA213_0==RULE_IDENTIFIER) ) {s = 3;}

                        else if ( (LA213_0==Yield) ) {s = 4;}

                        else if ( (LA213_0==Get) ) {s = 5;}

                        else if ( (LA213_0==Set) ) {s = 6;}

                        else if ( (LA213_0==Let) ) {s = 7;}

                        else if ( (LA213_0==Project) ) {s = 8;}

                        else if ( (LA213_0==External) ) {s = 9;}

                        else if ( (LA213_0==Abstract) ) {s = 10;}

                        else if ( (LA213_0==Static) ) {s = 11;}

                        else if ( (LA213_0==As) ) {s = 12;}

                        else if ( (LA213_0==From) ) {s = 13;}

                        else if ( (LA213_0==Constructor) ) {s = 14;}

                        else if ( (LA213_0==Of) ) {s = 15;}

                        else if ( (LA213_0==Target) ) {s = 16;}

                        else if ( (LA213_0==Type) ) {s = 17;}

                        else if ( (LA213_0==Union) ) {s = 18;}

                        else if ( (LA213_0==Intersection) ) {s = 19;}

                        else if ( (LA213_0==This) ) {s = 20;}

                        else if ( (LA213_0==Await) ) {s = 21;}

                        else if ( (LA213_0==Promisify) ) {s = 22;}

                        else if ( (LA213_0==Await_1) ) {s = 23;}

                        else if ( (LA213_0==Implements) ) {s = 24;}

                        else if ( (LA213_0==Interface) ) {s = 25;}

                        else if ( (LA213_0==Private) ) {s = 26;}

                        else if ( (LA213_0==Protected) ) {s = 27;}

                        else if ( (LA213_0==Public) ) {s = 28;}


                        input.seek(index213_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA213_4 = input.LA(1);


                        int index213_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_4==EOF||LA213_4==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_4==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA213_6 = input.LA(1);


                        int index213_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_6==EOF||LA213_6==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_6==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA213_10 = input.LA(1);


                        int index213_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_10==EOF||LA213_10==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_10==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA213_14 = input.LA(1);


                        int index213_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_14==EOF||LA213_14==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_14==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA213_18 = input.LA(1);


                        int index213_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_18==EOF||LA213_18==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_18==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA213_22 = input.LA(1);


                        int index213_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_22==EOF||LA213_22==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_22==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA213_26 = input.LA(1);


                        int index213_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_26==EOF||LA213_26==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_26==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_26);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA213_3 = input.LA(1);


                        int index213_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_3==EOF||LA213_3==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_3==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_3);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA213_7 = input.LA(1);


                        int index213_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_7==EOF||LA213_7==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_7==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_7);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA213_11 = input.LA(1);


                        int index213_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_11==EOF||LA213_11==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_11==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_11);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA213_15 = input.LA(1);


                        int index213_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_15==EOF||LA213_15==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_15==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_15);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA213_19 = input.LA(1);


                        int index213_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_19==EOF||LA213_19==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_19==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA213_23 = input.LA(1);


                        int index213_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_23==EOF||LA213_23==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_23==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_23);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA213_27 = input.LA(1);


                        int index213_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_27==EOF||LA213_27==RightParenthesis) ) {s = 29;}

                        else if ( (LA213_27==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}


                        input.seek(index213_27);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA213_8 = input.LA(1);


                        int index213_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_8==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_8==EOF||LA213_8==RightParenthesis) ) {s = 29;}


                        input.seek(index213_8);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA213_12 = input.LA(1);


                        int index213_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_12==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_12==EOF||LA213_12==RightParenthesis) ) {s = 29;}


                        input.seek(index213_12);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA213_16 = input.LA(1);


                        int index213_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_16==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_16==EOF||LA213_16==RightParenthesis) ) {s = 29;}


                        input.seek(index213_16);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA213_20 = input.LA(1);


                        int index213_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_20==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_20==EOF||LA213_20==RightParenthesis) ) {s = 29;}


                        input.seek(index213_20);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA213_24 = input.LA(1);


                        int index213_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_24==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_24==EOF||LA213_24==RightParenthesis) ) {s = 29;}


                        input.seek(index213_24);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA213_28 = input.LA(1);


                        int index213_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_28==Colon) && (synpred111_InternalN4JSParser())) {s = 30;}

                        else if ( (LA213_28==EOF||LA213_28==RightParenthesis) ) {s = 29;}


                        input.seek(index213_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_150s = "\36\uffff";
    static final String dfa_151s = "\1\4\2\uffff\31\135\2\uffff";
    static final String dfa_152s = "\1\176\2\uffff\31\144\2\uffff";
    static final String dfa_153s = "\1\uffff\2\1\31\uffff\1\2\1\3";
    static final String dfa_154s = "\1\23\2\uffff\1\14\1\0\1\6\1\15\1\24\1\1\1\7\1\16\1\25\1\2\1\10\1\17\1\26\1\3\1\11\1\20\1\27\1\4\1\12\1\21\1\30\1\5\1\13\1\22\1\31\2\uffff}>";
    static final String[] dfa_155s = {
            "\1\22\1\15\1\27\1\uffff\1\25\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\24\1\26\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\3\uffff\1\20\10\uffff\1\4\1\6\1\uffff\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            "\1\35\6\uffff\1\34",
            ""
    };

    static final short[] dfa_150 = DFA.unpackEncodedString(dfa_150s);
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);

    class DFA214 extends DFA {

        public DFA214(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 214;
            this.eot = dfa_150;
            this.eof = dfa_150;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "4845:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>TypeScriptTypeRefParserRuleCall_1_0_1= ruleTypeScriptTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= norm1_BindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA214_4 = input.LA(1);


                        int index214_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_4==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_4==RightParenthesis) ) {s = 29;}


                        input.seek(index214_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA214_8 = input.LA(1);


                        int index214_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_8==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_8==RightParenthesis) ) {s = 29;}


                        input.seek(index214_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA214_12 = input.LA(1);


                        int index214_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_12==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_12==RightParenthesis) ) {s = 29;}


                        input.seek(index214_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA214_16 = input.LA(1);


                        int index214_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_16==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_16==RightParenthesis) ) {s = 29;}


                        input.seek(index214_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA214_20 = input.LA(1);


                        int index214_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_20==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_20==RightParenthesis) ) {s = 29;}


                        input.seek(index214_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA214_24 = input.LA(1);


                        int index214_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_24==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_24==RightParenthesis) ) {s = 29;}


                        input.seek(index214_24);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA214_5 = input.LA(1);


                        int index214_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_5==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_5==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA214_9 = input.LA(1);


                        int index214_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_9==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_9==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA214_13 = input.LA(1);


                        int index214_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_13==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_13==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_13);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA214_17 = input.LA(1);


                        int index214_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_17==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_17==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA214_21 = input.LA(1);


                        int index214_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_21==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_21==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_21);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA214_25 = input.LA(1);


                        int index214_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_25==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_25==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_25);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA214_3 = input.LA(1);


                        int index214_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_3==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_3==RightParenthesis) ) {s = 29;}


                        input.seek(index214_3);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA214_6 = input.LA(1);


                        int index214_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_6==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_6==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_6);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA214_10 = input.LA(1);


                        int index214_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_10==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_10==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_10);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA214_14 = input.LA(1);


                        int index214_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_14==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_14==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_14);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA214_18 = input.LA(1);


                        int index214_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_18==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_18==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA214_22 = input.LA(1);


                        int index214_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_22==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_22==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_22);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA214_26 = input.LA(1);


                        int index214_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_26==RightParenthesis) ) {s = 29;}

                        else if ( (LA214_26==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}


                        input.seek(index214_26);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA214_0 = input.LA(1);


                        int index214_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_0==LeftCurlyBracket) && (synpred113_InternalN4JSParser())) {s = 1;}

                        else if ( (LA214_0==LeftSquareBracket) && (synpred113_InternalN4JSParser())) {s = 2;}

                        else if ( (LA214_0==RULE_IDENTIFIER) ) {s = 3;}

                        else if ( (LA214_0==Get) ) {s = 4;}

                        else if ( (LA214_0==Set) ) {s = 5;}

                        else if ( (LA214_0==Let) ) {s = 6;}

                        else if ( (LA214_0==Project) ) {s = 7;}

                        else if ( (LA214_0==External) ) {s = 8;}

                        else if ( (LA214_0==Abstract) ) {s = 9;}

                        else if ( (LA214_0==Static) ) {s = 10;}

                        else if ( (LA214_0==As) ) {s = 11;}

                        else if ( (LA214_0==From) ) {s = 12;}

                        else if ( (LA214_0==Constructor) ) {s = 13;}

                        else if ( (LA214_0==Of) ) {s = 14;}

                        else if ( (LA214_0==Target) ) {s = 15;}

                        else if ( (LA214_0==Type) ) {s = 16;}

                        else if ( (LA214_0==Union) ) {s = 17;}

                        else if ( (LA214_0==Intersection) ) {s = 18;}

                        else if ( (LA214_0==This) ) {s = 19;}

                        else if ( (LA214_0==Await) ) {s = 20;}

                        else if ( (LA214_0==Promisify) ) {s = 21;}

                        else if ( (LA214_0==Await_1) ) {s = 22;}

                        else if ( (LA214_0==Implements) ) {s = 23;}

                        else if ( (LA214_0==Interface) ) {s = 24;}

                        else if ( (LA214_0==Private) ) {s = 25;}

                        else if ( (LA214_0==Protected) ) {s = 26;}

                        else if ( (LA214_0==Public) ) {s = 27;}


                        input.seek(index214_0);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA214_7 = input.LA(1);


                        int index214_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_7==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_7==RightParenthesis) ) {s = 29;}


                        input.seek(index214_7);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA214_11 = input.LA(1);


                        int index214_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_11==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_11==RightParenthesis) ) {s = 29;}


                        input.seek(index214_11);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA214_15 = input.LA(1);


                        int index214_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_15==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_15==RightParenthesis) ) {s = 29;}


                        input.seek(index214_15);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA214_19 = input.LA(1);


                        int index214_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_19==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_19==RightParenthesis) ) {s = 29;}


                        input.seek(index214_19);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA214_23 = input.LA(1);


                        int index214_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_23==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_23==RightParenthesis) ) {s = 29;}


                        input.seek(index214_23);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA214_27 = input.LA(1);


                        int index214_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA214_27==Colon) && (synpred114_InternalN4JSParser())) {s = 28;}

                        else if ( (LA214_27==RightParenthesis) ) {s = 29;}


                        input.seek(index214_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 214, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_156s = "\5\uffff";
    static final String dfa_157s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_158s = "\1\154\1\u0094\1\uffff\1\u0094\1\uffff";
    static final String dfa_159s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_160s = "\5\uffff}>";
    static final String[] dfa_161s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\4\uffff\4\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\4\uffff\4\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            ""
    };

    static final short[] dfa_156 = DFA.unpackEncodedString(dfa_156s);
    static final char[] dfa_157 = DFA.unpackEncodedStringToUnsignedChars(dfa_157s);
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final short[] dfa_159 = DFA.unpackEncodedString(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[][] dfa_161 = unpackEncodedStringArray(dfa_161s);

    class DFA219 extends DFA {

        public DFA219(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 219;
            this.eot = dfa_156;
            this.eof = dfa_156;
            this.min = dfa_157;
            this.max = dfa_158;
            this.accept = dfa_159;
            this.special = dfa_160;
            this.transition = dfa_161;
        }
        public String getDescription() {
            return "()* loopback of 5155:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA225 extends DFA {

        public DFA225(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 225;
            this.eot = dfa_156;
            this.eof = dfa_156;
            this.min = dfa_157;
            this.max = dfa_158;
            this.accept = dfa_159;
            this.special = dfa_160;
            this.transition = dfa_161;
        }
        public String getDescription() {
            return "()* loopback of 5196:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_162s = "\114\uffff";
    static final String dfa_163s = "\1\4\1\uffff\104\0\6\uffff";
    static final String dfa_164s = "\1\u0094\1\uffff\104\0\6\uffff";
    static final String dfa_165s = "\1\uffff\1\1\104\uffff\2\5\1\2\1\3\1\6\1\4";
    static final String dfa_166s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\6\uffff}>";
    static final String[] dfa_167s = {
            "\1\17\1\13\1\76\1\44\1\6\1\77\1\101\1\71\1\26\1\27\1\70\1\40\1\30\1\35\1\36\1\100\1\67\1\31\1\34\1\42\1\102\1\46\1\72\1\50\1\7\1\53\1\4\1\5\1\21\1\23\1\24\1\25\1\62\1\47\1\51\1\16\1\55\1\57\1\3\1\22\1\33\1\63\1\74\1\60\1\12\1\61\1\14\1\2\1\56\5\uffff\1\37\1\64\1\66\1\45\1\65\1\52\1\54\21\uffff\1\73\1\32\1\41\1\43\1\75\7\uffff\1\107\7\uffff\1\106\2\uffff\1\20\1\1\1\105\2\uffff\1\15\2\uffff\1\11\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\10\2\uffff\1\103\22\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_162 = DFA.unpackEncodedString(dfa_162s);
    static final char[] dfa_163 = DFA.unpackEncodedStringToUnsignedChars(dfa_163s);
    static final char[] dfa_164 = DFA.unpackEncodedStringToUnsignedChars(dfa_164s);
    static final short[] dfa_165 = DFA.unpackEncodedString(dfa_165s);
    static final short[] dfa_166 = DFA.unpackEncodedString(dfa_166s);
    static final short[][] dfa_167 = unpackEncodedStringArray(dfa_167s);

    class DFA237 extends DFA {

        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = dfa_162;
            this.eof = dfa_162;
            this.min = dfa_163;
            this.max = dfa_164;
            this.accept = dfa_165;
            this.special = dfa_166;
            this.transition = dfa_167;
        }
        public String getDescription() {
            return "5357:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRef ) )? ruleLiteralOrComputedPropertyName Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) ruleLiteralOrComputedPropertyName LeftParenthesis ) | ( ruleLiteralOrComputedPropertyName LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA237_0 = input.LA(1);


                        int index237_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_0==CommercialAt) ) {s = 1;}

                        else if ( (LA237_0==Void) ) {s = 2;}

                        else if ( (LA237_0==This) ) {s = 3;}

                        else if ( (LA237_0==Await) ) {s = 4;}

                        else if ( (LA237_0==Await_1) ) {s = 5;}

                        else if ( (LA237_0==Promisify) ) {s = 6;}

                        else if ( (LA237_0==Target) ) {s = 7;}

                        else if ( (LA237_0==RULE_IDENTIFIER) ) {s = 8;}

                        else if ( (LA237_0==Tilde) ) {s = 9;}

                        else if ( (LA237_0==This_1) ) {s = 10;}

                        else if ( (LA237_0==Constructor) ) {s = 11;}

                        else if ( (LA237_0==Type) ) {s = 12;}

                        else if ( (LA237_0==LeftCurlyBracket) ) {s = 13;}

                        else if ( (LA237_0==Union) ) {s = 14;}

                        else if ( (LA237_0==Intersection) ) {s = 15;}

                        else if ( (LA237_0==QuestionMark) ) {s = 16;}

                        else if ( (LA237_0==Break) ) {s = 17;}

                        else if ( (LA237_0==Case) ) {s = 18;}

                        else if ( (LA237_0==Catch) ) {s = 19;}

                        else if ( (LA237_0==Class) ) {s = 20;}

                        else if ( (LA237_0==Const) ) {s = 21;}

                        else if ( (LA237_0==Continue) ) {s = 22;}

                        else if ( (LA237_0==Debugger) ) {s = 23;}

                        else if ( (LA237_0==Default) ) {s = 24;}

                        else if ( (LA237_0==Delete) ) {s = 25;}

                        else if ( (LA237_0==Do) ) {s = 26;}

                        else if ( (LA237_0==Else) ) {s = 27;}

                        else if ( (LA237_0==Export) ) {s = 28;}

                        else if ( (LA237_0==Extends) ) {s = 29;}

                        else if ( (LA237_0==Finally) ) {s = 30;}

                        else if ( (LA237_0==For) ) {s = 31;}

                        else if ( (LA237_0==Function) ) {s = 32;}

                        else if ( (LA237_0==If) ) {s = 33;}

                        else if ( (LA237_0==Import) ) {s = 34;}

                        else if ( (LA237_0==In) ) {s = 35;}

                        else if ( (LA237_0==Instanceof) ) {s = 36;}

                        else if ( (LA237_0==New) ) {s = 37;}

                        else if ( (LA237_0==Return) ) {s = 38;}

                        else if ( (LA237_0==Super) ) {s = 39;}

                        else if ( (LA237_0==Switch) ) {s = 40;}

                        else if ( (LA237_0==Throw) ) {s = 41;}

                        else if ( (LA237_0==Try) ) {s = 42;}

                        else if ( (LA237_0==Typeof) ) {s = 43;}

                        else if ( (LA237_0==Var) ) {s = 44;}

                        else if ( (LA237_0==While) ) {s = 45;}

                        else if ( (LA237_0==With) ) {s = 46;}

                        else if ( (LA237_0==Yield) ) {s = 47;}

                        else if ( (LA237_0==Null) ) {s = 48;}

                        else if ( (LA237_0==True) ) {s = 49;}

                        else if ( (LA237_0==False) ) {s = 50;}

                        else if ( (LA237_0==Enum) ) {s = 51;}

                        else if ( (LA237_0==Get) ) {s = 52;}

                        else if ( (LA237_0==Set) ) {s = 53;}

                        else if ( (LA237_0==Let) ) {s = 54;}

                        else if ( (LA237_0==Project) ) {s = 55;}

                        else if ( (LA237_0==External) ) {s = 56;}

                        else if ( (LA237_0==Abstract) ) {s = 57;}

                        else if ( (LA237_0==Static) ) {s = 58;}

                        else if ( (LA237_0==As) ) {s = 59;}

                        else if ( (LA237_0==From) ) {s = 60;}

                        else if ( (LA237_0==Of) ) {s = 61;}

                        else if ( (LA237_0==Implements) ) {s = 62;}

                        else if ( (LA237_0==Interface) ) {s = 63;}

                        else if ( (LA237_0==Private) ) {s = 64;}

                        else if ( (LA237_0==Protected) ) {s = 65;}

                        else if ( (LA237_0==Public) ) {s = 66;}

                        else if ( (LA237_0==RULE_STRING) ) {s = 67;}

                        else if ( (LA237_0==RULE_DOUBLE||LA237_0==RULE_HEX_INT||LA237_0==RULE_OCTAL_INT||LA237_0==RULE_SCIENTIFIC_INT||LA237_0==RULE_INT) ) {s = 68;}

                        else if ( (LA237_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA237_0==LessThanSign) && (synpred121_InternalN4JSParser())) {s = 70;}

                        else if ( (LA237_0==Asterisk) && (synpred121_InternalN4JSParser())) {s = 71;}


                        input.seek(index237_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA237_2 = input.LA(1);


                        int index237_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA237_3 = input.LA(1);


                        int index237_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA237_4 = input.LA(1);


                        int index237_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA237_5 = input.LA(1);


                        int index237_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA237_6 = input.LA(1);


                        int index237_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA237_7 = input.LA(1);


                        int index237_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA237_8 = input.LA(1);


                        int index237_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA237_9 = input.LA(1);


                        int index237_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA237_10 = input.LA(1);


                        int index237_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA237_11 = input.LA(1);


                        int index237_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA237_12 = input.LA(1);


                        int index237_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA237_13 = input.LA(1);


                        int index237_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA237_14 = input.LA(1);


                        int index237_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA237_15 = input.LA(1);


                        int index237_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA237_16 = input.LA(1);


                        int index237_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA237_17 = input.LA(1);


                        int index237_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA237_18 = input.LA(1);


                        int index237_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA237_19 = input.LA(1);


                        int index237_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA237_20 = input.LA(1);


                        int index237_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA237_21 = input.LA(1);


                        int index237_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA237_22 = input.LA(1);


                        int index237_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA237_23 = input.LA(1);


                        int index237_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA237_24 = input.LA(1);


                        int index237_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA237_25 = input.LA(1);


                        int index237_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA237_26 = input.LA(1);


                        int index237_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA237_27 = input.LA(1);


                        int index237_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA237_28 = input.LA(1);


                        int index237_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA237_29 = input.LA(1);


                        int index237_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA237_30 = input.LA(1);


                        int index237_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 :
                        int LA237_31 = input.LA(1);


                        int index237_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 :
                        int LA237_32 = input.LA(1);


                        int index237_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 :
                        int LA237_33 = input.LA(1);


                        int index237_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 :
                        int LA237_34 = input.LA(1);


                        int index237_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 :
                        int LA237_35 = input.LA(1);


                        int index237_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 :
                        int LA237_36 = input.LA(1);


                        int index237_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 :
                        int LA237_37 = input.LA(1);


                        int index237_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 :
                        int LA237_38 = input.LA(1);


                        int index237_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 :
                        int LA237_39 = input.LA(1);


                        int index237_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 :
                        int LA237_40 = input.LA(1);


                        int index237_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 :
                        int LA237_41 = input.LA(1);


                        int index237_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 :
                        int LA237_42 = input.LA(1);


                        int index237_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 :
                        int LA237_43 = input.LA(1);


                        int index237_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 :
                        int LA237_44 = input.LA(1);


                        int index237_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 :
                        int LA237_45 = input.LA(1);


                        int index237_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 :
                        int LA237_46 = input.LA(1);


                        int index237_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 :
                        int LA237_47 = input.LA(1);


                        int index237_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 :
                        int LA237_48 = input.LA(1);


                        int index237_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 :
                        int LA237_49 = input.LA(1);


                        int index237_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 :
                        int LA237_50 = input.LA(1);


                        int index237_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 :
                        int LA237_51 = input.LA(1);


                        int index237_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 :
                        int LA237_52 = input.LA(1);


                        int index237_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 :
                        int LA237_53 = input.LA(1);


                        int index237_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 :
                        int LA237_54 = input.LA(1);


                        int index237_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 :
                        int LA237_55 = input.LA(1);


                        int index237_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 :
                        int LA237_56 = input.LA(1);


                        int index237_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 :
                        int LA237_57 = input.LA(1);


                        int index237_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 :
                        int LA237_58 = input.LA(1);


                        int index237_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 :
                        int LA237_59 = input.LA(1);


                        int index237_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 :
                        int LA237_60 = input.LA(1);


                        int index237_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 :
                        int LA237_61 = input.LA(1);


                        int index237_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 :
                        int LA237_62 = input.LA(1);


                        int index237_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 :
                        int LA237_63 = input.LA(1);


                        int index237_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 :
                        int LA237_64 = input.LA(1);


                        int index237_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 :
                        int LA237_65 = input.LA(1);


                        int index237_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 :
                        int LA237_66 = input.LA(1);


                        int index237_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index237_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 :
                        int LA237_67 = input.LA(1);


                        int index237_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 :
                        int LA237_68 = input.LA(1);


                        int index237_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 :
                        int LA237_69 = input.LA(1);


                        int index237_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index237_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 237, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA238 extends DFA {

        public DFA238(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = dfa_162;
            this.eof = dfa_162;
            this.min = dfa_163;
            this.max = dfa_164;
            this.accept = dfa_165;
            this.special = dfa_166;
            this.transition = dfa_167;
        }
        public String getDescription() {
            return "5529:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRef ) )? norm1_LiteralOrComputedPropertyName Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) norm1_LiteralOrComputedPropertyName LeftParenthesis ) | ( norm1_LiteralOrComputedPropertyName LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA238_0 = input.LA(1);


                        int index238_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_0==CommercialAt) ) {s = 1;}

                        else if ( (LA238_0==Void) ) {s = 2;}

                        else if ( (LA238_0==This) ) {s = 3;}

                        else if ( (LA238_0==Await) ) {s = 4;}

                        else if ( (LA238_0==Await_1) ) {s = 5;}

                        else if ( (LA238_0==Promisify) ) {s = 6;}

                        else if ( (LA238_0==Target) ) {s = 7;}

                        else if ( (LA238_0==RULE_IDENTIFIER) ) {s = 8;}

                        else if ( (LA238_0==Tilde) ) {s = 9;}

                        else if ( (LA238_0==This_1) ) {s = 10;}

                        else if ( (LA238_0==Constructor) ) {s = 11;}

                        else if ( (LA238_0==Type) ) {s = 12;}

                        else if ( (LA238_0==LeftCurlyBracket) ) {s = 13;}

                        else if ( (LA238_0==Union) ) {s = 14;}

                        else if ( (LA238_0==Intersection) ) {s = 15;}

                        else if ( (LA238_0==QuestionMark) ) {s = 16;}

                        else if ( (LA238_0==Break) ) {s = 17;}

                        else if ( (LA238_0==Case) ) {s = 18;}

                        else if ( (LA238_0==Catch) ) {s = 19;}

                        else if ( (LA238_0==Class) ) {s = 20;}

                        else if ( (LA238_0==Const) ) {s = 21;}

                        else if ( (LA238_0==Continue) ) {s = 22;}

                        else if ( (LA238_0==Debugger) ) {s = 23;}

                        else if ( (LA238_0==Default) ) {s = 24;}

                        else if ( (LA238_0==Delete) ) {s = 25;}

                        else if ( (LA238_0==Do) ) {s = 26;}

                        else if ( (LA238_0==Else) ) {s = 27;}

                        else if ( (LA238_0==Export) ) {s = 28;}

                        else if ( (LA238_0==Extends) ) {s = 29;}

                        else if ( (LA238_0==Finally) ) {s = 30;}

                        else if ( (LA238_0==For) ) {s = 31;}

                        else if ( (LA238_0==Function) ) {s = 32;}

                        else if ( (LA238_0==If) ) {s = 33;}

                        else if ( (LA238_0==Import) ) {s = 34;}

                        else if ( (LA238_0==In) ) {s = 35;}

                        else if ( (LA238_0==Instanceof) ) {s = 36;}

                        else if ( (LA238_0==New) ) {s = 37;}

                        else if ( (LA238_0==Return) ) {s = 38;}

                        else if ( (LA238_0==Super) ) {s = 39;}

                        else if ( (LA238_0==Switch) ) {s = 40;}

                        else if ( (LA238_0==Throw) ) {s = 41;}

                        else if ( (LA238_0==Try) ) {s = 42;}

                        else if ( (LA238_0==Typeof) ) {s = 43;}

                        else if ( (LA238_0==Var) ) {s = 44;}

                        else if ( (LA238_0==While) ) {s = 45;}

                        else if ( (LA238_0==With) ) {s = 46;}

                        else if ( (LA238_0==Yield) ) {s = 47;}

                        else if ( (LA238_0==Null) ) {s = 48;}

                        else if ( (LA238_0==True) ) {s = 49;}

                        else if ( (LA238_0==False) ) {s = 50;}

                        else if ( (LA238_0==Enum) ) {s = 51;}

                        else if ( (LA238_0==Get) ) {s = 52;}

                        else if ( (LA238_0==Set) ) {s = 53;}

                        else if ( (LA238_0==Let) ) {s = 54;}

                        else if ( (LA238_0==Project) ) {s = 55;}

                        else if ( (LA238_0==External) ) {s = 56;}

                        else if ( (LA238_0==Abstract) ) {s = 57;}

                        else if ( (LA238_0==Static) ) {s = 58;}

                        else if ( (LA238_0==As) ) {s = 59;}

                        else if ( (LA238_0==From) ) {s = 60;}

                        else if ( (LA238_0==Of) ) {s = 61;}

                        else if ( (LA238_0==Implements) ) {s = 62;}

                        else if ( (LA238_0==Interface) ) {s = 63;}

                        else if ( (LA238_0==Private) ) {s = 64;}

                        else if ( (LA238_0==Protected) ) {s = 65;}

                        else if ( (LA238_0==Public) ) {s = 66;}

                        else if ( (LA238_0==RULE_STRING) ) {s = 67;}

                        else if ( (LA238_0==RULE_DOUBLE||LA238_0==RULE_HEX_INT||LA238_0==RULE_OCTAL_INT||LA238_0==RULE_SCIENTIFIC_INT||LA238_0==RULE_INT) ) {s = 68;}

                        else if ( (LA238_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA238_0==LessThanSign) && (synpred125_InternalN4JSParser())) {s = 70;}

                        else if ( (LA238_0==Asterisk) && (synpred125_InternalN4JSParser())) {s = 71;}


                        input.seek(index238_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA238_2 = input.LA(1);


                        int index238_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA238_3 = input.LA(1);


                        int index238_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA238_4 = input.LA(1);


                        int index238_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA238_5 = input.LA(1);


                        int index238_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA238_6 = input.LA(1);


                        int index238_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA238_7 = input.LA(1);


                        int index238_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA238_8 = input.LA(1);


                        int index238_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA238_9 = input.LA(1);


                        int index238_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA238_10 = input.LA(1);


                        int index238_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA238_11 = input.LA(1);


                        int index238_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA238_12 = input.LA(1);


                        int index238_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA238_13 = input.LA(1);


                        int index238_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA238_14 = input.LA(1);


                        int index238_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA238_15 = input.LA(1);


                        int index238_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA238_16 = input.LA(1);


                        int index238_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA238_17 = input.LA(1);


                        int index238_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA238_18 = input.LA(1);


                        int index238_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA238_19 = input.LA(1);


                        int index238_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA238_20 = input.LA(1);


                        int index238_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA238_21 = input.LA(1);


                        int index238_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA238_22 = input.LA(1);


                        int index238_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA238_23 = input.LA(1);


                        int index238_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA238_24 = input.LA(1);


                        int index238_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA238_25 = input.LA(1);


                        int index238_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA238_26 = input.LA(1);


                        int index238_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA238_27 = input.LA(1);


                        int index238_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA238_28 = input.LA(1);


                        int index238_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA238_29 = input.LA(1);


                        int index238_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA238_30 = input.LA(1);


                        int index238_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 :
                        int LA238_31 = input.LA(1);


                        int index238_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 :
                        int LA238_32 = input.LA(1);


                        int index238_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 :
                        int LA238_33 = input.LA(1);


                        int index238_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 :
                        int LA238_34 = input.LA(1);


                        int index238_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 :
                        int LA238_35 = input.LA(1);


                        int index238_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 :
                        int LA238_36 = input.LA(1);


                        int index238_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 :
                        int LA238_37 = input.LA(1);


                        int index238_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 :
                        int LA238_38 = input.LA(1);


                        int index238_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 :
                        int LA238_39 = input.LA(1);


                        int index238_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 :
                        int LA238_40 = input.LA(1);


                        int index238_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 :
                        int LA238_41 = input.LA(1);


                        int index238_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 :
                        int LA238_42 = input.LA(1);


                        int index238_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 :
                        int LA238_43 = input.LA(1);


                        int index238_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 :
                        int LA238_44 = input.LA(1);


                        int index238_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 :
                        int LA238_45 = input.LA(1);


                        int index238_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 :
                        int LA238_46 = input.LA(1);


                        int index238_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 :
                        int LA238_47 = input.LA(1);


                        int index238_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 :
                        int LA238_48 = input.LA(1);


                        int index238_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 :
                        int LA238_49 = input.LA(1);


                        int index238_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 :
                        int LA238_50 = input.LA(1);


                        int index238_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 :
                        int LA238_51 = input.LA(1);


                        int index238_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 :
                        int LA238_52 = input.LA(1);


                        int index238_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 :
                        int LA238_53 = input.LA(1);


                        int index238_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 :
                        int LA238_54 = input.LA(1);


                        int index238_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 :
                        int LA238_55 = input.LA(1);


                        int index238_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 :
                        int LA238_56 = input.LA(1);


                        int index238_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 :
                        int LA238_57 = input.LA(1);


                        int index238_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 :
                        int LA238_58 = input.LA(1);


                        int index238_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 :
                        int LA238_59 = input.LA(1);


                        int index238_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 :
                        int LA238_60 = input.LA(1);


                        int index238_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 :
                        int LA238_61 = input.LA(1);


                        int index238_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 :
                        int LA238_62 = input.LA(1);


                        int index238_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 :
                        int LA238_63 = input.LA(1);


                        int index238_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 :
                        int LA238_64 = input.LA(1);


                        int index238_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 :
                        int LA238_65 = input.LA(1);


                        int index238_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 :
                        int LA238_66 = input.LA(1);


                        int index238_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 74;}


                        input.seek(index238_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 :
                        int LA238_67 = input.LA(1);


                        int index238_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 :
                        int LA238_68 = input.LA(1);


                        int index238_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 :
                        int LA238_69 = input.LA(1);


                        int index238_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 71;}


                        input.seek(index238_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 238, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_168s = "\113\uffff";
    static final String dfa_169s = "\1\4\104\0\6\uffff";
    static final String dfa_170s = "\1\u0094\104\0\6\uffff";
    static final String dfa_171s = "\105\uffff\2\4\1\1\1\2\1\5\1\3";
    static final String dfa_172s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\6\uffff}>";
    static final String[] dfa_173s = {
            "\1\16\1\12\1\75\1\43\1\5\1\76\1\100\1\70\1\25\1\26\1\67\1\37\1\27\1\34\1\35\1\77\1\66\1\30\1\33\1\41\1\101\1\45\1\71\1\47\1\6\1\52\1\3\1\4\1\20\1\22\1\23\1\24\1\61\1\46\1\50\1\15\1\54\1\56\1\2\1\21\1\32\1\62\1\73\1\57\1\11\1\60\1\13\1\1\1\55\5\uffff\1\36\1\63\1\65\1\44\1\64\1\51\1\53\21\uffff\1\72\1\31\1\40\1\42\1\74\7\uffff\1\106\7\uffff\1\105\2\uffff\1\17\1\uffff\1\104\2\uffff\1\14\2\uffff\1\10\3\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\7\2\uffff\1\102\22\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final char[] dfa_169 = DFA.unpackEncodedStringToUnsignedChars(dfa_169s);
    static final char[] dfa_170 = DFA.unpackEncodedStringToUnsignedChars(dfa_170s);
    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final short[] dfa_172 = DFA.unpackEncodedString(dfa_172s);
    static final short[][] dfa_173 = unpackEncodedStringArray(dfa_173s);

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = dfa_168;
            this.eof = dfa_168;
            this.min = dfa_169;
            this.max = dfa_170;
            this.accept = dfa_171;
            this.special = dfa_172;
            this.transition = dfa_173;
        }
        public String getDescription() {
            return "5708:1: ( ( ( ( ( ( ( ruleTypeRef ) )? ruleLiteralOrComputedPropertyName Colon ) )=> ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0= ruleTypeRef ) )? LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2= ruleLiteralOrComputedPropertyName ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=>LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2= ruleLiteralOrComputedPropertyName ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) ruleLiteralOrComputedPropertyName LeftParenthesis ) | ( ruleLiteralOrComputedPropertyName LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0= ruleTypeRef ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1= ruleLiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0= ruleLiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA246_0 = input.LA(1);


                        int index246_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA246_0==Void) ) {s = 1;}

                        else if ( (LA246_0==This) ) {s = 2;}

                        else if ( (LA246_0==Await) ) {s = 3;}

                        else if ( (LA246_0==Await_1) ) {s = 4;}

                        else if ( (LA246_0==Promisify) ) {s = 5;}

                        else if ( (LA246_0==Target) ) {s = 6;}

                        else if ( (LA246_0==RULE_IDENTIFIER) ) {s = 7;}

                        else if ( (LA246_0==Tilde) ) {s = 8;}

                        else if ( (LA246_0==This_1) ) {s = 9;}

                        else if ( (LA246_0==Constructor) ) {s = 10;}

                        else if ( (LA246_0==Type) ) {s = 11;}

                        else if ( (LA246_0==LeftCurlyBracket) ) {s = 12;}

                        else if ( (LA246_0==Union) ) {s = 13;}

                        else if ( (LA246_0==Intersection) ) {s = 14;}

                        else if ( (LA246_0==QuestionMark) ) {s = 15;}

                        else if ( (LA246_0==Break) ) {s = 16;}

                        else if ( (LA246_0==Case) ) {s = 17;}

                        else if ( (LA246_0==Catch) ) {s = 18;}

                        else if ( (LA246_0==Class) ) {s = 19;}

                        else if ( (LA246_0==Const) ) {s = 20;}

                        else if ( (LA246_0==Continue) ) {s = 21;}

                        else if ( (LA246_0==Debugger) ) {s = 22;}

                        else if ( (LA246_0==Default) ) {s = 23;}

                        else if ( (LA246_0==Delete) ) {s = 24;}

                        else if ( (LA246_0==Do) ) {s = 25;}

                        else if ( (LA246_0==Else) ) {s = 26;}

                        else if ( (LA246_0==Export) ) {s = 27;}

                        else if ( (LA246_0==Extends) ) {s = 28;}

                        else if ( (LA246_0==Finally) ) {s = 29;}

                        else if ( (LA246_0==For) ) {s = 30;}

                        else if ( (LA246_0==Function) ) {s = 31;}

                        else if ( (LA246_0==If) ) {s = 32;}

                        else if ( (LA246_0==Import) ) {s = 33;}

                        else if ( (LA246_0==In) ) {s = 34;}

                        else if ( (LA246_0==Instanceof) ) {s = 35;}

                        else if ( (LA246_0==New) ) {s = 36;}

                        else if ( (LA246_0==Return) ) {s = 37;}

                        else if ( (LA246_0==Super) ) {s = 38;}

                        else if ( (LA246_0==Switch) ) {s = 39;}

                        else if ( (LA246_0==Throw) ) {s = 40;}

                        else if ( (LA246_0==Try) ) {s = 41;}

                        else if ( (LA246_0==Typeof) ) {s = 42;}

                        else if ( (LA246_0==Var) ) {s = 43;}

                        else if ( (LA246_0==While) ) {s = 44;}

                        else if ( (LA246_0==With) ) {s = 45;}

                        else if ( (LA246_0==Yield) ) {s = 46;}

                        else if ( (LA246_0==Null) ) {s = 47;}

                        else if ( (LA246_0==True) ) {s = 48;}

                        else if ( (LA246_0==False) ) {s = 49;}

                        else if ( (LA246_0==Enum) ) {s = 50;}

                        else if ( (LA246_0==Get) ) {s = 51;}

                        else if ( (LA246_0==Set) ) {s = 52;}

                        else if ( (LA246_0==Let) ) {s = 53;}

                        else if ( (LA246_0==Project) ) {s = 54;}

                        else if ( (LA246_0==External) ) {s = 55;}

                        else if ( (LA246_0==Abstract) ) {s = 56;}

                        else if ( (LA246_0==Static) ) {s = 57;}

                        else if ( (LA246_0==As) ) {s = 58;}

                        else if ( (LA246_0==From) ) {s = 59;}

                        else if ( (LA246_0==Of) ) {s = 60;}

                        else if ( (LA246_0==Implements) ) {s = 61;}

                        else if ( (LA246_0==Interface) ) {s = 62;}

                        else if ( (LA246_0==Private) ) {s = 63;}

                        else if ( (LA246_0==Protected) ) {s = 64;}

                        else if ( (LA246_0==Public) ) {s = 65;}

                        else if ( (LA246_0==RULE_STRING) ) {s = 66;}

                        else if ( (LA246_0==RULE_DOUBLE||LA246_0==RULE_HEX_INT||LA246_0==RULE_OCTAL_INT||LA246_0==RULE_SCIENTIFIC_INT||LA246_0==RULE_INT) ) {s = 67;}

                        else if ( (LA246_0==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA246_0==LessThanSign) && (synpred132_InternalN4JSParser())) {s = 69;}

                        else if ( (LA246_0==Asterisk) && (synpred132_InternalN4JSParser())) {s = 70;}


                        input.seek(index246_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA246_1 = input.LA(1);


                        int index246_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA246_2 = input.LA(1);


                        int index246_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA246_3 = input.LA(1);


                        int index246_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA246_4 = input.LA(1);


                        int index246_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA246_5 = input.LA(1);


                        int index246_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA246_6 = input.LA(1);


                        int index246_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA246_7 = input.LA(1);


                        int index246_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA246_8 = input.LA(1);


                        int index246_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA246_9 = input.LA(1);


                        int index246_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA246_10 = input.LA(1);


                        int index246_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA246_11 = input.LA(1);


                        int index246_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA246_12 = input.LA(1);


                        int index246_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA246_13 = input.LA(1);


                        int index246_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA246_14 = input.LA(1);


                        int index246_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA246_15 = input.LA(1);


                        int index246_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA246_16 = input.LA(1);


                        int index246_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA246_17 = input.LA(1);


                        int index246_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA246_18 = input.LA(1);


                        int index246_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA246_19 = input.LA(1);


                        int index246_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA246_20 = input.LA(1);


                        int index246_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA246_21 = input.LA(1);


                        int index246_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA246_22 = input.LA(1);


                        int index246_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA246_23 = input.LA(1);


                        int index246_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA246_24 = input.LA(1);


                        int index246_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA246_25 = input.LA(1);


                        int index246_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA246_26 = input.LA(1);


                        int index246_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA246_27 = input.LA(1);


                        int index246_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA246_28 = input.LA(1);


                        int index246_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA246_29 = input.LA(1);


                        int index246_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 :
                        int LA246_30 = input.LA(1);


                        int index246_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 :
                        int LA246_31 = input.LA(1);


                        int index246_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 :
                        int LA246_32 = input.LA(1);


                        int index246_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 :
                        int LA246_33 = input.LA(1);


                        int index246_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 :
                        int LA246_34 = input.LA(1);


                        int index246_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 :
                        int LA246_35 = input.LA(1);


                        int index246_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 :
                        int LA246_36 = input.LA(1);


                        int index246_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 :
                        int LA246_37 = input.LA(1);


                        int index246_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 :
                        int LA246_38 = input.LA(1);


                        int index246_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 :
                        int LA246_39 = input.LA(1);


                        int index246_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 :
                        int LA246_40 = input.LA(1);


                        int index246_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 :
                        int LA246_41 = input.LA(1);


                        int index246_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 :
                        int LA246_42 = input.LA(1);


                        int index246_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 :
                        int LA246_43 = input.LA(1);


                        int index246_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 :
                        int LA246_44 = input.LA(1);


                        int index246_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 :
                        int LA246_45 = input.LA(1);


                        int index246_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 :
                        int LA246_46 = input.LA(1);


                        int index246_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 :
                        int LA246_47 = input.LA(1);


                        int index246_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 :
                        int LA246_48 = input.LA(1);


                        int index246_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 :
                        int LA246_49 = input.LA(1);


                        int index246_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 :
                        int LA246_50 = input.LA(1);


                        int index246_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 :
                        int LA246_51 = input.LA(1);


                        int index246_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 :
                        int LA246_52 = input.LA(1);


                        int index246_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 :
                        int LA246_53 = input.LA(1);


                        int index246_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 :
                        int LA246_54 = input.LA(1);


                        int index246_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 :
                        int LA246_55 = input.LA(1);


                        int index246_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 :
                        int LA246_56 = input.LA(1);


                        int index246_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 :
                        int LA246_57 = input.LA(1);


                        int index246_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 :
                        int LA246_58 = input.LA(1);


                        int index246_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 :
                        int LA246_59 = input.LA(1);


                        int index246_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 :
                        int LA246_60 = input.LA(1);


                        int index246_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 :
                        int LA246_61 = input.LA(1);


                        int index246_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 :
                        int LA246_62 = input.LA(1);


                        int index246_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 :
                        int LA246_63 = input.LA(1);


                        int index246_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 :
                        int LA246_64 = input.LA(1);


                        int index246_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 :
                        int LA246_65 = input.LA(1);


                        int index246_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index246_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 :
                        int LA246_66 = input.LA(1);


                        int index246_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 :
                        int LA246_67 = input.LA(1);


                        int index246_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 :
                        int LA246_68 = input.LA(1);


                        int index246_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred132_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index246_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 246, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_174s = "\17\uffff";
    static final String dfa_175s = "\10\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_176s = "\10\u0094\1\uffff\1\u0094\4\156\1\uffff";
    static final String dfa_177s = "\10\uffff\1\1\5\uffff\1\2";
    static final String dfa_178s = "\17\uffff}>";
    static final String[] dfa_179s = {
            "\1\15\1\12\2\16\1\5\23\16\1\6\1\16\1\3\1\4\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\13\1\1\1\16\5\uffff\7\16\21\uffff\5\16\22\uffff\1\10\1\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            ""
    };

    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final char[] dfa_175 = DFA.unpackEncodedStringToUnsignedChars(dfa_175s);
    static final char[] dfa_176 = DFA.unpackEncodedStringToUnsignedChars(dfa_176s);
    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final short[] dfa_178 = DFA.unpackEncodedString(dfa_178s);
    static final short[][] dfa_179 = unpackEncodedStringArray(dfa_179s);

    class DFA239 extends DFA {

        public DFA239(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = dfa_174;
            this.eof = dfa_174;
            this.min = dfa_175;
            this.max = dfa_176;
            this.accept = dfa_177;
            this.special = dfa_178;
            this.transition = dfa_179;
        }
        public String getDescription() {
            return "5713:14: ( (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_180s = "\10\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_181s = {
            "\1\15\1\12\2\16\1\5\23\16\1\6\1\16\1\3\1\4\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\13\1\1\1\16\5\uffff\7\16\21\uffff\5\16\7\uffff\1\16\12\uffff\1\10\1\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\6\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\61\10\5\uffff\7\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\11\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            ""
    };
    static final char[] dfa_180 = DFA.unpackEncodedStringToUnsignedChars(dfa_180s);
    static final short[][] dfa_181 = unpackEncodedStringArray(dfa_181s);

    class DFA241 extends DFA {

        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = dfa_174;
            this.eof = dfa_174;
            this.min = dfa_180;
            this.max = dfa_176;
            this.accept = dfa_177;
            this.special = dfa_178;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "5952:3: ( (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_182s = "\15\uffff";
    static final String dfa_183s = "\2\uffff\12\14\1\uffff";
    static final String dfa_184s = "\1\4\1\uffff\6\4\4\140\1\uffff";
    static final String dfa_185s = "\1\176\1\uffff\6\176\4\160\1\uffff";
    static final String dfa_186s = "\1\uffff\1\1\12\uffff\1\2";
    static final String dfa_187s = "\15\uffff}>";
    static final String[] dfa_188s = {
            "\1\13\1\10\1\14\1\uffff\1\5\3\14\2\uffff\1\14\4\uffff\2\14\3\uffff\1\14\1\uffff\1\14\1\uffff\1\6\1\uffff\1\3\1\4\7\uffff\1\12\1\uffff\1\14\1\2\3\uffff\1\14\1\uffff\1\1\1\uffff\1\11\1\1\7\uffff\2\14\1\uffff\1\14\23\uffff\1\14\3\uffff\1\14\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\7",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\10\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\14\5\uffff\1\1\1\14\1\uffff\1\1\6\uffff\1\14\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\10\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\14\5\uffff\1\1\1\14\1\uffff\1\1\6\uffff\1\14\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\10\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\14\5\uffff\1\1\1\14\1\uffff\1\1\6\uffff\1\14\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\10\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\14\5\uffff\1\1\1\14\1\uffff\1\1\6\uffff\1\14\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\10\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\14\5\uffff\1\1\1\14\1\uffff\1\1\6\uffff\1\14\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\10\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\14\1\uffff\1\1\3\uffff\1\1\1\14\1\uffff\1\1\6\uffff\1\14\15\uffff\1\1",
            "\1\14\6\uffff\1\14\6\uffff\1\1\1\uffff\1\14",
            "\1\14\6\uffff\1\14\6\uffff\1\1\1\uffff\1\14",
            "\1\14\6\uffff\1\14\6\uffff\1\1\1\uffff\1\14",
            "\1\14\6\uffff\1\14\6\uffff\1\1\1\uffff\1\14",
            ""
    };

    static final short[] dfa_182 = DFA.unpackEncodedString(dfa_182s);
    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA244 extends DFA {

        public DFA244(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 244;
            this.eot = dfa_182;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "5971:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA254 extends DFA {

        public DFA254(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 254;
            this.eot = dfa_168;
            this.eof = dfa_168;
            this.min = dfa_169;
            this.max = dfa_170;
            this.accept = dfa_171;
            this.special = dfa_172;
            this.transition = dfa_173;
        }
        public String getDescription() {
            return "5997:1: ( ( ( ( ( ( ( ruleTypeRef ) )? norm1_LiteralOrComputedPropertyName Colon ) )=> ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0= ruleTypeRef ) )? LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2= norm1_LiteralOrComputedPropertyName ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=>LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2= norm1_LiteralOrComputedPropertyName ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) norm1_LiteralOrComputedPropertyName LeftParenthesis ) | ( norm1_LiteralOrComputedPropertyName LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0= ruleTypeRef ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1= norm1_LiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0= norm1_LiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA254_0 = input.LA(1);


                        int index254_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA254_0==Void) ) {s = 1;}

                        else if ( (LA254_0==This) ) {s = 2;}

                        else if ( (LA254_0==Await) ) {s = 3;}

                        else if ( (LA254_0==Await_1) ) {s = 4;}

                        else if ( (LA254_0==Promisify) ) {s = 5;}

                        else if ( (LA254_0==Target) ) {s = 6;}

                        else if ( (LA254_0==RULE_IDENTIFIER) ) {s = 7;}

                        else if ( (LA254_0==Tilde) ) {s = 8;}

                        else if ( (LA254_0==This_1) ) {s = 9;}

                        else if ( (LA254_0==Constructor) ) {s = 10;}

                        else if ( (LA254_0==Type) ) {s = 11;}

                        else if ( (LA254_0==LeftCurlyBracket) ) {s = 12;}

                        else if ( (LA254_0==Union) ) {s = 13;}

                        else if ( (LA254_0==Intersection) ) {s = 14;}

                        else if ( (LA254_0==QuestionMark) ) {s = 15;}

                        else if ( (LA254_0==Break) ) {s = 16;}

                        else if ( (LA254_0==Case) ) {s = 17;}

                        else if ( (LA254_0==Catch) ) {s = 18;}

                        else if ( (LA254_0==Class) ) {s = 19;}

                        else if ( (LA254_0==Const) ) {s = 20;}

                        else if ( (LA254_0==Continue) ) {s = 21;}

                        else if ( (LA254_0==Debugger) ) {s = 22;}

                        else if ( (LA254_0==Default) ) {s = 23;}

                        else if ( (LA254_0==Delete) ) {s = 24;}

                        else if ( (LA254_0==Do) ) {s = 25;}

                        else if ( (LA254_0==Else) ) {s = 26;}

                        else if ( (LA254_0==Export) ) {s = 27;}

                        else if ( (LA254_0==Extends) ) {s = 28;}

                        else if ( (LA254_0==Finally) ) {s = 29;}

                        else if ( (LA254_0==For) ) {s = 30;}

                        else if ( (LA254_0==Function) ) {s = 31;}

                        else if ( (LA254_0==If) ) {s = 32;}

                        else if ( (LA254_0==Import) ) {s = 33;}

                        else if ( (LA254_0==In) ) {s = 34;}

                        else if ( (LA254_0==Instanceof) ) {s = 35;}

                        else if ( (LA254_0==New) ) {s = 36;}

                        else if ( (LA254_0==Return) ) {s = 37;}

                        else if ( (LA254_0==Super) ) {s = 38;}

                        else if ( (LA254_0==Switch) ) {s = 39;}

                        else if ( (LA254_0==Throw) ) {s = 40;}

                        else if ( (LA254_0==Try) ) {s = 41;}

                        else if ( (LA254_0==Typeof) ) {s = 42;}

                        else if ( (LA254_0==Var) ) {s = 43;}

                        else if ( (LA254_0==While) ) {s = 44;}

                        else if ( (LA254_0==With) ) {s = 45;}

                        else if ( (LA254_0==Yield) ) {s = 46;}

                        else if ( (LA254_0==Null) ) {s = 47;}

                        else if ( (LA254_0==True) ) {s = 48;}

                        else if ( (LA254_0==False) ) {s = 49;}

                        else if ( (LA254_0==Enum) ) {s = 50;}

                        else if ( (LA254_0==Get) ) {s = 51;}

                        else if ( (LA254_0==Set) ) {s = 52;}

                        else if ( (LA254_0==Let) ) {s = 53;}

                        else if ( (LA254_0==Project) ) {s = 54;}

                        else if ( (LA254_0==External) ) {s = 55;}

                        else if ( (LA254_0==Abstract) ) {s = 56;}

                        else if ( (LA254_0==Static) ) {s = 57;}

                        else if ( (LA254_0==As) ) {s = 58;}

                        else if ( (LA254_0==From) ) {s = 59;}

                        else if ( (LA254_0==Of) ) {s = 60;}

                        else if ( (LA254_0==Implements) ) {s = 61;}

                        else if ( (LA254_0==Interface) ) {s = 62;}

                        else if ( (LA254_0==Private) ) {s = 63;}

                        else if ( (LA254_0==Protected) ) {s = 64;}

                        else if ( (LA254_0==Public) ) {s = 65;}

                        else if ( (LA254_0==RULE_STRING) ) {s = 66;}

                        else if ( (LA254_0==RULE_DOUBLE||LA254_0==RULE_HEX_INT||LA254_0==RULE_OCTAL_INT||LA254_0==RULE_SCIENTIFIC_INT||LA254_0==RULE_INT) ) {s = 67;}

                        else if ( (LA254_0==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA254_0==LessThanSign) && (synpred141_InternalN4JSParser())) {s = 69;}

                        else if ( (LA254_0==Asterisk) && (synpred141_InternalN4JSParser())) {s = 70;}


                        input.seek(index254_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA254_1 = input.LA(1);


                        int index254_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA254_2 = input.LA(1);


                        int index254_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA254_3 = input.LA(1);


                        int index254_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA254_4 = input.LA(1);


                        int index254_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA254_5 = input.LA(1);


                        int index254_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA254_6 = input.LA(1);


                        int index254_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA254_7 = input.LA(1);


                        int index254_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA254_8 = input.LA(1);


                        int index254_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA254_9 = input.LA(1);


                        int index254_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA254_10 = input.LA(1);


                        int index254_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA254_11 = input.LA(1);


                        int index254_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA254_12 = input.LA(1);


                        int index254_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA254_13 = input.LA(1);


                        int index254_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA254_14 = input.LA(1);


                        int index254_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA254_15 = input.LA(1);


                        int index254_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA254_16 = input.LA(1);


                        int index254_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA254_17 = input.LA(1);


                        int index254_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA254_18 = input.LA(1);


                        int index254_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA254_19 = input.LA(1);


                        int index254_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA254_20 = input.LA(1);


                        int index254_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA254_21 = input.LA(1);


                        int index254_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA254_22 = input.LA(1);


                        int index254_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA254_23 = input.LA(1);


                        int index254_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA254_24 = input.LA(1);


                        int index254_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA254_25 = input.LA(1);


                        int index254_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA254_26 = input.LA(1);


                        int index254_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA254_27 = input.LA(1);


                        int index254_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 :
                        int LA254_28 = input.LA(1);


                        int index254_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 :
                        int LA254_29 = input.LA(1);


                        int index254_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 :
                        int LA254_30 = input.LA(1);


                        int index254_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 :
                        int LA254_31 = input.LA(1);


                        int index254_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 :
                        int LA254_32 = input.LA(1);


                        int index254_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 :
                        int LA254_33 = input.LA(1);


                        int index254_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 :
                        int LA254_34 = input.LA(1);


                        int index254_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 :
                        int LA254_35 = input.LA(1);


                        int index254_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 :
                        int LA254_36 = input.LA(1);


                        int index254_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 :
                        int LA254_37 = input.LA(1);


                        int index254_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 :
                        int LA254_38 = input.LA(1);


                        int index254_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 :
                        int LA254_39 = input.LA(1);


                        int index254_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 :
                        int LA254_40 = input.LA(1);


                        int index254_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 :
                        int LA254_41 = input.LA(1);


                        int index254_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 :
                        int LA254_42 = input.LA(1);


                        int index254_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 :
                        int LA254_43 = input.LA(1);


                        int index254_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 :
                        int LA254_44 = input.LA(1);


                        int index254_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 :
                        int LA254_45 = input.LA(1);


                        int index254_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 :
                        int LA254_46 = input.LA(1);


                        int index254_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 :
                        int LA254_47 = input.LA(1);


                        int index254_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 :
                        int LA254_48 = input.LA(1);


                        int index254_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 :
                        int LA254_49 = input.LA(1);


                        int index254_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 :
                        int LA254_50 = input.LA(1);


                        int index254_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}


                        input.seek(index254_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 :
                        int LA254_51 = input.LA(1);


                        int index254_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 :
                        int LA254_52 = input.LA(1);


                        int index254_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred138_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 :
                        int LA254_53 = input.LA(1);


                        int index254_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 :
                        int LA254_54 = input.LA(1);


                        int index254_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 :
                        int LA254_55 = input.LA(1);


                        int index254_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 :
                        int LA254_56 = input.LA(1);


                        int index254_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 :
                        int LA254_57 = input.LA(1);


                        int index254_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 :
                        int LA254_58 = input.LA(1);


                        int index254_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 :
                        int LA254_59 = input.LA(1);


                        int index254_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 :
                        int LA254_60 = input.LA(1);


                        int index254_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 :
                        int LA254_61 = input.LA(1);


                        int index254_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 :
                        int LA254_62 = input.LA(1);


                        int index254_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalN4JSParser()) ) {s = 71;}

                        else if ( (synpred141_InternalN4JSParser()) ) {s = 70;}

                        else if ( (true) ) {s = 73;}


                        input.seek(index254_62);
                        if ( s>=0 ) return s;
                        break;

            public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA287_1 = input.LA(1);


                        int index287_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA287_1==FullStop) && (synpred164_InternalN4JSParser())) {s = 3;}

                        else if ( (LA287_1==New) && (synpred165_InternalN4JSParser())) {s = 4;}

                        else if ( (LA287_1==This_1) && (synpred165_InternalN4JSParser())) {s = 5;}

                        else if ( (LA287_1==Super) && (synpred165_InternalN4JSParser())) {s = 6;}

                        else if ( (LA287_1==RULE_IDENTIFIER) && (synpred165_InternalN4JSParser())) {s = 7;}

                        else if ( (LA287_1==Yield) && (synpred165_InternalN4JSParser())) {s = 8;}

                        else if ( (LA287_1==Get) && (synpred165_InternalN4JSParser())) {s = 9;}

                        else if ( (LA287_1==Set) && (synpred165_InternalN4JSParser())) {s = 10;}

                        else if ( (LA287_1==Let) && (synpred165_InternalN4JSParser())) {s = 11;}

                        else if ( (LA287_1==Project) && (synpred165_InternalN4JSParser())) {s = 12;}

                        else if ( (LA287_1==External) && (synpred165_InternalN4JSParser())) {s = 13;}

                        else if ( (LA287_1==Abstract) && (synpred165_InternalN4JSParser())) {s = 14;}

                        else if ( (LA287_1==Static) && (synpred165_InternalN4JSParser())) {s = 15;}

                        else if ( (LA287_1==As) && (synpred165_InternalN4JSParser())) {s = 16;}

                        else if ( (LA287_1==From) && (synpred165_InternalN4JSParser())) {s = 17;}

                        else if ( (LA287_1==Constructor) && (synpred165_InternalN4JSParser())) {s = 18;}

                        else if ( (LA287_1==Of) && (synpred165_InternalN4JSParser())) {s = 19;}

                        else if ( (LA287_1==Target) && (synpred165_InternalN4JSParser())) {s = 20;}

                        else if ( (LA287_1==Type) && (synpred165_InternalN4JSParser())) {s = 21;}

                        else if ( (LA287_1==Union) && (synpred165_InternalN4JSParser())) {s = 22;}

                        else if ( (LA287_1==Intersection) && (synpred165_InternalN4JSParser())) {s = 23;}

                        else if ( (LA287_1==This) && (synpred165_InternalN4JSParser())) {s = 24;}

                        else if ( (LA287_1==Await) && (synpred165_InternalN4JSParser())) {s = 25;}

                        else if ( (LA287_1==Promisify) && (synpred165_InternalN4JSParser())) {s = 26;}

                        else if ( (LA287_1==Await_1) && (synpred165_InternalN4JSParser())) {s = 27;}

                        else if ( (LA287_1==Implements) && (synpred165_InternalN4JSParser())) {s = 28;}

                        else if ( (LA287_1==Interface) && (synpred165_InternalN4JSParser())) {s = 29;}

                        else if ( (LA287_1==Private) && (synpred165_InternalN4JSParser())) {s = 30;}

                        else if ( (LA287_1==Protected) && (synpred165_InternalN4JSParser())) {s = 31;}

                        else if ( (LA287_1==Public) && (synpred165_InternalN4JSParser())) {s = 32;}

                        else if ( (LA287_1==LessThanSign) && (synpred165_InternalN4JSParser())) {s = 33;}

                        else if ( (LA287_1==RULE_DOUBLE) && (synpred165_InternalN4JSParser())) {s = 34;}

                        else if ( (LA287_1==RULE_INT) && (synpred165_InternalN4JSParser())) {s = 35;}

                        else if ( (LA287_1==RULE_BINARY_INT) && (synpred165_InternalN4JSParser())) {s = 36;}

                        else if ( (LA287_1==RULE_OCTAL_INT) && (synpred165_InternalN4JSParser())) {s = 37;}

                        else if ( (LA287_1==RULE_LEGACY_OCTAL_INT) && (synpred165_InternalN4JSParser())) {s = 38;}

                        else if ( (LA287_1==RULE_HEX_INT) && (synpred165_InternalN4JSParser())) {s = 39;}

                        else if ( (LA287_1==RULE_SCIENTIFIC_INT) && (synpred165_InternalN4JSParser())) {s = 40;}

                        else if ( (LA287_1==True) && (synpred165_InternalN4JSParser())) {s = 41;}

                        else if ( (LA287_1==False) && (synpred165_InternalN4JSParser())) {s = 42;}

                        else if ( (LA287_1==RULE_STRING) && (synpred165_InternalN4JSParser())) {s = 43;}

                        else if ( (LA287_1==Null) && (synpred165_InternalN4JSParser())) {s = 44;}

                        else if ( (LA287_1==Solidus) && (synpred165_InternalN4JSParser())) {s = 45;}

                        else if ( (LA287_1==SolidusEqualsSign) && (synpred165_InternalN4JSParser())) {s = 46;}

                        else if ( (LA287_1==LeftSquareBracket) && (synpred165_InternalN4JSParser())) {s = 47;}

                        else if ( (LA287_1==LeftCurlyBracket) && (synpred165_InternalN4JSParser())) {s = 48;}

                        else if ( (LA287_1==LeftParenthesis) && (synpred165_InternalN4JSParser())) {s = 49;}

                        else if ( (LA287_1==CommercialAt) && (synpred165_InternalN4JSParser())) {s = 50;}

                        else if ( (LA287_1==Function) && (synpred165_InternalN4JSParser())) {s = 51;}

                        else if ( (LA287_1==Class) && (synpred165_InternalN4JSParser())) {s = 52;}

                        else if ( (LA287_1==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred165_InternalN4JSParser())) {s = 53;}

                        else if ( (LA287_1==RULE_TEMPLATE_HEAD) && (synpred165_InternalN4JSParser())) {s = 54;}


                        input.seek(index287_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 287, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_196s = "\66\uffff";
    static final String dfa_197s = "\2\4\64\uffff";
    static final String dfa_198s = "\2\u0094\64\uffff";
    static final String dfa_199s = "\2\uffff\1\3\1\1\62\2";
    static final String dfa_200s = "\1\uffff\1\0\64\uffff}>";
    static final String[] dfa_201s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\10\uffff\2\2\1\1\1\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\31\1\34\1\36\1\15\2\uffff\1\14\1\62\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\30\1\32\2\uffff\1\63\1\uffff\1\51\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\53\1\5\1\50\1\24\10\uffff\1\10\1\12\1\4\1\11\13\uffff\1\55\7\uffff\1\17\3\uffff\1\22\5\uffff\1\60\5\uffff\1\3\1\54\2\uffff\1\40\3\uffff\1\61\1\56\2\uffff\1\57\6\uffff\1\41\1\uffff\1\46\1\43\1\44\1\45\1\uffff\1\47\1\uffff\1\7\2\uffff\1\52\11\uffff\1\65\1\64\7\uffff\1\42",
            ""
    };

    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[] dfa_199 = DFA.unpackEncodedString(dfa_199s);
    static final short[] dfa_200 = DFA.unpackEncodedString(dfa_200s);
    static final short[][] dfa_201 = unpackEncodedStringArray(dfa_201s);

    class DFA293 extends DFA {

        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = dfa_196;
            this.eof = dfa_196;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_199;
            this.special = dfa_200;
            this.transition = dfa_201;
        }
        public String getDescription() {
            return "7278:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA293_1 = input.LA(1);


                        int index293_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA293_1==FullStop) && (synpred168_InternalN4JSParser())) {s = 3;}

                        else if ( (LA293_1==New) && (synpred169_InternalN4JSParser())) {s = 4;}

                        else if ( (LA293_1==This_1) && (synpred169_InternalN4JSParser())) {s = 5;}

                        else if ( (LA293_1==Super) && (synpred169_InternalN4JSParser())) {s = 6;}

                        else if ( (LA293_1==RULE_IDENTIFIER) && (synpred169_InternalN4JSParser())) {s = 7;}

                        else if ( (LA293_1==Get) && (synpred169_InternalN4JSParser())) {s = 8;}

                        else if ( (LA293_1==Set) && (synpred169_InternalN4JSParser())) {s = 9;}

                        else if ( (LA293_1==Let) && (synpred169_InternalN4JSParser())) {s = 10;}

                        else if ( (LA293_1==Project) && (synpred169_InternalN4JSParser())) {s = 11;}

                        else if ( (LA293_1==External) && (synpred169_InternalN4JSParser())) {s = 12;}

                        else if ( (LA293_1==Abstract) && (synpred169_InternalN4JSParser())) {s = 13;}

                        else if ( (LA293_1==Static) && (synpred169_InternalN4JSParser())) {s = 14;}

                        else if ( (LA293_1==As) && (synpred169_InternalN4JSParser())) {s = 15;}

                        else if ( (LA293_1==From) && (synpred169_InternalN4JSParser())) {s = 16;}

                        else if ( (LA293_1==Constructor) && (synpred169_InternalN4JSParser())) {s = 17;}

                        else if ( (LA293_1==Of) && (synpred169_InternalN4JSParser())) {s = 18;}

                        else if ( (LA293_1==Target) && (synpred169_InternalN4JSParser())) {s = 19;}

                        else if ( (LA293_1==Type) && (synpred169_InternalN4JSParser())) {s = 20;}

                        else if ( (LA293_1==Union) && (synpred169_InternalN4JSParser())) {s = 21;}

                        else if ( (LA293_1==Intersection) && (synpred169_InternalN4JSParser())) {s = 22;}

                        else if ( (LA293_1==This) && (synpred169_InternalN4JSParser())) {s = 23;}

                        else if ( (LA293_1==Await) && (synpred169_InternalN4JSParser())) {s = 24;}

                        else if ( (LA293_1==Promisify) && (synpred169_InternalN4JSParser())) {s = 25;}

                        else if ( (LA293_1==Await_1) && (synpred169_InternalN4JSParser())) {s = 26;}

                        else if ( (LA293_1==Implements) && (synpred169_InternalN4JSParser())) {s = 27;}

                        else if ( (LA293_1==Interface) && (synpred169_InternalN4JSParser())) {s = 28;}

                        else if ( (LA293_1==Private) && (synpred169_InternalN4JSParser())) {s = 29;}

                        else if ( (LA293_1==Protected) && (synpred169_InternalN4JSParser())) {s = 30;}

                        else if ( (LA293_1==Public) && (synpred169_InternalN4JSParser())) {s = 31;}

                        else if ( (LA293_1==LessThanSign) && (synpred169_InternalN4JSParser())) {s = 32;}

                        else if ( (LA293_1==RULE_DOUBLE) && (synpred169_InternalN4JSParser())) {s = 33;}

                        else if ( (LA293_1==RULE_INT) && (synpred169_InternalN4JSParser())) {s = 34;}

                        else if ( (LA293_1==RULE_BINARY_INT) && (synpred169_InternalN4JSParser())) {s = 35;}

                        else if ( (LA293_1==RULE_OCTAL_INT) && (synpred169_InternalN4JSParser())) {s = 36;}

                        else if ( (LA293_1==RULE_LEGACY_OCTAL_INT) && (synpred169_InternalN4JSParser())) {s = 37;}

                        else if ( (LA293_1==RULE_HEX_INT) && (synpred169_InternalN4JSParser())) {s = 38;}

                        else if ( (LA293_1==RULE_SCIENTIFIC_INT) && (synpred169_InternalN4JSParser())) {s = 39;}

                        else if ( (LA293_1==True) && (synpred169_InternalN4JSParser())) {s = 40;}

                        else if ( (LA293_1==False) && (synpred169_InternalN4JSParser())) {s = 41;}

                        else if ( (LA293_1==RULE_STRING) && (synpred169_InternalN4JSParser())) {s = 42;}

                        else if ( (LA293_1==Null) && (synpred169_InternalN4JSParser())) {s = 43;}

                        else if ( (LA293_1==Solidus) && (synpred169_InternalN4JSParser())) {s = 44;}

                        else if ( (LA293_1==SolidusEqualsSign) && (synpred169_InternalN4JSParser())) {s = 45;}

                        else if ( (LA293_1==LeftSquareBracket) && (synpred169_InternalN4JSParser())) {s = 46;}

                        else if ( (LA293_1==LeftCurlyBracket) && (synpred169_InternalN4JSParser())) {s = 47;}

                        else if ( (LA293_1==LeftParenthesis) && (synpred169_InternalN4JSParser())) {s = 48;}

                        else if ( (LA293_1==CommercialAt) && (synpred169_InternalN4JSParser())) {s = 49;}

                        else if ( (LA293_1==Function) && (synpred169_InternalN4JSParser())) {s = 50;}

                        else if ( (LA293_1==Class) && (synpred169_InternalN4JSParser())) {s = 51;}

                        else if ( (LA293_1==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred169_InternalN4JSParser())) {s = 52;}

                        else if ( (LA293_1==RULE_TEMPLATE_HEAD) && (synpred169_InternalN4JSParser())) {s = 53;}


                        input.seek(index293_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 293, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_202s = "\102\uffff";
    static final String dfa_203s = "\1\1\101\uffff";
    static final String dfa_204s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_205s = "\1\u0098\1\uffff\1\u0094\1\uffff\1\u0094\75\uffff";
    static final String dfa_206s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_207s = "\1\1\3\uffff\1\0\75\uffff}>";
    static final String[] dfa_208s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\7\uffff\4\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\7\uffff\1\1",
            "\1\31\1\24\1\36\1\uffff\1\34\1\37\1\41\1\20\2\uffff\1\17\1\65\3\uffff\1\40\1\16\1\71\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\73\1\33\1\35\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\56\1\7\1\53\1\27\1\72\7\uffff\1\13\1\15\1\6\1\14\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\7\uffff\1\45",
            ""
    };

    static final short[] dfa_202 = DFA.unpackEncodedString(dfa_202s);
    static final short[] dfa_203 = DFA.unpackEncodedString(dfa_203s);
    static final char[] dfa_204 = DFA.unpackEncodedStringToUnsignedChars(dfa_204s);
    static final char[] dfa_205 = DFA.unpackEncodedStringToUnsignedChars(dfa_205s);
    static final short[] dfa_206 = DFA.unpackEncodedString(dfa_206s);
    static final short[] dfa_207 = DFA.unpackEncodedString(dfa_207s);
    static final short[][] dfa_208 = unpackEncodedStringArray(dfa_208s);

    class DFA306 extends DFA {

        public DFA306(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 306;
            this.eot = dfa_202;
            this.eof = dfa_203;
            this.min = dfa_204;
            this.max = dfa_205;
            this.accept = dfa_206;
            this.special = dfa_207;
            this.transition = dfa_208;
        }
        public String getDescription() {
            return "()* loopback of 7683:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA306_4 = input.LA(1);


                        int index306_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA306_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        else if ( (LA306_4==GreaterThanSign) && (synpred180_InternalN4JSParser())) {s = 5;}

                        else if ( (LA306_4==New) && (synpred180_InternalN4JSParser())) {s = 6;}

                        else if ( (LA306_4==This_1) && (synpred180_InternalN4JSParser())) {s = 7;}

                        else if ( (LA306_4==Super) && (synpred180_InternalN4JSParser())) {s = 8;}

                        else if ( (LA306_4==RULE_IDENTIFIER) && (synpred180_InternalN4JSParser())) {s = 9;}

                        else if ( (LA306_4==Yield) && (synpred180_InternalN4JSParser())) {s = 10;}

                        else if ( (LA306_4==Get) && (synpred180_InternalN4JSParser())) {s = 11;}

                        else if ( (LA306_4==Set) && (synpred180_InternalN4JSParser())) {s = 12;}

                        else if ( (LA306_4==Let) && (synpred180_InternalN4JSParser())) {s = 13;}

                        else if ( (LA306_4==Project) && (synpred180_InternalN4JSParser())) {s = 14;}

                        else if ( (LA306_4==External) && (synpred180_InternalN4JSParser())) {s = 15;}

                        else if ( (LA306_4==Abstract) && (synpred180_InternalN4JSParser())) {s = 16;}

                        else if ( (LA306_4==Static) && (synpred180_InternalN4JSParser())) {s = 17;}

                        else if ( (LA306_4==As) && (synpred180_InternalN4JSParser())) {s = 18;}

                        else if ( (LA306_4==From) && (synpred180_InternalN4JSParser())) {s = 19;}

                        else if ( (LA306_4==Constructor) && (synpred180_InternalN4JSParser())) {s = 20;}

                        else if ( (LA306_4==Of) && (synpred180_InternalN4JSParser())) {s = 21;}

                        else if ( (LA306_4==Target) && (synpred180_InternalN4JSParser())) {s = 22;}

                        else if ( (LA306_4==Type) && (synpred180_InternalN4JSParser())) {s = 23;}

                        else if ( (LA306_4==Union) && (synpred180_InternalN4JSParser())) {s = 24;}

                        else if ( (LA306_4==Intersection) && (synpred180_InternalN4JSParser())) {s = 25;}

                        else if ( (LA306_4==This) && (synpred180_InternalN4JSParser())) {s = 26;}

                        else if ( (LA306_4==Await) && (synpred180_InternalN4JSParser())) {s = 27;}

                        else if ( (LA306_4==Promisify) && (synpred180_InternalN4JSParser())) {s = 28;}

                        else if ( (LA306_4==Await_1) && (synpred180_InternalN4JSParser())) {s = 29;}

                        else if ( (LA306_4==Implements) && (synpred180_InternalN4JSParser())) {s = 30;}

                        else if ( (LA306_4==Interface) && (synpred180_InternalN4JSParser())) {s = 31;}

                        else if ( (LA306_4==Private) && (synpred180_InternalN4JSParser())) {s = 32;}

                        else if ( (LA306_4==Protected) && (synpred180_InternalN4JSParser())) {s = 33;}

                        else if ( (LA306_4==Public) && (synpred180_InternalN4JSParser())) {s = 34;}

                        else if ( (LA306_4==LessThanSign) && (synpred180_InternalN4JSParser())) {s = 35;}

                        else if ( (LA306_4==RULE_DOUBLE) && (synpred180_InternalN4JSParser())) {s = 36;}

                        else if ( (LA306_4==RULE_INT) && (synpred180_InternalN4JSParser())) {s = 37;}

                        else if ( (LA306_4==RULE_BINARY_INT) && (synpred180_InternalN4JSParser())) {s = 38;}

                        else if ( (LA306_4==RULE_OCTAL_INT) && (synpred180_InternalN4JSParser())) {s = 39;}

                        else if ( (LA306_4==RULE_LEGACY_OCTAL_INT) && (synpred180_InternalN4JSParser())) {s = 40;}

                        else if ( (LA306_4==RULE_HEX_INT) && (synpred180_InternalN4JSParser())) {s = 41;}

                        else if ( (LA306_4==RULE_SCIENTIFIC_INT) && (synpred180_InternalN4JSParser())) {s = 42;}

                        else if ( (LA306_4==True) && (synpred180_InternalN4JSParser())) {s = 43;}

                        else if ( (LA306_4==False) && (synpred180_InternalN4JSParser())) {s = 44;}

                        else if ( (LA306_4==RULE_STRING) && (synpred180_InternalN4JSParser())) {s = 45;}

                        else if ( (LA306_4==Null) && (synpred180_InternalN4JSParser())) {s = 46;}

                        else if ( (LA306_4==Solidus) && (synpred180_InternalN4JSParser())) {s = 47;}

                        else if ( (LA306_4==SolidusEqualsSign) && (synpred180_InternalN4JSParser())) {s = 48;}

                        else if ( (LA306_4==LeftSquareBracket) && (synpred180_InternalN4JSParser())) {s = 49;}

                        else if ( (LA306_4==LeftCurlyBracket) && (synpred180_InternalN4JSParser())) {s = 50;}

                        else if ( (LA306_4==LeftParenthesis) && (synpred180_InternalN4JSParser())) {s = 51;}

                        else if ( (LA306_4==CommercialAt) && (synpred180_InternalN4JSParser())) {s = 52;}

                        else if ( (LA306_4==Function) && (synpred180_InternalN4JSParser())) {s = 53;}

                        else if ( (LA306_4==Class) && (synpred180_InternalN4JSParser())) {s = 54;}

                        else if ( (LA306_4==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred180_InternalN4JSParser())) {s = 55;}

                        else if ( (LA306_4==RULE_TEMPLATE_HEAD) && (synpred180_InternalN4JSParser())) {s = 56;}

                        else if ( (LA306_4==Delete) && (synpred180_InternalN4JSParser())) {s = 57;}

                        else if ( (LA306_4==Void) && (synpred180_InternalN4JSParser())) {s = 58;}

                        else if ( (LA306_4==Typeof) && (synpred180_InternalN4JSParser())) {s = 59;}

                        else if ( (LA306_4==PlusSignPlusSign) && (synpred180_InternalN4JSParser())) {s = 60;}

                        else if ( (LA306_4==HyphenMinusHyphenMinus) && (synpred180_InternalN4JSParser())) {s = 61;}

                        else if ( (LA306_4==PlusSign) && (synpred180_InternalN4JSParser())) {s = 62;}

                        else if ( (LA306_4==HyphenMinus) && (synpred180_InternalN4JSParser())) {s = 63;}

                        else if ( (LA306_4==Tilde) && (synpred180_InternalN4JSParser())) {s = 64;}

                        else if ( (LA306_4==ExclamationMark) && (synpred180_InternalN4JSParser())) {s = 65;}


                        input.seek(index306_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA306_0 = input.LA(1);


                        int index306_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA306_0==EOF||LA306_0==Instanceof||LA306_0==ExclamationMarkEqualsSignEqualsSign||(LA306_0>=LessThanSignLessThanSignEqualsSign && LA306_0<=EqualsSignEqualsSignEqualsSign)||(LA306_0>=ExclamationMarkEqualsSign && LA306_0<=AsteriskEqualsSign)||LA306_0==PlusSignEqualsSign||(LA306_0>=HyphenMinusEqualsSign && LA306_0<=SolidusEqualsSign)||(LA306_0>=LessThanSignEqualsSign && LA306_0<=EqualsSignEqualsSign)||LA306_0==GreaterThanSignEqualsSign||LA306_0==CircumflexAccentEqualsSign||(LA306_0>=In && LA306_0<=VerticalLineVerticalLine)||LA306_0==Ampersand||LA306_0==RightParenthesis||LA306_0==Comma||(LA306_0>=Colon && LA306_0<=EqualsSign)||LA306_0==QuestionMark||(LA306_0>=RightSquareBracket && LA306_0<=CircumflexAccent)||(LA306_0>=VerticalLine && LA306_0<=RightCurlyBracket)||LA306_0==RULE_ML_COMMENT||LA306_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA306_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA306_0==LessThanSignLessThanSign) && (synpred180_InternalN4JSParser())) {s = 3;}


                        input.seek(index306_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 306, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_209s = "\1\1\100\uffff";
    static final String dfa_210s = "\1\7\1\uffff\1\4\1\uffff\1\4\74\uffff";
    static final String dfa_211s = "\1\u0098\1\uffff\1\u0094\1\uffff\1\u0094\74\uffff";
    static final String dfa_212s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\74\1";
    static final String dfa_213s = "\1\1\3\uffff\1\0\74\uffff}>";
    static final String[] dfa_214s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\7\uffff\4\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\7\uffff\1\1",
            "\1\30\1\23\1\35\1\uffff\1\33\1\36\1\40\1\17\2\uffff\1\16\1\64\3\uffff\1\37\1\15\1\70\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\72\1\32\1\34\2\uffff\1\65\1\uffff\1\53\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\55\1\7\1\52\1\26\1\71\7\uffff\1\12\1\14\1\6\1\13\7\uffff\1\73\1\uffff\1\74\1\uffff\1\57\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\100\2\uffff\1\62\2\uffff\1\75\1\uffff\1\76\1\uffff\1\56\2\uffff\1\42\1\uffff\1\5\1\uffff\1\63\1\60\2\uffff\1\61\2\uffff\1\77\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\11\2\uffff\1\54\11\uffff\1\67\1\66\7\uffff\1\44",
            ""
    };
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final char[] dfa_210 = DFA.unpackEncodedStringToUnsignedChars(dfa_210s);
    static final char[] dfa_211 = DFA.unpackEncodedStringToUnsignedChars(dfa_211s);
    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final short[] dfa_213 = DFA.unpackEncodedString(dfa_213s);
    static final short[][] dfa_214 = unpackEncodedStringArray(dfa_214s);

    class DFA307 extends DFA {

        public DFA307(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 307;
            this.eot = dfa_115;
            this.eof = dfa_209;
            this.min = dfa_210;
            this.max = dfa_211;
            this.accept = dfa_212;
            this.special = dfa_213;
            this.transition = dfa_214;
        }
        public String getDescription() {
            return "()* loopback of 7712:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA307_4 = input.LA(1);


                        int index307_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA307_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        else if ( (LA307_4==GreaterThanSign) && (synpred181_InternalN4JSParser())) {s = 5;}

                        else if ( (LA307_4==New) && (synpred181_InternalN4JSParser())) {s = 6;}

                        else if ( (LA307_4==This_1) && (synpred181_InternalN4JSParser())) {s = 7;}

                        else if ( (LA307_4==Super) && (synpred181_InternalN4JSParser())) {s = 8;}

                        else if ( (LA307_4==RULE_IDENTIFIER) && (synpred181_InternalN4JSParser())) {s = 9;}

                        else if ( (LA307_4==Get) && (synpred181_InternalN4JSParser())) {s = 10;}

                        else if ( (LA307_4==Set) && (synpred181_InternalN4JSParser())) {s = 11;}

                        else if ( (LA307_4==Let) && (synpred181_InternalN4JSParser())) {s = 12;}

                        else if ( (LA307_4==Project) && (synpred181_InternalN4JSParser())) {s = 13;}

                        else if ( (LA307_4==External) && (synpred181_InternalN4JSParser())) {s = 14;}

                        else if ( (LA307_4==Abstract) && (synpred181_InternalN4JSParser())) {s = 15;}

                        else if ( (LA307_4==Static) && (synpred181_InternalN4JSParser())) {s = 16;}

                        else if ( (LA307_4==As) && (synpred181_InternalN4JSParser())) {s = 17;}

                        else if ( (LA307_4==From) && (synpred181_InternalN4JSParser())) {s = 18;}

                        else if ( (LA307_4==Constructor) && (synpred181_InternalN4JSParser())) {s = 19;}

                        else if ( (LA307_4==Of) && (synpred181_InternalN4JSParser())) {s = 20;}

                        else if ( (LA307_4==Target) && (synpred181_InternalN4JSParser())) {s = 21;}

                        else if ( (LA307_4==Type) && (synpred181_InternalN4JSParser())) {s = 22;}

                        else if ( (LA307_4==Union) && (synpred181_InternalN4JSParser())) {s = 23;}

                        else if ( (LA307_4==Intersection) && (synpred181_InternalN4JSParser())) {s = 24;}

                        else if ( (LA307_4==This) && (synpred181_InternalN4JSParser())) {s = 25;}

                        else if ( (LA307_4==Await) && (synpred181_InternalN4JSParser())) {s = 26;}

                        else if ( (LA307_4==Promisify) && (synpred181_InternalN4JSParser())) {s = 27;}

                        else if ( (LA307_4==Await_1) && (synpred181_InternalN4JSParser())) {s = 28;}

                        else if ( (LA307_4==Implements) && (synpred181_InternalN4JSParser())) {s = 29;}

                        else if ( (LA307_4==Interface) && (synpred181_InternalN4JSParser())) {s = 30;}

                        else if ( (LA307_4==Private) && (synpred181_InternalN4JSParser())) {s = 31;}

                        else if ( (LA307_4==Protected) && (synpred181_InternalN4JSParser())) {s = 32;}

                        else if ( (LA307_4==Public) && (synpred181_InternalN4JSParser())) {s = 33;}

                        else if ( (LA307_4==LessThanSign) && (synpred181_InternalN4JSParser())) {s = 34;}

                        else if ( (LA307_4==RULE_DOUBLE) && (synpred181_InternalN4JSParser())) {s = 35;}

                        else if ( (LA307_4==RULE_INT) && (synpred181_InternalN4JSParser())) {s = 36;}

                        else if ( (LA307_4==RULE_BINARY_INT) && (synpred181_InternalN4JSParser())) {s = 37;}

                        else if ( (LA307_4==RULE_OCTAL_INT) && (synpred181_InternalN4JSParser())) {s = 38;}

                        else if ( (LA307_4==RULE_LEGACY_OCTAL_INT) && (synpred181_InternalN4JSParser())) {s = 39;}

                        else if ( (LA307_4==RULE_HEX_INT) && (synpred181_InternalN4JSParser())) {s = 40;}

                        else if ( (LA307_4==RULE_SCIENTIFIC_INT) && (synpred181_InternalN4JSParser())) {s = 41;}

                        else if ( (LA307_4==True) && (synpred181_InternalN4JSParser())) {s = 42;}

                        else if ( (LA307_4==False) && (synpred181_InternalN4JSParser())) {s = 43;}

                        else if ( (LA307_4==RULE_STRING) && (synpred181_InternalN4JSParser())) {s = 44;}

                        else if ( (LA307_4==Null) && (synpred181_InternalN4JSParser())) {s = 45;}

                        else if ( (LA307_4==Solidus) && (synpred181_InternalN4JSParser())) {s = 46;}

                        else if ( (LA307_4==SolidusEqualsSign) && (synpred181_InternalN4JSParser())) {s = 47;}

                        else if ( (LA307_4==LeftSquareBracket) && (synpred181_InternalN4JSParser())) {s = 48;}

                        else if ( (LA307_4==LeftCurlyBracket) && (synpred181_InternalN4JSParser())) {s = 49;}

                        else if ( (LA307_4==LeftParenthesis) && (synpred181_InternalN4JSParser())) {s = 50;}

                        else if ( (LA307_4==CommercialAt) && (synpred181_InternalN4JSParser())) {s = 51;}

                        else if ( (LA307_4==Function) && (synpred181_InternalN4JSParser())) {s = 52;}

                        else if ( (LA307_4==Class) && (synpred181_InternalN4JSParser())) {s = 53;}

                        else if ( (LA307_4==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred181_InternalN4JSParser())) {s = 54;}

                        else if ( (LA307_4==RULE_TEMPLATE_HEAD) && (synpred181_InternalN4JSParser())) {s = 55;}

                        else if ( (LA307_4==Delete) && (synpred181_InternalN4JSParser())) {s = 56;}

                        else if ( (LA307_4==Void) && (synpred181_InternalN4JSParser())) {s = 57;}

                        else if ( (LA307_4==Typeof) && (synpred181_InternalN4JSParser())) {s = 58;}

                        else if ( (LA307_4==PlusSignPlusSign) && (synpred181_InternalN4JSParser())) {s = 59;}

                        else if ( (LA307_4==HyphenMinusHyphenMinus) && (synpred181_InternalN4JSParser())) {s = 60;}

                        else if ( (LA307_4==PlusSign) && (synpred181_InternalN4JSParser())) {s = 61;}

                        else if ( (LA307_4==HyphenMinus) && (synpred181_InternalN4JSParser())) {s = 62;}

                        else if ( (LA307_4==Tilde) && (synpred181_InternalN4JSParser())) {s = 63;}

                        else if ( (LA307_4==ExclamationMark) && (synpred181_InternalN4JSParser())) {s = 64;}


                        input.seek(index307_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA307_0 = input.LA(1);


                        int index307_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA307_0==EOF||LA307_0==Instanceof||LA307_0==ExclamationMarkEqualsSignEqualsSign||(LA307_0>=LessThanSignLessThanSignEqualsSign && LA307_0<=EqualsSignEqualsSignEqualsSign)||(LA307_0>=ExclamationMarkEqualsSign && LA307_0<=AsteriskEqualsSign)||LA307_0==PlusSignEqualsSign||(LA307_0>=HyphenMinusEqualsSign && LA307_0<=SolidusEqualsSign)||(LA307_0>=LessThanSignEqualsSign && LA307_0<=EqualsSignEqualsSign)||LA307_0==GreaterThanSignEqualsSign||LA307_0==CircumflexAccentEqualsSign||(LA307_0>=In && LA307_0<=VerticalLineVerticalLine)||LA307_0==Ampersand||LA307_0==RightParenthesis||LA307_0==Comma||(LA307_0>=Colon && LA307_0<=EqualsSign)||LA307_0==QuestionMark||(LA307_0>=RightSquareBracket && LA307_0<=CircumflexAccent)||(LA307_0>=VerticalLine && LA307_0<=RightCurlyBracket)||LA307_0==RULE_ML_COMMENT||LA307_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA307_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA307_0==LessThanSignLessThanSign) && (synpred181_InternalN4JSParser())) {s = 3;}


                        input.seek(index307_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 307, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_215s = "\103\uffff";
    static final String dfa_216s = "\1\1\102\uffff";
    static final String dfa_217s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_218s = "\1\157\1\uffff\1\u0094\100\uffff";
    static final String dfa_219s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_220s = "\1\1\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_221s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "\1\32\1\25\1\37\1\uffff\1\35\1\40\1\42\1\21\2\uffff\1\20\1\66\3\uffff\1\41\1\17\1\72\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\74\1\34\1\36\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\57\1\10\1\54\1\30\1\73\7\uffff\1\14\1\16\1\7\1\15\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\7\uffff\1\46",
            ""
    };

    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final short[] dfa_216 = DFA.unpackEncodedString(dfa_216s);
    static final char[] dfa_217 = DFA.unpackEncodedStringToUnsignedChars(dfa_217s);
    static final char[] dfa_218 = DFA.unpackEncodedStringToUnsignedChars(dfa_218s);
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final short[] dfa_220 = DFA.unpackEncodedString(dfa_220s);
    static final short[][] dfa_221 = unpackEncodedStringArray(dfa_221s);

    class DFA310 extends DFA {

        public DFA310(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 310;
            this.eot = dfa_215;
            this.eof = dfa_216;
            this.min = dfa_217;
            this.max = dfa_218;
            this.accept = dfa_219;
            this.special = dfa_220;
            this.transition = dfa_221;
        }
        public String getDescription() {
            return "()* loopback of 7778:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA310_2 = input.LA(1);


                        int index310_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA310_2==GreaterThanSignEqualsSign||LA310_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA310_2==New) && (synpred182_InternalN4JSParser())) {s = 7;}

                        else if ( (LA310_2==This_1) && (synpred182_InternalN4JSParser())) {s = 8;}

                        else if ( (LA310_2==Super) && (synpred182_InternalN4JSParser())) {s = 9;}

                        else if ( (LA310_2==RULE_IDENTIFIER) && (synpred182_InternalN4JSParser())) {s = 10;}

                        else if ( (LA310_2==Yield) && (synpred182_InternalN4JSParser())) {s = 11;}

                        else if ( (LA310_2==Get) && (synpred182_InternalN4JSParser())) {s = 12;}

                        else if ( (LA310_2==Set) && (synpred182_InternalN4JSParser())) {s = 13;}

                        else if ( (LA310_2==Let) && (synpred182_InternalN4JSParser())) {s = 14;}

                        else if ( (LA310_2==Project) && (synpred182_InternalN4JSParser())) {s = 15;}

                        else if ( (LA310_2==External) && (synpred182_InternalN4JSParser())) {s = 16;}

                        else if ( (LA310_2==Abstract) && (synpred182_InternalN4JSParser())) {s = 17;}

                        else if ( (LA310_2==Static) && (synpred182_InternalN4JSParser())) {s = 18;}

                        else if ( (LA310_2==As) && (synpred182_InternalN4JSParser())) {s = 19;}

                        else if ( (LA310_2==From) && (synpred182_InternalN4JSParser())) {s = 20;}

                        else if ( (LA310_2==Constructor) && (synpred182_InternalN4JSParser())) {s = 21;}

                        else if ( (LA310_2==Of) && (synpred182_InternalN4JSParser())) {s = 22;}

                        else if ( (LA310_2==Target) && (synpred182_InternalN4JSParser())) {s = 23;}

                        else if ( (LA310_2==Type) && (synpred182_InternalN4JSParser())) {s = 24;}

                        else if ( (LA310_2==Union) && (synpred182_InternalN4JSParser())) {s = 25;}

                        else if ( (LA310_2==Intersection) && (synpred182_InternalN4JSParser())) {s = 26;}

                        else if ( (LA310_2==This) && (synpred182_InternalN4JSParser())) {s = 27;}

                        else if ( (LA310_2==Await) && (synpred182_InternalN4JSParser())) {s = 28;}

                        else if ( (LA310_2==Promisify) && (synpred182_InternalN4JSParser())) {s = 29;}

                        else if ( (LA310_2==Await_1) && (synpred182_InternalN4JSParser())) {s = 30;}

                        else if ( (LA310_2==Implements) && (synpred182_InternalN4JSParser())) {s = 31;}

                        else if ( (LA310_2==Interface) && (synpred182_InternalN4JSParser())) {s = 32;}

                        else if ( (LA310_2==Private) && (synpred182_InternalN4JSParser())) {s = 33;}

                        else if ( (LA310_2==Protected) && (synpred182_InternalN4JSParser())) {s = 34;}

                        else if ( (LA310_2==Public) && (synpred182_InternalN4JSParser())) {s = 35;}

                        else if ( (LA310_2==LessThanSign) && (synpred182_InternalN4JSParser())) {s = 36;}

                        else if ( (LA310_2==RULE_DOUBLE) && (synpred182_InternalN4JSParser())) {s = 37;}

                        else if ( (LA310_2==RULE_INT) && (synpred182_InternalN4JSParser())) {s = 38;}

                        else if ( (LA310_2==RULE_BINARY_INT) && (synpred182_InternalN4JSParser())) {s = 39;}

                        else if ( (LA310_2==RULE_OCTAL_INT) && (synpred182_InternalN4JSParser())) {s = 40;}

                        else if ( (LA310_2==RULE_LEGACY_OCTAL_INT) && (synpred182_InternalN4JSParser())) {s = 41;}

                        else if ( (LA310_2==RULE_HEX_INT) && (synpred182_InternalN4JSParser())) {s = 42;}

                        else if ( (LA310_2==RULE_SCIENTIFIC_INT) && (synpred182_InternalN4JSParser())) {s = 43;}

                        else if ( (LA310_2==True) && (synpred182_InternalN4JSParser())) {s = 44;}

                        else if ( (LA310_2==False) && (synpred182_InternalN4JSParser())) {s = 45;}

                        else if ( (LA310_2==RULE_STRING) && (synpred182_InternalN4JSParser())) {s = 46;}

                        else if ( (LA310_2==Null) && (synpred182_InternalN4JSParser())) {s = 47;}

                        else if ( (LA310_2==Solidus) && (synpred182_InternalN4JSParser())) {s = 48;}

                        else if ( (LA310_2==SolidusEqualsSign) && (synpred182_InternalN4JSParser())) {s = 49;}

                        else if ( (LA310_2==LeftSquareBracket) && (synpred182_InternalN4JSParser())) {s = 50;}

                        else if ( (LA310_2==LeftCurlyBracket) && (synpred182_InternalN4JSParser())) {s = 51;}

                        else if ( (LA310_2==LeftParenthesis) && (synpred182_InternalN4JSParser())) {s = 52;}

                        else if ( (LA310_2==CommercialAt) && (synpred182_InternalN4JSParser())) {s = 53;}

                        else if ( (LA310_2==Function) && (synpred182_InternalN4JSParser())) {s = 54;}

                        else if ( (LA310_2==Class) && (synpred182_InternalN4JSParser())) {s = 55;}

                        else if ( (LA310_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred182_InternalN4JSParser())) {s = 56;}

                        else if ( (LA310_2==RULE_TEMPLATE_HEAD) && (synpred182_InternalN4JSParser())) {s = 57;}

                        else if ( (LA310_2==Delete) && (synpred182_InternalN4JSParser())) {s = 58;}

                        else if ( (LA310_2==Void) && (synpred182_InternalN4JSParser())) {s = 59;}

                        else if ( (LA310_2==Typeof) && (synpred182_InternalN4JSParser())) {s = 60;}

                        else if ( (LA310_2==PlusSignPlusSign) && (synpred182_InternalN4JSParser())) {s = 61;}

                        else if ( (LA310_2==HyphenMinusHyphenMinus) && (synpred182_InternalN4JSParser())) {s = 62;}

                        else if ( (LA310_2==PlusSign) && (synpred182_InternalN4JSParser())) {s = 63;}

                        else if ( (LA310_2==HyphenMinus) && (synpred182_InternalN4JSParser())) {s = 64;}

                        else if ( (LA310_2==Tilde) && (synpred182_InternalN4JSParser())) {s = 65;}

                        else if ( (LA310_2==ExclamationMark) && (synpred182_InternalN4JSParser())) {s = 66;}


                        input.seek(index310_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA310_0 = input.LA(1);


                        int index310_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA310_0==EOF||LA310_0==ExclamationMarkEqualsSignEqualsSign||(LA310_0>=LessThanSignLessThanSignEqualsSign && LA310_0<=EqualsSignEqualsSignEqualsSign)||(LA310_0>=ExclamationMarkEqualsSign && LA310_0<=AsteriskEqualsSign)||LA310_0==PlusSignEqualsSign||(LA310_0>=HyphenMinusEqualsSign && LA310_0<=SolidusEqualsSign)||LA310_0==EqualsSignEqualsSign||LA310_0==CircumflexAccentEqualsSign||(LA310_0>=In && LA310_0<=VerticalLineVerticalLine)||LA310_0==Ampersand||LA310_0==Comma||LA310_0==Semicolon||LA310_0==EqualsSign||LA310_0==QuestionMark||LA310_0==CircumflexAccent||LA310_0==VerticalLine) ) {s = 1;}

                        else if ( (LA310_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA310_0==LessThanSign) && (synpred182_InternalN4JSParser())) {s = 3;}

                        else if ( (LA310_0==LessThanSignEqualsSign) && (synpred182_InternalN4JSParser())) {s = 4;}

                        else if ( (LA310_0==GreaterThanSignEqualsSign) && (synpred182_InternalN4JSParser())) {s = 5;}

                        else if ( (LA310_0==Instanceof) && (synpred182_InternalN4JSParser())) {s = 6;}


                        input.seek(index310_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 310, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_222s = "\104\uffff";
    static final String dfa_223s = "\1\1\103\uffff";
    static final String dfa_224s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_225s = "\1\u0098\1\uffff\1\u0094\101\uffff";
    static final String dfa_226s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_227s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_228s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "\1\33\1\26\1\40\1\uffff\1\36\1\41\1\43\1\22\2\uffff\1\21\1\67\3\uffff\1\42\1\20\1\73\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\75\1\35\1\37\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\60\1\11\1\55\1\31\1\74\7\uffff\1\15\1\17\1\10\1\16\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\7\uffff\1\47",
            ""
    };

    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final char[] dfa_224 = DFA.unpackEncodedStringToUnsignedChars(dfa_224s);
    static final char[] dfa_225 = DFA.unpackEncodedStringToUnsignedChars(dfa_225s);
    static final short[] dfa_226 = DFA.unpackEncodedString(dfa_226s);
    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final short[][] dfa_228 = unpackEncodedStringArray(dfa_228s);

    class DFA311 extends DFA {

        public DFA311(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 311;
            this.eot = dfa_222;
            this.eof = dfa_223;
            this.min = dfa_224;
            this.max = dfa_225;
            this.accept = dfa_226;
            this.special = dfa_227;
            this.transition = dfa_228;
        }
        public String getDescription() {
            return "()* loopback of 7960:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA311_0 = input.LA(1);


                        int index311_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA311_0==EOF||LA311_0==ExclamationMarkEqualsSignEqualsSign||(LA311_0>=LessThanSignLessThanSignEqualsSign && LA311_0<=EqualsSignEqualsSignEqualsSign)||(LA311_0>=ExclamationMarkEqualsSign && LA311_0<=AsteriskEqualsSign)||LA311_0==PlusSignEqualsSign||(LA311_0>=HyphenMinusEqualsSign && LA311_0<=SolidusEqualsSign)||LA311_0==EqualsSignEqualsSign||LA311_0==CircumflexAccentEqualsSign||(LA311_0>=VerticalLineEqualsSign && LA311_0<=VerticalLineVerticalLine)||LA311_0==Ampersand||LA311_0==RightParenthesis||LA311_0==Comma||(LA311_0>=Colon && LA311_0<=Semicolon)||LA311_0==EqualsSign||LA311_0==QuestionMark||(LA311_0>=RightSquareBracket && LA311_0<=CircumflexAccent)||(LA311_0>=VerticalLine && LA311_0<=RightCurlyBracket)||LA311_0==RULE_ML_COMMENT||LA311_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA311_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA311_0==LessThanSign) && (synpred184_InternalN4JSParser())) {s = 3;}

                        else if ( (LA311_0==LessThanSignEqualsSign) && (synpred184_InternalN4JSParser())) {s = 4;}

                        else if ( (LA311_0==GreaterThanSignEqualsSign) && (synpred184_InternalN4JSParser())) {s = 5;}

                        else if ( (LA311_0==Instanceof) && (synpred184_InternalN4JSParser())) {s = 6;}

                        else if ( (LA311_0==In) && (synpred184_InternalN4JSParser())) {s = 7;}


                        input.seek(index311_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA311_2 = input.LA(1);


                        int index311_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA311_2==New) && (synpred184_InternalN4JSParser())) {s = 8;}

                        else if ( (LA311_2==This_1) && (synpred184_InternalN4JSParser())) {s = 9;}

                        else if ( (LA311_2==Super) && (synpred184_InternalN4JSParser())) {s = 10;}

                        else if ( (LA311_2==RULE_IDENTIFIER) && (synpred184_InternalN4JSParser())) {s = 11;}

                        else if ( (LA311_2==Yield) && (synpred184_InternalN4JSParser())) {s = 12;}

                        else if ( (LA311_2==Get) && (synpred184_InternalN4JSParser())) {s = 13;}

                        else if ( (LA311_2==Set) && (synpred184_InternalN4JSParser())) {s = 14;}

                        else if ( (LA311_2==Let) && (synpred184_InternalN4JSParser())) {s = 15;}

                        else if ( (LA311_2==Project) && (synpred184_InternalN4JSParser())) {s = 16;}

                        else if ( (LA311_2==External) && (synpred184_InternalN4JSParser())) {s = 17;}

                        else if ( (LA311_2==Abstract) && (synpred184_InternalN4JSParser())) {s = 18;}

                        else if ( (LA311_2==Static) && (synpred184_InternalN4JSParser())) {s = 19;}

                        else if ( (LA311_2==As) && (synpred184_InternalN4JSParser())) {s = 20;}

                        else if ( (LA311_2==From) && (synpred184_InternalN4JSParser())) {s = 21;}

                        else if ( (LA311_2==Constructor) && (synpred184_InternalN4JSParser())) {s = 22;}

                        else if ( (LA311_2==Of) && (synpred184_InternalN4JSParser())) {s = 23;}

                        else if ( (LA311_2==Target) && (synpred184_InternalN4JSParser())) {s = 24;}

                        else if ( (LA311_2==Type) && (synpred184_InternalN4JSParser())) {s = 25;}

                        else if ( (LA311_2==Union) && (synpred184_InternalN4JSParser())) {s = 26;}

                        else if ( (LA311_2==Intersection) && (synpred184_InternalN4JSParser())) {s = 27;}

                        else if ( (LA311_2==This) && (synpred184_InternalN4JSParser())) {s = 28;}

                        else if ( (LA311_2==Await) && (synpred184_InternalN4JSParser())) {s = 29;}

                        else if ( (LA311_2==Promisify) && (synpred184_InternalN4JSParser())) {s = 30;}

                        else if ( (LA311_2==Await_1) && (synpred184_InternalN4JSParser())) {s = 31;}

                        else if ( (LA311_2==Implements) && (synpred184_InternalN4JSParser())) {s = 32;}

                        else if ( (LA311_2==Interface) && (synpred184_InternalN4JSParser())) {s = 33;}

                        else if ( (LA311_2==Private) && (synpred184_InternalN4JSParser())) {s = 34;}

                        else if ( (LA311_2==Protected) && (synpred184_InternalN4JSParser())) {s = 35;}

                        else if ( (LA311_2==Public) && (synpred184_InternalN4JSParser())) {s = 36;}

                        else if ( (LA311_2==LessThanSign) && (synpred184_InternalN4JSParser())) {s = 37;}

                        else if ( (LA311_2==RULE_DOUBLE) && (synpred184_InternalN4JSParser())) {s = 38;}

                        else if ( (LA311_2==RULE_INT) && (synpred184_InternalN4JSParser())) {s = 39;}

                        else if ( (LA311_2==RULE_BINARY_INT) && (synpred184_InternalN4JSParser())) {s = 40;}

                        else if ( (LA311_2==RULE_OCTAL_INT) && (synpred184_InternalN4JSParser())) {s = 41;}

                        else if ( (LA311_2==RULE_LEGACY_OCTAL_INT) && (synpred184_InternalN4JSParser())) {s = 42;}

                        else if ( (LA311_2==RULE_HEX_INT) && (synpred184_InternalN4JSParser())) {s = 43;}

                        else if ( (LA311_2==RULE_SCIENTIFIC_INT) && (synpred184_InternalN4JSParser())) {s = 44;}

                        else if ( (LA311_2==True) && (synpred184_InternalN4JSParser())) {s = 45;}

                        else if ( (LA311_2==False) && (synpred184_InternalN4JSParser())) {s = 46;}

                        else if ( (LA311_2==RULE_STRING) && (synpred184_InternalN4JSParser())) {s = 47;}

                        else if ( (LA311_2==Null) && (synpred184_InternalN4JSParser())) {s = 48;}

                        else if ( (LA311_2==Solidus) && (synpred184_InternalN4JSParser())) {s = 49;}

                        else if ( (LA311_2==SolidusEqualsSign) && (synpred184_InternalN4JSParser())) {s = 50;}

                        else if ( (LA311_2==LeftSquareBracket) && (synpred184_InternalN4JSParser())) {s = 51;}

                        else if ( (LA311_2==LeftCurlyBracket) && (synpred184_InternalN4JSParser())) {s = 52;}

                        else if ( (LA311_2==LeftParenthesis) && (synpred184_InternalN4JSParser())) {s = 53;}

                        else if ( (LA311_2==CommercialAt) && (synpred184_InternalN4JSParser())) {s = 54;}

                        else if ( (LA311_2==Function) && (synpred184_InternalN4JSParser())) {s = 55;}

                        else if ( (LA311_2==Class) && (synpred184_InternalN4JSParser())) {s = 56;}

                        else if ( (LA311_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred184_InternalN4JSParser())) {s = 57;}

                        else if ( (LA311_2==RULE_TEMPLATE_HEAD) && (synpred184_InternalN4JSParser())) {s = 58;}

                        else if ( (LA311_2==Delete) && (synpred184_InternalN4JSParser())) {s = 59;}

                        else if ( (LA311_2==Void) && (synpred184_InternalN4JSParser())) {s = 60;}

                        else if ( (LA311_2==Typeof) && (synpred184_InternalN4JSParser())) {s = 61;}

                        else if ( (LA311_2==PlusSignPlusSign) && (synpred184_InternalN4JSParser())) {s = 62;}

                        else if ( (LA311_2==HyphenMinusHyphenMinus) && (synpred184_InternalN4JSParser())) {s = 63;}

                        else if ( (LA311_2==PlusSign) && (synpred184_InternalN4JSParser())) {s = 64;}

                        else if ( (LA311_2==HyphenMinus) && (synpred184_InternalN4JSParser())) {s = 65;}

                        else if ( (LA311_2==Tilde) && (synpred184_InternalN4JSParser())) {s = 66;}

                        else if ( (LA311_2==ExclamationMark) && (synpred184_InternalN4JSParser())) {s = 67;}

                        else if ( (LA311_2==GreaterThanSignEqualsSign||LA311_2==GreaterThanSign) ) {s = 1;}


                        input.seek(index311_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 311, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_229s = "\1\7\1\uffff\1\4\77\uffff";
    static final String dfa_230s = "\1\157\1\uffff\1\u0094\77\uffff";
    static final String dfa_231s = "\1\uffff\1\2\1\uffff\77\1";
    static final String dfa_232s = "\1\0\1\uffff\1\1\77\uffff}>";
    static final String[] dfa_233s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "\1\31\1\24\1\36\1\uffff\1\34\1\37\1\41\1\20\2\uffff\1\17\1\65\3\uffff\1\40\1\16\1\71\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\73\1\33\1\35\2\uffff\1\66\1\uffff\1\54\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\56\1\10\1\53\1\27\1\72\7\uffff\1\13\1\15\1\7\1\14\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\1\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\12\2\uffff\1\55\11\uffff\1\70\1\67\7\uffff\1\45",
            ""
    };
    static final char[] dfa_229 = DFA.unpackEncodedStringToUnsignedChars(dfa_229s);
    static final char[] dfa_230 = DFA.unpackEncodedStringToUnsignedChars(dfa_230s);
    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final short[][] dfa_233 = unpackEncodedStringArray(dfa_233s);

    class DFA312 extends DFA {

        public DFA312(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 312;
            this.eot = dfa_202;
            this.eof = dfa_203;
            this.min = dfa_229;
            this.max = dfa_230;
            this.accept = dfa_231;
            this.special = dfa_232;
            this.transition = dfa_233;
        }
        public String getDescription() {
            return "()* loopback of 8142:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA312_0 = input.LA(1);


                        int index312_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA312_0==EOF||LA312_0==ExclamationMarkEqualsSignEqualsSign||(LA312_0>=LessThanSignLessThanSignEqualsSign && LA312_0<=EqualsSignEqualsSignEqualsSign)||(LA312_0>=ExclamationMarkEqualsSign && LA312_0<=AsteriskEqualsSign)||LA312_0==PlusSignEqualsSign||(LA312_0>=HyphenMinusEqualsSign && LA312_0<=SolidusEqualsSign)||LA312_0==EqualsSignEqualsSign||LA312_0==CircumflexAccentEqualsSign||(LA312_0>=In && LA312_0<=VerticalLineVerticalLine)||LA312_0==Ampersand||LA312_0==Comma||LA312_0==Semicolon||LA312_0==EqualsSign||LA312_0==QuestionMark||LA312_0==CircumflexAccent||LA312_0==VerticalLine) ) {s = 1;}

                        else if ( (LA312_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA312_0==LessThanSign) && (synpred186_InternalN4JSParser())) {s = 3;}

                        else if ( (LA312_0==LessThanSignEqualsSign) && (synpred186_InternalN4JSParser())) {s = 4;}

                        else if ( (LA312_0==GreaterThanSignEqualsSign) && (synpred186_InternalN4JSParser())) {s = 5;}

                        else if ( (LA312_0==Instanceof) && (synpred186_InternalN4JSParser())) {s = 6;}


                        input.seek(index312_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA312_2 = input.LA(1);


                        int index312_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA312_2==GreaterThanSignEqualsSign||LA312_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA312_2==New) && (synpred186_InternalN4JSParser())) {s = 7;}

                        else if ( (LA312_2==This_1) && (synpred186_InternalN4JSParser())) {s = 8;}

                        else if ( (LA312_2==Super) && (synpred186_InternalN4JSParser())) {s = 9;}

                        else if ( (LA312_2==RULE_IDENTIFIER) && (synpred186_InternalN4JSParser())) {s = 10;}

                        else if ( (LA312_2==Get) && (synpred186_InternalN4JSParser())) {s = 11;}

                        else if ( (LA312_2==Set) && (synpred186_InternalN4JSParser())) {s = 12;}

                        else if ( (LA312_2==Let) && (synpred186_InternalN4JSParser())) {s = 13;}

                        else if ( (LA312_2==Project) && (synpred186_InternalN4JSParser())) {s = 14;}

                        else if ( (LA312_2==External) && (synpred186_InternalN4JSParser())) {s = 15;}

                        else if ( (LA312_2==Abstract) && (synpred186_InternalN4JSParser())) {s = 16;}

                        else if ( (LA312_2==Static) && (synpred186_InternalN4JSParser())) {s = 17;}

                        else if ( (LA312_2==As) && (synpred186_InternalN4JSParser())) {s = 18;}

                        else if ( (LA312_2==From) && (synpred186_InternalN4JSParser())) {s = 19;}

                        else if ( (LA312_2==Constructor) && (synpred186_InternalN4JSParser())) {s = 20;}

                        else if ( (LA312_2==Of) && (synpred186_InternalN4JSParser())) {s = 21;}

                        else if ( (LA312_2==Target) && (synpred186_InternalN4JSParser())) {s = 22;}

                        else if ( (LA312_2==Type) && (synpred186_InternalN4JSParser())) {s = 23;}

                        else if ( (LA312_2==Union) && (synpred186_InternalN4JSParser())) {s = 24;}

                        else if ( (LA312_2==Intersection) && (synpred186_InternalN4JSParser())) {s = 25;}

                        else if ( (LA312_2==This) && (synpred186_InternalN4JSParser())) {s = 26;}

                        else if ( (LA312_2==Await) && (synpred186_InternalN4JSParser())) {s = 27;}

                        else if ( (LA312_2==Promisify) && (synpred186_InternalN4JSParser())) {s = 28;}

                        else if ( (LA312_2==Await_1) && (synpred186_InternalN4JSParser())) {s = 29;}

                        else if ( (LA312_2==Implements) && (synpred186_InternalN4JSParser())) {s = 30;}

                        else if ( (LA312_2==Interface) && (synpred186_InternalN4JSParser())) {s = 31;}

                        else if ( (LA312_2==Private) && (synpred186_InternalN4JSParser())) {s = 32;}

                        else if ( (LA312_2==Protected) && (synpred186_InternalN4JSParser())) {s = 33;}

                        else if ( (LA312_2==Public) && (synpred186_InternalN4JSParser())) {s = 34;}

                        else if ( (LA312_2==LessThanSign) && (synpred186_InternalN4JSParser())) {s = 35;}

                        else if ( (LA312_2==RULE_DOUBLE) && (synpred186_InternalN4JSParser())) {s = 36;}

                        else if ( (LA312_2==RULE_INT) && (synpred186_InternalN4JSParser())) {s = 37;}

                        else if ( (LA312_2==RULE_BINARY_INT) && (synpred186_InternalN4JSParser())) {s = 38;}

                        else if ( (LA312_2==RULE_OCTAL_INT) && (synpred186_InternalN4JSParser())) {s = 39;}

                        else if ( (LA312_2==RULE_LEGACY_OCTAL_INT) && (synpred186_InternalN4JSParser())) {s = 40;}

                        else if ( (LA312_2==RULE_HEX_INT) && (synpred186_InternalN4JSParser())) {s = 41;}

                        else if ( (LA312_2==RULE_SCIENTIFIC_INT) && (synpred186_InternalN4JSParser())) {s = 42;}

                        else if ( (LA312_2==True) && (synpred186_InternalN4JSParser())) {s = 43;}

                        else if ( (LA312_2==False) && (synpred186_InternalN4JSParser())) {s = 44;}

                        else if ( (LA312_2==RULE_STRING) && (synpred186_InternalN4JSParser())) {s = 45;}

                        else if ( (LA312_2==Null) && (synpred186_InternalN4JSParser())) {s = 46;}

                        else if ( (LA312_2==Solidus) && (synpred186_InternalN4JSParser())) {s = 47;}

                        else if ( (LA312_2==SolidusEqualsSign) && (synpred186_InternalN4JSParser())) {s = 48;}

                        else if ( (LA312_2==LeftSquareBracket) && (synpred186_InternalN4JSParser())) {s = 49;}

                        else if ( (LA312_2==LeftCurlyBracket) && (synpred186_InternalN4JSParser())) {s = 50;}

                        else if ( (LA312_2==LeftParenthesis) && (synpred186_InternalN4JSParser())) {s = 51;}

                        else if ( (LA312_2==CommercialAt) && (synpred186_InternalN4JSParser())) {s = 52;}

                        else if ( (LA312_2==Function) && (synpred186_InternalN4JSParser())) {s = 53;}

                        else if ( (LA312_2==Class) && (synpred186_InternalN4JSParser())) {s = 54;}

                        else if ( (LA312_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred186_InternalN4JSParser())) {s = 55;}

                        else if ( (LA312_2==RULE_TEMPLATE_HEAD) && (synpred186_InternalN4JSParser())) {s = 56;}

                        else if ( (LA312_2==Delete) && (synpred186_InternalN4JSParser())) {s = 57;}

                        else if ( (LA312_2==Void) && (synpred186_InternalN4JSParser())) {s = 58;}

                        else if ( (LA312_2==Typeof) && (synpred186_InternalN4JSParser())) {s = 59;}

                        else if ( (LA312_2==PlusSignPlusSign) && (synpred186_InternalN4JSParser())) {s = 60;}

                        else if ( (LA312_2==HyphenMinusHyphenMinus) && (synpred186_InternalN4JSParser())) {s = 61;}

                        else if ( (LA312_2==PlusSign) && (synpred186_InternalN4JSParser())) {s = 62;}

                        else if ( (LA312_2==HyphenMinus) && (synpred186_InternalN4JSParser())) {s = 63;}

                        else if ( (LA312_2==Tilde) && (synpred186_InternalN4JSParser())) {s = 64;}

                        else if ( (LA312_2==ExclamationMark) && (synpred186_InternalN4JSParser())) {s = 65;}


                        input.seek(index312_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 312, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_234s = "\1\u0098\1\uffff\1\u0094\100\uffff";
    static final String dfa_235s = "\1\0\1\uffff\1\1\100\uffff}>";
    static final String[] dfa_236s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "\1\32\1\25\1\37\1\uffff\1\35\1\40\1\42\1\21\2\uffff\1\20\1\66\3\uffff\1\41\1\17\1\72\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\74\1\34\1\36\2\uffff\1\67\1\uffff\1\55\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\57\1\11\1\54\1\30\1\73\7\uffff\1\14\1\16\1\10\1\15\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\13\2\uffff\1\56\11\uffff\1\71\1\70\7\uffff\1\46",
            ""
    };
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final short[] dfa_235 = DFA.unpackEncodedString(dfa_235s);
    static final short[][] dfa_236 = unpackEncodedStringArray(dfa_236s);

    class DFA313 extends DFA {

        public DFA313(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 313;
            this.eot = dfa_215;
            this.eof = dfa_216;
            this.min = dfa_217;
            this.max = dfa_234;
            this.accept = dfa_219;
            this.special = dfa_235;
            this.transition = dfa_236;
        }
        public String getDescription() {
            return "()* loopback of 8321:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA313_0 = input.LA(1);


                        int index313_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA313_0==EOF||LA313_0==ExclamationMarkEqualsSignEqualsSign||(LA313_0>=LessThanSignLessThanSignEqualsSign && LA313_0<=EqualsSignEqualsSignEqualsSign)||(LA313_0>=ExclamationMarkEqualsSign && LA313_0<=AsteriskEqualsSign)||LA313_0==PlusSignEqualsSign||(LA313_0>=HyphenMinusEqualsSign && LA313_0<=SolidusEqualsSign)||LA313_0==EqualsSignEqualsSign||LA313_0==CircumflexAccentEqualsSign||(LA313_0>=VerticalLineEqualsSign && LA313_0<=VerticalLineVerticalLine)||LA313_0==Ampersand||LA313_0==RightParenthesis||LA313_0==Comma||(LA313_0>=Colon && LA313_0<=Semicolon)||LA313_0==EqualsSign||LA313_0==QuestionMark||(LA313_0>=RightSquareBracket && LA313_0<=CircumflexAccent)||(LA313_0>=VerticalLine && LA313_0<=RightCurlyBracket)||LA313_0==RULE_ML_COMMENT||LA313_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA313_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA313_0==LessThanSign) && (synpred188_InternalN4JSParser())) {s = 3;}

                        else if ( (LA313_0==LessThanSignEqualsSign) && (synpred188_InternalN4JSParser())) {s = 4;}

                        else if ( (LA313_0==GreaterThanSignEqualsSign) && (synpred188_InternalN4JSParser())) {s = 5;}

                        else if ( (LA313_0==Instanceof) && (synpred188_InternalN4JSParser())) {s = 6;}

                        else if ( (LA313_0==In) && (synpred188_InternalN4JSParser())) {s = 7;}


                        input.seek(index313_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA313_2 = input.LA(1);


                        int index313_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA313_2==New) && (synpred188_InternalN4JSParser())) {s = 8;}

                        else if ( (LA313_2==This_1) && (synpred188_InternalN4JSParser())) {s = 9;}

                        else if ( (LA313_2==Super) && (synpred188_InternalN4JSParser())) {s = 10;}

                        else if ( (LA313_2==RULE_IDENTIFIER) && (synpred188_InternalN4JSParser())) {s = 11;}

                        else if ( (LA313_2==Get) && (synpred188_InternalN4JSParser())) {s = 12;}

                        else if ( (LA313_2==Set) && (synpred188_InternalN4JSParser())) {s = 13;}

                        else if ( (LA313_2==Let) && (synpred188_InternalN4JSParser())) {s = 14;}

                        else if ( (LA313_2==Project) && (synpred188_InternalN4JSParser())) {s = 15;}

                        else if ( (LA313_2==External) && (synpred188_InternalN4JSParser())) {s = 16;}

                        else if ( (LA313_2==Abstract) && (synpred188_InternalN4JSParser())) {s = 17;}

                        else if ( (LA313_2==Static) && (synpred188_InternalN4JSParser())) {s = 18;}

                        else if ( (LA313_2==As) && (synpred188_InternalN4JSParser())) {s = 19;}

                        else if ( (LA313_2==From) && (synpred188_InternalN4JSParser())) {s = 20;}

                        else if ( (LA313_2==Constructor) && (synpred188_InternalN4JSParser())) {s = 21;}

                        else if ( (LA313_2==Of) && (synpred188_InternalN4JSParser())) {s = 22;}

                        else if ( (LA313_2==Target) && (synpred188_InternalN4JSParser())) {s = 23;}

                        else if ( (LA313_2==Type) && (synpred188_InternalN4JSParser())) {s = 24;}

                        else if ( (LA313_2==Union) && (synpred188_InternalN4JSParser())) {s = 25;}

                        else if ( (LA313_2==Intersection) && (synpred188_InternalN4JSParser())) {s = 26;}

                        else if ( (LA313_2==This) && (synpred188_InternalN4JSParser())) {s = 27;}

                        else if ( (LA313_2==Await) && (synpred188_InternalN4JSParser())) {s = 28;}

                        else if ( (LA313_2==Promisify) && (synpred188_InternalN4JSParser())) {s = 29;}

                        else if ( (LA313_2==Await_1) && (synpred188_InternalN4JSParser())) {s = 30;}

                        else if ( (LA313_2==Implements) && (synpred188_InternalN4JSParser())) {s = 31;}

                        else if ( (LA313_2==Interface) && (synpred188_InternalN4JSParser())) {s = 32;}

                        else if ( (LA313_2==Private) && (synpred188_InternalN4JSParser())) {s = 33;}

                        else if ( (LA313_2==Protected) && (synpred188_InternalN4JSParser())) {s = 34;}

                        else if ( (LA313_2==Public) && (synpred188_InternalN4JSParser())) {s = 35;}

                        else if ( (LA313_2==LessThanSign) && (synpred188_InternalN4JSParser())) {s = 36;}

                        else if ( (LA313_2==RULE_DOUBLE) && (synpred188_InternalN4JSParser())) {s = 37;}

                        else if ( (LA313_2==RULE_INT) && (synpred188_InternalN4JSParser())) {s = 38;}

                        else if ( (LA313_2==RULE_BINARY_INT) && (synpred188_InternalN4JSParser())) {s = 39;}

                        else if ( (LA313_2==RULE_OCTAL_INT) && (synpred188_InternalN4JSParser())) {s = 40;}

                        else if ( (LA313_2==RULE_LEGACY_OCTAL_INT) && (synpred188_InternalN4JSParser())) {s = 41;}

                        else if ( (LA313_2==RULE_HEX_INT) && (synpred188_InternalN4JSParser())) {s = 42;}

                        else if ( (LA313_2==RULE_SCIENTIFIC_INT) && (synpred188_InternalN4JSParser())) {s = 43;}

                        else if ( (LA313_2==True) && (synpred188_InternalN4JSParser())) {s = 44;}

                        else if ( (LA313_2==False) && (synpred188_InternalN4JSParser())) {s = 45;}

                        else if ( (LA313_2==RULE_STRING) && (synpred188_InternalN4JSParser())) {s = 46;}

                        else if ( (LA313_2==Null) && (synpred188_InternalN4JSParser())) {s = 47;}

                        else if ( (LA313_2==Solidus) && (synpred188_InternalN4JSParser())) {s = 48;}

                        else if ( (LA313_2==SolidusEqualsSign) && (synpred188_InternalN4JSParser())) {s = 49;}

                        else if ( (LA313_2==LeftSquareBracket) && (synpred188_InternalN4JSParser())) {s = 50;}

                        else if ( (LA313_2==LeftCurlyBracket) && (synpred188_InternalN4JSParser())) {s = 51;}

                        else if ( (LA313_2==LeftParenthesis) && (synpred188_InternalN4JSParser())) {s = 52;}

                        else if ( (LA313_2==CommercialAt) && (synpred188_InternalN4JSParser())) {s = 53;}

                        else if ( (LA313_2==Function) && (synpred188_InternalN4JSParser())) {s = 54;}

                        else if ( (LA313_2==Class) && (synpred188_InternalN4JSParser())) {s = 55;}

                        else if ( (LA313_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred188_InternalN4JSParser())) {s = 56;}

                        else if ( (LA313_2==RULE_TEMPLATE_HEAD) && (synpred188_InternalN4JSParser())) {s = 57;}

                        else if ( (LA313_2==Delete) && (synpred188_InternalN4JSParser())) {s = 58;}

                        else if ( (LA313_2==Void) && (synpred188_InternalN4JSParser())) {s = 59;}

                        else if ( (LA313_2==Typeof) && (synpred188_InternalN4JSParser())) {s = 60;}

                        else if ( (LA313_2==PlusSignPlusSign) && (synpred188_InternalN4JSParser())) {s = 61;}

                        else if ( (LA313_2==HyphenMinusHyphenMinus) && (synpred188_InternalN4JSParser())) {s = 62;}

                        else if ( (LA313_2==PlusSign) && (synpred188_InternalN4JSParser())) {s = 63;}

                        else if ( (LA313_2==HyphenMinus) && (synpred188_InternalN4JSParser())) {s = 64;}

                        else if ( (LA313_2==Tilde) && (synpred188_InternalN4JSParser())) {s = 65;}

                        else if ( (LA313_2==ExclamationMark) && (synpred188_InternalN4JSParser())) {s = 66;}

                        else if ( (LA313_2==GreaterThanSignEqualsSign||LA313_2==GreaterThanSign) ) {s = 1;}


                        input.seek(index313_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 313, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_237s = "\1\4\34\0\43\uffff";
    static final String dfa_238s = "\1\u0094\34\0\43\uffff";
    static final String dfa_239s = "\35\uffff\1\4\37\uffff\1\1\1\2\1\3";
    static final String dfa_240s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\43\uffff}>";
    static final String[] dfa_241s = {
            "\1\24\1\17\1\30\1\uffff\1\27\1\31\1\33\1\13\2\uffff\1\12\1\35\3\uffff\1\32\1\11\1\35\2\uffff\1\34\1\uffff\1\14\1\uffff\1\21\1\35\1\26\1\2\2\uffff\1\35\1\uffff\2\35\1\uffff\1\23\1\uffff\1\5\1\25\3\uffff\1\16\3\35\1\22\1\35\7\uffff\1\6\1\10\1\35\1\7\7\uffff\1\35\1\uffff\1\35\1\uffff\1\35\7\uffff\1\15\3\uffff\1\20\2\uffff\1\35\2\uffff\1\3\2\uffff\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\3\uffff\1\1\1\35\2\uffff\1\35\2\uffff\1\35\3\uffff\1\35\1\uffff\4\35\1\uffff\1\35\1\uffff\1\4\2\uffff\1\35\11\uffff\2\35\7\uffff\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final char[] dfa_237 = DFA.unpackEncodedStringToUnsignedChars(dfa_237s);
    static final char[] dfa_238 = DFA.unpackEncodedStringToUnsignedChars(dfa_238s);
    static final short[] dfa_239 = DFA.unpackEncodedString(dfa_239s);
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[][] dfa_241 = unpackEncodedStringArray(dfa_241s);

    class DFA345 extends DFA {

        public DFA345(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 345;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_237;
            this.max = dfa_238;
            this.accept = dfa_239;
            this.special = dfa_240;
            this.transition = dfa_241;
        }
        public String getDescription() {
            return "9420:1: ( ( ( ( ( ( CommercialAt Await ) | Await_1 ) ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters ( ( ( Colon ) ) ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) ( ( ruleArrowVariant ) ) ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA345_1 = input.LA(1);


                        int index345_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred218_InternalN4JSParser()) ) {s = 61;}

                        else if ( (synpred219_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA345_2 = input.LA(1);


                        int index345_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred218_InternalN4JSParser()) ) {s = 61;}

                        else if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA345_3 = input.LA(1);


                        int index345_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA345_4 = input.LA(1);


                        int index345_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA345_5 = input.LA(1);


                        int index345_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA345_6 = input.LA(1);


                        int index345_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA345_7 = input.LA(1);


                        int index345_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA345_8 = input.LA(1);


                        int index345_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA345_9 = input.LA(1);


                        int index345_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA345_10 = input.LA(1);


                        int index345_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA345_11 = input.LA(1);


                        int index345_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA345_12 = input.LA(1);


                        int index345_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA345_13 = input.LA(1);


                        int index345_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA345_14 = input.LA(1);


                        int index345_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA345_15 = input.LA(1);


                        int index345_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA345_16 = input.LA(1);


                        int index345_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA345_17 = input.LA(1);


                        int index345_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA345_18 = input.LA(1);


                        int index345_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA345_19 = input.LA(1);


                        int index345_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA345_20 = input.LA(1);


                        int index345_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA345_21 = input.LA(1);


                        int index345_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA345_22 = input.LA(1);


                        int index345_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA345_23 = input.LA(1);


                        int index345_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA345_24 = input.LA(1);


                        int index345_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA345_25 = input.LA(1);


                        int index345_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA345_26 = input.LA(1);


                        int index345_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA345_27 = input.LA(1);


                        int index345_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA345_28 = input.LA(1);


                        int index345_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index345_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 345, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_242s = "\1\14\15\uffff";
    static final String dfa_243s = "\1\67\13\0\2\uffff";
    static final String dfa_244s = "\1\150\13\0\2\uffff";
    static final String dfa_245s = "\14\uffff\1\2\1\1";
    static final String dfa_246s = "\1\uffff\1\4\1\10\1\0\1\2\1\5\1\11\1\1\1\7\1\3\1\6\1\12\2\uffff}>";
    static final String[] dfa_247s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final char[] dfa_243 = DFA.unpackEncodedStringToUnsignedChars(dfa_243s);
    static final char[] dfa_244 = DFA.unpackEncodedStringToUnsignedChars(dfa_244s);
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[] dfa_246 = DFA.unpackEncodedString(dfa_246s);
    static final short[][] dfa_247 = unpackEncodedStringArray(dfa_247s);

    class DFA344 extends DFA {

        public DFA344(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 344;
            this.eot = dfa_7;
            this.eof = dfa_242;
            this.min = dfa_243;
            this.max = dfa_244;
            this.accept = dfa_245;
            this.special = dfa_246;
            this.transition = dfa_247;
        }
        public String getDescription() {
            return "9452:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA344_3 = input.LA(1);


                        int index344_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA344_7 = input.LA(1);


                        int index344_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA344_4 = input.LA(1);


                        int index344_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA344_9 = input.LA(1);


                        int index344_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA344_1 = input.LA(1);


                        int index344_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA344_5 = input.LA(1);


                        int index344_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA344_10 = input.LA(1);


                        int index344_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA344_8 = input.LA(1);


                        int index344_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA344_2 = input.LA(1);


                        int index344_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_2);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA344_6 = input.LA(1);


                        int index344_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA344_11 = input.LA(1);


                        int index344_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}


                        input.seek(index344_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 344, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA347 extends DFA {

        public DFA347(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 347;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_237;
            this.max = dfa_238;
            this.accept = dfa_239;
            this.special = dfa_240;
            this.transition = dfa_241;
        }
        public String getDescription() {
            return "9476:1: ( ( ( ( ( ( CommercialAt Await ) | Await_1 ) ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters ( ( ( Colon ) ) ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) ( ( ruleArrowVariant ) ) ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 :
                        int LA347_1 = input.LA(1);


                        int index347_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 61;}

                        else if ( (synpred223_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 :
                        int LA347_2 = input.LA(1);


                        int index347_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 61;}

                        else if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 :
                        int LA347_3 = input.LA(1);


                        int index347_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 :
                        int LA347_4 = input.LA(1);


                        int index347_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 :
                        int LA347_5 = input.LA(1);


                        int index347_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 :
                        int LA347_6 = input.LA(1);


                        int index347_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 :
                        int LA347_7 = input.LA(1);


                        int index347_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 :
                        int LA347_8 = input.LA(1);


                        int index347_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 :
                        int LA347_9 = input.LA(1);


                        int index347_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 :
                        int LA347_10 = input.LA(1);


                        int index347_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 :
                        int LA347_11 = input.LA(1);


                        int index347_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 :
                        int LA347_12 = input.LA(1);


                        int index347_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 :
                        int LA347_13 = input.LA(1);


                        int index347_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 :
                        int LA347_14 = input.LA(1);


                        int index347_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 :
                        int LA347_15 = input.LA(1);


                        int index347_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 :
                        int LA347_16 = input.LA(1);


                        int index347_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 :
                        int LA347_17 = input.LA(1);


                        int index347_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 :
                        int LA347_18 = input.LA(1);


                        int index347_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 :
                        int LA347_19 = input.LA(1);


                        int index347_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 :
                        int LA347_20 = input.LA(1);


                        int index347_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 :
                        int LA347_21 = input.LA(1);


                        int index347_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 :
                        int LA347_22 = input.LA(1);


                        int index347_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 :
                        int LA347_23 = input.LA(1);


                        int index347_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 :
                        int LA347_24 = input.LA(1);


                        int index347_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 :
                        int LA347_25 = input.LA(1);


                        int index347_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 :
                        int LA347_26 = input.LA(1);


                        int index347_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 :
                        int LA347_27 = input.LA(1);


                        int index347_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 :
                        int LA347_28 = input.LA(1);


                        int index347_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 29;}


                        input.seek(index347_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 347, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_248s = "\1\u0098\13\0\2\uffff";
    static final String dfa_249s = "\1\uffff\1\0\1\3\1\6\1\10\1\1\1\4\1\7\1\12\1\11\1\2\1\5\2\uffff}>";
    static final String[] dfa_250s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\45\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
       public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x780FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000101802L});

}
