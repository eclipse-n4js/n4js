/*
 * Copyright (c) 2021 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.SpecXtTest
   GENERATE_DTS
   END_SETUP
 */



/*
 * Background is GH-2576:
 * TypeScript cannot handle recursive types when used with type meta language (a.k.a. utitlity types).
 * We use the utility types (e.g. StructuralReadOnly<T>) to mimic N4JS structural type strategies (e.g. ~r~) when generating d.ts files.
 * Those utility types we use are defined in n4jsglobals.d.ts.
 * They rely on the TypeScript meta language feature: [K in keyof T]: T[K] extends Function ? K : never.
 * However, this feature is not compatible with recursive types, i.e. types that have members of the same type.
 * As a fallback in those situations, we use the utility type Readonly<T> instead to avoid errors by the TypeScript compiler. 
 */

export public interface CircularProblem {
    field_f: ~~CircularProblem;
    field_r: ~r~CircularProblem;
    field_w: ~w~CircularProblem;
    field_i: ~i~CircularProblem;
}


/* XPECT generated_dts ---
export interface CircularProblem {
	field_f: Readonly<CircularProblem>;
	field_r: Readonly<CircularProblem>;
	field_w: Readonly<CircularProblem>;
	field_i: Readonly<CircularProblem>;
}
--- */
