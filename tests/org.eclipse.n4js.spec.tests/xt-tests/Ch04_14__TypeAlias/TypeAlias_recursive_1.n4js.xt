/*
 * Copyright (c) 2021 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.SpecXtTest END_SETUP */


type Node<T> = ~Object with {
	value: T,
	left: Node<T>,
	right: Node<T>
};

let n: Node<string> = null;

// XPECT noerrors -->
n = {
	value: "root node",
	left: {
		value: "left node",
		left: null,
		right: null
	},
	right: {
		value: "right node",
		left: null,
		right: null
	}
};

// XPECT noerrors -->
n = { value: "left node", left: null, right: null };
// XPECT noerrors -->
n = { value: "root node", left: n, right: null };
// XPECT noerrors -->
n.right = { value: "right node", left: null, right: null };

// XPECT typeWithAliasResolution of 'left' --> Node<string> <=> ~Object with { value: T; left: Node<T>; right: Node<T> } [[T->string]]
let left = n.left;
// XPECT typeWithAliasResolution of 'right' --> Node<string> <=> ~Object with { value: T; left: Node<T>; right: Node<T> } [[T->string]]
let right = n.left.right.left.right;


// ================================================================================================================
// same, but with optional fields:


type NodeWithOpt<T> = ~Object with {
	value: T,
	left?: NodeWithOpt<T>,
	right?: NodeWithOpt<T>
};

let no: NodeWithOpt<string> = null;

// XPECT noerrors -->
no = {
	value: "root node",
	left: {
		value: "left node"
	},
	right: {
		value: "right node"
	}
};

// XPECT noerrors -->
no = { value: "left node" };
// XPECT noerrors -->
no = { value: "root node", left: no };
// XPECT noerrors -->
no.right = { value: "right node" };

// XPECT typeWithAliasResolution of 'leftWithOpt' --> NodeWithOpt<string> <=> ~Object with { value: T; left?: NodeWithOpt<T>; right?: NodeWithOpt<T> } [[T->string]]
let leftWithOpt = no.left;
// XPECT typeWithAliasResolution of 'rightWithOpt' --> NodeWithOpt<string> <=> ~Object with { value: T; left?: NodeWithOpt<T>; right?: NodeWithOpt<T> } [[T->string]]
let rightWithOpt = no.left.right.left.right;
