/*
 * Copyright (c) 2021 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.SpecXtTest END_SETUP */



// XPECT noerrors -->
class G<T=any> {}

// XPECT noerrors -->
interface I<T=any> {}

// XPECT noerrors -->
type Ali<T=any> = G<T>;


class Cls {
	// XPECT errors --> "Mandatory type parameters may not follow optional type parameters." at "T1"
	<T0=any,T1> method1(p0: T0, p1: T1) {}
	// XPECT noerrors --> "Only type parameters of classes, interfaces, and type aliases may be declared optional." at "any"
	<T=any> method2(p: T) {}
}

// XPECT noerrors --> "Only type parameters of classes, interfaces, and type aliases may be declared optional." at "any"
function <T=any> foo(p: T): T {
	return p;
}

// XPECT noerrors --> "Only type parameters of classes, interfaces, and type aliases may be declared optional." at "any"
let fn: {function<T=any>(p:T):T};

let obj: ~Object with {
	// XPECT noerrors --> "Only type parameters of classes, interfaces, and type aliases may be declared optional." at "any"
	<T=any> m(p:T):T;
};



// XPECT noerrors -->
type AliasFn<T=any> = {function<T>(p:T):T};
// XPECT noerrors -->
type AliasObj<T=any> = ~Object with { <T> m(p:T):T; };
