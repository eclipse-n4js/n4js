/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/*  XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


// Three classes with inheritance.
class A {
	@Final m1() : string { return 'a'; }
}

class B extends A {
	@Final mN(n :  number) : void { }
}

class C extends B {
	// Property
	private _s : string;
	get s () : string { return this._s;}

	// Constructor
	constructor(s : string) {
		this._s = s;
	}

	// Method returning stuff:
	public propertySandMore(more : string) : string { return this.s +' and '+more }
}

var a : A = new A();
var b : B = new B();
var cFoo : C = new C('Foo');
var cBar : C = new C('Bar');

cFoo._s = '33';

// referencing Object methods:

var aM0 : {function()} = a.m1
var aM1 : {function():string} = a.m1
var aM2 : {function():any} = a.m1

var aM0_1 : {function(string)} = a.m1
var aM1_1 : {function(string):string} = a.m1
var aM2_1 : {function(string):any} = a.m1

console.log( 'Hello' );
console.log( aM0() );
console.log( aM1() );
console.log( aM2() );


var bM0 : {function():string} = b.m1;
var bM1 : {function():string} = b.m1;

var bMN1 : {function()} =
//  XPECT errors  --> "{function(number):void} is not a subtype of {function()}." at "b.mN"
b.mN;
var bMN2 : {function(number)} = b.mN
var bMN3 : {function(number, number)} = b.mN

var bMN4 : {function():string} =
//  XPECT errors  --> "{function(number):void} is not a subtype of {function():string}." at "b.mN"
b.mN
var bMN5 : {function(number):string} =
//  XPECT errors  --> "{function(number):void} is not a subtype of {function(number):string}." at "b.mN"
b.mN
var bMN6 : {function(number,string):string} =
//  XPECT errors  --> "{function(number):void} is not a subtype of {function(number,string):string}." at "b.mN"
b.mN

var bMN7 : {function():void} =
//  XPECT errors  --> "{function(number):void} is not a subtype of {function():void}." at "b.mN"
b.mN
var bMN8 : {function(number):void} = b.mN
var bMN9 : {function(number,string):void} = b.mN
var bMN10 : {function(string,number):void} =
//  XPECT errors  --> "{function(number):void} is not a subtype of {function(string,number):void}." at "b.mN"
b.mN


// TODO not working yet, See IDE-802
//var {@This(B) function(string):string} cThisB = cFoo.propertySandMore
//var {@This(C) function(string):string} cThisC = cFoo.propertySandMore

// XPECT warnings --> "A reference to method propertySandMore is created detached from a (correct) this-instance." at "propertySandMore"
var cFpsm : {function(string):string} = cFoo.propertySandMore
// XPECT warnings --> "A reference to method propertySandMore is created detached from a (correct) this-instance." at "propertySandMore"
var cBpsm : {function(string):string} = cBar.propertySandMore
// shouldn't it be possible to take the method-reference as a function (context must be set anyway.):
//var {function(string):string} cCpsm = C.propertySandMore
console.log( cFpsm("") )
console.log( cBpsm("") )
var eq : boolean = cFpsm === cBpsm;
console.log('Look at cFsm & cBpsm  and say are they equal? '+eq)

// Calling
console.log('-- call & apply --')
console.log( cFpsm.call(cBar,'Plus') )
console.log( cFpsm.call(cFoo,'Plus') )
console.log( cFpsm.apply(cBar,['Plus']) )
console.log( cBpsm.apply(cBar,['Plus']) )


// Binding
console.log('-- binding --')
var boundToCBar =  cBpsm.bind(cBar)
var boundToAnA = cBpsm.bind(new A())

console.log( boundToCBar('up') )
console.log( boundToAnA('down') )

// create something funny:
var anotherA : any+ = new A();
anotherA.s = 'xxx';

var boundToAxxx = cFpsm.bind(anotherA);
console.log(boundToAxxx());
