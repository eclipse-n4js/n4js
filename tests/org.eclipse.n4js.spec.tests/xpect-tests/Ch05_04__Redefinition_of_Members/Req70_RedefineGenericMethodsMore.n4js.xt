/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

class C1<T> {
	public <X extends T, Y extends X> m(x : X, y : Y) : T { return null; }
}

class A {}

class C2 extends C1<A> {
	@Override
	// XPECT noerrors -->
	public <X extends A, Y extends X> m(x : X, y : Y) : A { return null; }
}


interface I1<T> {
	public <V extends T> m(t : T) : V
}
interface I2 extends I1<I2> {
}
interface I3 extends I1<I3> {
}
// XPECT errors --> "Cannot extend interface I1 multiple times with different type arguments for invariant T: I2, I3." at "I4"
interface I4 extends I2, I3 {}
// XPECT errors --> "Cannot implement interface I1 multiple times with different type arguments for invariant T: I2, I3." at "C3"
class C3 implements I2, I3 {
	@Override
	/*
	   This is an error since V could be used in parameter list or as a return type thus it has to be exactly
	   overridden. Even though this case looks like it would be sound at a first glance, it violates liskovs
	   substitution principle. C3 implements I2 but cannot be used to invoke 'm' with the type arg I2
	 */
	// TODO IDE-2226 revisit test case
	// XPECT noerrors --> "Signature of method C3.m does not conform to implemented method I1.m: {function<V extends I4>(union{I2,I3}):V} is not a subtype of {function<V extends intersection{I2,I3}>(union{I2,I3}):V}." at "m"
	public <V extends I4> m(t : union{I2,I3}) : V { return null; }
}


interface I5 {
	m() : I2
}
interface I6 {
	m() : I3
}
class C4 implements I5, I6 {
	@Override
	// XPECT noerrors -->
	m() : C3 { return null; }
}

class C5 {
	// XPECT warnings --> "Type variable T not used in parameters or return type." at "T"
	<T extends I5> m() : void {}
}
class C6 extends C5 {
	@Override
	<V extends I5> m() : void {}
}
class C7 extends C5 {
	@Override
	// XPECT noerrors --> "Method C7.m conforms to method C5.m: {function<V extends any>():void} is a subtype of {function<T extends I5>():void} because any is a super type of I5."
	<V extends any> m() : void {}
}
class C8 extends C5 {
	@Override
	// XPECT errors --> "Signature of method C8.m does not conform to overridden method C5.m: {function<V extends C4>():void} is not a subtype of {function<T extends I5>():void}." at "m"
	<V extends C4> m() : void {}
}

interface I7 {
	// XPECT warnings --> "Type variable T not used in parameters or return type." at "T"
	<T extends I7> m() : void
}
interface I8<T extends I7> {
	// XPECT warnings --> "Type variable V not used in parameters or return type." at "V"
	<V extends T> m() : void
}
class C9 implements I7, I8<I7> {
	@Override
	<T extends I7> m() : void {}
}
class C10 implements I7, I8<C9> {
	@Override
	// XPECT noerrors --> "Method C10.m conforms to method I8.m: {function<T extends I7>():void} is a subtype of {function<V extends C9>():void} because I7 is a super type of C9."
	<T extends I7> m() : void {}
}
class C11 implements I7, I8<C9> {
	@Override
	// XPECT errors --> "Signature of method C11.m does not conform to implemented method I7.m: {function<T extends C9>():void} is not a subtype of {function<T extends I7>():void}. Also cf. method I8.m." at "m"
	<T extends C9> m() : void {}
}

interface I9 {
	// XPECT warnings --> "Type variable T not used in parameters or return type." at "T"
	<T extends I9> m() : void
}
class C12 implements I7, I9 {
	@Override
	// XPECT errors --> "Signature of method C12.m does not conform to implemented method I9.m: {function<T extends I7>():void} is not a subtype of {function<T extends I9>():void}. Also cf. method I7.m." at "m"
	<T extends I7> m() : void {}
}
