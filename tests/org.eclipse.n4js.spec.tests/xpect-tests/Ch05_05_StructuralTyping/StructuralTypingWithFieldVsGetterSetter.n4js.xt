/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


//
// checks all cases of structural subtype check where we have a
// field, getter, setter, or getter/setter pair on each side.
//


class A {}
class B extends A {}
class C extends B {}



// ######################################################################################################
// FIELD on right-hand side of subtype check (not of assignment!)


// ------------------------------------------------------------------------------------------------------
// getter | field

class Class01 {
	public m : B;
}
class Sub01 {
	public get m() : B {return null;}
}
// XPECT errors --> "Sub01 is not a structural subtype of ~Class01: m failed: writable field requires a field or a getter/setter pair in subtype." at "new Sub01()"
var v01 : ~Class01 = new Sub01();


// ------------------------------------------------------------------------------------------------------
// setter | field

class Class02 {
	public m : B;
}
class Sub02 {
	public set m(p : B) {}
}
// XPECT errors --> "Sub02 is not a structural subtype of ~Class02: m failed: writable field requires a field or a getter/setter pair in subtype." at "new Sub02()"
var v02 : ~Class02 = new Sub02();


// ------------------------------------------------------------------------------------------------------
// getter+setter | field

class Class03 {
	public m : B;
}
class Sub03 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub03AB {
	public get m() : A {return null;}
	public set m(p : B) {}
}
class Sub03CB {
	public get m() : C {return null;}
	public set m(p : B) {}
}
class Sub03BA {
	public get m() : B {return null;}
	public set m(p : A) {}
}
class Sub03BC {
	public get m() : B {return null;}
	public set m(p : C) {}
}
// XPECT noerrors -->
var v03_1 : ~Class03 = new Sub03();
// XPECT errors --> "Sub03AB is not a structural subtype of ~Class03: m failed: A is not a subtype of B." at "new Sub03AB()"
var v03_2 : ~Class03 = new Sub03AB();
// XPECT noerrors -->
var v03_3 : ~Class03 = new Sub03CB();
// XPECT noerrors -->
var v03_4 : ~Class03 = new Sub03BA();
// XPECT errors --> "Sub03BC is not a structural subtype of ~Class03: m failed: C is not a super type of B." at "new Sub03BC()"
var v03_5 : ~Class03 = new Sub03BC();


// ------------------------------------------------------------------------------------------------------
// field | field

class Class04 {
	public m : B;
}
class Sub04 {
	public m : B;
}
class Sub04A {
	public m : A;
}
class Sub04C {
	public m : C;
}
// XPECT noerrors -->
var v04_1 : ~Class04 = new Sub04();
// XPECT errors --> "Sub04A is not a structural subtype of ~Class04: m failed: A is not equal to B." at "new Sub04A()"
var v04_2 : ~Class04 = new Sub04A();
// XPECT errors --> "Sub04C is not a structural subtype of ~Class04: m failed: C is not equal to B." at "new Sub04C()"
var v04_3 : ~Class04 = new Sub04C();


// ------------------------------------------------------------------------------------------------------
// read-only field | field

class Class05 {
	public m : B;
}
class Sub05 {
	@Final public m : B = null;
}
// XPECT errors --> "Sub05 is not a structural subtype of ~Class05: m failed: field is read-only." at "new Sub05()"
var v05 : ~Class05 = new Sub05();




// ######################################################################################################
// GETTER on right-hand side of subtype check (not of assignment!)


// ------------------------------------------------------------------------------------------------------
// getter | getter

class Class11 {
	public get m() : B {return null;}
}
class Sub11 {
	public get m() : B {return null;}
}
class Sub11A {
	public get m() : A {return null;}
}
class Sub11C {
	public get m() : C {return null;}
}
// XPECT noerrors -->
var v11_1 : ~Class11 = new Sub11();
// XPECT errors --> "Sub11A is not a structural subtype of ~Class11: m failed: A is not a subtype of B." at "new Sub11A()"
var v11_2 : ~Class11 = new Sub11A();
// XPECT noerrors -->
var v11_3 : ~Class11 = new Sub11C();


// ------------------------------------------------------------------------------------------------------
// setter | getter

class Class12 {
	public get m() : B {return null;}
}
class Sub12 {
	public set m(p : B) {}
}
// XPECT errors --> "Sub12 is not a structural subtype of ~Class12: missing getter m." at "new Sub12()"
var v12 : ~Class12 = new Sub12();


// ------------------------------------------------------------------------------------------------------
// getter+setter | getter

class Class13 {
	public get m() : B {return null;}
}
class Sub13 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub13AB {
	public get m() : A {return null;}
	public set m(p : B) {}
}
class Sub13CB {
	public get m() : C {return null;}
	public set m(p : B) {}
}
class Sub13BA {
	public get m() : B {return null;}
	public set m(p : A) {}
}
class Sub13BC {
	public get m() : B {return null;}
	public set m(p : C) {}
}
// XPECT noerrors -->
var v13_1 : ~Class13 = new Sub13();
// XPECT errors --> "Sub13AB is not a structural subtype of ~Class13: m failed: A is not a subtype of B." at "new Sub13AB()"
var v13_2 : ~Class13 = new Sub13AB();
// XPECT noerrors -->
var v13_3 : ~Class13 = new Sub13CB();
// XPECT noerrors -->
var v13_4 : ~Class13 = new Sub13BA();
// XPECT noerrors --> "setter of wrong type on lhs does not harm, because no setter required at all"
var v13_5 : ~Class13 = new Sub13BC();


// ------------------------------------------------------------------------------------------------------
// field | getter

class Class14 {
	public get m() : B {return null;}
}
class Sub14 {
	public m : B;
}
class Sub14A {
	public m : A;
}
class Sub14C {
	public m : C;
}
// XPECT noerrors -->
var v14_1 : ~Class14 = new Sub14();
// XPECT errors --> "Sub14A is not a structural subtype of ~Class14: m failed: A is not a subtype of B." at "new Sub14A()"
var v14_2 : ~Class14 = new Sub14A();
// XPECT noerrors -->
var v14_3 : ~Class14 = new Sub14C();


// ------------------------------------------------------------------------------------------------------
// read-only field | getter

class Class15 {
	public get m() : B {return null;}
}
class Sub15 {
	@Final public m : B = null;
}
class Sub15A {
	@Final public m : A = null;
}
class Sub15C {
	@Final public m : C = null;
}
// XPECT noerrors -->
var v15_1 : ~Class15  = new Sub15();
// XPECT errors --> "Sub15A is not a structural subtype of ~Class15: m failed: A is not a subtype of B." at "new Sub15A()"
var v15_2 : ~Class15 = new Sub15A();
// XPECT noerrors -->
var v15_3 : ~Class15 = new Sub15C();




// ######################################################################################################
// SETTER on right-hand side of subtype check (not of assignment!)


// ------------------------------------------------------------------------------------------------------
// getter | setter

class Class21 {
	public set m(p : B) {}
}
class Sub21 {
	public get m() : B {return null;}
}
// XPECT errors --> "Sub21 is not a structural subtype of ~Class21: missing setter m." at "new Sub21()"
var v21 : ~Class21 = new Sub21();


// ------------------------------------------------------------------------------------------------------
// setter | setter

class Class22 {
	public set m(p : B) {}
}
class Sub22 {
	public set m(p : B) {}
}
class Sub22A {
	public set m(p : A) {}
}
class Sub22C {
	public set m(p : C) {}
}
// XPECT noerrors -->
var v22_1 : ~Class22 = new Sub22();
// XPECT noerrors -->
var v22_2 : ~Class22 = new Sub22A();
// XPECT errors --> "Sub22C is not a structural subtype of ~Class22: m failed: C is not a super type of B." at "new Sub22C()"
var v22_3 : ~Class22 = new Sub22C();


// ------------------------------------------------------------------------------------------------------
// getter+setter | setter

class Class23 {
	public set m(p : B) {}
}
class Sub23 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub23AB {
	public get m() : A {return null;}
	public set m(p : B) {}
}
class Sub23CB {
	public get m() : C {return null;}
	public set m(p : B) {}
}
class Sub23BA {
	public get m() : B {return null;}
	public set m(p : A) {}
}
class Sub23BC {
	public get m() : B {return null;}
	public set m(p : C) {}
}
// XPECT noerrors -->
var v23_1 : ~Class23 = new Sub23();
// XPECT noerrors --> "getter of wrong type on lhs does not harm, because no getter required at all"
var v23_2 : ~Class23 = new Sub23AB();
// XPECT noerrors -->
var v23_3 : ~Class23 = new Sub23CB();
// XPECT noerrors -->
var v23_4 : ~Class23 = new Sub23BA();
// XPECT errors --> "Sub23BC is not a structural subtype of ~Class23: m failed: C is not a super type of B." at "new Sub23BC()"
var v23_5 : ~Class23 = new Sub23BC();


// ------------------------------------------------------------------------------------------------------
// field | setter

class Class24 {
	public set m(p : B) {}
}
class Sub24 {
	public m : B;
}
class Sub24A {
	public m : A;
}
class Sub24C {
	public m : C;
}
// XPECT noerrors -->
var v24_1 : ~Class24 = new Sub24();
// XPECT noerrors -->
var v24_2 : ~Class24 = new Sub24A();
// XPECT errors --> "Sub24C is not a structural subtype of ~Class24: m failed: C is not a super type of B." at "new Sub24C()"
var v24_3 : ~Class24 = new Sub24C();


// ------------------------------------------------------------------------------------------------------
// read-only field | setter

class Class25 {
	public set m(p : B) {}
}
class Sub25 {
	@Final public m : B = null;
}
// XPECT errors --> "Sub25 is not a structural subtype of ~Class25: missing setter m." at "new Sub25()"
var v25 : ~Class25 = new Sub25();




// ######################################################################################################
// GETTER + SETTER on right-hand side of subtype check (not of assignment!)


// ------------------------------------------------------------------------------------------------------
// getter | getter+setter

class Class31 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub31 {
	public get m() : B {return null;}
}
// XPECT errors --> "Sub31 is not a structural subtype of ~Class31: missing setter m." at "new Sub31()"
var v31 : ~Class31 = new Sub31();


// ------------------------------------------------------------------------------------------------------
// setter | getter+setter

class Class32 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub32 {
	public set m(p : B) {}
}
// XPECT errors --> "Sub32 is not a structural subtype of ~Class32: missing getter m." at "new Sub32()"
var v32 : ~Class32 = new Sub32();


// ------------------------------------------------------------------------------------------------------
// getter+setter | getter+setter

class Class33 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub33 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub33AB {
	public get m() : A {return null;}
	public set m(p : B) {}
}
class Sub33CB {
	public get m() : C {return null;}
	public set m(p : B) {}
}
class Sub33BA {
	public get m() : B {return null;}
	public set m(p : A) {}
}
class Sub33BC {
	public get m() : B {return null;}
	public set m(p : C) {}
}
// XPECT noerrors -->
var v33_1 : ~Class33 = new Sub33();
// XPECT errors --> "Sub33AB is not a structural subtype of ~Class33: m failed: A is not a subtype of B." at "new Sub33AB()"
var v33_2 : ~Class33 = new Sub33AB();
// XPECT noerrors -->
var v33_3 : ~Class33 = new Sub33CB();
// XPECT noerrors -->
var v33_4 : ~Class33 = new Sub33BA();
// XPECT errors --> "Sub33BC is not a structural subtype of ~Class33: m failed: C is not a super type of B." at "new Sub33BC()"
var v33_5 : ~Class33 = new Sub33BC();


// ------------------------------------------------------------------------------------------------------
// field | getter+setter

class Class34 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub34 {
	public m : B;
}
class Sub34A {
	public m : A;
}
class Sub34C {
	public m : C;
}
// XPECT noerrors -->
var v34_1 : ~Class34 = new Sub34();
// XPECT errors --> "Sub34A is not a structural subtype of ~Class34: m failed: A is not a subtype of B." at "new Sub34A()"
var v34_2 : ~Class34 = new Sub34A();
// XPECT errors --> "Sub34C is not a structural subtype of ~Class34: m failed: C is not a super type of B." at "new Sub34C()"
var v34_3 : ~Class34 = new Sub34C();


// ------------------------------------------------------------------------------------------------------
// read-only field | getter+setter

class Class35 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub35 {
	@Final public m : B = null;
}
// XPECT errors --> "Sub35 is not a structural subtype of ~Class35: missing setter m." at "new Sub35()"
var v35 : ~Class35 = new Sub35();




// ######################################################################################################
// READ-ONLY FIELD on right-hand side of subtype check (not of assignment!)


// ------------------------------------------------------------------------------------------------------
// getter | read-only field

class Class41 {
	@Final public m : B = null;
}
class Sub41 {
	public get m() : B {return null;}
}
class Sub41A {
	public get m() : A {return null;}
}
class Sub41C {
	public get m() : C {return null;}
}
// XPECT noerrors -->
var v41_1 : ~Class41 = new Sub41();
// XPECT errors --> "Sub41A is not a structural subtype of ~Class41: m failed: A is not a subtype of B." at "new Sub41A()"
var v41_2 : ~Class41 = new Sub41A();
// XPECT noerrors -->
var v41_3 : ~Class41 = new Sub41C();


// ------------------------------------------------------------------------------------------------------
// setter | read-only field

class Class42 {
	@Final public m : B = null;
}
class Sub42 {
	public set m(p : B) {}
}
// XPECT errors --> "Sub42 is not a structural subtype of ~Class42: missing field m." at "new Sub42()"
var v42 : ~Class42 = new Sub42();


// ------------------------------------------------------------------------------------------------------
// getter+setter | read-only field

class Class43 {
	@Final public m : B = null;
}
class Sub43 {
	public get m() : B {return null;}
	public set m(p : B) {}
}
class Sub43AB {
	public get m() : A {return null;}
	public set m(p : B) {}
}
class Sub43CB {
	public get m() : C {return null;}
	public set m(p : B) {}
}
class Sub43BA {
	public get m() : B {return null;}
	public set m(p : A) {}
}
class Sub43BC {
	public get m() : B {return null;}
	public set m(p : C) {}
}
// XPECT noerrors -->
var v43_1 : ~Class43 = new Sub43();
// XPECT errors --> "Sub43AB is not a structural subtype of ~Class43: m failed: A is not a subtype of B." at "new Sub43AB()"
var v43_2 : ~Class43 = new Sub43AB();
// XPECT noerrors -->
var v43_3 : ~Class43 = new Sub43CB();
// XPECT noerrors -->
var v43_4 : ~Class43 = new Sub43BA();
// XPECT noerrors --> "setter of wrong type on lhs does not harm, because no setter required at all"
var v43_5 : ~Class43 = new Sub43BC();


// ------------------------------------------------------------------------------------------------------
// field | read-only field

class Class44 {
	@Final public m : B = null;
}
class Sub44 {
	public m : B;
}
class Sub44A {
	public m : A;
}
class Sub44C {
	public m : C;
}
// XPECT noerrors -->
var v44_1 : ~Class44 = new Sub44();
// XPECT errors --> "Sub44A is not a structural subtype of ~Class44: m failed: A is not a subtype of B." at "new Sub44A()"
var v44_2 : ~Class44 = new Sub44A();
// XPECT noerrors -->
var v44_3 : ~Class44 = new Sub44C();


// ------------------------------------------------------------------------------------------------------
// read-only field | read-only field

class Class45 {
	@Final public m : B = null;
}
class Sub45 {
	@Final public m : B = null;
}
class Sub45A {
	@Final public m : A = null;
}
class Sub45C {
	@Final public m : C = null;
}
// XPECT noerrors -->
var v45_1 : ~Class45 = new Sub45();
// XPECT errors --> "Sub45A is not a structural subtype of ~Class45: m failed: A is not a subtype of B." at "new Sub45A()"
var v45_2 : ~Class45 = new Sub45A();
// XPECT noerrors -->
var v45_3 : ~Class45 = new Sub45C();
