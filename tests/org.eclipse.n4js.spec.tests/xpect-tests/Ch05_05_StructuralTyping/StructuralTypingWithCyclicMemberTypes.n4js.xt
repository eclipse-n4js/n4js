/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


// see IDEBUG-171 / IDEBUG-198


class Element {
	public child : ~Element;
}

var e1 : ~Element;
var e2 : ~Element;

// XPECT noerrors --> "no stack overflow exception"
e1 = e2;




class A {
	public f : ~B;
}
class B {
	public f : ~A;
}
var a : ~A;
var b : ~B;
// XPECT noerrors --> "no stack overflow exception"
a = b;
// XPECT noerrors --> "no stack overflow exception"
b = a;




class Container<T> {}

class A2 {
	public f : Container<~B2>;
}
class B2 {
	public f : Container<~A2>;
}
var a2 : ~A2;
var b2 : ~B2;
// XPECT noerrors --> "no stack overflow exception"
a2 = b2;
// XPECT noerrors --> "no stack overflow exception"
b2 = a2;




// this last example makes sure that the cycle guard in StructuralTypingComputer
// works properly even if TypeRefs are re-computed on the fly:

class X {
	public f : ~Y<?>;
}
class Y<T> {
	public f : ~X;
}
var x : ~X;
var y : ~Y<?>;
// XPECT noerrors --> "no stack overflow exception"
x = y;




// this very last example makes sure that the cycle guard in StructuralTypingComputer
// works properly for Wildcards/ExistentialTypeRefs (cf. IDEBUG-316)

interface ~I<T> {
    public m() : I<T>;
}
var i : I<?>;
// XPECT noerrors --> "no stack overflow exception"
var i_test : I<?> = i;
