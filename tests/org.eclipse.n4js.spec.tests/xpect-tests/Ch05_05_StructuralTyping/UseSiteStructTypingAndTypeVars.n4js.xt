/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */

class A { public name : string; }
class B { public name : string; }

class C<T> {
	public field : ~T; // note: T is use-site structural!

	public set acc(t : ~T) {	}
	public get acc() : ~T {
		return null;
	}

	public method(t : ~T) : ~T {
		return null;
	}
}

var ca_struct : ~C<A>;
var cb : C<B>;

// XPECT type of 'cb.field' --> ~B
cb.field;

// XPECT noerrors -->
ca_struct = cb;

// XPECT noerrors -->
ca_struct.field = {name:"x"};

// XPECT type of 'test' --> ~A
var test = ca_struct.field; // <-- works, but for the wrong reasons! type inferred to A instead of ~A

// XPECT noerrors -->
cb.acc = {name:"x"};
// XPECT type of cb.acc --> ~B
cb.acc;

// XPECT noerrors -->
cb.method({name:"x"});
// XPECT type of cb.method(null) --> ~B
cb.method(null);


class M<T> {
    public prop: T;
}
class G<T> {
    field: ~r~T;
}

let g: G<M<string>>;

// XPECT type of 'g.field' --> ~r~M<string>
var m = g.field;
m.prop;

// XPECT noerrors
g.field = { prop: "hello" };
