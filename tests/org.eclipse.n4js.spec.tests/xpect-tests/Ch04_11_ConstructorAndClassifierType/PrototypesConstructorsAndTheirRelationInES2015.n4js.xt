/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */




class A extends Object {} // extending Object instead N4Object to closer reflect ECMAScript 2015
class B extends A {}

let b = new B();

// ------------------------------------------------------------------------------
// collect all prototypes and constructors (for later checks)

// XPECT type of 'aCtor' --> constructor{A}
let aCtor = A;
// XPECT type of 'bCtor' --> constructor{B}
let bCtor = B;
// XPECT type of 'functionCtor' --> constructor{Function}
let functionCtor = Function;
// XPECT type of 'objectCtor' --> constructor{Object}
let objectCtor = Object;

// XPECT type of 'aProto' --> Object
let aProto = A.prototype;
// XPECT type of 'bProto' --> Object
let bProto = B.prototype;
// XPECT type of 'functionProto' --> Function
let functionProto = Function.prototype;
// XPECT type of 'objectProto' --> Object
let objectProto = Object.prototype;

// ------------------------------------------------------------------------------
// check: prototype chain of instance of B

// XPECT type of 'bProtoFromInstance' --> Object
let bProtoFromInstance = b.__proto__;
// XPECT type of 'aProtoFromInstance' --> Object
let aProtoFromInstance = bProtoFromInstance.__proto__;
// XPECT type of 'objectProtoFromInstance' --> Object
let objectProtoFromInstance = aProtoFromInstance.__proto__;
// XPECT type of 'endOfProtoChain' --> Object
let endOfProtoChain = objectProtoFromInstance.__proto__;

console.log(bProtoFromInstance===bProto);
console.log(aProtoFromInstance===aProto);
console.log(objectProtoFromInstance===objectProto);
console.log(endOfProtoChain===null);

// ------------------------------------------------------------------------------
// check: prototype chain of constructor for B

// XPECT type of 'aCtorAsProtoOfBCtor' --> Object
let aCtorAsProtoOfBCtor = bCtor.__proto__;
// XPECT type of 'objectCtorAsProtoOfACtor' --> Object
let objectCtorAsProtoOfACtor = aCtorAsProtoOfBCtor.__proto__;
// XPECT type of 'functionProtoAsProtoOfObjectCtor' --> Object
let functionProtoAsProtoOfObjectCtor = objectCtorAsProtoOfACtor.__proto__;
// XPECT type of 'objectProtoAsProtoOfFunctionProto' --> Object
let objectProtoAsProtoOfFunctionProto = functionProtoAsProtoOfObjectCtor.__proto__;

console.log(aCtorAsProtoOfBCtor===aCtor);
console.log(objectCtorAsProtoOfACtor===objectCtor);
console.log(functionProtoAsProtoOfObjectCtor===functionProto);
console.log(objectProtoAsProtoOfFunctionProto===objectProto);

// ------------------------------------------------------------------------------
// check: prototype of constructor for Function

// XPECT type of 'functionProtoAsProtoOfFunctionCtor' --> Object
let functionProtoAsProtoOfFunctionCtor = functionCtor.__proto__;

console.log(functionProtoAsProtoOfFunctionCtor===functionProto);

// ------------------------------------------------------------------------------
// check: constructor property (starting at instance of B)

// XPECT type of 'bCtorFromInstance' --> constructor{? extends B}
let bCtorFromInstance = b.constructor;
// XPECT type of 'functionCtorViaBCtorFromInstance' --> constructor{Function}
// XPECT noerrors -->
let functionCtorViaBCtorFromInstance = bCtorFromInstance.constructor;
// XPECT type of 'functionCtorViaACtor' --> constructor{Function}
let functionCtorViaACtor = aCtor.constructor;
// XPECT type of 'functionCtorViaObjectCtor' --> constructor{Function}
let functionCtorViaObjectCtor = objectCtor.constructor;
// XPECT type of 'functionCtorViaFunctionCtor' --> constructor{Function}
let functionCtorViaFunctionCtor = functionCtor.constructor;

console.log(bCtorFromInstance===bCtor);
console.log(functionCtorViaBCtorFromInstance===functionCtor);
console.log(functionCtorViaACtor===functionCtor);
console.log(functionCtorViaObjectCtor===functionCtor);
console.log(functionCtorViaFunctionCtor===functionCtor);

// ------------------------------------------------------------------------------
// check: bidirectional association between prototype and constructor

console.log(bCtor.prototype.constructor === bCtor);
console.log(aCtor.prototype.constructor === aCtor);
console.log(objectCtor.prototype.constructor === objectCtor);
console.log(functionCtor.prototype.constructor === functionCtor);

/* XPECT output ---
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
--- */
