/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


class C {}

class G<T> {
	field: constructor{T};
}

let g: G<? extends C>;
let g2: G<? extends C>; // only required to avoid having identical TypeRef on left- and right-hand side of subtype check

let ctorExC: constructor{? extends C};
let ctorExC2: constructor{? extends C}; // only required to avoid having identical TypeRef on left- and right-hand side of subtype check
let ctorC: constructor{C};



// =========================================================================================================
// CASE #1:
// constructor{? extends C (ExistentialTypeRef)} <: constructor{C}
// constructor{? extends C (Wildcard          )} <: constructor{C}
// --> should behave the same (both error)

// XPECT errors --> "constructor{? extends C} is not a subtype of constructor{C}." at "g.field"
ctorC = g.field; // constructor{? extends C} <: constructor{C} (where ? extends C is an ExistentialTypeRef)
// XPECT errors --> "constructor{? extends C} is not a subtype of constructor{C}." at "ctorExC"
ctorC = ctorExC; // constructor{? extends C} <: constructor{C} (where ? extends C is a Wildcard)



// =========================================================================================================
// CASE #2:
// constructor{C} <: constructor{? extends C (ExistentialTypeRef)}
// constructor{C} <: constructor{? extends C (Wildcard          )}
// --> should behave differently (1st error, 2nd ok)

// XPECT errors --> "constructor{C} is not a subtype of constructor{? extends C}." at "ctorC"
g.field = ctorC; // constructor{C} <: constructor{? extends C} (where ? extends C is an ExistentialTypeRef)
// XPECT noerrors --> "constructor{C} is a subtype of constructor{? extends C}."
ctorExC = ctorC; // constructor{C} <: constructor{? extends C} (where ? extends C is a Wildcard)



// =========================================================================================================
// CASE #3:
// constructor{? extends C (ExistentialTypeRef)} <: constructor{? extends C (Wildcard)}
// constructor{? extends C (Wildcard          )} <: constructor{? extends C (Wildcard)}
// --> should behave the same (both ok)

// XPECT noerrors -->
ctorExC = g.field;
// XPECT noerrors -->
ctorExC = ctorExC2;



// =========================================================================================================
// CASE #4:
// constructor{? extends C (ExistentialTypeRef)} <: constructor{? extends C (ExistentialTypeRef)}
// constructor{? extends C (Wildcard          )} <: constructor{? extends C (ExistentialTypeRef)}
// --> should behave the same (both error)

// XPECT errors --> "constructor{? extends C} is not a subtype of constructor{? extends C}." at "g2.field"
g.field = g2.field;
// XPECT errors --> "constructor{? extends C} is not a subtype of constructor{? extends C}." at "ctorExC"
g.field = ctorExC;
