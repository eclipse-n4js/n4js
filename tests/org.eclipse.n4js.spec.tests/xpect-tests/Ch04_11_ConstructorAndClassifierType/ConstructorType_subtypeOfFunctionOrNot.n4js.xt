/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


class C {}
interface I {}
var f: Function;


var ctor0: constructor{?};
// XPECT noerrors --> "constructor{?} is not a subtype of Function." at "ctor0"
f = ctor0; // can be allowed, because the following is disallowed:
// XPECT errors --> "type{I} is not a subtype of constructor{?}." at "I"
ctor0 = I;


var ctor1: constructor{? extends Object};
// XPECT noerrors --> "constructor{? extends Object} is not a subtype of Function." at "ctor1"
f = ctor1; // can be allowed, because the following is disallowed:
// XPECT errors --> "type{I} is not a subtype of constructor{? extends Object}." at "I"
ctor1 = I;


var ctor2: constructor{? extends N4Object};
// XPECT noerrors --> "constructor{? extends N4Object} is not a subtype of Function." at "ctor2"
f = ctor2; // can be allowed, because the following is disallowed:
// XPECT errors --> "type{I} is not a subtype of constructor{? extends N4Object}." at "I"
ctor2 = I;


var ctor3: constructor{? extends C};
// XPECT noerrors -->
f = ctor3; // can be allowed, because the following is disallowed:
// XPECT errors --> "type{I} is not a subtype of constructor{? extends C}." at "I"
ctor3 = I;


var ctor4: constructor{Object};
// XPECT noerrors -->
f = ctor4; // can be allowed, because the following is disallowed:
// XPECT errors --> "type{I} is not a subtype of constructor{Object}." at "I"
ctor4 = I;


var ctor5: constructor{N4Object};
// XPECT noerrors -->
f = ctor5; // can be allowed, because the following is disallowed:
// XPECT errors --> "type{I} is not a subtype of constructor{N4Object}." at "I"
ctor5 = I;


var ctor6: constructor{C};
// XPECT noerrors -->
f = ctor6; // can be allowed, because the following is disallowed:
// XPECT errors --> "type{I} is not a subtype of constructor{C}." at "I"
ctor6 = I;




function <T> foo1a(ctor: constructor{T}) {
	// XPECT noerrors -->
	let f: Function = ctor;
}
function <T> foo1b(ctor: constructor{? extends T}) {
	// XPECT noerrors --> "constructor{? extends T} is not a subtype of Function." at "ctor"
	let f: Function = ctor; // can be allowed, because the following is disallowed:
	// XPECT errors --> "type{I} is not a subtype of constructor{? extends I}." at "I"
	<I>foo1b(I);
}
function <T extends Object> foo2a(ctor: constructor{T}) {
	// XPECT noerrors -->
	let f: Function = ctor;
}
function <T extends Object> foo2b(ctor: constructor{? extends T}) {
	// XPECT noerrors --> "constructor{? extends T} is not a subtype of Function." at "ctor"
	let f: Function = ctor; // can be allowed, because the following is disallowed:
	// XPECT errors --> "type{I} is not a subtype of constructor{? extends I}." at "I"
	<I>foo2b(I);
}
function <T extends N4Object> foo3a(ctor: constructor{T}) {
	// XPECT noerrors -->
	let f: Function = ctor;
}
function <T extends N4Object> foo3b(ctor: constructor{? extends T}) {
	// XPECT noerrors --> "constructor{? extends T} is not a subtype of Function." at "ctor"
	let f: Function = ctor; // can be allowed, because the following is disallowed:
	// XPECT errors --> "type{I} is not a subtype of constructor{? extends I}." at "I"
	<I>foo3b(I);
}
function <T extends C> foo4a(ctor: constructor{T}) {
	// XPECT noerrors -->
	let f: Function = ctor;
}
function <T extends C> foo4b(ctor: constructor{? extends T}) {
	// XPECT noerrors -->
	let f: Function = ctor; // can be allowed, because the following is disallowed:
	// XPECT errors ---
	// "I is not a subtype of C." at "I"
	// "type{I} is not a subtype of constructor{? extends I}." at "I"
	// ---
	<I>foo4b(I);
}
