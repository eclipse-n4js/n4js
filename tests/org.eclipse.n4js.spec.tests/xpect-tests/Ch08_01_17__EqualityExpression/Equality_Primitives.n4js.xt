/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */
// IDE-773

////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////
//// Setup /////
class A {}
class B {}
interface I {}
interface R {}

interface Ra { a : number; }
interface Rb extends Ra { b : number; }
interface Rb2 extends Ra { b2 : number; }
interface Rc extends Rb, Rb2, Ra { c : number; }
interface Rd extends Rc {}
interface R3 extends I {}
interface R2 {
	i : Array<string>; l : number;
}

function funcU ( ui : union{ A,I,R } ) :union{ A,I,R } { return ui; }
function funcB() : B { return new B() }
interface I2<T> { memB(t : T) : void; }

// This type:
class TA {
	q() : this { return this; }
}
class TB extends TA {}
class Crc implements Rd { }

enum Ea {
	one,two
}

var ta : A ;
var tb : TB;

var anyC : any+;

var i2 : I2<string>;
var i2a : I2<number>;

var	ub : union{ A, I, R };
var o : Object;
var p : Object;
var anA : A;
var aB : B;
var r : R;
var rd : Rd;
var ra : Ra;
var i : I;
var r3 : R3;
var ea : Ea;
var anyA : any = 0;
var anyB : any+;
var n4o : N4Object;
var ur : union{R2,Object};
var r2 : ~R2;
var owa : ~Object with {i : Array<string>; al : number;};
var udef : undefined; // = void anA;

var s : string;
var n : number;
var b : boolean;

//// End Setup ////////
////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////


// XPECT warnings --> "Neither A is a subtype of int nor int is a subtype of A. The expression will always evaluate to false." at "anA === 4"
anA === 4;

// XPECT warnings --> "Neither string is a subtype of R nor R is a subtype of string. The expression will always evaluate to true."  at ""hallo" !== r"
"hallo" !== r;

// XPECT warnings --> "Neither { Object,  R2 } is a subtype of int nor int is a subtype of { Object,  R2 }. The expression will always evaluate to false." at "ur === 0"
ur === 0;

// XPECT warnings --> "Neither string is a subtype of int nor int is a subtype of string. The expression will always evaluate to false." at ""a" === 4"
"a" === 4;

// XPECT warnings --> "Neither function funcU is a subtype of int nor int is a subtype of function funcU. The expression will always evaluate to false." at "funcU === 5"
funcU === 5;

// XPECT warnings --> "Neither { A,  I,  R } is a subtype of int nor int is a subtype of { A,  I,  R }. The expression will always evaluate to false." at "funcU( null ) === 5"
funcU( null ) === 5;

anyA === 3;

// XPECT warnings --> "Neither int is a subtype of Ea nor Ea is a subtype of int. The expression will always evaluate to false." at "5 === ea"
5 === ea;

// XPECT warnings --> "Neither string is a subtype of R nor R is a subtype of string. The expression will always evaluate to true."  at "s !== r"
s !== r;

// XPECT warnings --> "Neither string is a subtype of number nor number is a subtype of string. The expression will always evaluate to true."  at "s !== n"
s !== n;

// XPECT warnings --> "Neither boolean is a subtype of function funcU nor function funcU is a subtype of boolean. The expression will always evaluate to true." at "b !== funcU"
b !== funcU;
