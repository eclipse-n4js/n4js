/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */
// IDE-773

// Testing between Classes.

////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////
//// Setup /////
class A {}
class B {}
interface I {}
interface R {}

interface Ra { a : number; }
interface Rb extends Ra { b : number; }
interface Rb2 extends Ra { b2 : number; }
interface Rc extends Rb, Rb2, Ra { c : number; }
interface Rd extends Rc {}
interface R3 extends I {}
interface R2 {
	i : Array<string>; l : number;
}

function funcU ( ui : union{ A,I,R } ) :union{ A,I,R } { return ui; }
function funcB() : B { return new B() }
interface I2<T> { memB(t : T) : void; }

// This type:
class TA {
	q() : this { return this; }
}
class TB extends TA {}
class Crc implements Rd { }

enum Ea {
	one,two
}
// Annotated class.
@Final class An4 {}


var ta : TA;
var tb : TB;

var anyC : any+;

var i2 : I2<string>;
var i2a : I2<number>;

var	ub : union{ A, I, R };
var o : Object;
var p : Object;
var anA : A;
var aB : B;
var r : R;
var rd : Rd;
var ra : Ra;
var i : I;
var r3 : R3;
var ea : Ea;
var anyA : any = 0;
var anyB : any+;
var n4o : N4Object, nfo;
var ur : union{R2,Object};
var r2 : ~R2;
var owa : ~Object with {i : Array<string>; al : number;};
var udef : undefined; // = void anA;

//// End Setup ////////
////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////  ////////


///////////////////////////////////////////////////////////////////////////////////
// simple checks:

//OK
var a1 : boolean = o === p;
//OK
var a2 : boolean = o !== p;
//OK
var a3 : boolean = o == p;
//OK
var a4 : boolean = o != p;



///////////////////////////////////////////////////////////////////////////////////
// Warning if no inheritance relation btw. lhs and rhs.


// XPECT warnings --> "Neither A is a subtype of B nor B is a subtype of A. The expression will always evaluate to false." at "anA === aB"
anA === aB;

// XPECT warnings --> "Neither A is a subtype of B nor B is a subtype of A. The expression will always evaluate to true." at "anA !== aB"
anA !== aB;

// XPECT warnings --> "Neither A is a subtype of function funcU nor function funcU is a subtype of A. The expression will always evaluate to false." at "anA === funcU"
anA === funcU;

// XPECT warnings --> "Neither A is a subtype of B nor B is a subtype of A. The expression will always evaluate to false." at "anA === funcB()"
anA === funcB();



// XPECT warnings --> "Neither A is a subtype of B nor B is a subtype of A. The expression will always evaluate to false." at "anA === aB"
anA === aB;

// XPECT warnings --> "Neither A is a subtype of B nor B is a subtype of A. The expression will always evaluate to false." at "anA === funcB()"
anA === funcB();

// OK, anA could be undefined
// XPECT warnings --> "The type of this expression is undefined, so it will never evaluate to a value other than undefined." at "udef"
anA === udef;

// OK, structural comparison: A is basically an empty Object.
anA === {};
// XPECT warnings --> "Neither A is a subtype of Object nor Object is a subtype of A. The expression will always evaluate to false." at "anA === {a:3}"
anA === {a:3};
// XPECT warnings --> "Neither A is a subtype of Array nor Array is a subtype of A. The expression will always evaluate to false."  at "anA === [2,3]"
anA === [2,3];
// XPECT warnings --> "Neither A is a subtype of int nor int is a subtype of A. The expression will always evaluate to false." at "anA === 4"
anA === 4;

ub === new B(); // is union of type Object ?

// XPECT warnings --> "Neither string is a subtype of R nor R is a subtype of string. The expression will always evaluate to true."  at ""hallo" !== r"
"hallo" !== r;




// XPECT warnings --> "Neither { Object,  R2 } is a subtype of int nor int is a subtype of { Object,  R2 }. The expression will always evaluate to false." at "ur === 0"
ur === 0;
//  OK
ur === o;
// OK
ur === nfo;


// OK
ta === tb
// OK
ta.q() === tb.q();



// XPECT warnings --> "Neither Ea is a subtype of TA nor TA is a subtype of Ea. The expression will always evaluate to false." at "ea === ta"
ea === ta;
// OK
ea === o;


// This should issue NO warning !
// OK
o === anyA;

// OK
anyA === anyB;

// OK
o === anyB;

// OK
n4o === o;

// OK
n4o === anA;

// OK
n4o === new An4();
