/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest

	IssueConfiguration {
		IssueCode "EXP_MISSNG_AWAIT_FOR_ASYNC_TARGET" {enabled=false}
	}

END_SETUP */


// ==============================================================================================================
// restricted generator
// XPECT noerrors
function * g20() : Generator<undefined, undefined, undefined> {}
const g20o = g20();
// XPECT noerrors
async function * ag20() : AsyncGenerator<undefined, undefined, undefined> {}
const ag20o = ag20();


// call next ok
// XPECT noerrors
g20o.next();
// XPECT noerrors
ag20o.next();


// call next ok
// XPECT noerrors
g20o.next(undefined);
// XPECT noerrors
ag20o.next(undefined);


// call next arg not allowed
// XPECT errors --> "string is not a subtype of undefined." at ""1""
g20o.next("1");
// XPECT errors --> "string is not a subtype of undefined." at ""1""
ag20o.next("1");


// return type of next value is undefined
// XPECT warnings --> "The type of this expression is undefined, so it will never evaluate to a value other than undefined." at "g20o.next().value"
let g20on = g20o.next().value;
// XPECT warnings --> "The type of this expression is undefined, so it will never evaluate to a value other than undefined." at "entry.value"
ag20o.next().then(entry => { let ag20on = entry.value; });


// throw expects an argument
// XPECT errors --> "Incorrect number of arguments: expected 1, got 0." at "g20o.throw()"
g20o.throw();
// XPECT errors --> "Incorrect number of arguments: expected 1, got 0." at "ag20o.throw()"
ag20o.throw();


// throw expects any argument
// XPECT noerrors
g20o.throw("e");
// XPECT noerrors
ag20o.throw("e");


// call return ok
// XPECT noerrors
g20o.return();
// XPECT noerrors
ag20o.return();


// call return with undefined
// XPECT noerrors
g20o.return(undefined);
// XPECT noerrors
ag20o.return(undefined);


// call return arg not allowed
// XPECT errors --> "string is not a subtype of undefined." at ""1""
g20o.return("1");
// XPECT errors --> "string is not a subtype of undefined." at ""1""
ag20o.return("1");


// return type of return value is undefined
// XPECT warnings --> "The type of this expression is undefined, so it will never evaluate to a value other than undefined." at "g20o.return().value"
let g20or = g20o.return().value;
// XPECT warnings --> "The type of this expression is undefined, so it will never evaluate to a value other than undefined." at "entry.value"
ag20o.return().then(entry => { let ag20or = entry.value; });


// ==============================================================================================================
// full feature generator
// XPECT noerrors
function * g21() : Generator<int, string, boolean> {}
let g21o = g21();
// XPECT noerrors
async function * ag21() : AsyncGenerator<int, string, boolean> {}
let ag21o = ag21();


// call next ok
// XPECT noerrors
g21o.next();
// XPECT noerrors
ag21o.next();


// call next ok
// XPECT noerrors
g21o.next(undefined);
// XPECT noerrors
ag21o.next(undefined);


// call next ok
// XPECT noerrors
g21o.next(true);
// XPECT noerrors
ag21o.next(true);


// call next arg not allowed
// XPECT errors --> "string is not a subtype of boolean." at "'bad'"
g21o.next('bad');
// XPECT errors --> "string is not a subtype of boolean." at "'bad'"
ag21o.next('bad');


// return type of next value
// incorrect type of value, should be int|string, see GH-1983 XPECT type of 'g21on' --> int
let g21on = g21o.next().value;
// incorrect type of value, should be int|string, see GH-1983 XPECT type of 'ag21on' --> int
ag21o.next().then(entry => { let ag21on = entry.value; });


// call return ok
// XPECT noerrors
g21o.return();
// XPECT noerrors
ag21o.return();


// call return with undefined
// XPECT noerrors
g21o.return(undefined);
// XPECT noerrors
ag21o.return(undefined);


// call return ok
// XPECT noerrors
g21o.return(false);
// XPECT noerrors
ag21o.return(false);


// call return arg not allowed
// XPECT errors --> "string is not a subtype of boolean." at "'bad'"
g21o.return('bad');
// XPECT errors --> "string is not a subtype of boolean." at "'bad'"
ag21o.return('bad');


// call return ok
// XPECT type of 'g21or' --> string
let g21or = g21o.return().value;
// XPECT type of 'ag21or' --> string
ag21o.return().then(entry => { let ag21or = entry.value; });
