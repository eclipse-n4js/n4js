/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

// USING STRUCTURAL OBJECT LITERALS

// method x1 accesses n.
class X {
	constructor(n : number) { this.n = n; }
	n : number;
	x1() : number {
		console.log("ctor = " + this);
		return 42 / this.n;
	}
}


var x = new X(9);


// Ref to function. (type is {function():number})
// XPECT warnings --> "A reference to method x1 is created detached from a (correct) this-instance." at "x1"
var xMeth : {function():number} = x.x1;

// Assinging a new function:
xMeth = function() : number {
	return 41;
};

// Reference to method (by atThis it becomes a method-type of objects having an n  )
//var { @This(X)  function():number } xMethTyped;
var xMethTyped : { @This(~Object with { n : number; } ) function():number };

// XPECT warnings --> "A reference to method x1 is created detached from a (correct) this-instance." at "x1"
xMethTyped = x.x1;


// definition of a method
//var { @This(X)  function():number } xMethTyped2;
var xMethTyped2 : { @This(~Object with { n : number; } ) function():number };


// Assigning a newly created Method.
//xMethTyped2 = (  @This(X)  function (): number {
xMethTyped2 = (  @This( ~Object with {n : number;} ) function (): number {
	// XPECT type of 'this' --> ~this[Object]
	this;
	// XPECT type of 'this.n' --> number
	return this.n;
} )

// try to assign a function to an method-type
xMethTyped2 = xMeth;
