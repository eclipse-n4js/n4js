/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


class A {}


class X {
	m(p1 : A, p2 : A, p3 : A) : void {}
}
interface I_X {
	m(p1 : A, p2 : A, p3 : A) : void
}


// --------------------------------------------------------------------------
// for classes inheriting from a class:

class Y1 extends X {
	@Override
	m(p1 : A, p2 : A, p3 : A) : void {}
}
class Y2 extends X {
	@Override
	m(p1 : A, p2 : A) : void {}						// fewer parameters is ok!
}
class Y3 extends X {
	@Override
	// XPECT errors --> "Signature of method Y3.m does not conform to overridden method X.m: {function(A,A,A,A):void} is not a subtype of {function(A,A,A):void}." at "m"
	m(p1 : A, p2 : A, p3 : A, p4 : A) : void {}
}
class Y4 extends X {
	@Override
	m(p1 : A, p2 : A, p3 : A, p4 : A=undefined) : void {}			// adding optional parameter is ok!
}
class Y5 extends X {
	@Override
	m(p1 : A, p2 : A, p3 : A=undefined) : void {}				// making parameter optional is ok!
}


// --------------------------------------------------------------------------
// for classes inheriting from an interface:

class Y6 implements I_X {
	@Override
	m(p1 : A, p2 : A, p3 : A) : void {}
}
class Y7 implements I_X {
	@Override
	m(p1 : A, p2 : A) : void {}						// fewer parameters is ok!
}
class Y8 implements I_X {
	@Override
	// XPECT errors --> "Signature of method Y8.m does not conform to implemented method I_X.m: {function(A,A,A,A):void} is not a subtype of {function(A,A,A):void}." at "m"
	m(p1 : A, p2 : A, p3 : A, p4 : A) : void {}
}
class Y9 implements I_X {
	@Override
	m(p1 : A, p2 : A, p3 : A, p4 : A=undefined) : void {}			// adding optional parameter is ok!
}
class Y10 implements I_X {
	@Override
	m(p1 : A, p2 : A, p3 : A=undefined) : void {}				// making parameter optional is ok!
}


// --------------------------------------------------------------------------
// for interfaces inheriting from an interface:

interface I_Y1 extends I_X {
	@Override
	m(p1 : A, p2 : A, p3 : A) : void
}
interface I_Y2 extends I_X {
	@Override
	m(p1 : A, p2 : A) : void							// fewer parameters is ok!
}
interface I_Y3 extends I_X {
	@Override
	// XPECT errors --> "Signature of method I_Y3.m does not conform to implemented method I_X.m: {function(A,A,A,A):void} is not a subtype of {function(A,A,A):void}." at "m"
	m(p1 : A, p2 : A, p3 : A, p4 : A) : void
}
interface I_Y4 extends I_X {
	@Override
	m(p1 : A, p2 : A, p3 : A, p4 : A=undefined) : void				// adding optional parameter is ok!
}
interface I_Y5 extends I_X {
	@Override
	m(p1 : A, p2 : A, p3 : A=undefined) : void					// making parameter optional is ok!
}
