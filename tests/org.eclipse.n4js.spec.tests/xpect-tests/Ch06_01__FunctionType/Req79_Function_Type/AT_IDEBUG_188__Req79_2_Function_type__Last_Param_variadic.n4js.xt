/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

/* IDEBUG-188:
   Set/Get:
	   wrong number of args in getter/setter lead to parse-errors
	   and break the following code. No xPECT-test possible
   Methods:
   Function Deklarations:
   Function Expressions:
   Function Type Expressions:
     all of them must adhere to the Constraints 62-2
 */
class A {

	get s () : number { return 3; }
	// no varargs here!
	// XPECT errors --> "Variadic parameter is not allowed in setter declarations." at "... fe : number"
	set s (... fe : number) {}



//////////////////////////
/// -- Method declarations --
///////////////////////
	// XPECT errors --> "Only the last formal parameter can be variadic." at "...a : number"
	f4 (...a : number, b : number, c : number=undefined) {}
	// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
	f5 (a : number, ...b : number, c : number=undefined) {}
	// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
	f6 (a : number, ...b : number, c : number=undefined) {}
	// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
	f7 (a : number, ...b : number, c : number) {}
	// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
	f8 (a : number, ...b : number, ...c : number) {}

}


//////////////////////////
/// -- Function declarations --
///////////////////////
// XPECT errors --> "Only the last formal parameter can be variadic." at "...a : number"
function f4 (...a : number, b : number, c : number=undefined) {}
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
function f5 (a : number, ...b : number, c : number=undefined) {}
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
function f6 (a : number, ...b : number, c : number=undefined) {}
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
function f7 (a : number, ...b : number, c : number) {}
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
function f8 (a : number, ...b : number, ...c : number) {}

// XPECT noerrors --> "mmmm"
function f9_OK (a : number, b : number, ...c : number) {}
// XPECT noerrors --> "mmmm"
function f10_OK (a : number, b : number=undefined, ...c : number) {}
// XPECT noerrors --> "mmmm"
function f11_OK (a : number=undefined, b : number=undefined, ...c : number) {}


//////////////////////////
/// -- Function expresssions --
///////////////////////
// XPECT errors -->"Only the last formal parameter can be variadic." at "... a : number"
var result1 : number = function (... a : number, b : number, c : number) : number { return b+2 } (13,0,0)
var resultOK1 : number = function fOK12 (a : number, b : number=undefined, ... c : number) : number {return a;} (1,2,3);


//////////////////////////
/// -- Function types --
///////////////////////
// XPECT errors --> "Only the last formal parameter can be variadic." at "...a : number"
var dynf4 : { function (...a : number, b : number, c : number=undefined) : void };
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
var dynf5 : { function (a : number, ...b : number, c : number=undefined) : void };
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
var dynf6 : { function (a : number , ...b : number, c : number=undefined) :void };
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
var dynf7 : { function (a : number, ...b : number, c : number) :void };
// XPECT errors --> "Only the last formal parameter can be variadic." at "...b : number"
var dynf8 : { function (a : number, ...b : number, ...c : number) : void };

// XPECT noerrors --> "mmmm"
var dynf9 : { function (a : number, b : number, ...c : number) : void };
// XPECT noerrors --> "mmmm"
var dynf10 : { function (a : number, b : number=undefined, ...c : number) : void };
// XPECT noerrors --> "mmmm"
var dynf11 : { function (a : number=undefined, b : number=undefined, ...c : number) : void };
