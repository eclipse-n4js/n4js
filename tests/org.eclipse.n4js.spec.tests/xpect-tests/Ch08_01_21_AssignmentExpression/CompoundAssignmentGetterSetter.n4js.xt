/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


// Testing cases where we have a getter/setter pair on the LHS of a compound assignment, possibly leading to
// different types for read and write access.
//
// See method N4JSTypeValidator#checkCompoundAssignmentGetterSetterClashOnLhs(AssignmentExpression).
//
// (resolves IDEBUG-66)


class X {}



class C0 {
	// no getter!
	set n(param : string) {}
}

var c0 : C0;

/* XPECT errors ---
"Missing getter on left-hand side of compound assignment." at "c0.n"
"The operation requires both read and write access, but only write-access is available." at "n"
--- */
c0.n += 42;  // combined assignments require also read-access on LHS



class C1 {
	get n() : string { return null; }
	set n(param : X) {}
}

var c1 : C1;

// XPECT errors --> "expecting write-access for type intersection{number,string} but X is not a super type of intersection{number,string}." at "c1.n"
c1.n += 42;  // combined assignment += may only be used with a write-access type on LHS of either number or string



class C2 {
	get n() : X { return null; }
	set n(param : string) {}
}

var c2 : C2;

c2.n += 42;  // ok, because string is a valid write-access type on LHS and the read-access type on LHS may be anything in this case



class C3 {
	get n() : X { return null; }
	set n(param : number) {}
}

var c3 : C3;

// XPECT errors --> "X is not a subtype of number." at "c3.n"
c3.n += 42;  // error: number is a valid write-access type on LHS but X is not a valid read-access type on LHS in this case



//
// same cases as above but with *=
// (difference: only number is accepted as type, not string)
//

// XPECT errors ---
// "Missing getter on left-hand side of compound assignment." at "c0.n"
// "The operation requires both read and write access, but only write-access is available." at "n"
// "expecting write-access for type number but string is not a super type of number." at "c0.n"
// ---
c0.n *= 42;  // setter:string ; no getter
// XPECT errors ---
// "string is not a subtype of number." at "c1.n"
// "expecting write-access for type number but X is not a super type of number." at "c1.n"
// ---
c1.n *= 42;  // setter:X ; getter:string
// XPECT errors ---
// "X is not a subtype of number." at "c2.n"
// "expecting write-access for type number but string is not a super type of number." at "c2.n"
// ---
c2.n *= 42;  // setter:string ; getter:X
// XPECT errors --> "X is not a subtype of number." at "c3.n"
c3.n *= 42;  // setter:number ; getter:X



//
// same cases as above but with generics
//

class CG<R,W> {
	get n() : R { return null; }
	set n(param : W) {}
}

var cg_likeC1 : CG<string,X>;
var cg_likeC2 : CG<X,string>;
var cg_likeC3 : CG<X,number>;

// XPECT errors --> "expecting write-access for type intersection{number,string} but X is not a super type of intersection{number,string}." at "cg_likeC1.n"
cg_likeC1.n += 42;
cg_likeC2.n += 42;
// waiting for FIX of XPCT test execution XPECT ! errors --> "X is not a subtype of number." at "cg_likeC3.n"
cg_likeC3.n += 42;
