/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest
	ResourceSet {
		ThisFile {}
		File "Externals.n4jsd" {}
	}

	END_SETUP
 */

import * as Ex from "Ch05_03__StructuralTyping/Externals";

class ~SomeN4Object{
	public s : string;
	public foo(p : number) : void{};
	private n : number;
	private bar(p : string) : void{};
}
var someN4Object : SomeN4Object;


// OK: nominal typing
function fDefSite(p : SomeN4Object) {
	p.foo(1);
	// XPECT errors --> "method bar is not available for structurally defined type SomeN4Object." at "bar"
	p.bar("Hello");
}

function fUseSite(p : ~SomeN4Object) {
	p.foo(1);
	p.s;
	// XPECT errors --> "method bar is not available for structurally referenced type ~SomeN4Object." at "bar"
	p.bar("Hello");
}

function fUseSiteFields(p : ~~SomeN4Object) {
	// XPECT errors --> "method foo is not available for fields-only-referenced type ~~SomeN4Object." at "foo"
	p.foo(1);
	p.s;
	// XPECT errors --> "method bar is not available for fields-only-referenced type ~~SomeN4Object." at "bar"
	p.bar("Hello");
}


class SomeN4O {
	public s : string;
	public foo(p : number) : void {}
	private n : number;
	private bar(p : string) : void {}
}

fDefSite(new SomeN4Object());
// XPECT noerrors --> "" at "new SomeN4Object()"
fUseSite(new SomeN4Object());
// XPECT noerrors --> "" at "new SomeN4Object()"
fUseSiteFields(new SomeN4Object());

var someN4O : SomeN4O;
// XPECT errors --> "All N4Objects must explicitly extend/implement definition site structural type SomeN4Object." at "someN4O"
fDefSite(someN4O);
// XPECT noerrors --> "" at "someN4O"
fUseSite(someN4O);
// XPECT noerrors --> "" at "someN4O"
fUseSiteFields(someN4O);

// XPECT noerrors --> "same (nominal) type is always ok" at "new SomeN4Object()"
fDefSite(new SomeN4Object());
// XPECT noerrors --> "" at "new SomeN4Object()"
fUseSite(new SomeN4Object());
// XPECT noerrors --> "" at "new SomeN4Object()"
fUseSiteFields(new SomeN4Object());

var a : Ex.A;
// XPECT noerrors -->
fDefSite(a);
// XPECT noerrors -->
fUseSite(a);
fUseSiteFields(a);

var b : Ex.B;
// XPECT errors --> "B is not a structural subtype of ~SomeN4Object: missing field s." at "b"
fUseSite(b);
// XPECT errors --> "B is not a structural subtype of ~~SomeN4Object: missing field s." at "b"
fUseSiteFields(b);

var c : Ex.C;
// XPECT errors --> "C is not a structural subtype of ~SomeN4Object: missing method foo." at "c"
fUseSite(c);
// XPECT noerrors --> "s is there, foo is ignored (fields only!)" at "c"
fUseSiteFields(c);


var d : Ex.D;
// XPECT errors --> "D is not a structural subtype of ~SomeN4Object: foo failed: {function(string):void} is not a subtype of {function(number):void}." at "d"
fUseSite(d);
// XPECT noerrors --> "s is there, foo is ignored (fields only!)" at "d"
fUseSiteFields(d);
