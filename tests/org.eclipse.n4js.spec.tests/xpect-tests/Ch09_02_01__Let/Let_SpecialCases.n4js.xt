/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


// ******************************************************
// base cases

function case1a() {
	{
		let test;
	}
	// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'test'." at "test"
	test;
}
function case1b() {
	if(true) {
		let test;
	}
	// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'test'." at "test"
	test;
}
function case1c() {
	for(;;) {
		let test;
	}
	// XPECT warnings --> "Dead code. No execution possible after for statement." at "test;"
	// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'test'." at "test"
	test;
}


// ******************************************************
// shadowing is legal

function case2a() {
	let test: number;
	if(true) {
		// XPECT noerrors -->
		let test: string;
	}
	// XPECT type of 'test' --> number
	test;
}
function case2b() {
	let test: number;
	for(;;) {
		// XPECT noerrors -->
		let test: string;
	}
	// XPECT warnings --> "Dead code. No execution possible after for statement." at "test;"
	// XPECT type of 'test' --> number
	test;
}


// ******************************************************
// loop variables

function case3a() {
	for(let i:number;;) {
		// XPECT warnings --> "Variable i is used before it is declared" at "i"
		// XPECT type of 'i' --> string
		i; // <-- note: this binds to the below 'i' that shadows the above 'i' (this is ES6!), but will throw ReferenceError at runtime due to temporal dead zone which we cannot validate
		let i:string; // <-- this shadowing is legal in ES6
		// XPECT type of 'i' --> string
		i;
	}
	// XPECT warnings --> "Dead code. No execution possible after for statement." at "i;"
	// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'i'." at "i"
	i;
}
function case3b() {
	for(let i in undefined) {
		// XPECT warnings --> "Variable i is used before it is declared" at "i"
		// XPECT type of 'i' --> string
		i;
		let i:string;
		// XPECT type of 'i' --> string
		i;
	}
	// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'i'." at "i"
	i;
}
function case3c() {
	for(let i of undefined) {
		// XPECT warnings --> "Variable i is used before it is declared" at "i"
		// XPECT type of 'i' --> string
		i;
		let i:string;
		// XPECT type of 'i' --> string
		i;
	}
	// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'i'." at "i"
	i;
}


// ******************************************************
// let vs. formal parameter

function case4a(param) {
	// XPECT errors --> "Variable param duplicates parameter param." at "param"
	let param;
}
function case4b(param) {
	{
		// XPECT noerrors -->
		let param;
	}
}

var case4c = function(param) {
	// XPECT errors --> "Variable param duplicates parameter param." at "param"
	let param;
}
var case4d = function(param) {
	{
		// XPECT noerrors -->
		let param;
	}
}

var case4e = (param) => {
	// XPECT errors --> "Variable param duplicates parameter param." at "param"
	let param;
}
var case4f = (param) => {
	{
		// XPECT noerrors -->
		let param;
	}
}


// ******************************************************
// let vs. name of outer function

function case5a() {
	// XPECT noerrors -->
	let case5a = 'a';
}

var case5b = function case5b() {
	// X-PECT noerrors but XPECT warnings --> "This code is prone to Babel bug #6302. If you use Babel in your build pipeline, you should rename this let/const or the containing function expression." at "case5b"
	let case5b = 'b';
}


// ******************************************************
// let vs. arguments

function case6a() {
	// XPECT errors --> "arguments is a reserved identifier." at "arguments"
	let arguments = 'none';
}

function case6b() {
	{
		// XPECT errors --> "arguments is a reserved identifier." at "arguments"
		let arguments = 'none';
	}
}

function case6c() {
	if(true) {
		// XPECT errors --> "arguments is a reserved identifier." at "arguments"
		let arguments = 'none';
	}
}

function case6d() {
	for(;;) {
		// XPECT errors --> "arguments is a reserved identifier." at "arguments"
		let arguments = 'none';
	}
}


// ******************************************************
// let vs. catch block

function case7(param) {
	try {
		// XPECT noerrors -->
		let param: string;
	// TODO ES6 would allow this name for the catch variable XPECT errors --> "Catch variable param shadows parameter param (line 192)." at "param"
	} catch(param) {
		// XPECT warnings --> "Variable param is used before it is declared" at "param"
		// XPECT type of 'param' --> number
		param; // <-- note: this binds to the below 'param' that shadows the above 'param' (this is ES6!), but will throw ReferenceError at runtime due to temporal dead zone which we cannot validate
		// XPECT noerrors -->
		let param: number;
	}
}
