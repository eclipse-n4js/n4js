/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */

/* XPECT output ---
<==
stdout:


# run T1 :: basics
 - 5 was 5
 - foo was foo
# T1 PASSed


# run T2 :: basics - multiple
 - array was (so deeply) equal
 - promised foo was foo
# T2 PASSed


# run T3 :: return from fn
  . sequence() 5 was 5
-  bar was returned
# T3 PASSed


# run T4 :: throw1
 - in try block
 - in catch block
 - error message matched err1
# T4 PASSed


# run T5 :: throw2
 - in throw block
 - in catch block
 - error matches err2
# T5 PASSed


# run T6 :: throw3
 - in try block
 - in catch block
 - error matches err3
# T6 PASSed


# run T7 :: throw1
 - in try block
 - in catch block
 - error matches err4
# T7 PASSed


# run T8 :: finally
 - in try block
 - in inner try
 - in inner after waiting
 - in inner finally
 - in try after inner try-finally
 - in catch
 - error matches err1
 - finally was called true
# T8 PASSed


# run T9 :: finally
 - triggering inner fail chain
 - inner try
 - inner try-try
 - inner try-finally
 - inner catch
 - inner catch : fail
  . inner failed with expected msg
  . inner finally call true
 - triggering inner nested (pass) chain
 - inner try
 - inner try-try
 - inner try-finally
 - inner catch
 - return from inner
  . inner passed with expected result
  . inner finally call true
 -  return from inner nested chain
 - inner passed with expected result
# T9 PASSed with : true
stderr:
==>
--- */

//deps
function setTimeout(fn : {function():void}, t : number):void{
	(new Function("_fn", "_t","return setTimeout(_fn,_t);"))(fn,t);
}

class Assert{
	public static equal(a : any, b : any){
		if(a!==b){
			throw new Error("assert error, parameters don't match < " + a + " :: " +  b + " >");
		}
	}
	public static deepEqual(a : any, b : any){
		if((a instanceof Array && b instanceof Array) && ((a as Array<any>).length === (b as Array<any>).length)){
			return;
		}
		throw new Error("assert error, parameters don't match deeply < " + a + " :: " +  b + " >");
	}

	public static fail(msg : string=undefined){
		throw new Error(msg);
	}
}

//utils
function <T> createPromise(v : T): Promise<T, Error> {
	return new Promise<T, Error>(function(resolveFn : {function(T): void}, rejectFn : {function(Error): void}) {
		setTimeout(function() {
			resolveFn(v);
		}, 500);
	});
}

async function <T> returns(v : T): T {
	return v;
}

async function sequence(): string {
	Assert.equal(await createPromise(5), 5);
	console.log("  .", "sequence()", "5 was 5");
	return "bar";
}

async function throw1(): string {
	Assert.equal(await createPromise(5), 5);
	throw new Error("err1");
}

async function throw2(): string {
	Assert.equal(await createPromise(5), 5);
	throw new Error("err2");
}

function throw3(): Promise<string,Error> {
	return Promise.reject(new Error("err3"));
}

async function throw4(): string {
	throw new Error("err4");
}

//tests

async function T1 () :void{
	var waited : number = await ( createPromise(5));
	Assert.equal(waited, 5);
	console.log(" -", "5 was 5");
	Assert.equal(await createPromise("foo"), "foo");
	console.log(" -", "foo was foo");
}


async function T2(): void{
	var waited : Array<int> = await Promise.all([createPromise(5), createPromise(6), createPromise(7)]);
	Assert.deepEqual(waited, [5, 6, 7]);
	console.log(" -", "array was (so deeply) equal");
	Assert.equal(await createPromise("foo"), "foo");
	console.log(" -", "promised foo was foo");
}

async function T3(): void{
	Assert.equal(await sequence(), "bar");
	console.log("- ", "bar was returned");
}

async function T4(): void{
	try {
		console.log(" -", "in try block");
		await throw1();
		console.log(" -", "in try block after throw1");
	} catch (exc) {
		console.log(" -", "in catch block");
		Assert.equal((exc as Error).message, "err1");
		console.log(" -", "error message matched", "err1");
		return;
	}
	console.log(" -", "FORCE_FAILURE");
	Assert.fail("failed assertion");
}

async function T5(): void{
	try {
		console.log(" -", "in throw block");
		await throw2();
		console.log(" -", "in try block after throw2");
	} catch (exc) {
		console.log(" -", "in catch block");
		Assert.equal((exc as Error).message, "err2");
		console.log(" -", "error matches", "err2");
		return;
	}
	console.log(" -", "FORCE_FAILURE");
	Assert.fail("failed assertion");
}

async function T6(): void{
	try {
		console.log(" -", "in try block");
		await throw3();
		console.log(" -", "in try block after throw3");
	} catch (exc) {
		console.log(" -", "in catch block");
		Assert.equal((exc as Error).message, "err3");
		console.log(" -", "error matches", "err3");
		return;
	}
	console.log(" -", "FORCE_FAILURE");
	Assert.fail("failed assertion");
}

async function T7(): void{
	try {
		console.log(" -", "in try block");
		await throw4();
		console.log(" -", "in try block after throw4");
	} catch (exc) {
		console.log(" -", "in catch block");
		Assert.equal((exc as Error).message, "err4");
		console.log(" -", "error matches", "err4");
		return;
	}
	console.log(" -", "FORCE_FAILURE");
	Assert.fail("failed assertion");
}


async function T8(): void{
	var finallyCalled = false;
	try {
		console.log(" -", "in try block");
		try {
			console.log(" -", "in inner try");
			await returns("");
			console.log(" -", "in inner after waiting");
		} finally {
			console.log(" -", "in inner finally");
			finallyCalled = true;
		}
		console.log(" -", "in try after inner try-finally");
		throw new Error("err1");
	} catch (exc) {
		console.log(" -", "in catch");
		Assert.equal((exc as Error).message, "err1");
		console.log(" -", "error matches", "err1");
		Assert.equal(finallyCalled, true);
		console.log(" -", "finally was called", finallyCalled);
		return;
	}
	// XPECT warnings -->"Dead code." at "console.log(" -", "FORCE_FAILURE"); 	Assert.fail("failed assertion");"
	console.log(" -", "FORCE_FAILURE");
	Assert.fail("failed assertion");
}

async function T9() :any{
	var e, finallyCalled = false,  innerResult = "dodo", innerErrorMsg = "dummy", innerChainResult = "fini";

	async function inner(fail : boolean=undefined): string {
		try {
			console.log(" -", "inner try");
			try {
				console.log(" -", "inner try-try");
				throw new Error(innerErrorMsg);
			} finally {
				console.log(" -", "inner try-finally");
				finallyCalled = true;
			}
		} catch (exc) {
				console.log(" -", "inner catch");
			if (fail) {
				console.log(" -", "inner catch : fail");
				throw exc;
			}
			e = exc;
		}
		console.log(" -", "return from inner");
		return innerResult;
	};

	console.log(" -", "triggering inner fail chain");
	// XPECT warnings -->"Calling async function without await, Promise should be made explicit." at "inner"
	return inner(true /* fails with dummy */)
		.<string,Error>catch(function(err : any=undefined) {
			/* unsafe cast, but will work fine */
			Assert.equal((err as Error).message, innerErrorMsg);
			console.log("  .", "inner failed with expected msg");
			Assert.equal(finallyCalled, true);
			console.log("  .", "inner finally call", finallyCalled);
			finallyCalled = false;

			console.log(" -", "triggering inner nested (pass) chain");
			//using plain return here, since it's not an async-marked function:
			// XPECT warnings -->"Calling async function without await, Promise should be made explicit." at "inner"
			return inner(false).<string,Error>then(function(res : string=undefined) {
				Assert.equal(res, innerResult);
				console.log("  .", "inner passed with expected result");
				Assert.equal(finallyCalled, true);
				console.log("  .", "inner finally call", finallyCalled);
				console.log(" - ", "return from inner nested chain");
				return innerChainResult;
			});
		}).then(function(res : string=undefined) {
			Assert.equal(res, innerChainResult);
			console.log(" -", "inner passed with expected result");
			return true;
		}).catch(function(err : any=undefined) {
			console.log(" -", "unexpected fail handler called");
			Assert.fail("SHOULD NOT REACH");
			return new Error("unexpected execution path reached");
		});
}

//-------------------------

//test runner

async function run():string{

	console.log("\n")
	console.log("#","run T1","::", "basics");
	try{
		await T1();
		console.log("#","T1 PASSed");
	}catch(eT1){
		console.log("#","T1 FAILed with :", eT1);
	}

	console.log("\n")
	console.log("#","run T2", "::", "basics - multiple");
	try{
		await T2();
		console.log("#","T2 PASSed");
	}catch(eT2){
		console.log("#","T2 FAILed with :", eT2);
	}

	console.log("\n")
	console.log("#","run T3", "::", "return from fn");
	try{
		await T3();
		console.log("#","T3 PASSed");
	}catch(eT3){
		console.log("#","T3 FAILed with :", eT3);
	}

	console.log("\n")
	console.log("#","run T4", "::", "throw1");
	try{
		await T4();
		console.log("#","T4 PASSed");
	}catch(eT4){
		console.log("#","T4 FAILed with :", eT4);
	}

	console.log("\n")
	console.log("#","run T5", "::", "throw2");
	try{
		await T5();
		console.log("#","T5 PASSed");
	}catch(eT5){
		console.log("#","T5 FAILed with :", eT5);
	}

	console.log("\n")
	console.log("#","run T6", "::", "throw3");
	try{
		await T6();
		console.log("#","T6 PASSed");
	}catch(eT6){
		console.log("#","T6 FAILed with :", eT6);
	}

	console.log("\n")
	console.log("#","run T7","::", "throw1");
	try{
		await T7();
		console.log("#","T7 PASSed");
	}catch(eT7){
		console.log("#","T7 FAILed with :", eT7);
	}

	console.log("\n")
	console.log("#","run T8", "::", "finally");
	try{
		await T8();
		console.log("#","T8 PASSed");
	}catch(eT8){
		console.log("#","T8 FAILed with :", eT8);
	}

	console.log("\n")
	console.log("#","run T9", "::", "finally");
	try{
		var t9 = await T9();
		console.log("#","T9 PASSed with :", t9);
	}catch(eT9){
		console.log("#","T9 FAILed with :", eT9);
	}

	return null
}

//=======================


run();
