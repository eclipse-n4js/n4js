/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */


interface X {}
interface Y {}
interface Z {}


// XPECT type of 'v01' --> union{X,Y}
var v01 : X | Y
// XPECT type of 'v02' --> intersection{X,Y}
var v02 : X & Y
// XPECT type of 'v03' --> union{X,intersection{Y,Z}}
var v03 : X | Y & Z
// XPECT type of 'v04' --> union{intersection{X,Y},Z}
var v04 : X & Y | Z
// XPECT type of 'v05' --> union{X,Y,Z}
var v05 : X | Y | Z
// XPECT type of 'v06' --> intersection{X,Y,Z}
var v06 : X & Y & Z
// XPECT type of 'v07' --> union{X,intersection{Y,Z}}
var v07 : X | (Y & Z)
// XPECT type of 'v08' --> intersection{X,union{Y,Z}}
var v08 : X & (Y | Z)
// XPECT type of 'v09' --> union{X,union{Y,Z}}
var v09 : X | (Y | Z)
// XPECT type of 'v10' --> intersection{X,intersection{Y,Z}}
var v10 : X & (Y & Z)
// XPECT type of 'v11' --> intersection{union{X,Y},Z}
var v11 : (X | Y) & Z
// XPECT type of 'v12' --> union{intersection{X,Y},Z}
var v12 : (X & Y) | Z
// XPECT type of 'v13' --> union{union{X,Y},Z}
var v13 : (X | Y) | Z
// XPECT type of 'v14' --> intersection{intersection{X,Y},Z}
var v14 : (X & Y) & Z


// XPECT type of 'foo' --> {function():union{intersection{X,Y},Z}}
function foo():  X & Y | Z { return null }


class C {
	// XPECT type of 'f1' --> union{X,Y}
	f1 : X | Y
	// XPECT type of 'f2' --> intersection{X,Y}
	f2 : X & Y
	// XPECT type of 'f3' --> union{intersection{X,Y},Z}
	f3 : X & Y | Z
	// XPECT type of 'f4' --> {function():union{X,Y}}
	f4 : ()=> (X | Y)
	// XPECT type of 'f5' --> {function(union{X,Y}):intersection{X,Y}}
	f5 : (X | Y)=>(X & Y)
	// XPECT type of 'f6' --> {function(union{X,Y}):void}
	f6 : (p:X | Y)=>void

	// XPECT type of 'm' --> {function():union{intersection{X,Y},Z}}
	m(): X & Y | Z { return null }
}
