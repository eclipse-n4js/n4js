/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


// NOTE: this test covers two cases that are a challenge for the resolution of computed property names
// (both boil down to making sure that having only a type reference to a container type (i.e. Cls1, Cls2) triggers
// resolution of its members' computed names)


class A {}
class B extends A {}


// CASE #1

function fun1(p: Cls1) {
	// XPECT noerrors --> "Couldn't resolve reference to IdentifiableElement 'field'." at "field"
	let a: A = p.field;
}

class Cls1 {
	['field']: A;
}


// CASE #2

function fun2(p: Cls2) {
	// XPECT noerrors --> "A is not a subtype of B." at "p.m()"
	let b: B = p.m();
}

class Cls2Super {
	m(): A {return null;}
}
class Cls2 extends Cls2Super {
	@Override
	['m'](): B {return null;}
}


// CASE #3

function fun3a(p: type{Cls3}) {
	// XPECT noerrors --> "Couldn't resolve reference to IdentifiableElement 'field'." at "field"
	let a: A = p.field;
}
function fun3n(p: type{? extends Cls3}) {
	// XPECT noerrors --> "Couldn't resolve reference to IdentifiableElement 'field'." at "field"
	let a: A = p.field;
}

class Cls3 {
	static ['field']: A;
}
