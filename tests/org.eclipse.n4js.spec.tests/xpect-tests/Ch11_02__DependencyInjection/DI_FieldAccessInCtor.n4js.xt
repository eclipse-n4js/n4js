/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */

class Foo {}
class B { public x : string; }
class BSub extends B { }
class A {
    @Inject b : B;

    constructor() {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	var bb : any = this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.b.x = "bar";

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    var arr : Array<B> = [this.b, null];

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.foo(this.b)

    }

    public foo(b : B) { }
}

class C extends A {
	constructor() {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	var bb : any = this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.b.x = "bar";

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    var arr : Array<B> = [this.b, null];

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.foo(this.b)

    }

}


class D {

	@Inject b : B;

    @Inject
    constructor() {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	var bb : any = this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.b.x = "bar";

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    var arr : Array<B> = [this.b, null];

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.foo(this.b)

    }

    foo(b : B) { }

}

class E {

	@Inject b : B;

    @Inject
    constructor(foo : Foo) {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	var bb : any = this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
    	this.b;

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.b.x = "bar";

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    var arr : Array<B> = [this.b, null];

	    // XPECT errors --> "b is not yet injected at this point." at "this.b"
	    this.foo(this.b)

    }

    foo(b : B) { }

}

class F {

	@Inject b : B;

    @Inject
    constructor(b : B) {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT noerrors --> ""
    	var bb : any = this.b;

	    // XPECT noerrors --> ""
    	this.b;

	    // XPECT noerrors --> ""
	    this.b.x = "bar";

	    // XPECT noerrors --> ""
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT noerrors --> ""
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT noerrors --> ""
	    var arr : Array<B> = [this.b, null];

	    // XPECT noerrors --> ""
	    this.foo(this.b)

    }

    foo(b : B) { }

}

class G {

	b : B;

    @Inject
    constructor(b : B) {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT noerrors --> ""
    	var bb : any = this.b;

	    // XPECT noerrors --> ""
    	this.b;

	    // XPECT noerrors --> ""
	    this.b.x = "bar";

	    // XPECT noerrors --> ""
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT noerrors --> ""
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT noerrors --> ""
	    var arr : Array<B> = [this.b, null];

	    // XPECT noerrors --> ""
	    this.foo(this.b)

    }

    foo(b : B) { }

}

class H {

	@Inject b : B;

    @Inject
    constructor(bSub : BSub) {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT noerrors --> ""
    	var bb : any = this.b;

	    // XPECT noerrors --> ""
    	this.b;

	    // XPECT noerrors --> ""
	    this.b.x = "bar";

	    // XPECT noerrors --> ""
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT noerrors --> ""
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT noerrors --> ""
	    var arr : Array<B> = [this.b, null];

	    // XPECT noerrors --> ""
	    this.foo(this.b)

    }

    foo(b : B) { }

}

class I {

	b : B;

    @Inject
    constructor(bSub : BSub) {

    	// XPECT noerrors --> "Field write access is intentionally ignored"
    	this.b = null;

	    // XPECT noerrors --> ""
    	var bb : any = this.b;

	    // XPECT noerrors --> ""
    	this.b;

	    // XPECT noerrors --> ""
	    this.b.x = "bar";

	    // XPECT noerrors --> ""
	    if (this.b) {
	    	console.log('bar')
	    }

	    // XPECT noerrors --> ""
	    switch (this.b) {
	    	default: console.log('bar');
	    }

	    // XPECT noerrors --> ""
	    var arr : Array<B> = [this.b, null];

	    // XPECT noerrors --> ""
	    this.foo(this.b)

    }

    foo(b : B) { }

}
