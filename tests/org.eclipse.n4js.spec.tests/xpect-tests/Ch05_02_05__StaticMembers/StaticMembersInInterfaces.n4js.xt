/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


interface I {

	static f : number = 42;

	static get g() {
		return "returned from static getter";
	}
	static set s(p : string) {
		console.log("sent to static setter: "+p);
	}

	static m() {
		console.log("hello from the static method!")
	}

	// XPECT errors --> "The method mBad may not be both static and abstract." at "mBad"
	static mBad()
}

interface I2 extends I {}


// ------------------------------------------------------------------------------------
// access via type name of containing interface (legal):

// XPECT noerrors -->
I.f;

// XPECT noerrors -->
I.g;
// XPECT noerrors -->
I.s = "some value";

// XPECT noerrors -->
I.m();


// ------------------------------------------------------------------------------------
// no inheritance:

// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'f'." at "f"
I2.f;
// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'g'." at "g"
I2.g;
// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 's'." at "s"
I2.s = "failure";
// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'm'." at "m"
I2.m();


// ------------------------------------------------------------------------------------
// no access via variable, etc.

var i : type{I} = I;

// XPECT errors --> "Static members of interfaces may only be accessed directly via the type name of their containing interface." at "i"
i.f;

// XPECT errors --> "Static members of interfaces may only be accessed directly via the type name of their containing interface." at "i"
i.g;
/*  XPECT errors ---
"Static members of interfaces may only be accessed directly via the type name of their containing interface." at "i"
"Write access to the static member s defined in I must use I directly." at "s"
--- */
i.s = "some value";

// XPECT errors --> "Static members of interfaces may only be accessed directly via the type name of their containing interface." at "i"
i.m();
