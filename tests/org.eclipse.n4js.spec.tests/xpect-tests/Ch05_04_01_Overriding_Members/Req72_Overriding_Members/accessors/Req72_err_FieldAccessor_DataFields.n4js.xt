/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

class A {} class B extends A {} class C extends B {}

// 2 data fields and field accessors
abstract class D {

	// abstract:
	abstract get x () : B
	abstract set y(p : B)
	// pair:
	abstract get z () : B
	abstract set z(p : B)

	// concrete:
	get cx () : B { return null }
	set cy(p : B) {}
	// pair:
	get cz() : B { return null }
	set cz(p : B) {}
}

class E extends D {

	// override abstract:
	// XPECT noerrors --> No error expected: "perfect fit" at "y"
	@Override x : B;
	// XPECT noerrors --> No error expected: "perfect fit" at "y"
	@Override y : B;
	// pair:
	// XPECT noerrors --> No error expected: "perfect fit" at "y"
	@Override z : B;

	// override concrete:
	// XPECT noerrors --> No error expected: "perfect fit" at "y"
	@Override cx : B;
	// XPECT noerrors --> No error expected: "perfect fit" at "y"
	@Override cy : B;
	// pair:
	// XPECT noerrors --> No error expected: "perfect fit" at "y"
	@Override cz : B;
}

// getter: more specific --> ok, setter: more specific --> error
class F extends D {
	// override abstract:
	// XPECT noerrors --> No error expected: "getter: more specific" at "y"
	@Override x : C;
	// XPECT errors --> "Type of field F.y does not conform to overridden setter D.y: B is not a subtype of C." at "y"
	@Override y : C;
	// pair:
	// XPECT errors --> "Type of field F.z does not conform to overridden setter D.z: B is not a subtype of C." at "z"
	@Override z : C;

	// override concrete:
	// XPECT noerrors --> No error expected: "getter: more specific" at "cx"
	@Override cx : C;
	// XPECT errors --> "Type of field F.cy does not conform to overridden setter D.cy: B is not a subtype of C." at "cy"
	@Override cy : C;
	// pair:
	// XPECT errors --> "Type of field F.cz does not conform to overridden setter D.cz: B is not a subtype of C." at "cz"
	@Override cz : C;
}

// getter: less specific --> error, setter: less specific --> ok
class G extends D {
	// override abstract:
	// XPECT errors --> "Type of field G.x does not conform to overridden getter D.x: A is not a subtype of B." at "x"
	@Override x : A;
	// XPECT noerrors --> No error expected:  No error expected: "setter: less specific" at "y"
	@Override y : A;
	// pair:
	// XPECT errors --> "Type of field G.z does not conform to overridden getter D.z: A is not a subtype of B." at "z"
	@Override z : A;

	// override concrete:
	// XPECT errors --> "Type of field G.cx does not conform to overridden getter D.cx: A is not a subtype of B." at "cx"
	@Override cx : A;
	// XPECT noerrors --> No error expected: "setter: less specific" at "cy"
	@Override cy : A;
	// pair:
	// XPECT errors --> "Type of field G.cz does not conform to overridden getter D.cz: A is not a subtype of B." at "cz"
	@Override cz : A;
}
