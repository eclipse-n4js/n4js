/*
 * Copyright (c) 2021 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


// --------------------------------------------------------------------------------------------------------------
// for @NumberBased enums:


@NumberBased
enum Digit {
	ZERO: 0, ONE: 1, TWO: 2
}
@NumberBased
enum DigitFewer {
	ZERO: 0, ONE: 1
}

let num: number;
let num_0: 0;
let num_012: 0 | 1 | 2;
let digit: Digit;
let digitFewer: DigitFewer;

// for reference, here the relation between @NumberBased enums and other types than LiteralTypeRef:

// XPECT noerrors -->
digit = Digit.ZERO;
// XPECT errors --> "0 is not a subtype of Digit." at "0"
digit = 0;
// XPECT errors --> "DigitFewer.ZERO is not a subtype of Digit." at "DigitFewer.ZERO"
digit = DigitFewer.ZERO;
// XPECT errors --> "DigitFewer is not a subtype of Digit." at "digitFewer"
digit = digitFewer;
// XPECT noerrors -->
num = Digit.ZERO;

// and now the relation between @NumberBased enums and LiteralTypeRef:

// XPECT errors --> "0 is not a subtype of Digit." at "num_0"
digit = num_0;
// XPECT errors --> "union{0,1,2} is not a subtype of Digit." at "num_012"
digit = num_012;

// could be allowed in the future XPECT errors --> "Digit.ZERO is not a subtype of 0." at "Digit.ZERO"
num_0 = Digit.ZERO;
// could be allowed in the future XPECT errors --> "Digit is not a subtype of union{0,1,2}." at "digit"
num_012 = digit;
// could be allowed in the future XPECT errors --> "DigitFewer is not a subtype of union{0,1,2}." at "digitFewer"
num_012 = digitFewer;


// --------------------------------------------------------------------------------------------------------------
// exactly the same, but for @StringBased enums:


@StringBased
enum Color {
	RED, GREEN, BLUE
}
@StringBased
enum ColorFewer {
	RED, GREEN
}

let str: string;
let str_red: "RED";
let str_rgb: "RED" | "GREEN" | "BLUE";
let color: Color;
let colorFewer: ColorFewer;

// for reference, here the relation between @StringBased enums and other types than LiteralTypeRef:

// XPECT noerrors -->
color = Color.RED;
// XPECT errors --> ""RED" is not a subtype of Color." at ""RED""
color = "RED";
// XPECT errors --> "ColorFewer.RED is not a subtype of Color." at "ColorFewer.RED"
color = ColorFewer.RED;
// XPECT errors --> "ColorFewer is not a subtype of Color." at "colorFewer"
color = colorFewer;
// XPECT noerrors -->
str = Color.RED;

// and now the relation between @StringBased enums and LiteralTypeRef:

// XPECT errors --> ""RED" is not a subtype of Color." at "str_red"
color = str_red;
// XPECT errors --> "union{"RED","GREEN","BLUE"} is not a subtype of Color." at "str_rgb"
color = str_rgb;

// could be allowed in the future XPECT errors --> "Color.RED is not a subtype of "RED"." at "Color.RED"
str_red = Color.RED;
// could be allowed in the future XPECT errors --> "Color is not a subtype of union{"RED","GREEN","BLUE"}." at "color"
str_rgb = color;
// could be allowed in the future XPECT errors --> "ColorFewer is not a subtype of union{"RED","GREEN","BLUE"}." at "colorFewer"
str_rgb = colorFewer;
