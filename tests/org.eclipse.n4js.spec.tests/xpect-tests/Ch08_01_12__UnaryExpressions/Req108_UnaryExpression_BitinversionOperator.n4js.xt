/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest
	ResourceSet {
		ThisFile {}
		File "ExampleClasses.n4js" {}
	}

 END_SETUP
 */

import * as EC from "Ch08_01_12__UnaryExpressions/ExampleClasses";


///////////////////////////////////
// unary expressions Bitwise NOT
//  inv='~'
//    See ToNumber() (ยง9.3 ECMA-262-5.1)
//    See ToInt32() (ยง9.5 ECMA-262-5.1)
//
// In N4JS this should only work for numbers.
///////////////////////////////////
var nInv1 : number = ~ 12; //
var nInv2 : number = ~ 0; //
var nInv3 : number = ~ 2^32; //
var nInv4 : number = ~ -1; //
var nInv5 : number = ~ 2; //
var nInv6 : number = ~ 4; //
var nInv7 : number = ~ 8; //
var nInv8 : number = ~ ~ 255; //
var nInv9 : number = ~
// XPECT errors --> "string is not a subtype of number." at ""4""
"4";
var nInv10 : number = ~ Infinity; //
var nInv11 : number = ~
// XPECT errors --> "Structural type ~Object is not a subtype of non-structural type number." at "{}"
{};
var nInv12 : number = ~
// XPECT errors --> "C is not a subtype of number." at "new EC.C()"
new EC.C();
var nInv13 : number = ~
// XPECT errors --> "The accessor numSetOnly is write-only." at "numSetOnly"
new EC.C().numSetOnly;
var nInv14 : number = ~ new EC.C().numGetOnly;
var nInv15 : number = ~ new EC.C().numGetAndSet;
