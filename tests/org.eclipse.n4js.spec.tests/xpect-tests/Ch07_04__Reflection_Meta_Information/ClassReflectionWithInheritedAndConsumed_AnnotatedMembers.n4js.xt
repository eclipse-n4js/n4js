/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest
   IssueConfiguration { IssueCode "ANN__TEST_ONLY_IN_TEST_SOURCES" {enabled=false} }
   END_SETUP
 */
// IDE-561

/* XPECT output ---
# allMembers (direct + consumed + inherited + static) && annotated with @Nfon
 - N4DataField :: datafieldPublicStaticStringClassA
 - N4DataField :: datafieldPublicStaticStringClassS
 - N4DataField :: datafieldPublicStaticStringClassSS
 - N4DataField :: datafieldPublicStringClassA
 - N4DataField :: datafieldPublicStringClassS
 - N4DataField :: datafieldPublicStringClassSS
 - N4DataField :: datafieldPublicStringRoleR
 - N4DataField :: datafieldPublicStringRoleRR
# allDataFields (direct + consumed + inherited + static) && annotated with @Nfon
 - N4DataField :: datafieldPublicStaticStringClassA
 - N4DataField :: datafieldPublicStaticStringClassS
 - N4DataField :: datafieldPublicStaticStringClassSS
 - N4DataField :: datafieldPublicStringClassA
 - N4DataField :: datafieldPublicStringClassS
 - N4DataField :: datafieldPublicStringClassSS
 - N4DataField :: datafieldPublicStringRoleR
 - N4DataField :: datafieldPublicStringRoleRR
# allMembers (direct + consumed + inherited + static) && annotated with @Test
 - N4Method :: methodPublicStaticVoidClassA
 - N4Method :: methodPublicStaticVoidClassS
 - N4Method :: methodPublicStaticVoidClassSS
 - N4Method :: methodPublicVoidClassA
 - N4Method :: methodPublicVoidClassS
 - N4Method :: methodPublicVoidClassSS
 - N4Method :: methodPublicVoidRoleR
 - N4Method :: methodPublicVoidRoleRR
# allMethods (direct + consumed + inherited + static) && annotated with @Test
 - N4Method :: methodPublicStaticVoidClassA
 - N4Method :: methodPublicStaticVoidClassS
 - N4Method :: methodPublicStaticVoidClassSS
 - N4Method :: methodPublicVoidClassA
 - N4Method :: methodPublicVoidClassS
 - N4Method :: methodPublicVoidClassSS
 - N4Method :: methodPublicVoidRoleR
 - N4Method :: methodPublicVoidRoleRR
--- */



export public class SS{
	@Nfon
	public static datafieldPublicStaticStringClassSS : string = "1";
	public static datafieldPublicStaticStringClassSS_NoAnn : string = "1";

	@Test
	public static methodPublicStaticVoidClassSS() : void{}
	public static methodPublicStaticVoidClassSS_NoAnn() : void{}

	@Nfon
	public datafieldPublicStringClassSS : string = "3";
	public datafieldPublicStringClassSS_NoAnn : string = "3";

	@Test
	public methodPublicVoidClassSS() : void{}
	public methodPublicVoidClassSS_NoAnn() : void{}
}
export public class S extends SS {
	@Nfon
	public static datafieldPublicStaticStringClassS : string = "1";
	public static datafieldPublicStaticStringClassS_NoAnn : string = "1";

	@Test
	public static methodPublicStaticVoidClassS() : void{}
	public static methodPublicStaticVoidClassS_NoAnn() : void{}

	@Nfon
	public datafieldPublicStringClassS : string = "3";
	public datafieldPublicStringClassS_NoAnn : string = "3";

	@Test
	public methodPublicVoidClassS() : void{}
	public methodPublicVoidClassS_NoAnn() : void{}
}
interface RR {

	@Nfon
	public datafieldPublicStringRoleRR : string = "3";
	public datafieldPublicStringRoleRR_NoAnn : string = "3";

	@Test
	public methodPublicVoidRoleRR() : void{}
	public methodPublicVoidRoleRR_NoAnn() : void{}
}
interface R extends RR {

	@Nfon
	public datafieldPublicStringRoleR : string = "3";
	public datafieldPublicStringRoleR_NoAnn : string = "3";

	@Test
	public methodPublicVoidRoleR() : void{}
	public methodPublicVoidRoleR_NoAnn() : void{}
}

export public class ClassWithStuff extends S implements R {
	@Nfon
	public static datafieldPublicStaticStringClassA : string = "1";
	public static datafieldPublicStaticStringClassA_NoAnn : string = "1";

	@Test
	public static methodPublicStaticVoidClassA() : void{}
	public static methodPublicStaticVoidClassA_NoAnn() : void{}

	@Nfon
	public datafieldPublicStringClassA : string = "3";
	public datafieldPublicStringClassA_NoAnn : string = "3";

	@Test
	public methodPublicVoidClassA() : void{}
	public methodPublicVoidClassA_NoAnn() : void{}
}


function findMemberType(m : N4Member){
	if(m instanceof N4Method) {return "N4Method"}
	if(m instanceof N4DataField) {return "N4DataField"}
	if(m instanceof N4Accessor) {return "N4Accessor"}
	if(m instanceof N4Member) {return "N4Member"}
	return "unknown type of member"
}

function print1 (a : Array<string>){
	a.forEach(function(s : string){ console.log(s);});
}

function printMembers(arr : Array<? extends N4Member>){
	var asd : Array<string> = [];
	arr.forEach(function(m : N4Member){ asd.push (" - "+ findMemberType(m)+ " :: "+ m.name) ; });
	asd.sort();   print1 ( asd );
}


var test = ClassWithStuff.n4type
console.log("# allMembers (direct + consumed + inherited + static) && annotated with @Nfon")
printMembers(test.membersWithAnnotation("Nfon", true, true, true));
console.log("# allDataFields (direct + consumed + inherited + static) && annotated with @Nfon")
printMembers(test.dataFieldsWithAnnotation("Nfon", true, true, true));
console.log("# allMembers (direct + consumed + inherited + static) && annotated with @Test")
printMembers(test.membersWithAnnotation("Test", true, true, true));
console.log("# allMethods (direct + consumed + inherited + static) && annotated with @Test")
printMembers(test.methodsWithAnnotation("Test", true, true, true));
