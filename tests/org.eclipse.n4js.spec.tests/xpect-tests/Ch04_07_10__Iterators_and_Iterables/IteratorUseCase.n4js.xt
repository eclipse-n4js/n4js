/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

/**
 * TEMPORARY WORK-AROUND
 *
 * Node.js has an old version of V8 built-in. In that version, the for...of loop
 * requires an Iterator in the 'of' part (not an Iterable as in later versions).
 * This class is used as a wrapper to make it work in node.js.
 *
 * TODO remove this work-around when new node.js version available (later than 0.11.14)
 */
class NodeJsWorkAround<T> implements Iterable<T>, Iterator<T> {
	private wrappedIterable : Iterable<T>;
	private iteratorOfWrappedIterable : Iterator<T>;

	constructor(someIterable : Iterable<T>) {
		this.wrappedIterable = someIterable;
		this.iteratorOfWrappedIterable = someIterable[Symbol.iterator]();
	}
	@Override
	public [Symbol.iterator]() : Iterator<T> {
		return this.iteratorOfWrappedIterable;
	}
	@Override
	public next() : IteratorEntry<T> {
		return this.iteratorOfWrappedIterable.next();
	}
	public static <T> build(someIterable : Iterable<T>) : NodeJsWorkAround<T> {
		return new NodeJsWorkAround<T>(someIterable);
	}
}


class MyIterator<T> implements Iterator<T> {
	private arr : Array<T>;
	private index : number = 0;

	constructor(arr : Array<T>) {
		this.arr = arr;
	}

	@Override
	public next() : IteratorEntry<T> {
		if (this.index >= 0 && this.index < this.arr.length) {
			console.log('returning next element (current index: '+this.index+') ...');
			return { done: false, value: this.arr[this.index++] };
		} else {
			console.log('returning done==true (current index: '+this.index+')');
			return { done: true };
		}
	}
}


class MyContainer<T> implements Iterable<T> {
	private arr : Array<T>;

	constructor(arr : Array<T>) {
		this.arr = arr;
	}

	@Override
	public [Symbol.iterator]() : Iterator<T> {
		console.log('returning an iterator for MyContainer ...');
		return new MyIterator<T>(this.arr);
	}
}


var c : MyContainer<string> = new MyContainer<string>(['first','second','third']);

// XPECT noerrors --> "should be possible to read the Symbol.iterator property"
var iterFun = c[Symbol.iterator];
console.log('The function for obtaining the iterator: ');
console.log(typeof iterFun);

// XPECT noerrors --> "should be possible to invoke the Symbol.iterator property"
var iter = c[Symbol.iterator]();
console.log('The iterator: ');
console.log(iter);

// XPECT noerrors --> "should be possible to pass the iterable to the for...of loop"
for(var x of NodeJsWorkAround.build(c)) {
	console.log(x);
}

/* XPECT output ---
The function for obtaining the iterator: 
function
returning an iterator for MyContainer ...
The iterator: 
MyIterator { arr: [ 'first', 'second', 'third' ], index: 0 }
returning an iterator for MyContainer ...
returning next element (current index: 0) ...
first
returning next element (current index: 1) ...
second
returning next element (current index: 2) ...
third
returning done==true (current index: 3)
--- */
