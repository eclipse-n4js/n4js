/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */


class C<T> {}
class CA<T extends any> {}
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
class CAV<T extends any|void> {}

// XPECT noerrors -->
let t01: C<number>;
// XPECT noerrors -->
let t02: C<undefined>;
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
let t03: C<void>;

// XPECT noerrors -->
let t04: CA<number>;
// XPECT noerrors -->
let t05: CA<undefined>;
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
let t06: CA<void>;

// XPECT noerrors -->
let t07: CAV<number>;
// XPECT noerrors -->
let t08: CAV<undefined>;
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
let t09: CAV<void>;


class I<T> {}
class IA<T extends any> {}
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
class IAV<T extends any|void> {}

// XPECT noerrors -->
let t11: I<number>;
// XPECT noerrors -->
let t12: I<undefined>;
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
let t13: I<void>;

// XPECT noerrors -->
let t14: IA<number>;
// XPECT noerrors -->
let t15: IA<undefined>;
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
let t16: IA<void>;

// XPECT noerrors -->
let t17: IAV<number>;
// XPECT noerrors -->
let t18: IAV<undefined>;
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
let t19: IAV<void>;


function <T> fn(p: T) {}
function <T extends any> fnA(p: T) {}
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
function <T extends any|void> fnAV(p: T) {}

// XPECT noerrors -->
<number>fn(undefined);
// XPECT noerrors -->
<undefined>fn(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
<undefined>fn(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
<void>fn(undefined);

// XPECT noerrors -->
<number>fnA(undefined);
// XPECT noerrors -->
<undefined>fnA(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
<undefined>fnA(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
<void>fnA(undefined);

// XPECT noerrors -->
<number>fnAV(undefined);
// XPECT noerrors -->
<undefined>fnAV(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
<undefined>fnAV(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
<void>fnAV(undefined);


class Cls {
	<T> m(p: T) {}
	<T extends any> mA(p: T) {}
	// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
	<T extends any|void> mAV(p: T) {}
	static <T> sm(p: T) {}
	static <T extends any> smA(p: T) {}
	// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
	static <T extends any|void> smAV(p: T) {}
}
let cls: Cls;

// instance:

// XPECT noerrors -->
cls.<number>m(undefined);
// XPECT noerrors -->
cls.<undefined>m(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
cls.<undefined>m(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
cls.<void>m(undefined);

// XPECT noerrors -->
cls.<number>mA(undefined);
// XPECT noerrors -->
cls.<undefined>mA(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
cls.<undefined>mA(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
cls.<void>mA(undefined);

// XPECT noerrors -->
cls.<number>mAV(undefined);
// XPECT noerrors -->
cls.<undefined>mAV(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
cls.<undefined>mAV(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
cls.<void>mAV(undefined);

// static:

// XPECT noerrors -->
Cls.<number>sm(undefined);
// XPECT noerrors -->
Cls.<undefined>sm(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
Cls.<undefined>sm(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
Cls.<void>sm(undefined);

// XPECT noerrors -->
Cls.<number>smA(undefined);
// XPECT noerrors -->
Cls.<undefined>smA(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
Cls.<undefined>smA(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
Cls.<void>smA(undefined);

// XPECT noerrors -->
Cls.<number>smAV(undefined);
// XPECT noerrors -->
Cls.<undefined>smAV(undefined);
// XPECT errors --> "null is not a subtype of undefined." at "null"
Cls.<undefined>smAV(null);
// XPECT errors --> "Type void may only be used to declare the return type of functions and methods." at "void"
Cls.<void>smAV(undefined);
