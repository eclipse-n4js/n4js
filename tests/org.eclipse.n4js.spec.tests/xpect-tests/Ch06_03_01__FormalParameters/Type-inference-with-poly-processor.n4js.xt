/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


class A {}
class B extends A {}
class C extends B {}
class Z {
	m():int { return 2; }
}

/** Test starts with Function Expressions */

let f0a: {function(A)} =
// XPECT type of 'p0' --> A
function (p0) {}; f0a;


let f0b: {function(A)} =
// XPECT type of 'p1' --> int
function (p0, p1 = 0) {}; f0b;


let f1a: {function(A)} =
// XPECT type of 'p0' --> A
function (p0 = new B()) {}; f1a;


let f1b: {function(B)} =
// XPECT type of 'p0' --> A
function (p0 = new A()) {}; f1b;


let f2: {function(A)} =
// XPECT type of 'p0' --> union{A,int}
function (p0 = 2) {}; f2;


let f3: {function(A)} =
// XPECT type of 'p0' --> A
function (p0 = undefined) {}; f3;


let f4: {function(A)} =
// XPECT type of 'p0' --> A
function (p0 = null) {}; f4;


let f5: {function(A)} =
// XPECT type of 'p0' --> A
function (p0 = ) {}; f5;


let f6: {function(any)} =
// XPECT type of 'p0' --> any
function (p0 = 6) {}; f6;


let f7: {function(Z,A)} =
// XPECT type of 'p1' --> union{A,Z}
function (p0, p1 = p0) {}; f7;


let f8: {function(Z,A)} =
// XPECT type of 'p1' --> union{A,Z,int}
function (p0 = 8, p1 = p0) {}; f8;


let f9a: {function(Z,A)} =
// XPECT type of 'p1' --> union{A,int}
// XPECT errors at 'p2' --> "Illegal forward reference to formal parameter of same function." at "p2"
function (p0, p1 = p2, p2 = 9) {}; f9a;


let f9b: {function(Z,A)} =
// XPECT type of 'p1' --> A
/* XPECT errors at 'p2 + 9' ---
"Illegal forward reference to formal parameter of same function." at "p2"
"number is not a subtype of A." at "p2 + 9"
---*/
function (p0, p1 = p2 + 9, p2 = 9) {}; f9b;


let f10: {function(Z,A)} =
// XPECT type of 'p1' --> A
// XPECT errors at 'p0.m()' --> "int is not a subtype of A." at "p0.m()"
function (p0, p1 = p0.m()) {}; f10;


let f11: {function(Z,A)} =
// XPECT type of 'p1' --> A
// XPECT errors at 'p0 + ""' --> "string is not a subtype of A." at "p0 + """
function (p0, p1 = p0 + "") {}; f11;


let f12: {function(A,B)} =
// XPECT type of 'p1' --> union{B,{function(any):void}}
function (p0, p1 = function (u) {}) {}; f12;


let f13: {function(A,B)} =
// XPECT type of 'p1' --> B
// XPECT errors at 'function (u=p0) {}' --> "{function(any=â€¦):void} is not a subtype of B." at "function (u=p0) {}"
function (p0, p1 = function (u=p0) {}) {}; f13;


let f14: {function(A,B)} =
// XPECT type of 'p1' --> union{B,{function(any):any}}
function (p0, p1 = function (u) {return p0;}) {}; f14;


let f15: {function(A,B)} =
// XPECT type of 'p1' --> union{B,{function(any):any}}
function (p0, p1 = function (u) {return p0;}) {}; f15;


let f16: {function(A)} =
// XPECT type of 'p0' --> A
// XPECT errors at 'f16(null)' --> "any is not a subtype of A." at "f16(null)"
function (p0 = f16(null) ) {};


let f17: {function(A):A} =
// XPECT type of 'p0' --> A
function (p0 = f17(null) ) : A { return null; };


let f18: {function(A):A} =
// XPECT type of 'f18' --> {function(A):A}
function (p0) { return f18(null); };


let f19: {function(A):A} =
// XPECT type of 'f19' --> {function(A):A}
function (p0 = function (u) {return f19(null);} ) { return null; };


let f20: {function(any):A} =
// XPECT type of 'f20' --> {function(any):A}
function (p0 = function (u=f20(null)) {return null;} ) { return null; };




/** Now the same tests on Arrow Function Expressions */

let a0a: (A)=>void =
// XPECT type of 'p0' --> A
(p0) => {}; a0a;


let a0b: (A)=>void =
// XPECT type of 'p1' --> int
(p0, p1 = 0) => {}; a0b;


let a1a: (A)=>void =
// XPECT type of 'p0' --> A
(p0 = new B()) => {}; a1a;


let a1b: (B)=>void =
// XPECT type of 'p0' --> A
(p0 = new A()) => {}; a1b;


let a2: (A)=>void =
// XPECT type of 'p0' --> union{A,int}
(p0 = 2) => {}; a2;


let a3: (A)=>void =
// XPECT type of 'p0' --> A
(p0 = undefined) => {}; a3;


let a4: (A)=>void =
// XPECT type of 'p0' --> A
(p0 = null) => {}; a4;


let a5: (A)=>void =
// XPECT type of 'p0' --> A
(p0 = ) => {}; a5;


let a6: (any)=>void =
// XPECT type of 'p0' --> any
(p0 = 6) => {}; a6;


let a7: (Z,A)=>void =
// XPECT type of 'p1' --> union{A,Z}
(p0, p1 = p0) => {}; a7;


let a8: (Z,A)=>void =
// XPECT type of 'p1' --> union{A,Z,int}
(p0 = 8, p1 = p0) => {}; a8;


let a9a: (Z,A)=>void =
// XPECT type of 'p1' --> union{A,int}
// XPECT errors at 'p2' --> "Illegal forward reference to formal parameter of same function." at "p2"
(p0, p1 = p2, p2 = 9) => {}; a9a;


let a9b: (Z,A)=>void =
// XPECT type of 'p1' --> A
/* XPECT errors at 'p2 + 9' ---
"Illegal forward reference to formal parameter of same function." at "p2"
"number is not a subtype of A." at "p2 + 9"
---*/
(p0, p1 = p2 + 9, p2 = 9) => {}; a9b;


let a10: (Z,A)=>void =
// XPECT type of 'p1' --> A
// XPECT errors at 'p0.m()' --> "int is not a subtype of A." at "p0.m()"
(p0, p1 = p0.m()) => {}; a10;


let a11: (Z,A)=>void =
// XPECT type of 'p1' --> A
// XPECT errors at 'p0 + ""' --> "string is not a subtype of A." at "p0 + """
(p0, p1 = p0 + "") => {}; a11;


let a12: (A,B)=>void =
// XPECT type of 'p1' --> union{B,{function(any):void}}
(p0, p1 = (u) => {}) => {}; a12;


let a13: (A,B)=>void =
// XPECT type of 'p1' --> B
// XPECT errors at '(u=p0) => {}' --> "{function(any=â€¦):void} is not a subtype of B." at "(u=p0) => {}"
(p0, p1 = (u=p0) => {}) => {}; a13;


let a14: (A,B)=>void =
// XPECT type of 'p1' --> union{B,{function(any):any}}
(p0, p1 = (u) => {return p0;}) => {}; a14;


let a15: (A,B)=>void =
// XPECT type of 'p1' --> union{B,{function(any):any}}
(p0, p1 = (u) => {return p0;}) => {}; a15;


let a16: (A)=>void =
// XPECT type of 'p0' --> A
// XPECT errors at 'a16(null)' --> "void is not a subtype of A." at "a16(null)"
(p0 = a16(null) ) => {};


let a17: (A)=>A =
// XPECT type of 'p0' --> A
(p0 = a17(null) ) : A => { return null; };


let a18: (A)=>A =
// XPECT type of 'a18' --> {function(A):A}
(p0) => { return a18(null); };


let a19: (A)=>A =
// XPECT type of 'a19' --> {function(A):A}
(p0 = (u) => {return a19(null);} ) => { return null; };


let a20: (any)=>A =
// XPECT type of 'a20' --> {function(any):A}
(p0 = (u=a20(null)) => {return null;} ) => { return null; };
