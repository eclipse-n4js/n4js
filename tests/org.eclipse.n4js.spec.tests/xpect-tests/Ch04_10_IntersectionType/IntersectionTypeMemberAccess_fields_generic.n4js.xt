/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

interface A {}
interface B {}

let a:A;
let b:B;
let aub:A|B;

interface I1<T> {
	onlyIn1: T;
	inBothDiffType: T;
	inBothInheritedDiffType: T;
}

interface I2<T> {
	onlyIn2: T;
	inBothDiffType: T;
}

interface I3<T> extends I2<T> {
	onlyIn3: T;
	inBothInheritedDiffType: T;
}

var i13 : I1<A> & I3<B>;

// get onlyIn1(): A
// set onlyIn1(a:A)

// XPECT noerrors
i13.onlyIn1;

// XPECT type of 'i13.onlyIn1' --> A
i13.onlyIn1

// XPECT noerrors
i13.onlyIn1 = a;

// XPECT errors --> "B is not a subtype of A." at "b"
i13.onlyIn1 = b;



// get onlyIn2(): B
// set onlyIn2(b:B)

// XPECT noerrors
i13.onlyIn2;

// XPECT type of 'i13.onlyIn2' --> B
i13.onlyIn2

// XPECT errors --> "A is not a subtype of B." at "a"
i13.onlyIn2 = a;

// XPECT noerrors
i13.onlyIn2 = b;



// get onlyIn3(): B
// set onlyIn3(b:B)

// XPECT noerrors
i13.onlyIn3;

// XPECT type of 'i13.onlyIn3' --> B
i13.onlyIn3

// XPECT errors --> "A is not a subtype of B." at "a"
i13.onlyIn3 = a;

// XPECT noerrors
i13.onlyIn3 = b;


// get inBothDiffType(): A&B
// set inBothDiffType(aub:A|B)

// XPECT noerrors
i13.inBothDiffType;

// XPECT type of 'i13.inBothDiffType' --> intersection{A,B}
i13.inBothDiffType;

// XPECT noerrors
i13.inBothDiffType = aub;


// get inBothInheritedDiffType(): A&B
// set inBothInheritedDiffType(aub:A|B)

// XPECT noerrors
i13.inBothInheritedDiffType;

// XPECT type of 'i13.inBothInheritedDiffType' --> intersection{A,B}
i13.inBothInheritedDiffType;

// XPECT noerrors
i13.inBothInheritedDiffType = aub;
