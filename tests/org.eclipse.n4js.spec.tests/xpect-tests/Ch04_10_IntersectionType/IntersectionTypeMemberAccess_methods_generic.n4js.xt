/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

interface A {}
interface B {}

let a:A;
let b:B;
let aub:A|B;

interface I1<S,T> {
	onlyIn1(a:S):T;

	sameReturnType():S;
	sameParType1(a:S);

	diffReturnType():S;
	diffParType1(a:S);

	diffNoOfParmsSameType(a:S);

	diffNoOfParmsDiffType(a:S);

	varArg(...a:S);
	varArgBoth(...a:S);
}

interface I2<S,T> {
	onlyIn2(b:T):S;

	sameReturnType():S;
	sameParType1(a:S);

	diffReturnType():T;
	diffParType1(b:T);

	diffNoOfParmsSameType(a:S, b:T);

	diffNoOfParmsDiffType(a:T, b:T);

	varArg(a:S, b:T);
	varArgBoth(a:S, ...b:T);
}

var i12 : I1<A,B> & I2<A,B>;

// onlyIn1(a:A):B

// XPECT noerrors
i12.onlyIn1(a);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.onlyIn1(b);

// XPECT type of 'i12.onlyIn1(a)' --> B
i12.onlyIn1(a);



// onlyIn2(b:B):A

// XPECT noerrors
i12.onlyIn2(b);

// XPECT errors --> "A is not a subtype of B." at "a"
i12.onlyIn2(a);

// XPECT type of 'i12.onlyIn2(b)' --> A
i12.onlyIn2(b);



// sameReturnType():A

// XPECT type of 'i12.sameReturnType()' --> A
i12.sameReturnType();



// sameParType(a:A)

// XPECT noerrors
i12.sameParType1(a);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.sameParType1(b);



// diffReturnType():A&B

// XPECT type of 'i12.diffReturnType()' --> intersection{A,B}
i12.diffReturnType();



// diffParType1(aub:A|B)

// XPECT noerrors
i12.diffParType1(aub);



// diffNoOfParmsSameType(a:A, b:B)

// XPECT noerrors
i12.diffNoOfParmsSameType(a, b);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.diffNoOfParmsSameType(b, b);

// XPECT errors --> "A is not a subtype of B." at "a"
i12.diffNoOfParmsSameType(a, a);



// diffNoOfParmsDiffType(aub:A|B, b:B)

// XPECT noerrors
i12.diffNoOfParmsDiffType(aub, b);

// XPECT errors --> "A is not a subtype of B." at "a"
i12.diffNoOfParmsDiffType(aub, a);


// varArg(a:A, aub:A|B, ...a:A)

// XPECT noerrors --> "Incorrect number of arguments: expected 3, got 1." at "i12.varArg(a)"
i12.varArg(a);

// XPECT noerrors
i12.varArg(a, aub);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.varArg(b, aub);

// XPECT noerrors
i12.varArg(a, aub, a);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.varArg(a, aub, b);



// varArgBoth(a:A, ...aub:A|B)

// XPECT noerrors
i12.varArgBoth(a);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.varArgBoth(b);

// XPECT noerrors
i12.varArgBoth(a, aub);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.varArgBoth(b, aub);

// XPECT noerrors
i12.varArgBoth(a, aub, aub);

// XPECT errors --> "B is not a subtype of A." at "b"
i12.varArgBoth(b, aub, aub);
