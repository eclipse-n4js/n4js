/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

class A {}

//
// generic types
// (note: using type variables directly in a union (e.g. union{string,T}) is covered in another file)
//

class Gen1<T> {
	f_onlyInGen1 : T;

	f : T;
	get g() : T { return null; }
	set s(param : T) {}
	m(p1 : T) : T { return null; }

	fSuper : T;
	get gSuper() : T { return null; }
	set sSuper(param : T) {}
	mSuper(p1 : T) : T { return null; }

	fRole : T;
	get gRole() : T { return null; }
	set sRole(param : T) {}
	mRole(p1 : T) : T { return null; }
}

interface Gen2Role<T> {
	f_onlyInGen2Role : T;

	fRole : T;
	get gRole() : T { return null; }
	set sRole(param : T) {}
	mRole(p1 : T) : T { return null; }
}
class Gen2Super<T> implements Gen2Role<T> {  // forward type variable T to interface
	f_onlyInGen2Super : T;

	fSuper : T;
	get gSuper() : T { return null; }
	set sSuper(param : T) {}
	mSuper(p1 : T) : T { return null; }
}
class Gen2<T> extends Gen2Super<A> {  // bind super-class type variable to A
	f_onlyInGen2 : T;

	f : T;
	get g() : T { return null; }
	set s(param : T) {}
	m(p1 : T) : T { return null; }
}


var u : union{Gen1<A>,Gen2<A>};


// XPECT errors --> "Member f_onlyInGen1 not present in all types of union; missing from: Gen2<A>." at "f_onlyInGen1"
u.f_onlyInGen1;
// XPECT errors --> "Member f_onlyInGen2 not present in all types of union; missing from: Gen1<A>." at "f_onlyInGen2"
u.f_onlyInGen2;
// XPECT errors --> "Member f_onlyInGen2Super not present in all types of union; missing from: Gen1<A>." at "f_onlyInGen2Super"
u.f_onlyInGen2Super;
// XPECT errors --> "Member f_onlyInGen2Role not present in all types of union; missing from: Gen1<A>." at "f_onlyInGen2Role"
u.f_onlyInGen2Role;


u.f; // read access ok
u.f = null; // write access ok
// XPECT type of 'u.f' --> A
u.f;
// XPECT expectedType at 'null' --> A
u.f = null;

u.fSuper; // read access ok
u.fSuper = null; // write access ok
// XPECT type of 'u.fSuper' --> A
u.fSuper;
// XPECT expectedType at 'null' --> A
u.fSuper = null;

u.fRole; // read access ok
u.fRole = null; // write access ok
// XPECT type of 'u.fRole' --> A
u.fRole;
// XPECT expectedType at 'null' --> A
u.fRole = null;


u.g; // read access ok
// XPECT errors --> "The accessor g is read-only." at "g"
u.g = null; // write access *not* ok
// XPECT type of 'u.g' --> A
u.g;

u.gSuper; // read access ok
// XPECT errors --> "The accessor gSuper is read-only." at "gSuper"
u.gSuper = null; // write access *not* ok
// XPECT type of 'u.gSuper' --> A
u.gSuper;

u.gRole; // read access ok
// XPECT errors --> "The accessor gRole is read-only." at "gRole"
u.gRole = null; // write access *not* ok
// XPECT type of 'u.gRole' --> A
u.gRole;


// XPECT errors --> "The accessor s is write-only." at "s"
u.s; // read access *not* ok
u.s = null; // write access ok
// XPECT expectedType at 'null' --> A
u.s = null;

// XPECT errors --> "The accessor sSuper is write-only." at "sSuper"
u.sSuper; // read access *not* ok
u.sSuper = null; // write access ok
// XPECT expectedType at 'null' --> A
u.sSuper = null;

// XPECT errors --> "The accessor sRole is write-only." at "sRole"
u.sRole; // read access *not* ok
u.sRole = null; // write access ok
// XPECT expectedType at 'null' --> A
u.sRole = null;


u.m(null);
// XPECT type of 'u.m(null)' --> A
u.m(null);
// XPECT expectedType at 'null' --> A
u.m(null);

u.mSuper(null);
// XPECT type of 'u.mSuper(null)' --> A
u.mSuper(null);
// XPECT expectedType at 'null' --> A
u.mSuper(null);

u.mRole(null);
// XPECT type of 'u.mRole(null)' --> A
u.mRole(null);
// XPECT expectedType at 'null' --> A
u.mRole(null);
