/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


interface A {}
interface ASub extends A {}
interface B {}
interface C {}
class X {}


class T1 {

	m1(p1 : A, p2 : A) : void {}
	m2(p1 : A, p2 : A) : void {}

	m3(p1 : A) : void {}
	m4(p1 : A) : void {}

	m5(p1 : A) : void {}
	m6(p1 : A) : void {}
	m7(p1 : A) : void {}
	m8(p1 : A) : void {}
}


class T2 {

	m1(p1 : A, p2 : B) : void {}
	m2(p1 : A, p2 : B) : void {}

	m3(p1 : A, p2 : A) : void {}
	m4(p1 : A, p2 : A) : void {}

	m5(p1 : A, p2 : A) : void {}
	m6(p1 : A, p2 : A=undefined) : void {}
	m7(p1 : A, p2 : A) : void {}
	m8(p1 : A, ... p2 : A) : void {}
}


class T3 {

	m1(p1 : A, p2 : C) : void {}
	m2(p1 : A, p2 : A) : void {}

	m3(p1 : A, p2 : A) : void {}
	m4(p1 : A, p2 : A, p3 : A) : void {}

	m5(p1 : A, p2 : A=undefined) : void {}
	m6(p1 : A, p2 : A=undefined) : void {}
	m7(p1 : A, ... p2 : A) : void {}
	m8(p1 : A, ... p2 : A) : void {}
}


var u : union{T1,T2,T3};
var a1 : A;
var a2 : A;
var a3 : A;
var x1 : X;
var x2 : X;
var x3 : X;


//
// check merging of fpars
//


// simple cases (same number of parameters, none optional, none variadic)
// XPECT errors ---
// "X is not a subtype of A." at "x1"
// "X is not a subtype of intersection{A,B,C}." at "x2"
// ---
u.m1(x1,x2);
// XPECT errors --> "X is not a subtype of intersection{A,B}." at "x2"
u.m2(a1,x2);


// m3 has 1 fpar in T1 and 2 fpars in T2 and T3
// XPECT errors --> "Incorrect number of arguments: expected 2, got 1." at "u.m3(a1)"
u.m3(a1);
u.m3(a1,a2);  // ok (m3 in T1 does not care if it gets more than expected -- TODO: really???)
// XPECT errors --> "Incorrect number of arguments: expected 2, got 3." at "u.m3(a1,a2,a3)"
u.m3(a1,a2,a3);


// similar as before, but now m4 3 fpars in T3 (instead of 2)
// XPECT errors --> "Incorrect number of arguments: expected 3, got 1." at "u.m4(a1)"
u.m4(a1);
// XPECT errors --> "Incorrect number of arguments: expected 3, got 2." at "u.m4(a1,a2)"
u.m4(a1,a2);
u.m4(a1,a2,a3);  // ok (m4 in T1 and T2 do not care if they get more than expected -- TODO really???)


// making surplus parameters optional solves the situation, but only if they are optional everywhere
u.m5(a1,a2);  // trivial case (ok)
// XPECT errors --> "Incorrect number of arguments: expected 2, got 1." at "u.m5(a1)"
u.m5(a1);  // not ok, because 2nd fpar of m5 isn't optional in T2 (only in T3!)
u.m6(a1,a2);  // trivial case (ok)
u.m6(a1);  // now ok, because 2nd fpar of m6 is optional in both T2 and T3


// same, but with variadic:
// making surplus parameters variadic solves the situation, but only if they are variadic everywhere
u.m7(a1,a2);  // trivial case (ok)
// XPECT errors --> "Incorrect number of arguments: expected 3, got 1." at "u.m7(a1)"
u.m7(a1);  // not ok, because 2nd fpar of m7 isn't optional in T2 (only in T3!)
u.m8(a1,a2);  // trivial case (ok)
u.m8(a1);  // now ok, because 2nd fpar of m6 is optional in both T2 and T3



//
// check invalid use of variadic in a union's contained types
// (to make sure that union type code does not have problems with that)
//
// IDE-145: default parameters are allowed everywhere. They become optional
// when they are followed by default or variadic parameters.
//

class T1err {
	// invalid use of optional/variadic fpar in next two lines
	// IDE-145 XPECT warnings --> "This parameter is changed to the default parameter 'p2=undefined' since it follows a default parameter." at "p2 : A"
	mErr1(p1 : A=undefined, p2 : A) : void {}
	// XPECT errors --> "Only the last formal parameter can be variadic." at "... p1 : A"
	mErr2(... p1 : A, p2 : A) : void {}
}

class T2err {
	// IDE-145 XPECT warnings --> "This parameter is changed to the default parameter 'p2=undefined' since it follows a default parameter." at "p2 : A"
	mErr1(p1 : A=undefined, p2 : A) : void {}
	// XPECT errors --> "Only the last formal parameter can be variadic." at "... p1 : A"
	mErr2(... p1 : A, p2 : A) : void {}
}

class T3err {
	// IDE-145 XPECT warnings --> "This parameter is changed to the default parameter 'p2=undefined' since it follows a default parameter." at "p2 : A"
	mErr1(p1 : A=undefined, p2 : A) : void {}
	// XPECT errors --> "Only the last formal parameter can be variadic." at "... p1 : A"
	mErr2(... p1 : A, p2 : A) : void {}
}

var u_err : union{T1err,T2err,T3err};

// IDE-145 XPECT noerrors --> "Member mErr1 not present in all types of union or incompatible." at "mErr1"
u_err.mErr1(a1,a2);
// XPECT errors --> "Member mErr2 not present in all types of union or incompatible." at "mErr2"
u_err.mErr2(a1,a2,a3);
