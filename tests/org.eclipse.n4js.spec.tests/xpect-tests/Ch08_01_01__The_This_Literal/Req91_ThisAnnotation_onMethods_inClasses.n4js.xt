/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


class X {}

interface I {
	mi() {}
}


class C {

	constructor(p: number) {}

	// XPECT errors --> "Declared @This type of method C.m01 in class C must be a subtype of C." at "X"
	@This(X) m01() {}
	// XPECT noerrors -->
	@This(C) m02() {}
	// XPECT noerrors -->
	@This(CC) m03() {
		// XPECT noerrors -->
		this.mcc();
	}
	// XPECT noerrors -->
	@This(C&I) m04() {
		// requires property access for intersection types XPECT noerrors -->
		this.mi();
	}

	// ================================================================

	// XPECT errors --> "Declared @This type of static method C.m11 in class C must be a subtype of type{C}." at "type{X}"
	@This(type{X}) static m11() {}
	// XPECT noerrors -->
	@This(type{C}) static m12() {
		// XPECT errors --> "Cannot instantiate type{C}." at "this"
		new this(42);
	}
	// XPECT noerrors -->
	@This(type{CC}) static m13() {
		// XPECT noerrors -->
		this.smcc();
		// XPECT errors --> "Cannot instantiate type{CC}." at "this"
		new this(42);
	}
	// XPECT noerrors -->
	@This(constructor{? extends C}) static m14() {
		// XPECT errors --> "Cannot instantiate ? extends C, because C does not have a @CovariantConstructor." at "this"
		new this(42);
	}
	// XPECT noerrors -->
	@This(constructor{C}) static m15() {
		// XPECT noerrors -->
		new this(42);
	}
}
class CC extends C {
	mcc() {}
	static smcc() {}
}
class CC1 extends C implements I {}
abstract class CC2 extends C {}
class CC3 extends C {
	constructor(p: string) { super(42); }
}


let c: C;
let cc: CC;
let cc1: CC1;


// XPECT noerrors -->
c.m02();
// XPECT noerrors -->
cc.m02();
// XPECT noerrors -->
cc1.m02();

// XPECT errors --> "Target of property access not a subtype of the declared @This type of method C.m03: C is not a subtype of CC." at "m03"
c.m03();
// XPECT noerrors -->
cc.m03();
// XPECT errors --> "Target of property access not a subtype of the declared @This type of method C.m03: CC1 is not a subtype of CC." at "m03"
cc1.m03();

// XPECT errors --> "Target of property access not a subtype of the declared @This type of method C.m04: C is not a subtype of intersection{C,I}." at "m04"
c.m04();
// XPECT errors --> "Target of property access not a subtype of the declared @This type of method C.m04: CC is not a subtype of intersection{C,I}." at "m04"
cc.m04();
// XPECT noerrors -->
cc1.m04();

// ================================================================

// XPECT noerrors -->
CC.m12();
// XPECT noerrors -->
CC2.m12();
// XPECT noerrors -->
CC3.m12();

// XPECT noerrors -->
CC.m13();
// XPECT errors --> "Target of property access not a subtype of the declared @This type of static method C.m13: type{CC2} is not a subtype of type{CC}." at "m13"
CC2.m13();
// XPECT errors --> "Target of property access not a subtype of the declared @This type of static method C.m13: constructor{CC3} is not a subtype of type{CC}." at "m13"
CC3.m13();

// XPECT noerrors -->
CC.m14();
// XPECT errors --> "Target of property access not a subtype of the declared @This type of static method C.m14: type{CC2} is not a subtype of constructor{? extends C}." at "m14"
CC2.m14();
// XPECT noerrors -->
CC3.m14();

// XPECT noerrors -->
CC.m15();
// XPECT errors --> "Target of property access not a subtype of the declared @This type of static method C.m15: type{CC2} is not a subtype of constructor{C}." at "m15"
CC2.m15();
// XPECT errors --> "Target of property access not a subtype of the declared @This type of static method C.m15: constructor{CC3} is not a subtype of constructor{C}." at "m15"
CC3.m15();
