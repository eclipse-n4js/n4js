/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */


class A {
	public static <T> typM(t : T) : T {
		return t;
	}
}

class B extends A {
	@Override
	// XPECT noerrors --> "not: Signature of static method B.typM does not conform to overridden static method A.typM: {function(T):T} is not a subtype of {function(T):T}." at "typM"
	public static <T> typM(t : T) : T {
		return A.typM(t);
	}
}


class C {
	public <T> typM(t : T) : T {
		return t;
	}
}

class D extends C {
	@Override
	// XPECT noerrors --> "not: Signature of method D.typM does not conform to overridden method C.typM: {function(T):T} is not a subtype of {function(T):T}." at "typM"
	public <T> typM(t : T) : T {
		return super.typM(t);
	}
}


class X {
	<T extends B> m() : T { return null; }
}

class Y<V extends B> extends X {
	@Override
	// XPECT errors --> "Signature of method Y.m does not conform to overridden method X.m: {function<T extends V>():T} is not a subtype of {function<T extends B>():T}." at "m"
	<T extends V> m() : T { return null; } // note: error is correct; "T extends V" in this line does not boil down to "T extends B", because V will be bound to a certain V!
}
