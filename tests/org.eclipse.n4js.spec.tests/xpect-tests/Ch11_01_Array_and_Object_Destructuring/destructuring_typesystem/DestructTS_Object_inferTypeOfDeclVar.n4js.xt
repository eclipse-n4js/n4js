/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */


class A {}
class B {}
class C {}
class D {}
class E {}
class F {}
class G {}

class B_sub extends B {}
class C_sub extends C {}


// simple case (with structural type)

var v1 : ~Object with {propA : A; propB : B;};
// XPECT type of 'a1' --> A
// XPECT type of 'b1' --> B
var {propA:a1, propB:b1} = v1;


// simple case (with structural type in cast)

var v2 : any;
// XPECT type of 'a2' --> A
// XPECT type of 'b2' --> B
var {propA:a2, propB:b2} = v2 as ~Object with {propA: A; propB: B;};


// simple case (with class)

class ClsSuper {
	private field : A;
}
class Cls extends ClsSuper {
	private get getter() : B {return null;}
}
var v3 : Cls;
// XPECT type of 'a3' --> A
// XPECT type of 'b3' --> B
var {field:a3, getter:b3} = v3;


// single name binding

var v4 : ~Object with {a4 : A; b4 : B;}; // note: properties have same name as variables declared below
// XPECT type of 'a4' --> A
// XPECT type of 'b4' --> B
var {a4, b4} = v4;


// with default values

var v5 : ~Object with {propA : A; propB : B; propC : C_sub; propD : D; propE : E;};
// XPECT type of 'a5' --> union{A,F}
// XPECT type of 'b5' --> B
// XPECT type of 'c5' --> C
// XPECT type of 'd5' --> D
// XPECT type of 'e5' --> E
var {
	propA:a5=new F(),		// case: default value has unrelated type
	propB:b5=new B_sub(),	// case: default value is subtype
	propC:c5=new C(),		// case: default value is super type
	propD:d5=undefined,
	propE:e5=null
} = v5;
