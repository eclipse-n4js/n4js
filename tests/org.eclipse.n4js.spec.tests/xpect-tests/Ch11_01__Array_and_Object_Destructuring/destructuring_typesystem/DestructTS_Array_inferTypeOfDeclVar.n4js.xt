/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */


class A {}
class B {}
class C {}
class D {}
class E {}
class F {}
class G {}

class X {}


// simple case (iterable shorter)

var v1 : Iterable2<A,B>;
// XPECT type of 'a1' --> A
// XPECT type of 'b1' --> B
// XPECT type of 'c1' --> B
var [a1,b1,c1] = v1;


// simple case (pattern shorter)

var v2 : Iterable3<A,B,C>;
// XPECT type of 'a2' --> A
// XPECT type of 'b2' --> B
var [a2,b2] = v2;


// Iterable<> implemented explicitly (i.e. nominally):

abstract class IterNomi<T> implements Iterable<T> {}
var v3 : IterNomi<A>;
// XPECT type of 'a3' --> A
// XPECT type of 'b3' --> A
var [a3,b3] = v3;


// Iterable<> implemented structurally:
// (note: this case applies only to Iterable<> because the IterableN<> are nominal interfaces!)

class IterStruct<T> {
	public [Symbol.iterator]() : Iterator<T> {return null;}
}
var v4 : IterStruct<A>;
// found during IDE-1852: XPECT FIXME noerrors
// XPECT type of 'a4' --> A
// XPECT type of 'b4' --> A
var [a4,b4] = v4;


// multiple implementation of IterableN<>

// TODO IDE-2226 revisit test case
/*
interface Intermediate<I1,I2> extends Iterable2<I1,I2> {}
abstract class X8 implements Iterable2<C,D> {}
abstract class Y8 extends X8 implements Intermediate<A,B> {}
abstract class Z8 extends Y8 implements Iterable3<E,F,G> {}

var v8 : Z8;
// X---PECT type of 'a8' --> intersection{A,C,E}
// X---PECT type of 'b8' --> intersection{B,D,F}
// X---PECT type of 'c8' --> intersection{B,D,G}
// X---PECT type of 'd8' --> intersection{B,D,G}
var [a8,b8,c8,d8] = v8;
*/

// combination of IterableN<> and nominal implementation of Iterable<>
// TODO cannot test this yet, because of another, unrelated bug

// combination of IterableN<> and structural implementation of Iterable<>
// TODO cannot test this yet, because of another, unrelated bug


// union

var v11 : union{Iterable2<A,A>,Iterable2<A,B>};
// XPECT type of 'a11' --> A
// XPECT type of 'b11' --> union{A,B}
var [a11,b11] = v11;

var v12 : union{Iterable2<A,A>,X};
// XPECT errors --> "Array destructuring pattern cannot be applied to a value of type 'union{Iterable2<A,A>,X}': union{Iterable2<A,A>,X} is not a subtype of Iterable<?>." at "[a12,b12]"
var [a12,b12] = v12;
