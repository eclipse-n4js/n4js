/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */

// !!!! KEEP THIS FILE ALIGNED TO Destruct_DefaultValues2.n4js.xt !!!!

function logExpectedActual(expected : any, actual : any) {
	console.log('expected:',expected,'actual:',actual);
}

var arr = [1,2,3,4,5];
var arr_missing2nd_v1 = [1,,3,4,5];
var arr_missing2nd_v2 = [1];
var arr_missing2nd_v3 = [1,undefined,3,4,5];

                                                                                          // casts required because type system would detect and disallow the error cases we wanna test below:
var obj = {one:1, two:2, three:3};
var obj_missingTwo_v1 = {one:1, three:3}                                                  as ~Object with { one: number; two: number; three: number; };
var obj_missingTwo_v2 = {one:1, number two: undefined, three:3};

var arr_withObjAs2nd = [1,{one:1, two:2, three:3},3,4,5]                                  as Iterable5<number, ~Object with { one: number; two: number; three: number; }, number, number, number>;
var arr_withObjAs2nd_missing2nd_v1 = [1,,3,4,5]                                           as Iterable5<number, ~Object with { one: number; two: number; three: number; }, number, number, number>;
var arr_withObjAs2nd_missing2nd_v2 = [1]                                                  as Iterable5<number, ~Object with { one: number; two: number; three: number; }, number, number, number>;
var arr_withObjAs2nd_missing2nd_v3 = [1,undefined,3,4,5]                                  as Iterable5<number, ~Object with { one: number; two: number; three: number; }, number, number, number>;

var obj_withArrAsTwo = {one:1, two:[1,2,3], three:3};
var obj_withArrAsTwo_missingTwo_v1 = {one:1, three:3}                                     as ~Object with { one: number; two: Array<number>; three: number; };
var obj_withArrAsTwo_missingTwo_v2 = {one:1, Array<number> two: undefined, three:3};


// in this file, we need *NOT* declare all variables up-front (compare with Destruct_DefaultValues2.n4js.xt)
// (... no variable declarations required here ...)
// (... no variable declarations required here ...)


// ------------------------------------------------------------------------------------
console.log('#### case 1: default value for simple value in array destructuring pattern');

var [x1,a1=99,y1] = arr;
logExpectedActual(2,a1);

var [x2,a2=99,y2] = arr_missing2nd_v1;
logExpectedActual(99,a2);
var [x3,a3=99,y3] = arr_missing2nd_v2;
logExpectedActual(99,a3);
var [x4,a4=99,y4] = arr_missing2nd_v3;
logExpectedActual(99,a4);


// ------------------------------------------------------------------------------------
console.log('#### case 2: default value for simple value in object destructuring pattern');

var {one:x5, two:a5 = 99, three:y5} = obj;
logExpectedActual(2,a5);

var {one:x6, two:a6 = 99, three:y6} = obj_missingTwo_v1;
logExpectedActual(99,a6);
var {one:x7, two:a7 = 99, three:y7} = obj_missingTwo_v2;
logExpectedActual(99,a7);


// ------------------------------------------------------------------------------------
console.log('#### case 3: default value for nested pattern in array destructuring pattern');

var [x11,{two:a11}={two:99},y11] = arr_withObjAs2nd;
logExpectedActual(2,a11);

var [x12,{two:a12}={two:99},y12] = arr_withObjAs2nd_missing2nd_v1;
logExpectedActual(99,a12);
var [x13,{two:a13}={two:99},y13] = arr_withObjAs2nd_missing2nd_v2;
logExpectedActual(99,a13);
var [x14,{two:a14}={two:99},y14] = arr_withObjAs2nd_missing2nd_v3;
logExpectedActual(99,a14);


// ------------------------------------------------------------------------------------
console.log('#### case 4: default value for nested pattern in object destructuring pattern');

var {one:x15, two:[,a15] = [1,99,3], three:y15} = obj_withArrAsTwo;
logExpectedActual(2,a15);

var {one:x16, two:[,a16] = [1,99,3], three:y16} = obj_withArrAsTwo_missingTwo_v1;
logExpectedActual(99,a16);
var {one:x17, two:[,a17] = [1,99,3], three:y17} = obj_withArrAsTwo_missingTwo_v2;
logExpectedActual(99,a17);



/* XPECT output ---
#### case 1: default value for simple value in array destructuring pattern
expected: 2 actual: 2
expected: 99 actual: 99
expected: 99 actual: 99
expected: 99 actual: 99
#### case 2: default value for simple value in object destructuring pattern
expected: 2 actual: 2
expected: 99 actual: 99
expected: 99 actual: 99
#### case 3: default value for nested pattern in array destructuring pattern
expected: 2 actual: 2
expected: 99 actual: 99
expected: 99 actual: 99
expected: 99 actual: 99
#### case 4: default value for nested pattern in object destructuring pattern
expected: 2 actual: 2
expected: 99 actual: 99
expected: 99 actual: 99
--- */
