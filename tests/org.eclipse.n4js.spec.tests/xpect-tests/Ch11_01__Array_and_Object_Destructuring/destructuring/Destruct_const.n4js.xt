/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP  */


var arr: Array<Array<number>> = [[1,2,3],[4,5,6],[7,8,9]];
var obj = { a:1, n:{b:2,c:3,d:4}, e:5 };


// array binding
const [a1,[b1,c1,d1],e1] = arr;
// XPECT errors --> "Const variable a1 is read-only." at "a1"
a1 = undefined;
// XPECT errors --> "Const variable c1 is read-only." at "c1"
c1 = undefined;


// array binding with for..of loop
for(const [a2,[b2,c2,d2],e2] of [arr]) {
	// XPECT errors --> "Const variable a2 is read-only." at "a2"
	a2 = undefined;
	// XPECT errors --> "Const variable c2 is read-only." at "c2"
	c2 = undefined;
}


// array binding with plain for loop
let cnt = 0;
for(const [a3,[b3,c3,d3],e3] = arr;cnt<1;cnt++) {
	// XPECT errors --> "Const variable a3 is read-only." at "a3"
	a3 = undefined;
	// XPECT errors --> "Const variable c3 is read-only." at "c3"
	c3 = undefined;
}


// object binding
const {a:a4,n:{b:b4,c:c4,d:d4},e:e4} = obj;
// XPECT errors --> "Const variable a4 is read-only." at "a4"
a4 = undefined;
// XPECT errors --> "Const variable c4 is read-only." at "c4"
c4 = undefined;


// object binding with for..of loop
for(const {a:a5,n:{b:b5,c:c5,d:d5},e:e5} of [obj]) {
	// XPECT errors --> "Const variable a5 is read-only." at "a5"
	a5 = undefined;
	// XPECT errors --> "Const variable c5 is read-only." at "c5"
	c5 = undefined;
}


// object binding with plain for loop
cnt = 0;
for(const {a:a6,n:{b:b6,c:c6,d:d6},e:e6} = obj;cnt<1;cnt++) {
	// XPECT errors --> "Const variable a6 is read-only." at "a6"
	a6 = undefined;
	// XPECT errors --> "Const variable c6 is read-only." at "c6"
	c6 = undefined;
}


// note: because we are testing combination of const-declarations and destructuring patterns,
// test cases for array/object assignments are not applicable here.
