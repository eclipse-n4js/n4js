/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */



abstract class A {}
class B extends A {}
abstract class C extends B {}
class D extends A {
	constructor(s: string) {
		super();
	}
}

function f(ctor: constructor{A}) {
	// although A is abstract, only concrete types can create subtype of constructor{A} XPECT noerrors -->
	new ctor();
}

// XPECT errors --> "type{A} is not a subtype of constructor{A}." at "A"
f(A);
// XPECT noerrors -->
f(B);
// XPECT errors --> "type{C} is not a subtype of constructor{A}." at "C"
f(C);
// XPECT errors --> "constructor{D} is not a subtype of constructor{A}." at "D"
f(D);


class G<T extends A> {

	m(ctor: constructor{T}){
		// T could have arbitrary constructor function signature XPECT errors --> "Cannot instantiate type variable T." at "ctor"
		new ctor();
	}
}
// this would cause problems above XPECT noerrors -->
new G<D>().m(D);

// XPECT warnings --> "The use of redundant subtypes is discouraged." at "B"
let g: G<union{A,B}>;
// XPECT errors --> "type{A} is not a subtype of constructor{union{A,B}}." at "A"
g.m(A);
// XPECT errors --> "constructor{B} is not a subtype of constructor{union{A,B}}." at "B"
g.m(B);

function h(ctor: constructor{? extends A}) {
	// concrete type could have arbitrary constructor function signature XPECT errors --> "Cannot instantiate ? extends A, because A does not have a @CovariantConstructor." at "ctor"
	new ctor();
}

// this would cause problems above XPECT noerrors -->
h(D);
