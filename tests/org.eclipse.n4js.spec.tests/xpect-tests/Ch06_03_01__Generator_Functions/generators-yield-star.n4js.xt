/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.spec.tests.N4JSSpecTest END_SETUP */

// yield* can have 'null' as return, since 'null()' also is not validated.
function * g3a() {
// XPECT noerrors
	let x = yield * null;
	x;
}

function * g3b() {
// yield has return of type undefined, warning case
// XPECT warnings --> "The type of this expression is undefined, so it will never evaluate to a value other than undefined." at "yield * g3b()"
	let x : string = yield * g3b();
	x;
}

// yield has return
// XPECT noerrors
function * g3c() : Generator<?,?,int> {
	let x = yield g3c();
	x;
}

function * g4() : Generator<?,?,string>{
// yield* has return of type any, error case
// XPECT errors --> "any is not a subtype of string." at "yield * g4()"
	let x : string = yield * g4();
	x;
}

function g5() {
// err
// yield is only allowed in generators
/* XPECT errors ---
"Couldn't resolve reference to IdentifiableElement 'yield'." at "yield"
"no viable alternative at input ';'" at ";"
"yield is a reserved identifier." at "yield"
--- */
	yield *;
}

// yield * may not have a return value
// XPECT noerrors
function * g6() {
	yield *;
}

// yield can provide a return expression using the shorthand form
// XPECT noerrors
function * g7() : int {
	yield * g7();
}

// yield can provide a return expression using the explicit form
// XPECT noerrors
function * g8() : Generator<int, ?, ?> {
	yield  * g7();
}

function *g9a(): Generator<string,string,any> {}
function *g9b() {
    // XPECT noerrors -->
    let x: string = yield* g9a();
    x;
}

function *it0() {
    // XPECT noerrors --> "Array<string> is not a subtype of Generator<? extends any,any,? super any>."
    yield* (["a", "b", "c"]);
}

function *it1() : string {
    // XPECT noerrors --> "Array<string> is not a subtype of Generator<? extends any,any,? super any>."
    yield* (["a", "b", "c"]);
}

function *it2() : Generator<string,int,boolean> {
    // XPECT noerrors --> "Array<string> is not a subtype of Generator<? extends any,any,? super any>."
    yield* (["a", "b", "c"]);
}

function *it3() : Generator<string,int,boolean> {
    // XPECT errors --> "Array<int> is not a structural subtype of Iterable<string>: #iterator failed: {function():Iterator<int>} is not a subtype of {function():Iterator<string>}." at "([1,2,3])"
    yield* ([1,2,3]);
}

function *it4() {
	// XPECT noerrors --> "Array<string> is not a subtype of Generator<? extends any,any,? super any>."
	// infer type from iterable object
	// XPECT type of 'x' --> any
    let x = yield* (["a", "b", "c"]);
    x;
}

function getIt() : Iterable<string> { return null; }
function *itTest() : Generator<string,int,boolean> {
	// infer type from returned iterable object
	// XPECT type of 'i' --> any
    let i = yield* getIt();
    i;
}

function getGO() : Generator<string,int,boolean> { return null; }
function *goTest() : Generator<string,int,boolean> {
	// infer type from returned generator object
	// XPECT type of 'i' --> int
    let i = yield* getGO();
    i;
}
