// Generated by N4JS transpiler; for copyright see original N4JS source file.

(function(System) {
	'use strict';
	System.register([], function($n4Export) {
		var inspectPropertyAsMethod, inspectPropertyAsArray, inspectPropertyAsString, inspectPropertyAsN4Class, inspectAsObject, inspectAsN4Object, inspectAsN4Element, inspectAsN4NamedElement, inspectAsN4Type, inspectAsN4Classifier, inspectAsN4Class, inspectAsN4Interface;
		inspectPropertyAsMethod = function inspectPropertyAsMethod(prop, propName) {
			if (typeof prop === 'undefined') {
				console.log("  -", "test." + propName + " is undefined");
				return;
			}
			if (prop instanceof N4Method) {
				console.log("  -", "test." + propName + " is a N4Method " + (prop).name);
				return;
			}
			if ($instanceof(prop, Function) || typeof prop === 'function') {
				var _str = (new String(prop)).toString();
				if (_str === "function " + propName + "() { [native code] }") {
					console.log("  -", "test." + propName + "  is native function");
				} else {
					var _name = _str;
					_name = _name.substring('function '.length);
					_name = _name.substring(0, _name.indexOf('('));
					console.log("  -", "test." + propName + " is a function " + _name);
				}
			} else {
				console.log("  -", "test." + propName + " is a" + typeof prop);
			}
		};
		inspectPropertyAsArray = function inspectPropertyAsArray(prop, name) {
			if (typeof prop === 'undefined') {
				console.log("  -", "test." + name + " is undefined");
				return;
			}
			if ($instanceof(prop, Array) === false) {
				console.log("  -", "test." + name + " is not array");
				return;
			}
			var arr = prop;
			if (arr.length > 0) {
				arr.forEach(function(a, index) {
					if (a instanceof N4NamedElement) {
						console.log("    ", "test." + name + "[" + index + "] is " + (a).name);
					} else if (a instanceof N4Annotation) {
						console.log("    ", "test." + name + "[" + index + "] is N4Annotation " + (a).name);
					} else {
						console.log("    ", "test." + name + "[" + index + "] is not unknown");
					}
				});
			} else {
				console.log("  -", "test." + name + " is empty");
			}
		};
		inspectPropertyAsString = function inspectPropertyAsString(prop, name) {
			var propTypeof = typeof prop;
			if (propTypeof === 'undefined') {
				console.log("  -", "test." + name + " is undefined");
				return;
			}
			if (propTypeof === 'string') {
				console.log("  -", "test." + name + " is a string " + prop);
				return;
			}
			console.log("  -", "test." + name + " is not a string, it is " + propTypeof);
		};
		inspectPropertyAsN4Class = function inspectPropertyAsN4Class(prop, name) {
			if (typeof prop === 'undefined') {
				console.log("  -", "test." + name + " is undefined");
				return;
			}
			if (prop instanceof N4Class) {
				console.log("  -", "test." + name + " is an N4Class " + (prop).name);
			}
			console.log("  -", "test." + name + " is not an N4Class" + prop);
		};
		inspectAsObject = function inspectAsObject(test) {
			if ($instanceof(test, Object) === false) {
				console.log(" =", "test object is not an Object");
				return;
			}
			console.log(" =", "inspect test as Object");
			var _test = test;
			if (_test['prototype'] !== 'undefined') {
				var _constructor = _test['prototype'];
				if (typeof _constructor === 'object') {
					console.log("  -", "test.prototype is object :: ", _constructor);
				} else {
					console.log("  -", "test.prototype is not an object", typeof _constructor);
				}
			} else {
				console.log("  -", "test.prototype is undefined)");
			}
			inspectPropertyAsMethod(_test.hasOwnProperty, "hasOwnProperty");
			inspectPropertyAsMethod(_test.isPrototypeOf, "isPrototypeOf");
			inspectPropertyAsMethod(_test.propertyIsEnumerable, "propertyIsEnumerable");
			inspectPropertyAsMethod(_test.toLocaleString, "toLocaleString");
			inspectPropertyAsMethod(_test.toString, "toString");
			inspectPropertyAsMethod(_test.valueOf, "valueOf");
		};
		$n4Export('inspectAsObject', inspectAsObject);
		inspectAsN4Object = function inspectAsN4Object(test) {
			if (test instanceof N4Object === false) {
				console.log(" =", "test is not instance of N4Object");
				return;
			}
			console.log(" =", "inspect test as N4Obejct");
			var _test = test;
			if ((_test.constructor).hasOwnProperty('n4type')) {
				inspectPropertyAsN4Class(_test.constructor.n4type, 'n4type (static)');
			} else {
				console.log("  -", "test.constructor does not have own property n4type");
			}
		};
		$n4Export('inspectAsN4Object', inspectAsN4Object);
		inspectAsN4Element = function inspectAsN4Element(test) {
			if (test instanceof N4Element === false) {
				console.log(" =", "test is not instance of N4Element");
				return;
			}
			console.log(" =", "inspect test as N4Element");
			var _test = test;
			if (_test.hasOwnProperty('origin')) {
				inspectPropertyAsString(_test.origin, "origin");
			} else {
				console.log("  -", "test.name does not own property of origin");
			}
			inspectPropertyAsArray(_test.annotations, 'annotations');
			if (typeof _test.allAnnotations !== 'undefined') {
				inspectPropertyAsMethod(_test.allAnnotations, 'allAnnotations');
			} else {
				console.log("  -", "test.allAnnotations is undefined");
			}
			if (typeof _test.anyAnnotation !== 'undefined') {
				inspectPropertyAsMethod(_test.allAnnotations, 'anyAnnotation');
			} else {
				console.log("  -", "test.anyAnnotation is undefined");
			}
		};
		$n4Export('inspectAsN4Element', inspectAsN4Element);
		inspectAsN4NamedElement = function inspectAsN4NamedElement(test) {
			if (test instanceof N4NamedElement === false) {
				console.log("  =", "tested entity is not instance of N4NamedElement");
				return;
			}
			console.log(" =", "inspect test as N4NamedElement");
			var _test = test;
			if (_test.hasOwnProperty('name')) {
				inspectPropertyAsString(_test.name, "name");
			} else {
				console.log("  -", "test.name is not  own property of test");
			}
		};
		$n4Export('inspectAsN4NamedElement', inspectAsN4NamedElement);
		inspectAsN4Type = function inspectAsN4Type(test) {
			if (test instanceof N4Type === false) {
				console.log("  =", "tested entity is not instance of N4Type");
				return;
			}
			console.log(" =", "inspect test as N4Type");
			var _test = test;
			var _testCtor = _test.__proto__.constructor;
			if (_test.hasOwnProperty('fqn')) {
				inspectPropertyAsString(_test.fqn, "fqn");
			} else {
				console.log("  -", "test.fqn is not own property of test");
			}
			inspectPropertyAsMethod(_testCtor.of, 'of');
		};
		$n4Export('inspectAsN4Type', inspectAsN4Type);
		inspectAsN4Classifier = function inspectAsN4Classifier(test) {
			if (test instanceof N4Classifier === false) {
				console.log("  =", "tested entity is not instance of N4Classifier");
				return;
			}
			console.log(" =", "inspect test as N4Classifier");
			var _test = test;
			var _testCtor = _test.__proto__.constructor;
			inspectPropertyAsMethod(_testCtor, 'test.constructor');
			inspectPropertyAsArray(_test.allImplementedInterfaces, 'allImplementedInterfaces');
			inspectPropertyAsMethod(_test.dataFields, 'dataFields');
			inspectPropertyAsMethod(_test.dataFieldsWithAnnotation, 'dataFieldsWithAnnotation');
			inspectPropertyAsMethod(_test.members, 'members');
			inspectPropertyAsMethod(_test.membersWithAnnotation, 'membersWithAnnotation');
			inspectPropertyAsMethod(_test.methods, 'methods');
			inspectPropertyAsMethod(_test.methodsWithAnnotation, 'methodsWithAnnotation');
			if (_test.hasOwnProperty('n4superType')) {
				inspectPropertyAsN4Class(_test.n4superType, 'n4superType');
			} else {
				console.log("  -", "test.n4superType is not own property of test");
			}
			inspectPropertyAsArray((test)["ownedMembers"], 'ownedMembers');
			inspectPropertyAsArray((test)["consumedMembers"], 'consumedMembers');
		};
		$n4Export('inspectAsN4Classifier', inspectAsN4Classifier);
		inspectAsN4Class = function inspectAsN4Class(test) {
			if (test instanceof N4Class === false) {
				console.log(" =", "tested entity is not instance of N4Class");
				return;
			}
			console.log(" =", "inspect test as N4Class");
			var _test = test;
			console.log("  -", "test is a class ::", _test.isClass === true && _test.isEnum === false && _test.isInterface === false);
		};
		$n4Export('inspectAsN4Class', inspectAsN4Class);
		inspectAsN4Interface = function inspectAsN4Interface(test) {
			if (test instanceof N4Interface === false) {
				console.log(" =", "tested entity is not instance of N4Interface");
				return;
			}
			console.log(" =", "inspect test as N4Interface");
			var _test = test;
			console.log("  -", "test is a class ::", _test.isClass === false && _test.isEnum === false && _test.isInterface === false);
		};
		$n4Export('inspectAsN4Interface', inspectAsN4Interface);
		return {
			setters: [],
			execute: function() {}
		};
	});
})(typeof module !== 'undefined' && module.exports ? require('n4js-node').System(require, module) : System);
//# sourceMappingURL=N4Inspection.map
