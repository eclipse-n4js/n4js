// Generated by N4JS transpiler; for copyright see original N4JS source file.

(function(System) {
	'use strict';
	System.register([], function($n4Export) {
		var A, B, Cls, Cls2, createAnother, x, y;
		A = function A() {};
		B = function B() {
			A.prototype.constructor.call(this);
		};
		Cls = function Cls(p) {};
		Cls2 = function Cls2(p) {
			Cls.prototype.constructor.call(this, null);
		};
		createAnother = function createAnother(value, p) {
			let ctor = value.constructor;
			return new ctor(p);
		};
		return {
			setters: [],
			execute: function() {
				$makeClass(A, N4Object, [], {}, {}, function(instanceProto, staticProto) {
					var metaClass = new N4Class({
						name: 'A',
						origin: 'org.eclipse.n4js.spec.tests',
						fqn: 'Ch05_02_02_03__CovariantConstructors.CovariantConstructors_useCase1.A',
						n4superType: N4Object.n4type,
						allImplementedInterfaces: [],
						ownedMembers: [],
						consumedMembers: [],
						annotations: []
					});
					return metaClass;
				});
				$makeClass(B, A, [], {}, {}, function(instanceProto, staticProto) {
					var metaClass = new N4Class({
						name: 'B',
						origin: 'org.eclipse.n4js.spec.tests',
						fqn: 'Ch05_02_02_03__CovariantConstructors.CovariantConstructors_useCase1.B',
						n4superType: A.n4type,
						allImplementedInterfaces: [],
						ownedMembers: [],
						consumedMembers: [],
						annotations: []
					});
					return metaClass;
				});
				Object.defineProperty(B, '$di', {
					value: {
						superType: A,
						fieldsInjectedTypes: []
					}
				});
				$makeClass(Cls, N4Object, [], {}, {}, function(instanceProto, staticProto) {
					var metaClass = new N4Class({
						name: 'Cls',
						origin: 'org.eclipse.n4js.spec.tests',
						fqn: 'Ch05_02_02_03__CovariantConstructors.CovariantConstructors_useCase1.Cls',
						n4superType: N4Object.n4type,
						allImplementedInterfaces: [],
						ownedMembers: [
							new N4Method({
								name: 'constructor',
								isStatic: false,
								jsFunction: instanceProto['constructor'],
								annotations: []
							})
						],
						consumedMembers: [],
						annotations: []
					});
					return metaClass;
				});
				$makeClass(Cls2, Cls, [], {}, {}, function(instanceProto, staticProto) {
					var metaClass = new N4Class({
						name: 'Cls2',
						origin: 'org.eclipse.n4js.spec.tests',
						fqn: 'Ch05_02_02_03__CovariantConstructors.CovariantConstructors_useCase1.Cls2',
						n4superType: Cls.n4type,
						allImplementedInterfaces: [],
						ownedMembers: [
							new N4Method({
								name: 'constructor',
								isStatic: false,
								jsFunction: instanceProto['constructor'],
								annotations: []
							})
						],
						consumedMembers: [],
						annotations: []
					});
					return metaClass;
				});
				Object.defineProperty(Cls2, '$di', {
					value: {
						superType: Cls,
						fieldsInjectedTypes: []
					}
				});
				x = new Cls2(new A());
				y = createAnother(x, new B());
			}
		};
	});
})(typeof module !== 'undefined' && module.exports ? require('n4js-node').System(require, module) : System);
//# sourceMappingURL=CovariantConstructors_useCase1.n4js.map
