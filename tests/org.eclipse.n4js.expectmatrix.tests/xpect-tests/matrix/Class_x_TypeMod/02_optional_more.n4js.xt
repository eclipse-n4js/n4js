/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP  */

/////////////////////////
// Optional parameters //
/////////////////////////

class A {
	public x : number;
	y : number;

	// IDEBUG-188 in ctor: all parameters after an optional one are optional
	/* XPECT warnings ---
	"This parameter is changed to the default parameter 'y=undefined' since it follows a default parameter." at "y : number"
	"This parameter is changed to the default parameter 'z=undefined' since it follows a default parameter." at "z : number"
	---*/
	public constructor (@Spec spec : ~i~this=undefined, y : number, z : number) {
	}

	// IDEBUG-188 in method: all parameters after an optional one are optional
	/* XPECT warnings ---
	   "This parameter is changed to the default parameter 'w=undefined' since it follows a default parameter." at "w : string"
	   "This parameter is changed to the default parameter 'z=undefined' since it follows a default parameter." at "z : number"
	 ---*/
	 public f (b : boolean=undefined, z : number, w : string) : union{string,boolean} {
		if (b !== undefined) {
			return b;
		}
		else return "nope";
	}
};

class AC {
	public x : number;
	y : number;

	public constructor (@Spec spec : ~i~this=undefined, y : number=undefined, z : number=undefined) {
	}

	public f (b : boolean=undefined, z : number=undefined, w : string=undefined) : union{string,boolean} {
		if (b !== undefined) {
			return b;
		}
		else return "nope";
	}
};

// no arguments XPECT noerrors -->
var a0 : A = new A();

// no arguments XPECT noerrors -->
var ac0 : AC = new AC();

// IDEBUG-188 too few arguments XPECT noerrors -->
var a2 : AC = new AC({x: 1}, 2);

// wrong type of some arguments XPECT errors --> "string is not a subtype of number." at ""ff""
var a3 : AC = new AC({x: 1},2,"ff");

// no arguments XPECT noerrors -->
a0.f();

// no arguments XPECT noerrors -->
ac0.f();

// IDEBUG-188 not enough arguments XPECT noerrors -->
ac0.f(true);

// IDEBUG-188  argument in wrong place XPECT errors --> "int is not a subtype of boolean." at "5"
ac0.f(5);

// good arguments XPECT noerrors -->
ac0.f(true, 5, "F");
