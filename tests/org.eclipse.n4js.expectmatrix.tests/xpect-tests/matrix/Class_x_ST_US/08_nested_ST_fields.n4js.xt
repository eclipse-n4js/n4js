/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP  */

///////////////////////////////
// Nested: structural fields //
///////////////////////////////

class C {
	public n : int;
	public foo () : void {};
}

class G {
	public field : ~~C;
	public struct : ~C;
}

var c_nom : C;
var c_str : ~C;
var c_fld : ~~C;
function bar () : void {};

var ol_c_str = { n: 10, foo: bar }
var c_str_ol : ~C;
// XPECT noerrors -->
c_str_ol = ol_c_str;
// method foo is not writeable XPECT errors -->"~C is not a structural subtype of ~Object with { n: int; foo: {function():void} }: missing structural field foo." at "c_str_ol"
ol_c_str = c_str_ol;


var ol_c_str1 = { n: 10, foo() {} };
// XPECT noerrors -->
ol_c_str1 = c_str_ol;


// Remark: the following tests illustrates a contravariance problem, which is the foundation for the whole test suite:
// XPECT type of ol --> ~Object with { field: C; struct: C }
var ol = {field: c_nom, struct: c_nom}
// XPECT errors --> "~Object with { field: C; struct: C } is not a structural subtype of ~G: field failed: C is not equal to ~~C and 1 more problems." at "ol"
var g1berr : ~G = ol;
/*
   Explanation:
	typeof ol: ~Object with {C field,C struct} // and not ~Object with {~~C ffield,~C struct}!!
	==> e.g., assigning {n:10} to ol.field would lead to an error (because ~~C not subtype of C)!

	That means: most of the following assignments will fail because of that. Only if the inferred type of the right hand side actually is a

	the assignment works.

*/
/*
   UPDATE (as of IDE-1140):
	the behavior has changed *if* there exists a type expectation for the object literal: in that case the expected type is used when inferring
	the type of the object literal's fields.
	This fixes all the following original test cases (because they use variable declarations with an explicitly declared type, so we have a type expectation).
*/

// full object literal assignment XPECT noerrors -->
var g1a : ~G = {field: {n: 3}, struct: {n:4, foo: function (): void {}}};

// this works because the ol of the rhs has explicitly declared the correct types XPECT noerrors -->
var g1b : ~G = {~~C field: c_nom, ~C struct: c_nom};

// XPECT noerrors -->
var g1bok : ~G = {field: c_fld, ~C struct: c_str};

// type of rhs.struct is C, not ~C XPECT noerrors -->
var g1b1 : ~G = {field: {n: 3}, struct: c_nom};

// type of rhs.field is C, not ~~C XPECT noerrors -->
var g1b2 : ~G = {field: c_nom, struct: {n: 3, foo: function () : void {} }};

// type of rhs.field is C, not ~~C XPECT noerrors -->
var g1b3 : ~G = {field: c_nom, struct: {n: 3, foo: bar }};

// foo in struct is writeable XPECT noerrors -->
var g1b3OK : ~G = {field: c_fld, struct: {n: 3, foo: bar }};


// type of rhs.field is ~C, not ~~C XPECT noerrors -->
var g1c : ~G = {field: c_str, struct: c_str};

// XPECT noerrors -->
var g1c1 : ~G = {field: {n: 3}, struct: c_str};

// XPECT noerrors -->
var g1c3 : ~G = {field: c_str, struct: {n: 3, foo: bar }};



/*
   UPDATE (as of IDE-1140), continued:
	Now we simulate the original issue by using variable declarations *without* a declaredTypeRef
	(causing exactly the originally expected errors that appeared before in the above cases):
*/

var g1a_ol = {field: {n: 3}, struct: {n:4, foo: function (): void {}}};
// full object literal assignment XPECT errors -->"~Object with { field: ~Object with { n: int }; struct: ~Object with { n: int; foo: {function():void} } } is not a structural subtype of ~G: struct failed: ~Object with { n: int; foo: {function():void} } is not equal to ~C." at "g1a_ol"
var g1a_check : ~G = g1a_ol;

var g1b_ol = {~~C field: c_nom, ~C struct: c_nom};
// this works because the ol of the rhs has explicitly declared the correct types XPECT noerrors -->
var g1b_check : ~G = g1b_ol;

var g1bok_ol = {field: c_fld, ~C struct: c_str};
// XPECT noerrors -->
var g1bok_check : ~G = g1bok_ol;

var g1b1_ol = {field: {n: 3}, struct: c_nom};
// type of rhs.struct is C, not ~C XPECT errors -->"~Object with { field: ~Object with { n: int }; struct: C } is not a structural subtype of ~G: struct failed: C is not equal to ~C." at "g1b1_ol"
var g1b1_check : ~G = g1b1_ol;

var g1b2_ol = {field: c_nom, struct: {n: 3, foo: function () : void {} }};
// type of rhs.field is C, not ~~C XPECT errors -->"~Object with { field: C; struct: ~Object with { n: int; foo: {function():void} } } is not a structural subtype of ~G: field failed: C is not equal to ~~C and 1 more problems." at "g1b2_ol"
var g1b2_check : ~G = g1b2_ol;

var g1b3_ol = {field: c_nom, struct: {n: 3, foo: bar }};
// type of rhs.field is C, not ~~C XPECT errors -->"~Object with { field: C; struct: ~Object with { n: int; foo: {function():void} } } is not a structural subtype of ~G: field failed: C is not equal to ~~C and 1 more problems." at "g1b3_ol"
var g1b3_check : ~G = g1b3_ol;

var g1b3OK_ol = {field: c_fld, struct: {n: 3, foo: bar }};
// foo in struct is writeable XPECT errors -->"~Object with { field: ~~C; struct: ~Object with { n: int; foo: {function():void} } } is not a structural subtype of ~G: struct failed: ~Object with { n: int; foo: {function():void} } is not equal to ~C." at "g1b3OK_ol"
var g1b3OK_check : ~G = g1b3OK_ol;


var g1c_ol = {field: c_str, struct: c_str};
// type of rhs.field is ~C, not ~~C XPECT errors -->"~Object with { field: ~C; struct: ~C } is not a structural subtype of ~G: field failed: ~C is not equal to ~~C." at "g1c_ol"
var g1c_check : ~G = g1c_ol;

var g1c1_ol = {field: {n: 3}, struct: c_str};
// XPECT noerrors -->
var g1c1_check : ~G = g1c1_ol;

var g1c3_ol = {field: c_str, struct: {n: 3, foo: bar }};
// XPECT errors -->"~Object with { field: ~C; struct: ~Object with { n: int; foo: {function():void} } } is not a structural subtype of ~G: field failed: ~C is not equal to ~~C and 1 more problems." at "g1c3_ol"
var g1c3_check : ~G = g1c3_ol;
