/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP  */

////////////////////////////
// Higher-order functions //
////////////////////////////

function foo (f : {function (number) : number}) : number {
	return f(5);
}

// lambda as a parameter XPECT noerrors -->
foo(n => {return n+6});

// IDE-1037 lambda as a parameter, wrong return XPECT errors --> "string is not a subtype of number." at ""hello""
foo(n => {return "hello"});

// IDE-1037 lambda as a parameter, simpler syntax XPECT noerrors -->
foo(n => n+6);

// IDE-1037 lambda as a parameter, simpler syntax XPECT errors -->"union{number,string} is not a subtype of number." at "n+6"
foo((n : any) => n+6);

// IDE-1037 lambda as a parameter, simpler syntax XPECT noerrors -->"string is not a subtype of number." at "n+6"
foo((n : number) => n+6);




function bar1 () : {function (number) : number} {
	// IDE-2140, IDE-1037 lambda as return, wrong syntax XPECT noerrors -->
	// this is compiled to "returnn=>..."
	return n=>{return n+6};
}

function bar2 () : {function (number) : number} {
	// IDE-2140, IDEBUG-177 lambda as return, good syntax XPECT errors -->"{function(number):any} is not a subtype of {function(number):number}." at "( (n : number) => { return n+6 } )"
	return ( (n : number) => { return n+6 } );
}

function bar3 () : {function (number) : number} {
	// IDE-2140, IDE-1037 lambda as return, simpler syntax XPECT noerrors -->
	return n=>n+6;
}

function bar4 () : {function (number) : number} {
	// lambda as return, wrong return XPECT errors --> "string is not a subtype of number." at ""hello""
	return n=>{return "hello"};
}




function baz (g : {function (number) : string}) : {function (number) : string} {
	return s=>{return g(s)};
}

// lambda as return & parameter XPECT noerrors -->
baz( n => { return ""+n })(5);

// IDE-1037 lambda as return & parameter, simple syntax XPECT noerrors -->
baz( n => ""+n )(6);
