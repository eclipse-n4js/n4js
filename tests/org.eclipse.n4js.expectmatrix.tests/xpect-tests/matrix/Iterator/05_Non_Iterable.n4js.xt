/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP  */

//////////////////////////////
// Iterable vs not iterable //
//////////////////////////////


var arr : Array<string> = [];
// Array is iterable XPECT noerrors -->
var iArr = arr[Symbol.iterator]();

var obj : Object = { a: "a", b: "b", c: function () {} };
// Object is iterable XPECT noerrors -->
var iObj = obj[Symbol.iterator]();

var str : String = new String("abcdefg");
// XPECT noerrors -->
var iStr = str[Symbol.iterator]();

class A implements Iterable<number> {
	@Override
	public [Symbol.iterator]() : Iterator<number> { return null; }
}

var a : A = new A();
// A is iterable XPECT noerrors -->
var iA = a[Symbol.iterator]();

class B {}

var b : B = new B();
// B is not iterable XPECT errors --> "Access of property Symbol.iterator only allowed for instances of Iterable and immediate instances of Object." at "b[Symbol.iterator]"
var iB = b[Symbol.iterator]();

class C {
	public [Symbol.iterator]() : Iterator<number> { return null; }
}

var c : C = new C();
// C has the property but cannot access it bc C is not iterable XPECT errors --> "Access of property Symbol.iterator only allowed for instances of Iterable and immediate instances of Object." at "c[Symbol.iterator]"
var iC = c[Symbol.iterator]();
