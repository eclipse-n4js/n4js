/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP  */

// Class with a type variable but non-generic iterator

class A<T> implements Iterable<string> {
	storage : Array<string>;
	t : T;

	public constructor (st : Array<string>, t : T) {
		this.storage = st;
		this.t = t;
	}

	@Override
	public [Symbol.iterator]() : Iterator<string> { return new B<T>(this.storage, this.t); }
}

class B<T> implements Iterator<string> {
	storage : Array<string>;
	index : number;
	t : T;

	public constructor (st : Array<string>, t : T) {
		this.storage = st;
		this.index = 0;
		this.t = t;
	}

	// LangSpec says in 4.7.10 "Iterator Interface":
	// "The Interface IteratorEntry was introduced mainly to work around IDEBUG-273;
	//  after solveing this bug, this interface could be removed..."
	@Override
	public next () : IteratorEntry<string> {
		if (this.storage[this.index] === undefined) {
			return {done: true};
		}
		this.index++;
		return { done: false, value: this.storage[this.index-1]+" "+this.t };
	}
}

var a : A<number> = new A<number>(["a","b","c","d"], 4);
var iA = a[Symbol.iterator]();

console.log(iA.next());
console.log(iA.next());
console.log(iA.next());
console.log(iA.next());
console.log(iA.next());

/* XPECT output ---
{ done: false, value: 'a 4' }
{ done: false, value: 'b 4' }
{ done: false, value: 'c 4' }
{ done: false, value: 'd 4' }
{ done: true }
--- */
