/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixPendingTest END_SETUP  */

// String based enum as type parameter in generic class

@StringBased enum SBEnum {
	a: "a",
	b: "b"
}

class ~A<T> {
	public t : T;

	public f (tt : T) : T { return tt; }
}

class B<T> {
	public t : T;

	public f (tt : T) : T { return tt; }
}

// structural type for variable XPECT noerrors -->
var a1 : ~A<SBEnum> = { t: SBEnum.a, f: function (tt : SBEnum) : SBEnum {return tt;} };

// structural type for class XPECT noerrors -->
var a2 : A<SBEnum> = { t: SBEnum.a, f: function (tt : SBEnum) : SBEnum {return tt;} };

// structural type for variable XPECT noerrors -->
var b1 : ~B<SBEnum> = { t: SBEnum.a, f: function (tt : SBEnum) : SBEnum {return tt;} };

// structural field type for variable, noerrors but XPECT warnings --> "f is not defined in ~~B<SBEnum>; it will not be accessible from b2." at "f"
var b2 : ~~B<SBEnum> = { t: SBEnum.a, f: function (tt : SBEnum) : SBEnum {return tt;} };

// structural field type for variable XPECT noerrors -->
var b3 : ~~B<SBEnum> = { t: SBEnum.a };
