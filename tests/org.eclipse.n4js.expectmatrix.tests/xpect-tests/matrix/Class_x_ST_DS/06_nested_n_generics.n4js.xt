/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixPendingTest END_SETUP  */

///////////////////////
// Nested + Generics //
///////////////////////

// Just a variation on 05

class ~C {
	public n : number;
}

class ~E extends C {}

class ~F extends C {
	public foo () : void {};
}

class ~G<T extends C> {
	public f : ~T;
}

var e : E = {n: 3};
var f1 : F = {n: 3, foo: function (){} };
function bar () {};

// E only has a field.
// full object literal XPECT noerrors -->
var e1 : G<E> = {f: {n:4}};

// partial object literal XPECT noerrors -->
var e2 : G<E> = {f: e};

// F has a field and a method.
// Both F and G are declared structural, there should be no problem. (cf. E)
// full object literal (with function expression) XPECT noerrors -->
var f1a : G<F> = {f: {n:4, foo: function (){}}};

// full object literal (with function) XPECT noerrors -->
var f2 : G<F> = {f: {n:4, foo: bar}};

// partial object literal XPECT noerrors -->
var f3 : G<F> = {f: f1};

// full object literal with incomplete properties (n missing) XPECT errors --> "~Object with { f: ~Object with { foo: {function():void} } } is not a structural subtype of G<F>: f failed: ~Object with { foo: {function():void} } is not equal to F." at "{f: {foo: function () : void {}}}"
var f4 : G<F> = {f: {foo: function () : void {}}};

var fMissingN = {foo: function () : void {}};
// partial object literal with incomplete properties (n missing) XPECT errors --> "~Object with { f: ~Object with { foo: {function():void} } } is not a structural subtype of G<F>: f failed: ~Object with { foo: {function():void} } is not equal to F." at "{f: fMissingN}"
var f5 : G<F> = {f: fMissingN};
