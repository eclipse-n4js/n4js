/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP  */

//////////////////////////////////
// Subtyping with generic types //
// From Example 14              //
//////////////////////////////////

class A {}
class B extends A {}
class B2 extends A {}
class C extends B {}
class D extends C {}

class G<T> {}

function gA (p : G<A>) {} // subtypes of G<A>
function gB (p : G<B>) {} // subtypes of G<B>
function gEx (p : G<?>) {} // subtypes of G<?>
function gExB (p : G<? extends B> ) {} // subtypes of G<? extends B>
function gSupB (p : G<? super B>) {} // subtypes of G<? super B>


// G<A> <: G<B> = false XPECT errors --> "G<A> is not a subtype of G<B>." at "new G<A>()"
gB(new G<A>());

// G<B> <: G<A> = false XPECT errors --> "G<B> is not a subtype of G<A>." at "new G<B>()"
gA(new G<B>());

// G<A> <: G<A> = true XPECT noerrors -->
gA(new G<A>());

// G<A> <: G<?> = true XPECT noerrors -->
gEx(new G<A>());


// G<? extends B> <: G<? extends B> = true (with subtype) XPECT noerrors -->
gExB(new G<C>());

// G<? extends B> <: G<? extends B> = false (with supertype) XPECT errors --> "G<A> is not a subtype of G<? extends B>." at "new G<A>()"
gExB(new G<A>());

// G<? extends B> <: G<? extends B> = false (with any) XPECT errors --> "G<any> is not a subtype of G<? extends B>." at "new G<any>()"
gExB(new G<any>());

// G<? extends B> <: G<? extends B> = true (with undefined) XPECT noerrors -->
gExB(new G<undefined>());


// G<? super B> <: G<? super B> = true (with supertype) XPECT noerrors -->
gSupB(new G<A>());

// G<? super B> <: G<? super B> = false (with subtype) XPECT errors --> "G<C> is not a subtype of G<? super B>." at "new G<C>()"
gSupB(new G<C>());

// G<? super B> <: G<? super B> = true (with any) XPECT noerrors -->
gSupB(new G<any>());

// G<? super B> <: G<? super B> = false (with undefined) XPECT errors --> "G<undefined> is not a subtype of G<? super B>." at "new G<undefined>()"
gSupB(new G<undefined>());


// G<? extends A> <: G<? extends B> = false (B2 extends A) XPECT errors --> "G<B2> is not a subtype of G<? extends B>." at "new G<B2>()"
gExB(new G<B2>());

// G<? extends C> <: G<? extends B> = true (D extends C) XPECT noerrors -->
gExB(new G<D>());

// G<? super A> <: G<? super B> = true XPECT noerrors -->
gSupB(new G<any>());

// G<? super B> <: G<? super A> = false XPECT errors --> "G<C> is not a subtype of G<? super B>." at "new G<C>()"
gSupB(new G<C>());

// G<? extends B> <: G<B> = false (C extends B) XPECT errors --> "G<C> is not a subtype of G<B>." at "new G<C>()"
gB(new G<C>());

// G<B> <: G<? extends B> = true XPECT noerrors -->
gExB(new G<B>());

// G<? super B> <: G<B> = false (A super B) XPECT errors --> "G<A> is not a subtype of G<B>." at "new G<A>()"
gB(new G<A>());

// G<B> <: G<? super B> = true XPECT noerrors -->
gSupB(new G<B>());

// G<? super B> <: G<? extends B> = false (A super B) XPECT errors --> "G<A> is not a subtype of G<? extends B>." at "new G<A>()"
gExB(new G<A>());

// G<? extends B> <: G<? super B> = false (C extends B) XPECT errors --> "G<C> is not a subtype of G<? super B>." at "new G<C>()"
gSupB(new G<C>());


// G<?> <: G<? super B> = false XPECT errors --> "G<B2> is not a subtype of G<? super B>." at "new G<B2>()"
gSupB(new G<B2>());

// G<? super A> <: G<?> = true XPECT noerrors -->
gEx(new G<any>());

// G<?> <: G<? extends B> = false XPECT errors --> "G<B2> is not a subtype of G<? extends B>." at "new G<B2>()"
gExB(new G<B2>());

// G<? extends A> <: G<?> = true XPECT noerrors -->
gEx(new G<undefined>());
