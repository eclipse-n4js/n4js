/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP */

/*
   IDE-2140: If you get a failure here (because the error does no longer show up), then perform the following clean up:
   1) remove all unnecessary casts in all invocations of Object#defineProperty() in this file and all other files in this folder
   2) check for similar situations in other test files in repository "n4js" and in stdlib/OPR
   3) remove this comment and the line "const temp: ...".
 */
// XPECT errors --> "~Object with { value: int } is not a subtype of intersection{PropertyDescriptor,ThisType<any>}." at "{ value: 42 }"
const temp: PropertyDescriptor & ThisType<any> = { value: 42 };

// Object.defineProperty()
// Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty

var o : Object = {}; // Creates a new object

// Example of an object property added with defineProperty with a data property descriptor
// IDE-2140 XPECT warnings --> "Unnecessary cast from 37 to any" at "37 as any"
Object.defineProperty(o, "a", {value : 37 as any,
                               // IDE-2140 XPECT warnings --> "Unnecessary cast from true to boolean" at "true as boolean"
                               writable : true as boolean,
                               // IDE-2140 XPECT warnings --> "Unnecessary cast from true to boolean" at "true as boolean"
                               enumerable : true as boolean,
                               // IDE-2140 XPECT warnings --> "Unnecessary cast from true to boolean" at "true as boolean"
                               configurable : true as boolean});
// 'a' property exists in the o object and its value is 37

console.log(JSON.stringify(o));

// Example of an object property added with defineProperty with an accessor property descriptor
var bValue = 38;
Object.defineProperty(o, "b", {get : function(){ return bValue; },
                               set : function(newValue : number){ bValue = newValue; },
                               // IDE-2140 XPECT warnings --> "Unnecessary cast from true to boolean" at "true as boolean"
                               enumerable : true as boolean,
                               // IDE-2140 XPECT warnings --> "Unnecessary cast from true to boolean" at "true as boolean"
                               configurable : true as boolean});
console.log("38 = " + o["b"]); // 38
// 'b' property exists in the o object and its value is 38
// The value of o.b is now always identical to bValue, unless o.b is redefined

// You cannot try to mix both :
function fail () {
	try {
		// IDE-2140 XPECT warnings --> "Unnecessary cast from 167317762 to any" at "0x9f91102 as any"
		Object.defineProperty(o, "conflict", { value: 0x9f91102 as any, get: function() { return 0xdeadbeef; } });
	}
	catch (e) { console.log((e as Object).toString()); }
}

fail();
// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors

/* XPECT output ---
{"a":37}
38 = 38
TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object>
--- */
