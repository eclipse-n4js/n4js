/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixPendingTest END_SETUP */

// Object.seal()
// Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal

var obj : Object+ = {
    prop: function () {},
    foo: "bar"
  };

// New properties may be added, existing properties may be changed or removed
obj.foo = "baz";
obj.lumpy = "woof";
delete obj.prop;

// IDEBUG-126 XPECT noerrors --> "IDEBUG-126: wrong return value"
var o = Object.seal(obj);

// WARNING "...will always evaluate to false.", yet evaluates to true
console.log("true = " + (o === obj));
console.log("true = " + (Object.isSealed(obj) === true));

// Changing property values on a sealed object still works.
obj.foo = "quux";
console.log(obj);

// But you can't convert data properties to accessors, or vice versa.
function fail1 () {
	try {
		Object.defineProperty(obj, "foo", { get: function() { return "g"; } }); // throws a TypeError
	}
	catch (e) { console.log((e as Object).toString()); }
}

fail1();

// Now any changes, other than to property values, will fail (note: N4JS is now always in strict mode)
try { obj.quaxxor = "the friendly duck"; } catch(e) { console.log((e as Object).toString()); }
try { delete obj.foo; } catch(e) { console.log((e as Object).toString()); }

console.log("unchanged: " + JSON.stringify(obj));

// ...and in strict mode such attempts will throw TypeErrors
function fail2() {
  "use strict";
  try {
  	delete obj.foo; // throws a TypeError
  }
  catch (e) { console.log((e as Object).toString()); }

  try {
	  obj.sparky = "arf"; // throws a TypeError
  }
  catch (e1) { console.log((e1 as Object).toString()); }
}

fail2();

// Attempted additions through Object.defineProperty will also throw
function fail3 () {
	try {
		Object.defineProperty(obj, "ohai", { value: 17 }); // throws a TypeError
	}
	catch (e) { console.log((e as Object).toString());}
}

fail3();

Object.defineProperty(obj, "foo", { value: "eit" }); // changes existing property value
console.log(obj.foo);


/* XPECT output ---
true = true
true = true
{ foo: 'quux', lumpy: 'woof' }
TypeError: Cannot redefine property: foo
TypeError: Cannot add property quaxxor, object is not extensible
TypeError: Cannot delete property 'foo' of #<Object>
unchanged: {"foo":"quux","lumpy":"woof"}
TypeError: Cannot delete property 'foo' of #<Object>
TypeError: Cannot add property sparky, object is not extensible
TypeError: Cannot define property ohai, object is not extensible
eit
--- */
