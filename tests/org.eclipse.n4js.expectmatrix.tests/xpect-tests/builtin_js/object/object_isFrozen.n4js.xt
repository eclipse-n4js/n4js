/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP */

// Object.isFrozen()
// Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen

// A new object is extensible, so it is not frozen.
console.log("0 not frozen = " + (Object.isFrozen({}) === false));

// An empty object which is not extensible is vacuously frozen.
var vacuouslyFrozen : Object = {};
// IDEBUG-124 XPECT noerrors --> "IDEBUG-124: preventExtensions"
Object.preventExtensions(vacuouslyFrozen);
console.log("1 frozen = " + (Object.isFrozen(vacuouslyFrozen) === true));

// A new object with one property is also extensible, ergo not frozen.
var oneProp = { p: 42 };
console.log("2 not frozen = " + (Object.isFrozen(oneProp) === false));

// Preventing extensions to the object still doesn't make it frozen,
// because the property is still configurable (and writable).
// IDEBUG-124 XPECT noerrors --> "IDEBUG-124: preventExtensions"
Object.preventExtensions(oneProp);
console.log("3 not frozen = " + (Object.isFrozen(oneProp) === false));

// ...but then deleting that property makes the object vacuously frozen.
delete oneProp.p;
console.log("4 frozen = " + (Object.isFrozen(oneProp) === true));

// A non-extensible object with a non-writable but still configurable property is not frozen.
var nonWritable = { e: "plep" };
// IDEBUG-124 XPECT noerrors --> "IDEBUG-124: preventExtensions"
Object.preventExtensions(nonWritable);
Object.defineProperty(nonWritable, "e", { writable: false }); // make non-writable
console.log("5 not frozen = " + (Object.isFrozen(nonWritable) === false));

// Changing that property to non-configurable then makes the object frozen.
Object.defineProperty(nonWritable, "e", { configurable: false }); // make non-configurable
console.log("6 frozen = " + (Object.isFrozen(nonWritable) === true));

// A non-extensible object with a non-configurable but still writable property also isn't frozen.
var nonConfigurable = { release: "the kraken!" };
// IDEBUG-124 XPECT noerrors --> "IDEBUG-124: preventExtensions"
Object.preventExtensions(nonConfigurable);
Object.defineProperty(nonConfigurable, "release", { configurable: false });
console.log("7 not frozen = " + (Object.isFrozen(nonConfigurable) === false));

// Changing that property to non-writable then makes the object frozen.
Object.defineProperty(nonConfigurable, "release", { writable: false });
console.log("8 frozen = " + (Object.isFrozen(nonConfigurable) === true));

// A non-extensible object with a configurable accessor property isn't frozen.
var accessor = { get food() { return "yum"; } };
// IDEBUG-124 XPECT noerrors --> "IDEBUG-124: preventExtensions"
Object.preventExtensions(accessor);
console.log("9 not frozen = " + (Object.isFrozen(accessor) === false));

// ...but make that property non-configurable and it becomes frozen.
Object.defineProperty(accessor, "food", { configurable: false });
console.log("10 frozen = " + (Object.isFrozen(accessor) === true));

// But the easiest way for an object to be frozen is if Object.freeze has been called on it.
var frozen = { 1: 81 };
console.log("11 not frozen = " + (Object.isFrozen(frozen) === false));
Object.freeze(frozen);
console.log("12 frozen = " + (Object.isFrozen(frozen) === true));

// By definition, a frozen object is non-extensible.
console.log("13 not frozen = " + (Object.isExtensible(frozen) === false));

// Also by definition, a frozen object is sealed.
console.log("14 frozen = " + (Object.isSealed(frozen) === true));

/* XPECT output ---
0 not frozen = true
1 frozen = true
2 not frozen = true
3 not frozen = true
4 frozen = true
5 not frozen = true
6 frozen = true
7 not frozen = true
8 frozen = true
9 not frozen = true
10 frozen = true
11 not frozen = true
12 frozen = true
13 not frozen = true
14 frozen = true
--- */
