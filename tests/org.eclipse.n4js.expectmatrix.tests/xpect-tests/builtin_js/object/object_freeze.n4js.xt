/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.expectmatrix.tests.N4JSExpectMatrixTest END_SETUP */

// Object.freeze()
// Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze

var obj : Object+ = {
  prop: function (){},
  foo: "bar"
};

// New properties may be added, existing properties may be changed or removed
obj.foo = "baz";
obj.lumpy = "woof";
delete obj.prop;

// IDEBUG-126 XPECT noerrors --> "IDEBUG-126: wrong return value"
var o = Object.freeze(obj);
console.log("returned: " + JSON.stringify(o));

console.log("frozen = " + (Object.isFrozen(obj) === true));

// Now any changes will fail (note: N4JS is now always in strict mode)
try { obj.foo = "quux"; } catch(e) { console.log((e as Object).toString()); }
try { obj.quaxxor = "the friendly duck"; } catch(e) { console.log((e as Object).toString()); }

console.log("unchanged: " + JSON.stringify(obj));

// ...and in strict mode such attempts will throw TypeErrors
function fail(){
  "use strict";
  try {
  	obj.foo = "sparky"; // throws a TypeError
  }
  catch (e) { console.log((e as Object).toString()); }

  try {
  	obj.sparky = "arf"; // throws a TypeError
  }
  catch (e1) { console.log((e1 as Object).toString()); }
}

// Attempted changes through Object.defineProperty will also throw TypeError
function attemptChanges() {
	try {
		Object.defineProperty(obj, "ohai", { value: 17 }); // throws a TypeError
	}
	catch (e) { console.log((e as Object).toString());
	}
	try {
		Object.defineProperty(obj, "foo", { value: "eit" }); // throws a TypeError
	}
	catch (e1) { console.log((e1 as Object).toString());}
	}

fail();
attemptChanges();

/* XPECT output ---
returned: {"foo":"baz","lumpy":"woof"}
frozen = true
TypeError: Cannot assign to read only property 'foo' of object '#<Object>'
TypeError: Cannot add property quaxxor, object is not extensible
unchanged: {"foo":"baz","lumpy":"woof"}
TypeError: Cannot assign to read only property 'foo' of object '#<Object>'
TypeError: Cannot add property sparky, object is not extensible
TypeError: Cannot define property ohai, object is not extensible
TypeError: Cannot redefine property: foo
--- */
