/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
 
class A#1 {}
class A#2 {}

export public function notAMigration() {}

@Migration
export public function noInputNoOutput() {} // 0 0 

@Migration
export public function singleInputNoOutput(i : A#1) {} // 1 0 

@Migration
export public function noInputSingleOutput() : A#2 { return null; } // 0 1

@Migration
export public function singleInputSingleOutput(i : A#1) : A#2 { return null; } // 1 1

@Migration
export public function twoInputNoOutput(in1 : A#1, in2 : A#1) { return null; } // 2 0 

@Migration
export public function noInputTwoOutput() : ~Object with {out1 : A#2, out2 : A#2} { return null; } // 0 2

@Migration
export public function twoInputSingleOutput(in1 : A#2, in2 : A#2) : A#2 { return null; } // 2 1

@Migration
export public function singleInputTwoOutput(in1 : A#1) : ~Object with {out1 : A#2, out2 : A#2} { return null; } // 1 2

@Migration
export public function twoInputTwoOutput(in1 : A#1, in2 : A#1) : ~Object with {out1 : A#2, out2 : A#2} { return null; } // 2 2

@Migration
export public function primitiveInputNoOutput(p : int) {}

@Migration
export public function noInputPrimitiveOutput() : int { return 1; }

@Migration
export public function structuralInputNoOutput(s : ~Object with {a: int}) {}

@Migration
export public function noInputMethodStructuralOutput() : ~Object with {m() : int} { return null; }

@Migration 
export public function noInputNestedStructuralOutput() : ~Object with {s : ~Object with {s : int}} { return null; }

@Migration(3,4)
export public function explicitMigration1(a1 : int) : string { return ""; }

@Migration(5,6)
export public function explicitMigration2(a1 : A#2) : A#3 { return a1; }