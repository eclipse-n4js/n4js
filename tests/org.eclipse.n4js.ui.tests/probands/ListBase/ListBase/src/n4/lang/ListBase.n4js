/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


import { CollectionChangedEvent, NewPosition }  from 'n4/events/CollectionChangedEvent';
import { Event }                       from 'n4/events/Event';
import { ChangeEvent }                 from 'n4/events/ChangeEvent';
import { ConstraintCollectEvent }      from 'n4/events/ConstraintCollectEvent';
import { CollectionChangeType }        from "n4/events/CollectionChangeType";
import { CollectionChangedItemsEntry } from "n4/events/CollectionChangedItemsEntry";
import { PropertyChangedEvent }        from "n4/events/PropertyChangedEvent";
import { DataObject }                  from 'n4/model/DataObject';
import { Change }                      from 'n4/model/persistence/Change';
import {Â ChangeType }                  from 'n4/model/persistence/ChangeType';
import * as ON from "n4/model/internal/ObservableHelper";
import { _ }                           from 'underscore/underscore';
class ObservableHelper{
	static callListenersWithEvent(p1 : any, p2 : any) : void {}
}
class ObservableItem extends IDO {
	_$observable : boolean;
	_$listeners : Array<ChangeBroker>;
}
class ChangeBroker {
	_$list : any;
}
class IDO {
	_$n4ido : boolean;
	id : string;
	_$reference : boolean;
	getID() : string {return this.id;}}
export class ListBase<T extends ObservableItem> {
    public static isList(val : any) : boolean { return null; }
    _$collectable : boolean = true;
    _$isList : boolean = true;
    _$observable : boolean = true;
    items_ : Array<T>;
    public length : number = 0;
    observing : boolean = false;
    _$listeners : Array<{function()}>;
    _$activeChanges : Array<Change> = new Array<Change>(); 
    _$checkForMutableOnly : boolean = void 0; 
    _$trackChanges : boolean = true;
    constructor(spec : ~Object with {items_: Array<T> ; length: number;}) {
	    spec = spec || {Array<T> items_: [], length: 0};
	    this.items_ = spec.items_ || [];
	    this.length = spec.length || 0;
	    this.observing = false;
	    this._$listeners = [];
	    this._$trackChanges = true;
    }
    fireListeners(event : Event, repetition : number=undefined) {
    	var  ce : ChangeEvent;
        if (this.observing && this._$trackChanges && event instanceof ChangeEvent) {
            ce = event as ChangeEvent;
            this._$trackChange(ce);
        }
        ON.callListenersWithEvent(this, event);
    }
    fireSizeChangedEvent(oldLen : number) {
    	var event : Event;
        if (this.observing && oldLen !== this.length) {
            event = new PropertyChangedEvent({
                propertyName: "length",
                propertyIsReadOnly: false,
                any value: this.length,
                any oldValue: oldLen,
                ignoreAsTrackChange: true,
            	Object source: this,
            	ChangeEvent cause: null,
            	ChangeEvent rootCause: null,
            	selector: ""
            });
            ON.callListenersWithEvent(this, event);
        }
    }
    public size() : number {
    	return this.items_.length;
    }
    public get(index : number) : T {
    	 return this.items_[index];
    }
    public getRange(from : number, to : number) : Array<T> {
    	var tmp : number,  ret : Array<T>;
        if (to < from) { 
            tmp = to;
            to = from;
            from = tmp;
        }
        if (from < 0 || to >= this.size()) {
            ret = null;
        } else {
            ret = [];
            for (tmp = from; tmp <= to; ++tmp) {
                ret.push(this.get(tmp));
            }
        }
        return ret;
    }
    public indexOf(item : T) : number {
    	return _.indexOf(this.items_, item, undefined);
    }
    public push(value : T) : ListBase<T> {
    	var idx : number, oldLen = this.length;
		var valueAny : any = value; 
        if (this._$checkForMutableOnly && true === (valueAny as Object)['_$immutable']) {
            throw new Error("Not allow to insert immutable objects");
        }
        this.items_ = this.items_ || [];
        this.items_.push(value);
        idx = this.items_.length-1;
        this._$setLength(idx+1);
        if (this.observing) {
            this._$observeItem(value);
            this.fireListeners(new CollectionChangedEvent({
                type: CollectionChangeType.ADDED,
                items: [new CollectionChangedItemsEntry({indexOrKey: idx, value: value})],
                NewPosition position: null,
            	Object source: this,
            	ChangeEvent cause: null,
            	ChangeEvent rootCause: null,
            	selector: ""
            }));
            this.fireSizeChangedEvent(oldLen);
        }
        return this;
    }
    public remove(index : number) : T {
    	var  item : T, oldLen = this.length;
        if (this.observing) {
            this._$unobserveItem(this.items_[index]);
            item = this.items_.splice(index, 1, undefined)[0];
            this._$setLength(this.items_.length);
            this.fireListeners(new CollectionChangedEvent({
                type: CollectionChangeType.REMOVED,
                items: [new CollectionChangedItemsEntry({indexOrKey: index, oldValue: item})],
                NewPosition position: null,
            	Object source: this,
            	ChangeEvent cause: null,
            	ChangeEvent rootCause: null,
            	selector: ""
            }));
            this.fireSizeChangedEvent(oldLen);
        } else {
            item = this.items_.splice(index, 1, undefined)[0];
            this._$setLength(this.items_.length);
        }
        return item;
    }
    public clear() {
    	var self = this,
             entries : Array<CollectionChangedItemsEntry> = [];
        if (this.observing) {
           _.each(this.items_, function(item, idx : number=undefined){
               self._$unobserveItem(item, true);
               entries.push(new CollectionChangedItemsEntry({indexOrKey: idx, oldValue: item}));
           });
        }
        this.items_ = [];
        this.length = 0;
        if (this.observing) {
            this.fireListeners(new CollectionChangedEvent({
                type: CollectionChangeType.REMOVED,
                items: entries,
                NewPosition position: null,
            	Object source: this,
            	ChangeEvent cause: null,
            	ChangeEvent rootCause: null,
            	selector: ""
            }));
            this.fireSizeChangedEvent(entries.length);
        }
        var e : Event;
        e.mergeWith(undefined);
    }
    public getByID(itemID : string) : T {
    	 var  ido : T = _.<T>detect(this.items_, function(item : T){
                return (item._$n4ido && item.id === itemID) ||
                        (item._$reference && item.getID() === itemID);
            }) || null;
        return ido;
    }
    public observe() : ListBase<T> {
    	var self = this;
        if (this.observing === false) {
            _.each(this.items_, function(item){
                self._$observeItem(item);
            })
            this.observing = true;
        }
        return this;
    }
    public unobserve() : ListBase<T> {
    	var self = this;
        if (this.observing === true) {
            _.each(this.items_, function(item) {
                self._$unobserveItem(item, true);
            });
            this.observing = false;
            this._$activeChanges = undefined;
        }
        return this;
    }
    setTrackingChanges(track : boolean) {
    	this._$trackChanges = track;
        this._$activeChanges = undefined;
    }
    _$setLength (newLen : number) {
    	 this.length = newLen;
    }
    _$observeItem(item : T) {
    	var isObservingAlready, handler : ChangeBroker, list = this;
        if (item && item._$observable) {
            isObservingAlready = null;
            if (!isObservingAlready) {
                var f = function (e : Event) {
                    var repetition = 0, length = list._$listeners.length,
                         eventClone : ConstraintCollectEvent,
                        isConstraintEvent, isChangedEvent = false;
                    isConstraintEvent = e instanceof ConstraintCollectEvent;
                    if( !isConstraintEvent ) {
                        isChangedEvent = e instanceof ChangeEvent;
                    }
                    if (list.observing) {
                    };
                    handler._$list = this;
                    item._$listeners = item._$listeners || [];
                    item._$listeners.push(handler);
                }
            }
           }
    }
    _$unobserveItem(item : T, withoutMultipleCheck : boolean=undefined) {
    	var list : ListBase<T>, repetition : number = 0;
        list = this;
        if (item && item._$observable) {
            if (withoutMultipleCheck || !_.any(this.items_, function(itm, idx : Object=undefined) {
                return itm === item && 0 !== repetition++;
            })) {
                item._$listeners = _.select(item._$listeners, function(cb : ChangeBroker) {
                    return cb._$list !== list;
                });
            }
                }
    }
    _$trackChange(event : ChangeEvent) {
    	var  changes : Array<Change>, self = this;
        changes = Change.createChangesFromEvent(event);
        if (changes) {
            this._$activeChanges = this._$activeChanges || [];
            _.each(changes, function(change : Change) {
                change.addToExistingChanges(self._$activeChanges);
            });
        }
    }
    _$getCreateOrModifyChanges() : Array<Change> {
    	if (this._$activeChanges)
            return _.select(this._$activeChanges,function(change : Change){
                return ChangeType.CREATED === change.type || ChangeType.MODIFIED === change.type;
            });
        return [];
    }
    _$getDeleteChanges () : Array<Change> {
    	if (this._$activeChanges)
            return _.select(this._$activeChanges,function(change : Change){
                return ChangeType.DELETED === change.type;
            });
        return [];
    }
    _$hasAnyChanges () : boolean {
    	return this._$activeChanges ? 0 !== this._$activeChanges.length : false;
    }
    _$setDeltaRoot() {
    	this._$activeChanges = undefined;
    }
    _$cloned(copiedFrom : DataObject, toMutable : boolean) {
    	this.unobserve();
        if (copiedFrom.observing || toMutable) {
            this.observe();
        }
    }
    @Override
    public toString() : string {
    	var i : number, l : number, out : Array<string> = [];
        for (i = 0, l = this.size(); i < l; ++i) {
            out.push(String(this.get(i)));
        }
        return out.join(", ").slice(0, 50);
    }
}
