/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


// NOTE: intended to be viewed side-by-side with corresponding API file!

import { A } from "Utilities"
import { B } from "Utilities"
import { C } from "Utilities"

/**
 * Some implementation-side text that should be ignored.
 * @apiNote hello
 *          from implementation!
 */
export public class Clazz {
	
	public fieldOK : string;
	public fieldOK_ClazzOther : ClazzOther;
	public fieldOK_B : B;
	// (fieldGONE is gone)
	public fieldWrongType : number;
	public fieldOnlyInImplementation : string;
	protected fieldVisibilityReduced : string;
	
	public methodOK() : void {}
	public methodImplicitVoid() : void {}
	public methodFewerPars(p1 : any) : void {}
	public methodCompliant(p1 : A, p2 : Object) : C {return null;}
	public methodOnlyInImplementation() : void {}
	public methodGetType() : type{ClazzOther} {return null;}
	private methodReducedVisibility() : void {}
	public methodWithSurplusOptionalFparsOnApiSide(p1 : A) : void {}
	public methodWithSurplusOptionalFparsOnImplSide( p1 : A, p2 : B=undefined, p3 : C=undefined) : void {}
}

export public class ClazzOther {}

export public enum Color {
	RED, BLACK, GREEN, BLUE
}

export public interface I {
	public methodOK()
	public methodDefaultImpl() {}
	public methodMissingDefaultImpl()
}

// Test missing type variable
export public class TypeVariableTest1<Other> {}
// Test renamed and upper bound type variable
export public class TypeVariableTest2<Other extends Clazz, Name> {}
// Test renamed and wrongly bound type variable
export public class TypeVariableTest21<Other extends Color, Name> {}

// Test type variable with multiple upper bounds 
export public class TypeVariableTest3<T1 extends Clazz & I, T2 extends Clazz> {}

// test inheritance hierarchy:

export public interface DI {
	public mFromInterfaceInImpl() {}
}
export public class DA implements DI {
	public mFromSuperClassInImpl() {}
}
export public class DB extends DA {
	public method(p : A) : C {return null;}
	// method coming from super class
	// method coming from interface
}
export public class DC extends DB {
	
}
export public class DD extends DC {
	
}
