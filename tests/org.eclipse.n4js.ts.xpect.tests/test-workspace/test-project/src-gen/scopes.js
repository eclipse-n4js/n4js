// Generated by N4JS transpiler; for copyright see original N4JS source file.

import 'n4js-runtime'

class MySuperDuperClass extends N4Object {
	static get n4type() {
		return $getReflectionForClass(this, '["MySuperDuperClass","scopes","test-project"]');
	}
}
const MyRole = {
	[Symbol.hasInstance](instance) {
		return instance && instance.constructor && instance.constructor.n4type && instance.constructor.n4type.allImplementedInterfaces && instance.constructor.n4type.allImplementedInterfaces.indexOf('scopes/MyRole') !== -1;
	},
	get n4type() {
		return $getReflectionForInterface(this, '["MyRole","scopes","test-project"]');
	}
};
const Comparable = {
	[Symbol.hasInstance](instance) {
		return instance && instance.constructor && instance.constructor.n4type && instance.constructor.n4type.allImplementedInterfaces && instance.constructor.n4type.allImplementedInterfaces.indexOf('scopes/Comparable') !== -1;
	},
	get n4type() {
		return $getReflectionForInterface(this, '["Comparable","scopes","test-project"]');
	}
};
const MyInterface = {
	[Symbol.hasInstance](instance) {
		return instance && instance.constructor && instance.constructor.n4type && instance.constructor.n4type.allImplementedInterfaces && instance.constructor.n4type.allImplementedInterfaces.indexOf('scopes/MyInterface') !== -1;
	},
	get n4type() {
		return $getReflectionForInterface(this, '["MyInterface","scopes","test-project"]');
	}
};
function myFunction() {
	return null;
}
class MySuperClass extends MySuperDuperClass {
	constructor() {
		super();
		this.counter = undefined;
		$initFieldsFromInterfaces(this, MySuperClass, undefined, {
			n4type: true
		});
	}
	static get n4type() {
		return $getReflectionForClass(this, '["MySuperClass","scopes","test-project",["f.counter"]]');
	}
	static get $implements() {
		return [
			Comparable
		];
	}
}
//# sourceMappingURL=scopes.map
