/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.ts.tests.resourcedescriptions.TypesResourceDescriptionsPluginTest 

    ResourceSet {
		ThisFile {}
	}
	
	Workspace {
		JavaProject {
			SrcFolder {
				ThisFile {}
			}
		}
	}
	
   END_SETUP 
 */
 
/*
these names are stored in the Xtext Index
XPECT exportedObjects ---
	types::PrimitiveType: any
	types::PrimitiveType: number
	types::PrimitiveType: void
	types::TClass: MyClass
	types::TClass: MySubClass
	types::TClass: MySuperClass
	types::TClass: Storage
	types::TEnum: StorageType
	types::TFunction: filterFunction
	types::TFunction: transformFunction
	types::TInterface: Element
	types::TInterface: List
	types::TInterface: MyInterface
	types::TInterface: Number
	types::TInterface: String
	types::TInterface: Comparable
	types::TInterface: Loadable
	types::TInterface: Persistable
--- */

/*
no names are imported from the global scope 
XPECT importedNames ---
--- */

/*
all references are local, no descriptions necessary
XPECT referenceDescriptions ---
--- */

/* enums */

project enum StorageType {
	FILESYSTEM, 
	DATABASE,
	CLOUD
}

/* primitives */

primitive any {}
primitive void {}
primitive number {}

/* interfaces */

publicInternal interface MyInterface {
	public myMethod1(): any
	public myMethod2(): any
}

public interface String {
	
}

public interface Number {
	
}

public interface Element {
	
}

public interface List<T> {
	
}

public abstract class Storage<E extends Element> {
	private type: StorageType
	
}


/* roles */

publicInternal interface Loadable<E extends Element, S extends Storage<?>/**<E>*/> {
	private stored: Storage
	
	public load(name: String, storage: Storage): Element
}

publicInternal interface Persistable extends Loadable<Element, Storage>, MyInterface {
	public persist(element: Element, storage: Storage): Element;
}

public interface Comparable<T> {
	
	public <U> compareWith(one: T, two: U): number
}


/* classes */

publicInternal class MySuperClass<T extends MyInterface> implements Comparable {
	private static instanceCounter: Number;
	
	protected doStuff(input: T): T;
}

publicInternal class MyClass extends MySuperClass<MyInterface> implements MyInterface {
	public myMethod1(): any;
	
	public myMethod2(): any;
	
	private secretMethod(element: MyInterface, storage: Storage): any;
}

public class MySubClass extends MyClass implements Persistable, Comparable<MyInterface> {
	
}


/* functions */

public function <T, U> filterFunction (input: String, hint: String) : String

project function transformFunction() : any
