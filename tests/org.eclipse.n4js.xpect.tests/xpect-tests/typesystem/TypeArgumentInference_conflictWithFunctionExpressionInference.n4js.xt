/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A {}
class B {}

class G<T> {
	a : T;
}

function <T> f1(p : T, p2 : T, f : {function(G<T>)}) : T {
	return null;
}


<union{A,B}>f1(
	new A(),
	new B(),
	function(param){}
);


f1(
	new A(),
	new B(),
	function(param){} // <-- (1)
);

// The type of the function expression at (1) will be inferred to: {function(G<union{A,B}>)}
// using the expected type.
// Therefore, it is essential that during type argument inference for the generic call
// expression, we do not use this inferred type, because it would lead to an unsolvable
// constraint system: A<:T, B<:T, T=A, T=B (the last two coming from correlating the
// inferred type of the function expression to the type of fpar 'f'; note: T appears at
// an invariant position!).
// Instead, this is the constraint system we want: A<:T, B<:T
