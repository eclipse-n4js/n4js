/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */

class A {}
class B {}
class C {}
class D {}
class E {}

var a : A;
var b : B;
var c : C;
var d : D;
var e : E;


//
// simple case: combining type variables from 3 different sources in a structural member
//
// 1) T_c1 is from the containing class C1
// 2) T_m is from the containing method m()
// 3) T_n is from the structural member itself
//    (which is possible if the structural member is a TStructMethod that is itself generic)
//

class C1<T_c1> {
	public <T_m> m(param : T_m) : ~Object with { <T_n> n(param: T_n): intersection{T_c1,T_m,T_n} } {
		return null;
	}
}

var foo : {function<T>(T):C1<T>};

// X--PECT errors --> "intersection{A,B,C} is not a subtype of string." at "foo(a).m(b).n(c)"
// note: above error message would be better, cf. IDE-1727
// XPECT errors ---
// "C is not a subtype of T_n." at "c"
// "intersection{A,B,T_n} is not a subtype of string." at "foo(a).m(b).n(c)"
// ---
var test11 : string = foo(a).m(b).n(c);

// XPECT type of 'test12' --> intersection{A,B,C}
var test12 = foo(a).m(b).n(c);



//
// nested case: several nested generic structural methods that forward the type argument
//

class C2<T_c2> {
	public <T_m> m(param1 : T_c2, param2 : T_m) : ~Object with {
			<T_m1> m1(T_m, T_m1): ~Object with {
				<T_m2> m2(T_m1, T_m2): ~Object with {
					<T_m3> m3(T_m2, T_m3): T_m3
				}
			}
		} {
			return null;
		}
}

var c2a : C2<A>;

// XPECT noerrors -->
var test21 : E = c2a.m(a,b).m1(b,c).m2(c,d).m3(d,e);

// XPECT type of 'c2a.m(a,b).m1(b,c).m2(c,d).m3(d,e)' --> E
c2a.m(a,b).m1(b,c).m2(c,d).m3(d,e);

c2a.m(a,b).m1(b,c).m2(c,d).m3(
/* cf. IDE-1727 XPECT errors ---
"A is not a subtype of D." at "a"
"E is not a subtype of T_m3." at "e"
--- */
a,e); // note: using 'a' instead of 'd' here!
