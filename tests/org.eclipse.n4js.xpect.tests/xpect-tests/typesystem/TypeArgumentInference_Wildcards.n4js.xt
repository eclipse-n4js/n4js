/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A {}
class B extends A {}
class X {}

class G<T> {}


class C {
	public static <T> m2(p1 : G<T>, p2 : G<T>) {}
	public static <T> m2w(p1 : G<? extends T>, p2 : G<? extends T>) {}
}


var ga : G<A>;
var ga2 : G<A>;
var gb : G<B>;
var gx : G<X>;
var gea : G<? extends A>;
var gea2 : G<? extends A>;
var geb : G<? extends B>;
var gex : G<? extends X>;



//
// trivial case: no wildcards (neither in parameter's type, nor in argument's type)
//

// XPECT noerrors -->
C.<A>m2(ga,ga2);

// XPECT noerrors -->
C.m2(ga,ga2);



//
// wildcards only in argument's type
//

// XPECT errors ---
// "G<? extends A> is not a subtype of G<A>." at "gea"
// "G<? extends A> is not a subtype of G<A>." at "gea2"
// ---
C.<A>m2(gea, gea2); // expect error (same in Java)

// XPECT errors ---
// "G<? extends A> is not a subtype of G<T>." at "gea"
// "G<? extends A> is not a subtype of G<T>." at "gea2"
// ---
C.m2(gea, gea2); // expect error (same in Java)



//
// wildcards only in parameter's type
//

// XPECT noerrors -->
C.<A>m2w(ga, ga2);

// XPECT noerrors -->
C.m2w(ga, ga2);

// XPECT noerrors -->
C.m2w(ga, gb);

// XPECT noerrors -->
C.m2w(ga, gx); // T will be inferred to union{A,X} and both G<A> and G<X> are a subtype of G<? extends union{A,X}>



//
// wildcards both in parameter's type and argument's type
//

// XPECT noerrors -->
C.<A>m2w(gea, gea2); // ok (same in Java)

// XPECT noerrors -->
C.m2w(gea, gea2); // expect noerrors (ok in Java)

// XPECT noerrors -->
C.m2w(gea, geb);

// XPECT noerrors -->
C.m2w(gea, gex); // T will be inferred to union{A,X} and both G<? extends A> and G<? extends X> are a subtype of G<? extends union{A,X}>
