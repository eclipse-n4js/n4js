/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */

// 1) type of an abstract class declaration C must be inferred to type{C} and not constructor{C}.
// 2) it is always possible to call new X() if X is of some type constructor{C}, even if C is declared abstract

abstract class AbstractSoda {
    public abstract drinkEm();
}

class Beer extends AbstractSoda {
    @Override
    public drinkEm() : this{ return this;}
}

class Champagne extends AbstractSoda{

	constructor(bubblesDecayRate : number) {}

    @Override
    public drinkEm() : this{ return this;}
}

function getWasted(beverageClass : constructor{AbstractSoda}) {
	// should be ok:
    var beverage = new beverageClass(); //this is where the problem is
    beverage.drinkEm();
}

// XPECT type of 'abstractSoda'--> type{AbstractSoda}
var abstractSoda = AbstractSoda;
// XPECT type of 'beer' --> constructor{Beer}
var beer = Beer;

var soda : type{AbstractSoda}; // = AbstractSoda;
// XPECT errors --> "type{AbstractSoda} is not a subtype of constructor{AbstractSoda}." at "soda"
getWasted(soda);
// ok
getWasted(beer);
// XPECT errors --> "constructor{Champagne} is not a subtype of constructor{AbstractSoda}." at "Champagne"
getWasted(Champagne);

// XPECT errors --> "Cannot instantiate abstract class AbstractSoda." at "AbstractSoda"
var someSoda = new AbstractSoda();
