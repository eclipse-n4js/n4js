/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A<T> {
	static <T> of(... args : union{T, Array<T>}) : A<T> {
		return null;
	}
}


// explicit binding of type vars:

var exp1 = A.<string>of("hello", ["world"]);
var exp1check : A<string> = exp1;

var exp2 = A.<number>of(42, [21]);
// XPECT errors ---
// "string is not a subtype of union{number,Array<number>}." at ""not""
// "Array<string> is not a subtype of union{number,Array<number>}." at "["good"]"
// ---
var exp3 = A.<number>of("not", ["good"], 21);


// inference:

var inf1 = A.of("hello");	// only one possibility from the union: ok!
var inf1check : A<string> = inf1;

// FIXME InferenceContext the following example is work-in-progress and might change
var inf2 = A.of([""]);		// both possibilities from union viable: may infer to string OR Array<string> OR union{string,Array<string>}
// X--PECT errors --> "A<union{Array<string>,string}> is not a subtype of A<string>." at "inf2"
// X--PECT errors --> "A<Array<string>> is not a subtype of A<string>." at "inf2"
// XPECT noerrors -->
var inf2check : A<string> = inf2;

var inf3 = A.of("hello", ["world"]);	// in 2nd argument: both possibilities from union viable: may infer to Array<string> OR union{string,Array<string>}
// X--PECT errors --> "A<union{Array<string>,string}> is not a subtype of A<string>." at "inf3"
// XPECT noerrors -->
var inf3check : A<string> = inf3;

// but can be resolved by explicitly stating the binding:
var reso = A.<string>of("hello", ["world"]);
var resocheck : A<string> = reso;
