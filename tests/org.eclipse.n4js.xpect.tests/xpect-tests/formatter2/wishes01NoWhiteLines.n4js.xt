/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest
	ResourceSet {
		ThisFile {}
		File "wishesImported.n4js" {  }
	}
	Preference "indentation" "    " {}
	Preference "line.width.max" "100" {}
	Preference "format.auto_wrap_in_front_of_logical_operator" "false" {}

    IssueConfiguration { IssueCode "ANN__TEST_ONLY_IN_TEST_SOURCES" {enabled=false} }
   
   END_SETUP
 */


/* Fixme-suppressed problems:
  - line 95 one indentation to much in arrow-function
  - line 133 one auto-wrap inserted which should not be there.
  - line 137 & 143 & 153 auto-wrap not implemeneted for logical expressions.
  - line 158 & 159 newlines swallowed.
 */
// Formatter bug in Xtext 2.11: https://github.com/eclipse/xtext-core/issues/367
/* XPECT FIXME formattedLines 140 ---
import {SomethingLongHere} from "formatter2/wishesImported";

interface Goo {}
interface GooSupperLongWordWithSomeSuperHeros {}
interface GooSupperLongWordWithSomeSuperHeros2 {}
interface GooSupperLongWordWithSomeSuperHeros3 {}
interface GooSupperLongWordWithSomeSuperHeros4 {}
interface GooSupperLongWordWithSomeSuperHeros5 {}

@CovariantConstructor @Internal
@Description('@IDEBUG(2424098, "A class with visibility @Internal public must be marked as exported.")')
export public abstract class Shorty <ValueT extends SomethingLongHere> extends Array<int>
    implements Goo {}

@CovariantConstructor @Internal
@Description('@IDEBUG(2424098, "A class with visibility @Internal public must be marked as exported.")')
export public abstract class Shortiest <ValueT> extends Array<int> implements Goo {
    noExtraLinefeedIfWeDontWrap: any;
}

/\**
 * asfkJH AFJKHG AFGJK HG ASFKJHG sfjkhg sfJKHG sfjhg fGKJHG yfkjhg sfJKHG fkjhg sfHJKG
 * afjkhg aFJKHG afjkhg afJKHG afjkhg afKJHG afjkhgsafHJKG sjkfhg sFKHJGsfjkhgsfKJHGsfjkhg
 * sFKJHGsf jkhgsFJKHG fkjhgsfJKHG sfkjhgsfKHJGf kjhgsFJKHG sfjkhgsFJKHGs fhjkgsFJKHGfsjkhgs
 *
 * @author cb
 *\/
@CovariantConstructor @Internal
@Description('@IDEBUG(2424098, "A class with visibility @Internal public must be marked as exported.")')
export public abstract class GenericLongName <ValueT extends SomethingLongHere>
    extends Array<int> // comment here long comment sdfjsiofjsfo hsoh x<fgkjh <xkjh <yfkjhx<gkjl<hxkjl<yhf kl<jh< lkjh
    implements GooSupperLongWordWithSomeSuperHeros, GooSupperLongWordWithSomeSuperHeros2,
        GooSupperLongWordWithSomeSuperHeros3 /\* dont touch me :) *\/, Goo,
        GooSupperLongWordWithSomeSuperHeros4, GooSupperLongWordWithSomeSuperHeros5 {

    @Final
    public attr: ValueT = null;

    @Final
    public attr2: ValueT = null;

    public add(k: any): int {
        if (k === 5) {
            k = 3;
        }
        switch (k) {
            case 23:
                k = 34;
                break;
            default:
                break;
        }

        function foo(bar: int): ~Object with {bar?: int; baz?: int;} {
            return {};
        }

        return k as int;
    }

    public fooBooGooZooGoo(bar: int): ~Object with {bar?: int; baz?: int; baz2?: int; baz2?: int;
        baz43?: int;} {

        return {};
    }

    public async fooBooGooZooGoo23495872948624876247624(bar: int): ~Object with {
        bar?: int; baz?: int; baz2?: int; baz2?: int; baz43?: int; baz43098?: int;
        ba098z43?: int; baz40983?: int; baz09843?: int;} {

        return {};
    }

    public async fooBooGooZooGoo234958729486284876247624(bar: int): ~Object with {
        bar?: int; baz?: int; baz2?: int; baz2?: int; baz43?: int; baz43098?: int;
        ba098z43?: int; baz40983?: int; baz09843?: int;} {

        let p: Promise<ValueT, any>;
        p.then((val=undefined) => {
                return val;
            }).catch((err=undefined) => console.error(err));

        let values = [223, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
                23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 34];
        values
            .map(val => 2 * val)
            .reduce((memo, val) => {
                return memo;
            }, 56);

        try {
            throw new Error("goo");
        } catch (exc) {
            throw exc;
        } finally {
            console.log("finally");
        }

        let obj = {
                foo: 456,
                foo123: 456,
                foo13: 456,
                foo2331: 456,
                foo132: 456
            };

        return {};
    }
}

function goo(bar: int, hoo: int) {
    // leave the lines as they are, but fix base indentation
    let a: int,
        abc: int,
        x: int, y: int,
        c: int,
        f = 3;

    if (a % 2 === 1 || (bar instanceof GooSupperLongWordWithSomeSuperHeros) ||
        (hoo instanceof GooSupperLongWordWithSomeSuperHeros)) {

        ++hoo;
    }

    if (abc % 2 === 1 || ((bar instanceof GooSupperLongWordWithSomeSuperHeros) &&
            (hoo instanceof GooSupperLongWordWithSomeSuperHeros))) {

        // never ever combine comments, don't fix indentation! think commented out code would get indented
        ++hoo;
    }

    let juergen = (1 === abc % 2 || ((bar instanceof GooSupperLongWordWithSomeSuperHeros) &&
                (hoo instanceof GooSupperLongWordWithSomeSuperHeros))) ?
        [23423, 23423, 23423, 23423, 23423] : [23423, 23423, 23423, 23423, 23423];

// do not clear up linefeed
}

function goo3(bar: int, hoo: int, hoo2: int, hoo3: int, hoo4: int, hoo5: int, hoo6: int,
    hoo7: int, hoo8: int, hoo9: int, hoo10: int) {

    ++hoo;
}

function foo(bar: int): ~Object with {bar?: int;} {
    return {};
};
--- */
/*
 * preconfigure print margin to 100
 */

import {SomethingLongHere} from "formatter2/wishesImported";

interface Goo {}
interface GooSupperLongWordWithSomeSuperHeros {}
interface GooSupperLongWordWithSomeSuperHeros2 {}
interface GooSupperLongWordWithSomeSuperHeros3 {}
interface GooSupperLongWordWithSomeSuperHeros4 {}
interface GooSupperLongWordWithSomeSuperHeros5 {}

@CovariantConstructor @Internal
@Description('@IDEBUG(2424098, "A class with visibility @Internal public must be marked as exported.")')
export public abstract class Shorty<ValueT extends SomethingLongHere> extends Array<int>
    implements Goo {}

@CovariantConstructor @Internal
@Description('@IDEBUG(2424098, "A class with visibility @Internal public must be marked as exported.")')
export public abstract class Shortiest<ValueT> extends Array<int> implements Goo {
    noExtraLinefeedIfWeDontWrap: any;
}

/**
 * asfkJH AFJKHG AFGJK HG ASFKJHG sfjkhg sfJKHG sfjhg fGKJHG yfkjhg sfJKHG fkjhg sfHJKG
 * afjkhg aFJKHG afjkhg afJKHG afjkhg afKJHG afjkhgsafHJKG sjkfhg sFKHJGsfjkhgsfKJHGsfjkhg
 * sFKJHGsf jkhgsFJKHG fkjhgsfJKHG sfkjhgsfKHJGf kjhgsFJKHG sfjkhgsFJKHGs fhjkgsFJKHGfsjkhgs
 *
 * @author cb
 */
@CovariantConstructor @Internal
@Description('@IDEBUG(2424098, "A class with visibility @Internal public must be marked as exported.")')
export public abstract class GenericLongName<ValueT extends SomethingLongHere>
    extends Array<int> // comment here long comment sdfjsiofjsfo hsoh x<fgkjh <xkjh <yfkjhx<gkjl<hxkjl<yhf kl<jh< lkjh
    implements GooSupperLongWordWithSomeSuperHeros, GooSupperLongWordWithSomeSuperHeros2,
        GooSupperLongWordWithSomeSuperHeros3 /* dont touch me :) */, Goo,
        GooSupperLongWordWithSomeSuperHeros4, GooSupperLongWordWithSomeSuperHeros5 {

    @Final
    public attr: ValueT = null;

    @Final
    public attr2: ValueT = null;

public add(k: any): int {
    if (k === 5) {
        k = 3;
       }
        switch (k) {
            case 23:
                k = 34;
                break;
            default:
                break;
        }

        function foo(bar: int): ~Object with {bar?: int; baz?: int;} {
            return {};
        }

        return k as int;
    }

    public fooBooGooZooGoo(bar: int): ~Object with {bar?: int; baz?: int; baz2?: int;
        baz2?: int; baz43?: int;} {

        return {};
    }

    public async fooBooGooZooGoo23495872948624876247624(bar: int): ~Object with {bar?: int;
        baz?: int; baz2?: int; baz2?: int; baz43?: int; baz43098?: int; ba098z43?: int;
        baz40983?: int; baz09843?: int;} {

        return {};
    }

    public async fooBooGooZooGoo234958729486284876247624(bar: int): ~Object with {bar?: int;
        baz?: int; baz2?: int; baz2?: int; baz43?: int; baz43098?: int; ba098z43?: int;
        baz40983?: int; baz09843?: int;} {

        let p: Promise<ValueT, any>;
        p.then((val=undefined) => {
            return val;
        }).catch((err=undefined) => console.error(err));

        let values = [223, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
            23, 23, 23,23, 23,23, 23, 23,23, 23, 34];
        values
            .map(val => 2 * val)
            .reduce((memo, val) => {
                return memo;
            }, 56);

        try {
            throw new Error("goo");
        } catch (exc) {
            throw exc;
        } finally {
            console.log("finally");
        }

		// XPECT warnings --> "Dead code." at "let obj = {             foo: 456,             foo123: 456,             foo13: 456,             foo2331: 456,             foo132: 456         };          return {};"
        let obj = {
            foo: 456,
            foo123: 456,
            foo13: 456,
            foo2331: 456,
            foo132: 456
        };

        return {};
    }
}

function goo(bar: int, hoo: int) {
    // leave the lines as they are, but fix base indentation
    let a: int,
        abc: int,
        x: int, y: int,
        c: int,
        f = 3;

    if (a % 2 === 1 || (bar instanceof GooSupperLongWordWithSomeSuperHeros) ||
        (hoo instanceof GooSupperLongWordWithSomeSuperHeros)) {

        ++hoo;
    }

    if (abc % 2 === 1 || ((bar instanceof GooSupperLongWordWithSomeSuperHeros) &&
        (hoo instanceof GooSupperLongWordWithSomeSuperHeros))) {

        // never ever combine comments, don't fix indentation! think commented out code would get indented

        ++hoo;
    }

    let juergen = (1 === abc % 2 || ((bar instanceof GooSupperLongWordWithSomeSuperHeros) &&
        (hoo instanceof GooSupperLongWordWithSomeSuperHeros))) ?
        [23423, 23423, 23423, 23423, 23423] : [23423, 23423, 23423, 23423, 23423];


    // do not clear up linefeed



}

function goo3(bar: int, hoo: int, hoo2: int, hoo3: int, hoo4: int, hoo5: int, hoo6: int,
    hoo7: int, hoo8: int, hoo9: int, hoo10: int) {

    ++hoo;
}

function foo(bar: int): ~Object with {bar?: int;} {
    return {};
}
