/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest
   END_SETUP
 */

// Ensuring no dead-code markings after if-statement without else-clause: line 30, 68


class A {
	constructor() {}

	m() : void {}
	get g() : string { return null; }
	set s(param : string) {}
}

class B extends A {

	@Override
	get g() : string {
		// XPECT noerrors -->
		super.g;

		if(true) {
			while(true) {
				// XPECT noerrors -->
				super.g;
			}
		}


		var f = function() {
			// XPECT errors --> "Super call must not be nested in function expressions." at "super"
			super.g;
		};

		// XPECT errors --> "Super calls may only be used in constructors." at "super"
		super();

		return null;
	}


}



/**
 * @type-param {T}
 */
export class ListBase<T> {
    /**
     * Check whether the given value is a List.
     *
     * @param {*} val
     * @return {Boolean}
     * @public
     */
    public static isList(val : any) : boolean { return null; }


    public push(value : T) : ListBase<T> {
    	var idx : number;
        var valueAsObject : Object = value as Object        ; // this is a dirty hack, I would say. But the whole concept of adding a field "immutable" is weird.
        if ( true === valueAsObject['_$immutable']) {
            throw new Error("Not allow to insert immutable objects");
        }
        var f=2;
        var x=3;

        return this;
    }

}
