/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A {
	m() {}
}

class X {}

class G<T extends A> {
    foo() : T { return null; }
}



// ----------------------------------------------------------------------------------------------------------------


// note: unbounded ? as argument to bounded type parameter T extends A
var g : G<?>;


// XPECT noerrors -->
g = new G<A>();
// XPECT errors ---
// "G<X> is not a subtype of G<? extends A>." at "new G<X>()"
// "X is not a subtype of A." at "X"
// ---
g = new G<X>();

// XPECT noerrors -->
var test01 : A = g.foo();
// XPECT errors --> "? extends A is not a subtype of X." at "g.foo()"
var test02 : X = g.foo();

// XPECT noerrors -->
g.foo().m();
// XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'other'." at "other"
g.foo().other();



// ----------------------------------------------------------------------------------------------------------------


// note: now unbounded ? is contained within the inheritance hierarchy
// XPECT errors --> "Wildcards may not be used as type argument when declaring an extended or implemented type." at "?"
class H extends G<?> {}

var h : H;

// the following test cases do not make sense because this scenario is disallowed
/*

// X---PECT noerrors -->
g = h;

// X---PECT noerrors -->
var test11 : A = h.foo();
// X---PECT errors --> "? extends A is not a subtype of X." at "h.foo()"
var test12 : X = h.foo();

// X---PECT noerrors -->
h.foo().m();
// X---PECT errors --> "Couldn't resolve reference to IdentifiableElement 'other'." at "other"
h.foo().other();

*/
