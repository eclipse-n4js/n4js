/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


//
// simple case
//

class C1<T> {
	public field : ~Object with { prop: T; };
}

var c1s_struct : ~C1<string>;

var c1s : C1<string>;
var c1n : C1<number>;

// XPECT noerrors -->
c1s_struct = c1s;
// XPECT errors --> "C1<number> is not a structural subtype of ~C1<string>: field failed: ~Object with { prop: T } [[T->number]] is not equal to ~Object with { prop: T } [[T->string]]." at "c1n"
c1s_struct = c1n;


// -------------------------------------------------------------------------------------------

//
// types of the structural members are now also structural
//


// a small type hierarchy:

class A {
	public name : string;
}
class B1 {
	public name : string;
	public age : number;
}
class B2 {
	public name : string;
	public age : number;
}
class C {
	public name : string;
	public age : number;
	public address : string;
}


class C2<T,P,R> {
	public field : ~Object with { prop: T; };
	public
		m(
		param : ~Object with {  m(param: R): P }  // note: P and R swapped because of contra-variance
	) : ~Object with { m(param: P): R } {
		return null;
	}
}

var c2b1_struct : ~C2<~B1,~B1,~B1>;

var c2b2ac : C2<~B2,~A,~C>; // note: the type of c2b2ac is nominal (only the type arguments are structural)
// XPECT noerrors -->
c2b1_struct = c2b2ac;





// -------------------------------------------------------------------------------------------

//
// same as previous example, but:
// now the references to the type varibles in C3 are use-site structural instead of
// passing in structural type arguments at the variable declarations
//

// NOTE: the following depends on IDEBUG-225


class C3<T,P,R> {
	public field : ~Object with { prop: ~T; };
	public
		m(
		param : ~Object with {  m(param: ~R): ~P }  // note: P and R swapped because of contra-variance
	) : ~Object with { m(param: ~P): ~R } {
		return null;
	}
}

var c3b1_struct : ~C3<B1,B1,B1>;

var c3b2ac : C3<B2,A,C>; // note: the type of c2b2ac is nominal (only the type arguments are structural)
// depends on IDEBUG-225, GHOLD-12/GHOLD-250 XPECT noerrors -->
c3b1_struct = c3b2ac;
