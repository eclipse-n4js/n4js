/*
 * Copyright (c) 2019 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


// Some tests derived from real-world code that are (more or less) related to
// existential types and capturing of wildcards.


// ====================================================================================


function reverse(arr: Array<?>) {
	// XPECT noerrors -->
	revInternal(arr);
}

function <T> revInternal(arr: Array<T>) {
	const len = arr.length;
	for(let i=0;i<len;i++) {
		const j = len - i - 1;
		let temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}


// ====================================================================================


interface IterableExt<out T> extends Iterable<T> {}

function <T> concat(...iters: Iterable<? extends T>): IterableExt<T> {
	// XPECT noerrors -->
    return concatAll(iters);
}

function <T> concatAll(iters: Iterable<Iterable<? extends T>>): IterableExt<T> {
    return null;
}


// ====================================================================================


interface Provider<T> {
	public get(): T
}
let prov: ~Provider<?>;
let provStr: Provider<string>;
// XPECT noerrors -->
prov = provStr;


// ====================================================================================


interface ~I1<T> {
	public value: T;
	public onBeforeChange: (value: T, old: T) => T;
}
// XPECT noerrors -->
class G1<T1, T2 extends I1<T1>> {}
// XPECT noerrors -->
let g: G1<?,?>;


// ====================================================================================


// see also test files:
// /org.eclipse.n4js.bugreports.tests/bugreports-tests/IDEBUG_0210_b_QuestionMarkWildcardNotReplacedWithAny.n4js.xt
// /org.eclipse.n4js.bugreports.tests/bugreports-tests/IDEBUG_0272_a_QuestionMarkWildcardNotReplacedWithAny.n4js.xt
// /org.eclipse.n4js.bugreports.tests/bugreports-tests/IDEBUG_0593_Type_var_not_correctly_substituted_with_wildcard.n4js.xt
interface ~I2 {}

class ~C2<T extends I2> {
    public unit: T;
}

function <T extends I2> foo2(qty: ~r~C2<T>): C2<T> {
	return null;
}

// XPECT noerrors -->
let u2: ~r~C2<? extends I2>
foo2(u2);


// ====================================================================================


interface I3 {}
interface J3 extends I3 {}

class C3<T extends I3> {
    public unit: T;
}

function <T extends I3> foo3(qty: C3<T>): C3<T> {
	return null;
}

let value3a: C3<? extends I3>
// XPECT noerrors -->
foo3(value3a);
let value3b: C3<? extends J3>
// XPECT noerrors -->
foo3(value3b);


// ====================================================================================


var myObject : Object = new Object();
var myObject1 : Object = new Object();
var myConstr = myObject.constructor // type of myConstr should have wildcard, not closed existential type ref
// XPECT noerrors -->
myConstr = myObject1.constructor // should work


// ====================================================================================


class C4 {
	constructor(p: constructor{? extends N4Object}) {}
}
let ctor: constructor{N4Object};
// XPECT noerrors --> "constructor{N4Object} is not a subtype of constructor{(? extends N4Object)@8c3d536b-b37a-44c7-a2b8-506d41536ad5}." at "ctor"
new C4(ctor);
// XPECT noerrors --> 
new C4(C4);


// ====================================================================================


class NodeList<NodeT extends Node> {}

class Node {}
class Element extends Node {
    public get children(): NodeList<? extends Element> { return null; }
}
class HTMLElement extends Element {
    @Override
    // XPECT noerrors --> "Type of getter HTMLElement.children does not conform to overridden getter Element.children: NodeList<? extends HTMLElement> is not a subtype of NodeList<? extends Element>." at "children"
    public get children(): NodeList<? extends HTMLElement> { return null; }
}


// ====================================================================================


class N4DataField {
	public name: string;
	public isStatic: boolean;
}

let arr: Array<? extends N4DataField>;

let directStaticFields = arr.filter(f => f.isStatic);
let directStaticFields2: Array<? extends N4DataField> = arr.filter(f => f.isStatic);

directStaticFields.map(f => {
	// XPECT noerrors -->
	f.name;
	return "";
});

directStaticFields2.map(f => {
	// worked before:
	f.name;
	return "";
});


// ====================================================================================
