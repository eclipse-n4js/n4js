/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


//
// type variable in member of a structural type used as type of a field
//

class C1<T> {
	public field : ~Object with { prop: T; };
}

var c1s : C1<string>;


// TODO improve typeRefAsString in StructuralTypeRef
// XPECT FIXME type of 'c1s.field' --> ~Object with { prop: string; }
c1s.field;
// XPECT type of 'c1s.field.prop' --> string
c1s.field.prop;
// XPECT noerrors -->
c1s.field.prop = "Hello prop!";
// XPECT noerrors -->
var test01 : string = c1s.field.prop;


var f = c1s.field;
// XPECT type of 'f.prop' --> string
f.prop;
// XPECT noerrors -->
f.prop = "Hello prop!";
// XPECT errors --> "int is not a subtype of string." at "42"
f.prop = 42;
// XPECT noerrors -->
var test02 : string = f.prop;



//
// type variable in member of a structural type used as return type of a method
//

class C2<T> {
	public m() : ~Object with { prop: T; } { return null; }
}

var c2s : C2<string>;


// XPECT type of 'c2s.m().prop' --> string
c2s.m().prop;
// XPECT noerrors -->
c2s.m().prop = "Hello prop!";
// XPECT noerrors -->
var test11 : string = c2s.m().prop;


// XPECT warnings --> "A reference to method m is created detached from a (correct) this-instance." at "m"
var m = c2s.m;
var m_result = m();
// XPECT type of 'm_result.prop' --> string
m_result.prop;
// XPECT noerrors -->
m_result.prop = "Hello prop!";
// XPECT errors --> "int is not a subtype of string." at "42"
m_result.prop = 42;
// XPECT noerrors -->
var test12 : string = m_result.prop;



//
// type variable in member of a structural type used as parameter type of a method
//

class C3<T> {
	public m(param : ~Object with { prop: T; }) {}
}

var c3s : C3<string>;


// XPECT noerrors -->
c3s.m({prop: "Hello prop!"});
// TODO improve typeRefAsString in StructuralTypeRef
// XPECT FIXME errors --> "~Object with { prop: int; } is not a structural subtype of ~Object with { string prop; }: prop failed: int is not equal to string." at "{prop: 42}"
// XPECT errors --> "~Object with { prop: int } is not a structural subtype of ~Object with { prop: T } [[T->string]]: prop failed: int is not equal to string." at "{prop: 42}"
c3s.m({prop: 42});



//
// other structural members than fields
//

class C4<T,P,R> {
	public m() : ~Object with {
		get g(): R      // <---- TStructGetter
		set s(param: P) // <---- TStructSetter
		m(param: P): R   // <---- TStructMethod
	} { return null; }
}

var c4s : C4<string,int,string>;

// XPECT noerrors -->
var test41 : string = c4s.m().g;
// XPECT noerrors -->
c4s.m().s = 42;
// XPECT noerrors -->
var test43 : string = c4s.m().m(42);
// XPECT errors ---
// "string is not a subtype of int." at ""hello""
// "string is not a subtype of int." at "c4s.m().m("hello")"
// ---
var test44 : int = c4s.m().m("hello");
