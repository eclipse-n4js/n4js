/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP */


class A {}
class B extends A {}
class C extends B {}

var a : A;
var b : B;
var c : C;


// ------------------------------------------------------------------
// base cases


// XPECT type of '[ b, c ]' --> Array<B>
var v01 = [ b, c ];

// XPECT type of '[ b, c ]' --> Array<B>
var v02 : Array<B> = [ b, c ];

// XPECT type of '[ b, c ]' --> Array<A>
var v03 : Array<A> = [ b, c ];

// XPECT type of '[ b, c ]' --> Array<B>
var v04 : Array<? extends B> = [ b, c ];


// ------------------------------------------------------------------
// with padding


// XPECT type of '[ ,,, b,,, c,,, ]' --> Array<B>
var v11 = [ ,,, b,,, c,,, ];

// XPECT type of '[ ,,, b,,, c,,, ]' --> Array<B>
var v12 : Array<B> = [ ,,, b,,, c,,, ];

// XPECT type of '[ ,,, b,,, c,,, ]' --> Array<A>
var v13 : Array<A> = [ ,,, b,,, c,,, ];

// XPECT type of '[ ,,, b,,, c,,, ]' --> Array<B>
var v14 : Array<? extends B> = [ ,,, b,,, c,,, ];


// ------------------------------------------------------------------
// with spread of a literal

// XPECT type of '[ b, ...[c] ]' --> Array<B>
var v21 = [ b, ...[c] ];

// XPECT type of '[ b, ...[c] ]' --> Array<B>
var v22 : Array<B> = [ b, ...[c] ];

// XPECT type of '[ b, ...[c] ]' --> Array<A>
var v23 : Array<A> = [ b, ...[c] ];

// XPECT type of '[ b, ...[c] ]' --> Array<B>
var v24 : Array<? extends B> = [ b, ...[c] ];


// ------------------------------------------------------------------
// with spread of some other expression

function getArrOfC(): C[] { return null; }

class ~MyIterable<T> {
	public [Symbol.iterator](): Iterator<T> { return null; }
}
let myIterableOfC: MyIterable<C>;

// XPECT type of '[ b, ...getArrOfC() ]' --> Array<B>
var v31a = [ b, ...getArrOfC() ];
// XPECT type of '[ b, ...myIterableOfC ]' --> Array<B>
var v31b = [ b, ...myIterableOfC ];

// XPECT type of '[ b, ...getArrOfC() ]' --> Array<B>
var v32a : Array<B> = [ b, ...getArrOfC() ];
// XPECT type of '[ b, ...myIterableOfC ]' --> Array<B>
var v32b : Array<B> = [ b, ...myIterableOfC ];

// XPECT type of '[ b, ...getArrOfC() ]' --> Array<A>
var v33a : Array<A> = [ b, ...getArrOfC() ];
// XPECT type of '[ b, ...myIterableOfC ]' --> Array<A>
var v33b : Array<A> = [ b, ...myIterableOfC ];

// XPECT type of '[ b, ...getArrOfC() ]' --> Array<B>
var v34a : Array<? extends B> = [ b, ...getArrOfC() ];
// XPECT type of '[ b, ...myIterableOfC ]' --> Array<B>
var v34b : Array<? extends B> = [ b, ...myIterableOfC ];


// ------------------------------------------------------------------
// empty


// XPECT type of '[]' --> Array<any>
var v41 = [];

// XPECT type of '[]' --> Array<B>
var v42 : Array<B> = [];

// XPECT type of '[]' --> Array<any>
var v43 : Array<?> = [];

// XPECT type of '[]' --> Array<B>
var v44 : Array<? extends B> = [];


// ------------------------------------------------------------------
// Iterable (not IterableN!)
// (this should work in exactly the same way as a type expectation of Array;
// the special handling applies only to IterableN!)


// XPECT type of '[ b, c ]' --> Array<B>
var v51 = [ b, c ];

// XPECT type of '[ b, c ]' --> Array<B>
var v52 : Iterable<B> = [ b, c ];

// XPECT type of '[ b, c ]' --> Array<B>
var v53 : Iterable<A> = [ b, c ];

// XPECT type of '[ b, c ]' --> Array<B>
var v54 : Iterable<? extends B> = [ b, c ];


// ------------------------------------------------------------------
// IterableN

// not included here (see spec tests)
