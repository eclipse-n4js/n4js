/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


// calling generic functions with explicitly bound type variables
// (this covers Xsemantics rule typeParameterizedCallExpression)


class C<T> {}


// #################################################################################
// PART 1: declared functions

function <T> f1(p : T) : T {
	return null;
}

// simple:

var v1 : string = <string>f1("hello");
// XPECT errors --> "number is not a subtype of string." at "<number>f1(42)"
var v2 : string = <number>f1(42);
// XPECT errors --> "string is not a subtype of number." at ""oops""
var v3 : number = <number>f1("oops");
var v4 : number = <number>f1(42);


// type argument is a generic type:

var v5 : C<string> = <C<string>>f1(new C<string>());
// XPECT errors --> "C<number> is not a subtype of C<string>." at "<C<number>>f1(new C<number>())"
var v6 : C<string> = <C<number>>f1(new C<number>());
// XPECT errors --> "C<string> is not a subtype of C<number>." at "new C<string>()"
var v7 : C<number> = <C<number>>f1(new C<string>());
var v8 : C<number> = <C<number>>f1(new C<number>());


// type argument contains unbound type variable:

class X1<U,V> {

	m() : void {
		var u : U;
		var v : V;

		// directly:

		var a1 : U = <U>f1(u);
		// XPECT errors --> "V is not a subtype of U." at "<V>f1(v)"
		var a2 : U = <V>f1(v);
		// XPECT errors --> "U is not a subtype of V." at "u"
		var a3 : V = <V>f1(u);
		var a4 : V = <V>f1(v);

		// indirectly:

		var a5 : C<U> = <C<U>>f1(new C<U>());
		// XPECT errors --> "C<V> is not a subtype of C<U>." at "<C<V>>f1(new C<V>())"
		var a6 : C<U> = <C<V>>f1(new C<V>());
		// XPECT errors --> "C<U> is not a subtype of C<V>." at "new C<U>()"
		var a7 : C<V> = <C<V>>f1(new C<U>());
		var a8 : C<V> = <C<V>>f1(new C<V>());
	}
}


// #################################################################################
// PART 2: function expressions

var f2 = function <T> (p : T) : T { return null; }

// simple:

var b1 : string = <string>f2("hello");
// XPECT errors --> "number is not a subtype of string." at "<number>f2(42)"
var b2 : string = <number>f2(42);
// XPECT errors --> "string is not a subtype of number." at ""oops""
var b3 : number = <number>f2("oops");
var b4 : number = <number>f2(42);


// type argument is a generic type:

var b5 : C<string> = <C<string>>f2(new C<string>());
// XPECT errors --> "C<number> is not a subtype of C<string>." at "<C<number>>f2(new C<number>())"
var b6 : C<string> = <C<number>>f2(new C<number>());
// XPECT errors --> "C<string> is not a subtype of C<number>." at "new C<string>()"
var b7 : C<number> = <C<number>>f2(new C<string>());
var b8 : C<number> = <C<number>>f2(new C<number>());


// type argument contains unbound type variable:

class X2<U,V> {

	m() : void {
		var u : U;
		var v : V;

		// directly:

		var a1 : U = <U>f2(u);
		// XPECT errors --> "V is not a subtype of U." at "<V>f2(v)"
		var a2 : U = <V>f2(v);
		// XPECT errors --> "U is not a subtype of V." at "u"
		var a3 : V = <V>f2(u);
		var a4 : V = <V>f2(v);

		// indirectly:

		var a5 : C<U> = <C<U>>f2(new C<U>());
		// XPECT errors --> "C<V> is not a subtype of C<U>." at "<C<V>>f2(new C<V>())"
		var a6 : C<U> = <C<V>>f2(new C<V>());
		// XPECT errors --> "C<U> is not a subtype of C<V>." at "new C<U>()"
		var a7 : C<V> = <C<V>>f2(new C<U>());
		var a8 : C<V> = <C<V>>f2(new C<V>());
	}
}
