/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A {}
class B extends A {}
class C extends B {}



//
// methods: pure parameterized property access
//

class X {
	m() : void {};

	// XPECT warnings --> "Type variable T not used in parameters or return type." at "T"
	<T extends B> mg() : void {};
}
var x : X;


// XPECT noerrors -->
x.m;
// XPECT errors --> "Incorrect number of type arguments for method m: expected 0, got 1." at "m"
x.<B>m;

// XPECT noerrors --> "ok, because auto-inference of type arguments is supported here!"
x.mg;
// XPECT noerrors -->
x.<B>mg;
// XPECT errors --> "Incorrect number of type arguments for method mg: expected 1, got 2." at "mg"
x.<B,B>mg;
// XPECT noerrors --> "ok, because C <: B"
x.<C>mg;
// XPECT errors --> "A is not a subtype of B." at "A"
x.<A>mg;



//
// methods: parameterized property access nested in a non-parameterized call expression
//

// XPECT noerrors -->
x.m();
// XPECT errors --> "Incorrect number of type arguments for method m: expected 0, got 1." at "m"
x.<B>m();

// XPECT noerrors --> "ok, because auto-inference of type arguments is supported here!"
x.mg();
// XPECT noerrors -->
x.<B>mg();
// XPECT errors --> "Incorrect number of type arguments for method mg: expected 1, got 2." at "mg"
x.<B,B>mg();
// XPECT noerrors --> "ok, because C <: B"
x.<C>mg();
// XPECT errors --> "A is not a subtype of B." at "A"
x.<A>mg();



//
// other members than methods
// (they can never be parameterized; but we need tests to ensure that
// providing type args in a property access expression will produce an error)
//

class Y {
	f : string;
	get g() : string { return null; }
	set s(param : string) {}
}
var y : Y;

// XPECT errors --> "Incorrect number of type arguments for field f: expected 0, got 1." at "f"
y.<B>f;
// XPECT errors --> "Incorrect number of type arguments for getter g: expected 0, got 1." at "g"
y.<B>g;
// XPECT errors --> "Incorrect number of type arguments for setter s: expected 0, got 1." at "s"
y.<B>s = "";
