/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A {}

function <T> contra(param : T) : void {}
function <T> co() : T { return null }
function <T> inv(param : T) : T { return param}

function <T extends A> contraA(param : T) : void {}
function <T extends A> coA() : T { return null }
function <T extends A> invA(param : T) : T { return param}

function contraANonG(param : A) : void {}
function coANonG() : A { return null }
function invANonG(param : A) : A { return param}

// XPECT noerrors --> "perfect match" at "contra"
var vcontra : {function<S>(S):void} = contra;
// XPECT noerrors --> "perfect match" at "co"
var vco : {function<S>():S} = co;
// XPECT noerrors --> "perfect match" at "inv"
var vinv : {function<S>(S):S} = inv;

// XPECT noerrors --> "should work, contra is indifferent of the concrete type of S or T respectively" at "contra"
var wcontra : {function<S extends A>(S):void} = contra;
// XPECT noerrors --> "should work, co is indifferent of the concrete type of S or T respectively" at "co"
var wco : {function<S extends A>():S} = co;
// XPECT noerrors --> "should work, inv is indifferent of the concrete type of S or T respectively" at "inv"
var winv : {function<S extends A>(S):S} = inv;

// XPECT errors --> "{function<T extends A>(T):void} is not a subtype of {function<S>(S):void}." at "contraA"
var xcontra1 : {function<S>(S):void} = contraA;
// XPECT errors --> "{function<T extends A>():T} is not a subtype of {function<S>():S}." at "coA"
var xco1 : {function<S>():S} = coA;
// XPECT errors --> "{function<T extends A>(T):T} is not a subtype of {function<S>(S):S}." at "invA"
var xinv1 : {function<S>(S):S} = invA;


// XPECT noerrors --> "perfect match" at "contra"
var xcontra2 : {function<S extends A>(S):void} = contraA;
// XPECT noerrors --> "perfect match" at "co"
var xco2 : {function<S extends A>():S} = coA;
// XPECT noerrors --> "perfect match" at "inv"
var xinv2 : {function<S extends A>(S):S} = invA;

// XPECT errors --> "{function(A):void} is not a subtype of {function<S extends A>(S):void}." at "contraANonG"
var xcontra3 : {function<S extends A>(S):void} = contraANonG;
// XPECT errors --> "{function():A} is not a subtype of {function<S extends A>():S}." at "coANonG"
var xco3 : {function<S extends A>():S} = coANonG;
// XPECT errors --> "{function(A):A} is not a subtype of {function<S extends A>(S):S}." at "invANonG"
var xinv3 : {function<S extends A>(S):S} = invANonG;
