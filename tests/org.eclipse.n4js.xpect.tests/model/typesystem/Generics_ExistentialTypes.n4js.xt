/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A {}

class G<T> {}

function <T>   foo1(p : G<T>): T { return null; }
function <T>   foo2(p1 : G<T>, p2 : G<T>): T { return null; }
function <S,T> foo3(p1 : G<S>, p2 : G<T>): union{T,S} { return null; }

var g : G<?>;
var g1 : G<?>;
var g2 : G<?>;

var ga : G<? extends A>;
var ga1 : G<? extends A>;
var ga2 : G<? extends A>;



// passing through an existential type (expected to work fine)

// XPECT type of 'v01' --> any
// XPECT noerrors -->
var v01 = foo1(g);

// XPECT type of 'v11' --> A
// XPECT noerrors -->
var v11 = foo1(ga);



// matching distinct existential types onto a single inference variable (should fail)

// XPECT errors ---
// "G<?> is not a subtype of G<T>." at "g1"
// "G<?> is not a subtype of G<T>." at "g2"
// ---
var v02 = foo2(g1,g2);

// XPECT errors ---
// "G<? extends A> is not a subtype of G<T>." at "ga1"
// "G<? extends A> is not a subtype of G<T>." at "ga2"
// ---
var v12 = foo2(ga1,ga2);



// matching distinct existential types onto two separate inference variables (ok)

// XPECT type of 'v03' --> union{any,any}
// XPECT noerrors -->
var v03 = foo3(g1,g2);

// XPECT type of 'v13' --> union{A,A}
// XPECT noerrors -->
var v13 = foo3(ga1,ga2);
