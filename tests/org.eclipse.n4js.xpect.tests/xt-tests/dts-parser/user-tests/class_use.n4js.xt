/*
 * Copyright (c) 2022 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/*
	XPECT_SETUP org.eclipse.n4js.xpect.tests.N4jsXtTest
	
	File "tslib.d.ts" {
		export class KE {
		    field: number;
		    optionalField?: number;
		    static staticField: number;
		    static readonly staticReadonlyField: number;
		    readonly readonlyField: number;
		    method(): string;
		    optionalMethod?(): string;
		    static staticMethod(): string;
		    get getter() : string;
		    set setter(v: string);
		    static get staticGetter() : string;
		    static set staticSetter(v: string);
		}
		
		export abstract class AC {}
	}
	END_SETUP
 */


import {KE, AC} from "tslib";

// XPECT noerrors -->
let num : number = KE.staticField;
KE.staticField = 1;
let numR : number = KE.staticReadonlyField;
let str : string = KE.staticMethod();
let gett : string = KE.staticGetter;
KE.staticSetter = "s";

const ke : KE = new KE();
let keNum : number = ke.field;
ke.field = 1;
let keNumO : number = ke.optionalField;
let keNumR : number = ke.readonlyField;
let keStr : string = ke.method();
let keStrO : string = ke.optionalMethod();
let keGett : string = ke.getter;
ke.setter = "s";


// XPECT errors --> "The static member staticField cannot be accessed from a non-static context." at "staticField"
ke.staticField;
// XPECT errors --> "The non-static member field cannot be accessed from a static context." at "field"
KE.field;

// XPECT errors --> "The const field staticReadonlyField is read-only." at "staticReadonlyField"
KE.staticReadonlyField = 0;
// XPECT errors --> "The final field readonlyField is read-only." at "readonlyField"
ke.readonlyField = 0;


// XPECT errors --> "Cannot instantiate abstract class AC." at "AC"
new AC();

