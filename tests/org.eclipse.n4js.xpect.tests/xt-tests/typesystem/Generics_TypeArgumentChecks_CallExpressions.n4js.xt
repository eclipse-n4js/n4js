/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.xpect.tests.N4JSXpectTest END_SETUP  */


class A {}
class B extends A {}
class C extends B {}



//
// declared functions:
//

function f() {}

// XPECT warnings --> "Type variable T not used in parameters or return type." at "T"
function <T extends B> fg() {}

// XPECT noerrors -->
f();
// XPECT errors --> "Incorrect number of type arguments for function f: expected 0, got 1." at "f"
<B>f();

// XPECT noerrors --> "ok, because auto-inference of type arguments is supported here!"
fg();
// XPECT noerrors -->
<B>fg();
// XPECT errors --> "Incorrect number of type arguments for function fg: expected 1, got 2." at "fg"
<B,B>fg();
// XPECT noerrors --> "ok, because C <: B"
<C>fg();
// XPECT errors --> "A is not a subtype of B." at "A"
<A>fg();



//
// function expressions
//

// XPECT noerrors -->
var fe = function():void{};

// XPECT warnings --> "Type variable T not used in parameters or return type." at "T"
var feg = function<T extends B>():void{};

// XPECT noerrors -->
fe();
// XPECT errors --> "Incorrect number of type arguments: expected 0, got 1." at "fe"
<B>fe();

// XPECT noerrors --> "ok, because auto-inference of type arguments is supported here!"
feg();
// XPECT noerrors -->
<B>feg();
// XPECT errors --> "Incorrect number of type arguments: expected 1, got 2." at "feg"
<B,B>feg();
// XPECT noerrors --> "ok, because C <: B"
<C>feg();
// XPECT errors --> "A is not a subtype of B." at "A"
<A>feg();



//
// function type expressions
//

var fte : {function():void};

// XPECT warnings --> "Type variable T not used in parameters or return type." at "T"
var fteg : {function<T extends B>():void};

// XPECT noerrors -->
fte();
// XPECT errors --> "Incorrect number of type arguments: expected 0, got 1." at "fte"
<B>fte();

// XPECT noerrors --> "ok, because auto-inference of type arguments is supported here!"
fteg();
// XPECT noerrors -->
<B>fteg();
// XPECT errors --> "Incorrect number of type arguments: expected 1, got 2." at "fteg"
<B,B>fteg();
// XPECT noerrors --> "ok, because C <: B"
<C>fteg();
// XPECT errors --> "A is not a subtype of B." at "A"
<A>fteg();



//
// built-in Function object
//

var fobj : Function;

// XPECT noerrors -->
fobj();
// XPECT noerrors -->
<B>fobj();
// Rationale for not showing an error in previous line:
// Function is super-type of all functions, including parameterized functions; therefore, we accept
// any number of type arguments and do not check any bounds (similar to handling formal parameters
// in this case: any number of arguments and any type is accepted).
