/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


/**
 * @spec a simple interface
 */
@N4JS export external public interface IA {

	public field : IA;
	public missing_field : IA;

	public someIA() : IA;
	public missing_someIA() : IA;

	@ProvidesDefaultImplementation	public providesDefaultIA() : IA;
	@ProvidesDefaultImplementation	public missing_providesDefaultIA() : IA;

	public get pureGet()  : IA;
	public get missing_pureGet()  : IA;

	public set pureSet(i : IA) ;
	public set missing_pureSet(i : IA) ;

	@ProvidesDefaultImplementation	public get providesDefaultGet()  : IA;
	@ProvidesDefaultImplementation	public get not_providesDefaultGet()  : IA;
	@ProvidesDefaultImplementation	public get missing_providesDefaultGet()  : IA;

	@ProvidesDefaultImplementation	public set providesDefaultSet(i : IA) ;
	@ProvidesDefaultImplementation	public set not_providesDefaultSet(i : IA) ;
	@ProvidesDefaultImplementation	public set missing_providesDefaultSet(i : IA) ;

	// Static cases below:

	public static fieldStatic : IA;
	public static missing_fieldStatic : IA;

	@ProvidesDefaultImplementation	public static someStaticProvidesDefaultIA()  : IA;
	@ProvidesDefaultImplementation	public static missing_someStaticProvidesDefaultIA()  : IA;

	@ProvidesDefaultImplementation  public static get missing_staticGetterIA () : IA;
	@ProvidesDefaultImplementation  public static set missing_staticSetterIA ( ia : IA );

	// public static IA someStaticIA() ;
	// if no body --> "The method someStaticIA may not be both static and abstract."
	// if body --> "Methods in external interfaces have to have no body." {return null;}


}

/**
 * Members prefixed with 'missing_' are supposed to be unimplemneted for test reasons
 *
 * @spec a simple class
 */
@N4JS export external public class A implements IA {

	public s : string;
	public n() : number;
	@Override public someIA() : IA;

	public missing_s : string;
	public missing_n() : number;
	@Override public missing_someIA() : IA;


	@Override public get pureGet()  : IA;
	@Override public get missing_pureGet()  : IA;

	@Override public set pureSet(i : IA) ;
	@Override public set missing_pureSet(i : IA) ;

	// Static cases below:
	public static fieldStatic : IA;
	public static missing_fieldStatic : IA;

	public static someStaticProvidesDefaultIA()  : IA;
	public static missing_someStaticProvidesDefaultIA()  : IA;
}


/** Missing type */
@N4JS export external public class Missing_B implements IA {

 	@Override public someIA() : IA;
	@Override public missing_someIA() : IA;

	@Override public get pureGet()  : IA;
	@Override public get missing_pureGet()  : IA;

	@Override public set pureSet(i : IA) ;
	@Override public set missing_pureSet(i : IA) ;
}

export external public enum E { a, b, c, missing_d };
export external public enum Missing_E { a,b,c }

@StringBased export external public enum ES { a /* :" " shouldn't value-definition be allowed, at least for string-based? */, b, c, missing_d };
@StringBased export external public enum Missing_ES { a,b,c }
