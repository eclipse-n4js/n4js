# wsp1/A/src/packA/A.n4js
// Comment to the TESTER (YOU!): This File (scenario01.txt) assembles the content of many files
// The File are separated by a single HASH character. So this Character is off limits to use otherwise
// After the Hashmark up to the end of the line is the relative path of the file to create.
// all other characters till the next HASH are the content of this file.
export public class A {
	constructor() {
		console.log(" in class "+A)
	}
}

# wsp1/A/package.json
{
	"name": "A",
	"version": "0.0.1-SNAPSHOT",
	"n4js": {
		"projectType": "library",
		"vendorId": "org.eclipse.n4js",
		"vendorName": "Eclipse N4JS Project",
		"output": "src-gen",
		"sources": {
			"source": [
				"src"
			]
		}
	}
}
# wsp1/notAproject
# nest/wsp2/B/src/packB/B.n4js
export public class B {
	constructor() {
		console.log(" in class "+B)
	}
}

# nest/wsp2/B/src/packB/B2.n4js
export public class B2 {
	constructor() {
		console.log(" in class "+B2)
	}
}

# nest/wsp2/B/package.json
{
	"name": "B",
	"version": "0.0.1-SNAPSHOT",
	"n4js": {
		"projectType": "library",
		"vendorId": "org.eclipse.n4js",
		"vendorName": "Eclipse N4JS Project",
		"output": "src-gen",
		"sources": {
			"source": [
				"src"
			]
		}
	}
}
# nest/wsp2/D/src/packD/D.n4js
import { A } from "packA/A"
export public class D extends A {
	constructor() {
		console.log(" in class "+D)
	}
}

# nest/wsp2/D/src/packD/D2.n4js
import { B } from "packB/B"
export public class D2 extends B {
	constructor() {
		console.log(" in class "+D2)
	}
}

# nest/wsp2/D/package.json
{
	"name": "D",
	"version": "0.0.1-SNAPSHOT",
	"dependencies": {
		"A": "*",
		"B": "*"
	},
	"n4js": {
		"projectType": "library",
		"vendorId": "org.eclipse.n4js",
		"vendorName": "Eclipse N4JS Project",
		"output": "src-gen",
		"sources": {
			"source": [
				"src"
			]
		}
	}
}
