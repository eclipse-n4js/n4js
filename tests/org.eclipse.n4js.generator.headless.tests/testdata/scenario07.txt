# wsp1/P1/ext1/c/X.js
// Comment to the TESTER (YOU!): This File (scenario01.txt) assembles the content of many files
// The File are separated by a single HASH character. So this Character is off limits to use otherwise
// After the Hashmark up to the end of the line is the relative path of the file to create.
// all other characters till the next HASH are the content of this file.
export public class A {
	constructor() {
		console.log(" in class "+A)
	}
}

# wsp1/P1/package.json
{
	"name": "P1",
	"version": "0.0.1-SNAPSHOT",
	"dependencies": {
		"org.eclipse.n4js.mangelhaft": "*"
	},
	"n4js": {
		"projectType": "application",
		"vendorId": "org.eclipse.n4js",
		"vendorName": "Eclipse N4JS Project",
		"output": "outfolder",
		"sources": {
			"source": [
				"src1",
				"src2"
			],
			"external": [
				"ext1",
				"ext2"
			],
			"test": [
				"test1",
				"test2"
			]
		},
		"moduleFilters": {
			"noValidate": [
				{
					"module": "*/T2*",
					"sourceContainer": "test2"
				}
			],
			"noModuleWrap": [
				{
					"module": "c/*",
					"sourceContainer": "ext2"
				}
			]
		}
	}
}
# wsp1/P1/ext2/c/X2.js
export public class C {
	constructor() {
		console.log(" in class "+C)
	}
} 

# wsp1/P1/src1/c/Csrc1.n4js
export public class C {
	constructor() {
		console.log(" in class "+C)
	}
} 
# wsp1/P1/src2/c/Csrc2.n4js
export public class C {
	constructor() {
		console.log(" in class "+C)
	}
} 


# wsp1/P1/test1/t/T1.n4js
function Y(){
	3+4;
}

# wsp1/P1/test2/t/T2.js
function X*(){
}


# wsp1/org.eclipse.n4js.mangelhaft/package.json
{
	"name": "org.eclipse.n4js.mangelhaft",
	"version": "0.0.1",
	"n4js": {
		"vendorId": "org.eclipse.n4js"
	}
}