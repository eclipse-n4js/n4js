/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import { IA } from "p/A"
import { A } from "p/A"
import { Assert } from "direct/MiniAssertions"
    

export public class AT_IDE_1510_Intefaces {


	/** Access to provided method static. */
	@Test
	public test_Interface_static_method() : void {
		var result : IA;
		Assert.doesNotThrow( function(){
			result = IA.someStaticProvidesDefaultIA();
		} );
		Assert.isNotUndefined ( result );
	}	
		
	/** Access to missing provided method static. */
	@Test
	public test_Interface_static_method_missing() : void {
		Assert.throws( function(){
			IA.missing_someStaticProvidesDefaultIA();
			console.log("grrrrrrr1")
		},  N4ApiNotImplementedError, "Missing NoImpl-Error"  );
	}

	/** Access to missing provided method static. */
	@Test
	public test_Interface_static_getter_missing() : void {
		var ia : IA;
		Assert.throws( function(){
			ia = IA.missing_staticGetterIA;
			console.log("grrrrrrr2")
		},  N4ApiNotImplementedError, "Missing NoImpl-Error"  );
	}

	/** Access to missing provided method static. */
	@Test
	public test_Interface_static_setter_missing() : void {
		Assert.throws( function(){
			IA.missing_staticSetterIA = new A();
			console.log("grrrrrrr2")
		},  N4ApiNotImplementedError, "Missing NoImpl-Error"  );
	}
	
	
		
	
	/** test interface-provided method */
	@Test
	public test_Interface_provided_method() : void {
		var anIa : IA = new A();
		
		Assert.isNotUndefined ( anIa.providesDefaultIA );		

		Assert.doesNotThrow( function(){ anIa.providesDefaultIA(); } );
			
	}
	
	/** test interface-provided get */
	@Test
	public test_Interface_provided_get() : void {
		var anIa : IA = new A();

		Assert.isNotUndefined ( anIa.providesDefaultGet );		

		Assert.doesNotThrow( function(){ anIa.providesDefaultGet.constructor   } );
	}
	
	/** test interface-provided set */
	@Test
	public test_Interface_provided_set() : void {
		var anIa : IA = new A();
		Assert.doesNotThrow( function(){ anIa.providesDefaultSet = anIa;   } );
	}
	
	
	
	/** test missing interface-provided method */
	@Test
	public test_Interface_provided_method_missing() : void {
		var anIa : IA = new A();
		
		Assert.throws( function(){ anIa.missing_providesDefaultIA(); },
			N4ApiNotImplementedError, "Should get NotImpl error when calling #missing_providesDefaultIA() "
		);
			
	}
	
	/** test missing interface-provided get */
	@Test
	public test_Interface_provided_get_missing() : void {
		var anIa : IA = new A();

		Assert.throws( function(){ anIa.missing_providesDefaultGet.constructor   } , N4ApiNotImplementedError, 
		"Should get NotImpl calling #missing_providesDefaultGet"
		);
	}
	
	/** test missing interface-provided set */
	@Test
	public test_Interface_provided_set_missing() : void {
		var anIa : IA = new A();
		Assert.throws( function(){ anIa.missing_providesDefaultSet = anIa; }  , N4ApiNotImplementedError, 
		"Should get NotImpl calling #missing_providesDefaultSet"
		);
	}
	
	


	
	
	
	
	
		
//		var E e = E.a;
//		Assert.isNotUndefined( e );


//
//		Assert.throws( function() {
//			e = Missing_E.c;
//			console.log("grrrrrrr8")
//		}, N4ApiNotImplementedError, "Illegal Access to literal in missing Enumeration. Expected the N4ApiNotImplementedError");
	



}
