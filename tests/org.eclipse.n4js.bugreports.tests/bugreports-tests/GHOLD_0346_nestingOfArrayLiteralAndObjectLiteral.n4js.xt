/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.bugreports.tests.N4JSBugreportTest END_SETUP  */


class A {}
class B extends A {}
class C extends B {}

var b: B;

// XPECT noerrors -->
let v01: ~Object with { prop: Array<A> } = { prop: [ b ] };
// XPECT noerrors -->
let v02: Array<~Object with { prop: A}>  = [ { prop: b } ];


// deeper nesting:

let v11: ~Object with { propOuter: Array<~Object with { propInner: Array<A>}> }  = { propOuter: [ { propInner: [ b ] } ] };



// but the following must still produce errors:

// XPECT errors --> "~Object with { prop: Array<B> } is not a structural subtype of ~Object with { prop: Array<C> }: prop failed: Array<B> is not equal to Array<C>." at "{ prop: [ b ] }"
let v21: ~Object with { prop: Array<C> } = { prop: [ b ] };
// XPECT errors --> "Array<~Object with { prop: B }> is not a subtype of Array<~Object with { prop: C }> due to incompatible type arguments: ~Object with { prop: B } is not a structural subtype of ~Object with { prop: C }: prop failed: B is not equal to C." at "[ { prop: b } ]"
let v22: Array<~Object with { prop: C}>  = [ { prop: b } ];
