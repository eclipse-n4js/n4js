/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.bugreports.tests.N4JSBugreportTest END_SETUP  */


//
// problem of this bug was: when typing a property access expression with a BoundThisTypeRef as receiver type,
// method addSubstitutions() wasn't working properly for BoundThisTypeRef, i.e. in the example this[Class].
//



interface Foo<F extends Function> {
    public get bar() : F { return null }
}
class Class<T> implements Foo<{function(T):void}> {
    f() : void {
        // XPECT noerrors --> "F is not a subtype of {function(T):void}."
        var t : {function(T):void} = this.bar;
    }
    g() : void {
        // XPECT errors --> "int is not a subtype of T." at "23"
        this.bar(23);
    }

}

// XPECT noerrors --> "works outside the class"
var t1 : {function(string):void} = new Class<string>().bar;  // worked before, because here the receiver wasn't a BoundThisTypeRef
