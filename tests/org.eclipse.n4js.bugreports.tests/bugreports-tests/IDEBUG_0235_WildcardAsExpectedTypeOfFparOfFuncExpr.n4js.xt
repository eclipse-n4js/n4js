/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.bugreports.tests.N4JSBugreportTest END_SETUP  */


// Covers cases where the expected type of an fpar in a function expression
// is a Wildcard/ExistentialTypeRef.

// The type of the function expression's fpar will be inferred to the upper bound then,
// but only if the Wildcard/ExistentialTypeRef is not itself an argument to a generic
// type (see case f2 below).


class A {}
class X {}

class C<T> {}

class G<T> {
	f1(cb : {function(p : T)}){}
	f2(cb : {function(p : C<T>)}){}
	f3(cb : {function(p1 : C<T>, p2 : T)}){}
}

var g : G<? extends A> = null; // actual value not of interest, here

// XPECT noerrors --> "f(any)<:f(? extends A)"
g.f1(function(a : any) {})
// XPECT noerrors --> "f(A)<:f(? extends A)"
g.f1(function(a : A) {})
// XPECT noerrors --> "f(A)<:f(? extends A)"
g.f1(function(a) {
	// XPECT errors --> "? extends A is not a subtype of X." at "a"
	var test : X = a;
})


// XPECT noerrors --> "f(C<? extends A>)<:f(C<? extends A>)"
g.f2(function(a : C<? extends A>) {})
// XPECT noerrors -->
g.f2(function(a) {
	// XPECT errors --> "C<? extends A> is not a subtype of X." at "a"
	var test : X = a; // n.b.: here, the Wildcard/ExistentialTypeRef should *not* be replaced by the upper bound
})


// combining cases f1 and f2:

// XPECT noerrors -->
g.f3(function(a : C<? extends A>, b : A) {})
// XPECT noerrors -->
g.f3(function(a,b) {
	// XPECT errors --> "C<? extends A> is not a subtype of X." at "a"
	var test1 : X = a;
	// XPECT errors --> "? extends A is not a subtype of X." at "b"
	var test2 : X = b;
})
