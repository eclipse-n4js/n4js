/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.bugreports.tests.N4JSBugreportTest END_SETUP  */

// Simple variable binding in destructure pattern
// XPECT noerrors
let [a1: int, b1: int] = [undefined, 0];

// Nested variable binding in destructure pattern
// XPECT noerrors
let [[a2: int, c2: int], b2: int] = [[undefined, 1], 2];

// Simple reuse variable declaration in destructure pattern
// XPECT noerrors
let a3: int, b3: int;
[a3, b3] = [undefined, 0];

// Nested reused variable declaration in destructure pattern
// XPECT noerrors
let a4: int, b4: int, c4: int;
[[a3, c4], b3] = [[undefined, 1], 0];

// Simple variable binding in destructure pattern of ForStatement
// XPECT noerrors
for (var [a5: int  , b5: int ] of [[undefined, 1], [undefined, 3]]) {
	console.log(a5);
}

// Nested variable binding in destructure pattern of ForStatement
// XPECT noerrors
for (var [[a6: int, c6: int], b6: int ] of [[[undefined, 2], 1], [[undefined, 4], 3]]) {
	console.log(a6);
}

// Simple reused variable declaration in destructure pattern of ForStatement
// XPECT noerrors
var a7: int, b7: int;
for ([a7, b7] of [[undefined, 1], [undefined, 3]]) {
	console.log(a7);
}

// Nested reused variable declaration in destructure pattern of ForStatement
// XPECT noerrors
var a8: int, b8: int, c8: int;
for ([[a8, c8], b8] of [[[undefined, 2], 1], [[undefined, 4], 3]]) {
	console.log(a8);
}

// Simple variable declaration in destructure pattern of ObjectLiteral
// XPECT noerrors
let {prop1: x9:int, prop2: y9:int} = {prop1: undefined, prop2: 1};

// Nested variable declaration in destructure pattern of ObjectLiteral
// XPECT noerrors
let {prop1: {prop3: x10:int}, prop2: y10:int} = {prop1: {prop3: undefined}, prop2: 1};

// Simple reused variable declaration in destructure pattern of ObjectLiteral
// XPECT noerrors
let x11 : int, y11: int;
({prop1: x11,  prop2: y11} = {prop1: undefined, prop2: 1});

// Nested reused variable declaration in destructure pattern of ObjectLiteral
// XPECT noerrors
let x12 : int, y12: int;
({prop1: {prop3: x12},  prop2: y12} = {prop1: {prop3: undefined}, prop2: 1});

// ObjectLiteral nested in ArrayLiteral
// XPECT noerrors
var [,{v21 : u21: int,v22,v23},] = [,{v21:undefined,v22:0,v23:2},];

// ArrayLiteral nested in ObjectLiteral
// XPECT noerrors
var {v3:[v31 : int,v32,v33]} = {v3:[undefined,0,2]};

// Array destructure pattern in ForStatement
// XPECT noerrors
for(var [v41,v42,v43] = [undefined,1,2];false;) {}

// Object literal destructure pattern in ForStatement
// XPECT noerrors
for(var {v51: u51: int,v52,v53} =
	{v51:undefined,v52:1,v53:2};false;) {}

// Array <: IterableN
// XPECT noerrors
const [a: int, b: int, c: int] = "1".split("\n").map((s: string): int => 1);