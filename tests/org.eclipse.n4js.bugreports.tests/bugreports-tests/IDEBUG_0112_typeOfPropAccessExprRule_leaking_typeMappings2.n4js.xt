/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.bugreports.tests.N4JSBugreportTest END_SETUP  */


// original test case can be found in file IDEBUG_112_typeOfPropAccessExprRule_leaking_typeMappings.n4js.xt
// below code shows the same situation without using built-in types


class A {}
class B {}


var input : C<A> = null;
var output : C<B> = null;


class C<T> {
	public <U> map(  callback : {function(value: T) : U}  ) : C<U> {
		return null;
	}
	public concat(... items : union {T, C<T>}) : C<T> {
		return null;
	}

	public temp1(param : C<B>) : void {}
	public temp2(param : C<T>) : void {}
}


var v : C<B> = input.map(function(a : A) {
	return new B();
});

output.temp1( input.map(function(a : A) {
	return new B();
}));

output.temp2( input.map(function(a : A) {
	return new B();
}));


output.concat(
	input.map(function(a : A) {
		return new B();
	})
);


output.concat(
	output,
	new B(),
	input.map(function(a : A) {
		return new B();
	})
);
