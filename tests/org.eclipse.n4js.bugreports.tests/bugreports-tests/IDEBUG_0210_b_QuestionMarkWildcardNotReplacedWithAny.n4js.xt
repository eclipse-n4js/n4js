/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.bugreports.tests.N4JSBugreportPendingTest END_SETUP  */

interface I<T> {}
class G<T> implements I<T> {
    public put(p: T) {}
    public take(): T { return undefined; }
}

function <T> foo(i : I<T>, cb : {function(T):T}) { }
function <T> bar(i : I<T>, cb : {function(Array<T>):Array<T>}) { }
function <T> baz(i : I<T>, cb : {function(G<T>, G<T>)}) { }

var g : G<?>;

// these cases are legal
// (type of fpar 'x' will be the capture of the wildcard in variable 'g's type when reading
// variable 'g's value in order to obtain the first argument of the call expression)

// XPECT noerrors -->
foo(g, function(x){return x;})
// XPECT noerrors -->
foo(g, x=>x)
// XPECT noerrors -->
bar(g, function(x){return x;})
// XPECT noerrors -->
bar(g, x=>x)
// XPECT noerrors -->
baz(g, function(x,y) { x.put(y.take()); })
// XPECT noerrors -->
baz(g, (x,y)=>{ x.put(y.take()); })

// contrast the above with the following similar but different case (which should produce an error):

function <T> foo2(p1 : G<T>, p2 : G<T>) {}

var g1 : G<?>;
var g2 : G<?>;
// XPECT errors ---
// "G<?> is not a subtype of G<T>." at "g1"
// "G<?> is not a subtype of G<T>." at "g2"
// ---
foo2(g1,g2);

// even in this case we want to show an error:

// XPECT errors ---
// "G<?> is not a subtype of G<T>." at "g1"
// "G<?> is not a subtype of G<T>." at "g1"
// ---
foo2(g1,g1);
// We could allow the call expression in the previous line if we were sure the
// value of variable 'g1' does not change between reading this variable for obtaining
// the first and reading it for obtaining the second argument. In Javascript, this
// would actually be possible (single-threaded), but we do not want to make use of
// such assumptions (at this time).
