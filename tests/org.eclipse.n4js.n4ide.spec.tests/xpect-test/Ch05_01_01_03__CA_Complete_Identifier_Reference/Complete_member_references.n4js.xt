/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.n4ide.spec.tests.N4JSXpectPluginUITest END_SETUP */


class X<T> {

	field1 : string;
	field2 : number;
	field3 : T;

	foo1(name : string) : void {
		var var_foo;
	}
	foo2(age : number) : void {}
	foo3(info : T) : void {}

	static sfoo1(name : string) : void {
		var var_sfoo : string;
	}
	static sfoo2(age : number) : void {}
	static sfoo3(info : string) : void {}
}

class XX {

	fieldBad : string;
	fooBad() : void {}
}

var x : X<string>;


//
// check for some built-in members
// (don't check for all of them to not make this test too fragile)
//

// XPECT contentAssistList at 'x.<|>field' proposals contains --> toString, hasOwnProperty, valueOf
// XPECT contentAssistList at 'x.<|>field' proposals not --> prototype, getOwnPropertyNames, defineProperty
x.field1;

// static members of X XPECT contentAssistList at 'X.<|>sfoo' proposals contains --> prototype, getOwnPropertyNames, defineProperty, sfoo1, sfoo2, sfoo3
// instance members of Function XPECT contentAssistList at 'X.<|>sfoo' proposals contains --> hasOwnProperty, toString, valueOf
X.sfoo1;



//
// make sure operators and keywords do *not* appear in content assist for member access
//

// XPECT contentAssistList at 'x.<|>field' proposals not --> ++, --, public, while, throw
x.field1;

// XPECT contentAssistList at 'X.<|>sfoo' proposals not --> ++, --, public, while, throw
X.sfoo1;



//
// check for members of X
//

// XPECT contentAssistList at 'x.<|>field' proposals contains --> field1, field2, field3, foo1, foo2, foo3
// XPECT contentAssistList at 'x.<|>field' proposals not --> sfoo1, sfoo2, sfoo3
// XPECT contentAssistList at 'x.<|>field' proposals not --> var_foo, var_sfoo, name, age, info, fieldBad, fooBad
x.field1;

// XPECT contentAssistList at 'X.<|>sfoo' proposals contains --> sfoo1, sfoo2, sfoo3
// TODO content assist works fine for this test, but test method fails because "foo1" is a substring of "sfoo1"!
// XPECT FIXME contentAssistList at 'X.<|>sfoo' proposals not --> field1, field2, field3, foo1, foo2, foo3
// XPECT       contentAssistList at 'X.<|>sfoo' proposals not --> field1, field2, field3
// XPECT contentAssistList at 'X.<|>sfoo' proposals not --> var_foo, var_sfoo, name, age, info, fieldBad, fooBad
X.sfoo1;


// XPECT contentAssistList at 'x.fie<|>ld' proposals contains --> field1, field2, field3
x.field1;
// XPECT contentAssistList at 'X.sf<|>oo' proposals contains --> sfoo1, sfoo2, sfoo3
X.sfoo1;


// XPECT contentAssistList at 'x.field<|>' proposals contains --> field1, field2, field3
x.field
// XPECT contentAssistList at 'X.sfoo<|>' proposals contains --> sfoo1, sfoo2, sfoo3
X.sfoo



//
// properties of an object literal
//

var ol = {
	prop1: "hello",
	prop2: 42,
	prop3: "world"
}

// XPECT contentAssistList at 'ol.<|>prop' proposals contains --> prop1, prop2, prop3
// XPECT contentAssistList at 'ol.<|>prop' proposals not --> var_foo, var_sfoo, name, age, info, fieldBad, fooBad
ol.prop1;

// XPECT contentAssistList at 'ol.pr<|>op' proposals contains --> prop1, prop2, prop3
ol.prop1;

// XPECT contentAssistList at 'ol.prop<|>' proposals contains --> prop1, prop2, prop3
ol.prop
