/*
 * Copyright (c) 2018 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.n4ide.spec.tests.N4JSXpectPluginUITest

	Workspace {
		Project "ProjectCA" {
			SrcFolder {
				File "ModuleA.n4js" {}
				File "ModuleB.n4js" {}
				ThisFile {}
			}
			File { from="package.json" }
		}
	}

	END_SETUP
*/


function funcLocal() {}

const funcRemoteInB = 42; // this will introduce a name conflict when importing "funcRemoteInB" and thus trigger the import with alias mode

class ClassLocal {
	instanceMethod() {}
	static staticMethod() {}
}

let varWithFunc = funcLocal;


// XPECT contentAssist at 'funcL<|>;' apply 'funcLocal' --> funcLocal(<|>);
funcL;


/* XPECT contentAssist at 'funcR<|>;' apply 'funcRemoteInA - ModuleA' ---
<...>
import {funcRemoteInA} from "ModuleA";
<...>
funcRemoteInA();
<...>
--- */
funcR;


// import with alias mode
/* XPECT contentAssist at 'funcR<|>;' apply 'funcRemoteInB - ModuleB' ---
<...>
import {funcRemoteInB as AliasFuncRemoteInB} from "ModuleB";
<...>
AliasFuncRemoteInB();
<...>
--- */
funcR;


// XPECT contentAssist at 'new ClassLocal().in<|>;' apply 'instanceMethod' --> new ClassLocal().instanceMethod(<|>);
new ClassLocal().in;


// XPECT contentAssist at 'ClassLocal.stat<|>;' apply 'staticMethod' --> ClassLocal.staticMethod(<|>);
ClassLocal.stat;


// a variable with a type that is a subtype of function should not get the parentheses (could be changed in the future):

// XPECT contentAssist at 'varWF<|>;' apply 'varWithFunc' --> varWithFunc;
varWF;
