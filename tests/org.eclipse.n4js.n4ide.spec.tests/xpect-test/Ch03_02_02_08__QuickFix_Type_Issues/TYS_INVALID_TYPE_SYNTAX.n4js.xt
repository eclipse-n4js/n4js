/*
 * Copyright (c) 2019 HAW Hamburg.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   HAW Hamburg - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.n4ide.spec.tests.N4JSXpectPluginUITest

   	Workspace {
		JavaProject "N4JSXPECTTests" {
			Folder "src" {
				ThisFile {}
			}
			Folder "src-gen" {}
			File "package.json" { from="../../test-config/package.json" }
		}
	}

END_SETUP
 */
//
class C1 {
    // XPECT errors --> "Wrong type syntax: Use foo:Type rather than Type foo." at "int"
    int foo() {return 0;}
}
class C2 {
	// XPECT quickFixList at '<|>int' proposals contain --> "Convert to colon style"
	int foo() {return 0;}
}
class C3 {
/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
(...)
int foo() {return 0;}
}
  class C3 {
-     int 
|  foo() [|: int] {return 0;}
  }
	class C4 {
      /\*T)1*\/int/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/)/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
  (...)
---
*/
    int foo() {return 0;}
}
class C4 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
		/\*T)1*\/[int|]/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/)[|: int]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
	---
	*/
    /*T)1*/int/*T)2*/foo01/*T)3*/(/*T)4*/)/*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C5 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
		/\*T)1*\/ [int |]/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/)[|: int]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/ 
	---
	*/
    /*T)1*/ int /*T)2*/foo01/*T)3*/(/*T)4*/)/*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C6 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
		/\*T)1*\/[int|]/\*T)2*\/ foo01 /\*T)3*\/(/\*T)4*\/)[|: int]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
	---
	*/
    /*T)1*/int/*T)2*/ foo01 /*T)3*/(/*T)4*/)/*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C7 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
		/\*T)1*\/[int|]/\*T)2*\/foo01/\*T)3*\/ ( /\*T)4*\/)[|: int]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
	---
	*/
    /*T)1*/int/*T)2*/foo01/*T)3*/ ( /*T)4*/)/*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C8 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
		/\*T)1*\/[int|]/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/ ) [|: int]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
	---
	*/
    /*T)1*/int/*T)2*/foo01/*T)3*/(/*T)4*/ ) /*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C9 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
	(...)
			/\*T)1*\/int/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/)/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
		}
		class C9 {
	| /\*T)1*\/[int|]/\*T)2*\/
	 foo01/\*T)3
	      *\/(
	      /\*
	       * T)4
	       *\/
	|      )[|: int]
	       /\*
	        * T)5
	        *\/
	(...)
	---
	*/
    /*T)1*/int/*T)2*/foo01/*T)3
    */(
    /*
     * T)4
     */
     )
     /*
      * T)5
      */
      { /*
       )T6 */
       return 0 /* */  ;}
       /*T)7*/
}
class C10 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
	/\*T)1*\/[int|]/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/y:String,/\*T)4*\/x:int/\*T)4*\/)[|: int]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
	---
	*/
    /*T)1*/int/*T)2*/foo01/*T)3*/(/*T)4*/y:String,/*T)4*/x:int/*T)4*/)/*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C11 {
	/* XPECT quickFix at '<|>UnkownClass' apply 'Convert to colon style' fileValid ---
		/\*T)1*\/[UnkownClass|]/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/)[|: UnkownClass]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
	---
	*/
    /*T)1*/UnkownClass/*T)2*/foo01/*T)3*/(/*T)4*/)/*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C12 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
		/\*T)1*\/[int|]/\*T)2*\/foo01/\*T)3*\/(/\*T)4*\/unknownParam/\*T)4*\/)[|: int]/\*T)5*\/{/\*)T6*\/return 0;}/\*T)7*\/
	---
	*/
    /*T)1*/int/*T)2*/foo01/*T)3*/(/*T)4*/unknownParam/*T)4*/)/*T)5*/{/*)T6*/return 0;}/*T)7*/
}
class C13 {
	/* XPECT quickFix at '<|>C13' apply 'Convert to colon style' fileValid ---
		/\*T)C13*\/[C13|]/\*T)2*\/foo01/\*T)3*\/(C13:/\*T)C13*\/C13[)|): C13]/\*T)C13*\/{/\*)T6*\/return null;}/\*T)7*\/
	---
	*/
    /*T)C13*/C13/*T)2*/foo01/*T)3*/(C13:/*T)C13*/C13)/*T)C13*/{/*)T6*/return null;}/*T)7*/
}
class C14 {
	/* XPECT quickFix at '<|>Array' apply 'Convert to colon style' fileValid ---
		(...)
		      /\*T)C13*\/C13/\*T)2*\/foo01/\*T)3*\/(C13:/\*T)C13*\/C13)/\*T)C13*\/{/\*)T6*\/return null;}/\*T)7*\/
		  }
		  class C14 {
		+ 	foo():
		| 	Array<String> [foo()|] {return null;}
		  }
		  class C15 {
		      /\*Com1*\/Array</\*Com2*\/String/\*Com3*\/>/\*Com4*\/ foo() {return null;}
		(...)
	---
	*/
	Array<String> foo() {return null;}
}
class C15 {
    /* XPECT quickFix at '<|>Array' apply 'Convert to colon style' fileValid ---
        /\*Com1*\/[|/\*Com4*\/ foo():]Array</\*Com2*\/String/\*Com3*\/>[/\*Com4*\/ foo()|] {return null;}
    ---
    */
    /*Com1*/Array</*Com2*/String/*Com3*/>/*Com4*/ foo() {return null;}
}
class C16 {
	/* XPECT quickFix at '<|>int' apply 'Convert to colon style' fileValid ---
	public abstract [int|] foo()[|: int] {return 0;}
    ---
    */
	public abstract int foo() {return 0;}
}
class C17 {
/* XPECT quickFix at '<|>Array' apply 'Convert to colon style' fileValid ---
		(...)
		public abstract int foo() {return 0;}
		  }
		  class C17 {
		+ 	foo():
		| 	Array<Array<String>> [foo()|] {return null;}
		  }
		  class C18 {
		      <X extends T> void foo(x: X) { }
		(...)
	---
	*/
    Array<Array<String>> foo() {return null;}
}
class C18 {
/* XPECT quickFix at '<|>void' apply 'Convert to colon style' fileValid ---
		<X extends T> [void|] foo(x: X)[|: void] { }
	---
	*/
    <X extends T> void foo(x: X) { }
}
