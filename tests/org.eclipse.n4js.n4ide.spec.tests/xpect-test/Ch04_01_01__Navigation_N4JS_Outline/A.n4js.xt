/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.n4ide.spec.tests.N4JSXpectPluginUITest

	Workspace {
		JavaProject "TestProject" {
			SrcFolder {
				Folder "outline" {
					Folder "test" {
						ThisFile {}
						File "B.n4js" {}
					}
				}
			}
			Folder "src-gen" {}
			File "manifest.n4mf" {}
		}
	}

	END_SETUP
*/

// XPECT warnings --> "The import of * as NB from outline/test/B is unused." at "* as NB"
import * as NB from "outline/test/B"
// XPECT errors --> "Z from outline/test/B is already imported as NB.Z." at "Z"
import { Z } from "outline/test/B"
/* XPECT errors ---
 "B1 from outline/test/B is already imported as NB.B1." at "B1"
 "X from outline/test/B is already imported as NB.X." at "X as Y"
--- */
import {B1, X as Y} from "outline/test/B"



class C1 {
	field0=0;
	private field1 : number=1;
	project field2 : number=2;
	protected field3 : number=3;
	@Internal public field4 : number=4;
	public field5 : number=5;


	constructor() {

	}

	method0() {

	}

	private method1() {

	}

	project method2() : number {
		return 0
	}

	protected method3() {

	}

	@Internal public method4() {

	}

	public method5(x, y : string) : string {
		return ""
	}
}

export class C2 {
	field0 : number=0;

	method0() {

	}
}

export project class C3 {
	static field0 : number=0;

	@Final
	static method0() {

	}
}

@Internal
export public class C4 {
	field0 : number=0;

	method0() {

	}
}

export public class C5 {
	field0 : number=0;

/* XPECT errors ---
"A constructor must not be declared abstract, static or final and may not be annotated with @Override." at "constructor"
"The abstract constructor constructor in class C5 can only be defined in an abstract class." at "constructor"
--- */
	abstract constructor(x : number)

	get x() {
		return null
	}

	protected set x(param : string) {
	}

	method0() {
// XPECT errors -->	"any is not a subtype of string." at "this.x"
		var x : string = this.x
	}
}

abstract class C6 {
	abstract method0()
	static method0() {

	}
}

class C7<T> {
// XPECT errors --> "The abstract method method0 in class C7 can only be defined in an abstract class." at "method0"
	abstract method0()
	static method0() {

	}

	<U> x(u : U) : T {
		return null
	}
}

interface R1 {

}

export interface R2 {

}

export project interface R3 {

}

@Internal
export public interface R4 {

}

export public interface R5 {

}

interface I1 {

}

export interface I2 {

}

export project interface I3 {

}

@Internal
export public interface I4 {

}

export public interface I5 {

}

enum E1 {
	L1
}

export enum E2 {
	L1
}

export project enum E3 {
	L1
}

@Internal
export public enum E4 {
	L1
}

export public enum E5 {
	L1
}

function f1(x : string) {

}

export function f2(x) {

}

export project function f3() : string {
	return ""
}

@Internal
export public function f4() {

}

export public function f5() {

}

var v1=1

export var v2=2

export project var v3 : number=3

@Internal
export public var v4=4

export public var v5=5

export var v6=2, v7=5

export const v8 : number=2, v9=5
