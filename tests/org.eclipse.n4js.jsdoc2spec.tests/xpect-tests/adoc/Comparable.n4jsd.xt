/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.jsdoc2spec.JSDoc2SpecTest END_SETUP  */

/* XPECT specADoc ---
   Any class that supports equality checks should implement this interface.
   Comparable is not similar to Java's comparable. In N4JS, it only provides the equals method.

   ---
 */
/**
 * Any class that supports equality checks should implement this interface.
 * Comparable is not similar to Java's comparable. In N4JS, it only provides the equals method.
 *
 * @specFromDescription
 */
export external public class Comparable {

	/* XPECT specADoc ---

	   [[gsec:spec_adoc.Comparable.Comparable.equals]]
	   [role=memberdoc]
	   === ++Method equals++

	   ==== Signature
	   srclnk:++n4js:tests:org.eclipse.n4js.jsdoc2spec.tests:xpect-tests/adoc/Comparable:Comparable#equals++[``++public equals(other: any): boolean++``]

	   ==== Description

	   returns true if the provided entity is equal to the current object by loose equality rules.
	   Other may be null, in that case, false is to be returned.


	   ==== Semantics
	   [.todo, label="test ++Comparable.equals++"]
	   --
	   Add tests specifying semantics for ``++equals(other: any): boolean++``
	   --

	   ---
	 */
    /**
     * returns true if the provided entity is equal to the current object by loose equality rules.
     * @spec Other may be null, in that case, false is to be returned.
     */
    public equals(other: any): boolean;

	/* XPECT specADoc ---

	   [[gsec:spec_adoc.Comparable.Comparable.static.equal]]
	   [role=memberdoc]
	   === ++Static method equal++

	   ==== Signature
	   srclnk:++n4js:tests:org.eclipse.n4js.jsdoc2spec.tests:xpect-tests/adoc/Comparable:Comparable@equal++[``++public equal(left: any, right: any): boolean++``]

	   ==== Description

	   Returns ``++true++`` if the arguments are equal to each other and ``++false++`` otherwise.
	   This method is compares ``++var x:~i~C[]; *cc*; _sdnf = _dfd_ads*_xy*i; f();++`` and ``++undefined++`` using type coercion rules i.e.
	   ``++null++`` and ``++undefined++`` are treated loosely equal to each other.

	   If the arguments do not implement the Comparable interface, they are compared via a "deep equals" using
	   loose equality rules.


	   [source,n4js]
	   --
	   public void String toString() {
	   	return "Hell**o** _Worl~d~_!";
	   }

	   --


	   Otherwise, equality is determined by using the ``++Comparable#equals++`` method of the first argument.


	   ==== Semantics
	   [.todo, label="test ++Comparable.equal++"]
	   --
	   Add tests specifying semantics for ``++equal(left: any, right: any): boolean++``
	   --

	   ---
	 */
    /**
     * Returns <code>true</code> if the arguments are equal to each other and <code>false</code> otherwise.
     * This method is compares <code>var x:~i~C[]; *cc*; _sdnf = _dfd_ads*_xy*i; f();</code> and <code>undefined</code> using type coercion rules i.e.
     * <code>null</code> and <code>undefined</code> are treated loosely equal to each other.
     *
     * If the arguments do not implement the Comparable interface, they are compared via a "deep equals" using
     * loose equality rules.
     *
     * <code>
     * public void String toString() {
     * 	return "Hell**o** _Worl~d~_!";
     * }
     * </code>
     *
     * Otherwise, equality is determined by using the <code>Comparable#equals</code> method of the first argument.
     *
     * @param left an entity to be compared
     * @param right another entity to be compared with <code>left</code> for loose equality.
     *
     * @return <code>true</code> if the arguments are equal to each other and <code>false</code> otherwise.
     *
     * @specFromDescription
     */
    public static equal(left: any, right: any): boolean;
}
