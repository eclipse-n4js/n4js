/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

/* XPECT_SETUP org.eclipse.n4js.jsdoc2spec.JSDoc2SpecTest END_SETUP  */

/* XPECT specADoc ---
   Spec of Type.

   ---
 */
/**
 * @spec Spec of Type.
 */
export external public class C {

	/* XPECT specADoc ---

	   [[gsec:spec_adoc.SimpleType.C.foo]]
	   [role=memberdoc]
	   === ++Method foo++

	   ==== Signature
	   srclnk:++n4js:tests:org.eclipse.n4js.jsdoc2spec.tests:xpect-tests/adoc/SimpleType:C#foo++[``++public foo(): void++``]

	   ==== Description

	   Spec of Member with $\forall$ and ``++some++`` some code.


	   ==== Semantics
	   [TODO, title="test ++C.foo++"]
	   --
	   Add tests specifying semantics for ``++foo(): void++``
	   --

	   ---
	 */
	/**
	 * @spec Spec of Member with <tex>$\forall$</tex> and <code>some</code> some code.
	 */
	public foo() : void

}


/* XPECT specADoc ---
   Description of Type.

   ---
 */
/**
 * Description of Type.
 * @specFromDescription
 */
export external public class D {

	/* XPECT specADoc ---

	   [[gsec:spec_adoc.SimpleType.D.foo]]
	   [role=memberdoc]
	   === ++Method foo++

	   ==== Signature
	   srclnk:++n4js:tests:org.eclipse.n4js.jsdoc2spec.tests:xpect-tests/adoc/SimpleType:D#foo++[``++public foo(): void++``]

	   ==== Description

	   The size must remain the same: ``++M.size() = M.map(..).size()++``

	   Must be able to convert from a zero.
	   Here $\forall$ is possible


	   ==== Semantics
	   [TODO, title="test ++D.foo++"]
	   --
	   Add tests specifying semantics for ``++foo(): void++``
	   --


	   ---
	 */
	/**
	 * The size must remain the same: <code>M.size() = M.map(..).size()</code>
	 *
	 * Must be able to convert from a zero.
	 * <tex>Here $\forall$ is possible</tex>
	 * @specFromDescription
	 */
	public foo() : void

	/* XPECT specADoc ---

	   [[gsec:spec_adoc.SimpleType.D.bar]]
	   [role=memberdoc]
	   === ++Method bar++

	   ==== Signature
	   srclnk:++n4js:tests:org.eclipse.n4js.jsdoc2spec.tests:xpect-tests/adoc/SimpleType:D#bar++[``++public bar(): void++``]

	   ==== Description

	   De**scr**iption **of** Member. Consider ``++var i : Map<~r~C, ~K>;++``.


	   * Hallo


	   ==== Semantics
	   [TODO, title="test ++D.bar++"]
	   --
	   Add tests specifying semantics for ``++bar(): void++``
	   --


	   ---
	 */
	/**
	 * De<b>scr</b>iption <b>of</b> Member. Consider <code>var i : Map<~r~C, ~K>;</code>.
	 <ol><li>Hallo</ol>
	 * @specFromDescription
	 */
	public bar() : void
}
