module org.eclipse.n4js.semver.GenerateSemver

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import org.eclipse.n4js.generation.*

var rootPath = ".."
var runtimeProjectName = "org.eclipse.n4js.semver"

/**
 * Workflow to generate the language infrastructure of the Semver language.
 */
Workflow {
	component = XtextGenerator {
		configuration = SemanticVersioningGeneratorModule {
			project = StandardProjectConfig {
				baseName = runtimeProjectName
				rootPath = rootPath
				genericIde = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = false
			}
			code = {
				encoding = "UTF-8"
				// same as org.eclipse.n4js.releng.utils.license.LicenseTemplate.COPYRIGHT_HEADER
				// should re-use in the long run
				fileHeader =
				"/**\n * Copyright (c) 2017 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */"
				lineDelimiter = '\n'
				preferXtendStubs = false
			}
		}

		// use XtextGeneratorLanguage in order to disable features like scoping and generation for the Semver language
		language = XtextGeneratorLanguage {
			name = "org.eclipse.n4js.semver.Semver"
			fileExtensions = "semver"
			referencedResource = "platform:/resource/org.eclipse.n4js.semver.model/model/Semver.xcore"

			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			// enable support for validation
			fragment = validation.ValidatorFragment2 {
				inheritImplementation = false
			}

			fragment = grammarAccess.GrammarAccessFragment2 {}
			fragment = ecore.EMFGeneratorFragment2 {}
			fragment = resourceFactory.ResourceFactoryFragment2 {}
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
				// debugGrammar = true // generate antlr grammar file
				options = {
					// backtrack = true
				}
			}
			fragment = junit.Junit4Fragment2 {}
		}
	}
}
