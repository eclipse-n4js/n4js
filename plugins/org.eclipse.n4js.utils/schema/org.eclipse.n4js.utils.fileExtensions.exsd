<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.n4js.utils" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.eclipse.n4js.utils" id="org.eclipse.n4js.utils.fileExtensions" name="Runnable File Extensions"/>
      </appinfo>
      <documentation>
         This extension point should be used by sub-language plugins to register their file extensions to specific categories. These categories are used by the system to enable / disable certain features for a given file extension.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="transpilableFileExtensions"/>
            <element ref="runnableFileExtensions"/>
            <element ref="testFileExtensions"/>
            <element ref="typableFileExtensions"/>
            <element ref="rawFileExtensions"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="runnableFileExtensions">
      <complexType>
         <attribute name="extensions" type="string" use="required">
            <annotation>
               <documentation>
                  Used by IDE runners to decided if a given file is of a runnable type.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="transpilableFileExtensions">
      <complexType>
         <attribute name="extensions" type="string">
            <annotation>
               <documentation>
                  Used by the IDE decided if a given file should be subject of transpilation (even if pass through copy is made with no source code transformation). This also affects features like jumping to generated code.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="testFileExtensions">
      <complexType>
         <attribute name="extensions" type="string">
            <annotation>
               <documentation>
                  Used by the IDE testers to decide if a given file is of a testable type.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="typableFileExtensions">
      <complexType>
         <attribute name="extensions" type="string">
            <annotation>
               <documentation>
                  Used by the IDE in various places, where building AST or TModel of file is need. Also when calulating if changes to that file are affecting containing or other source containers (used e.g. by the eclipse/xtext builder).
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="rawFileExtensions">
      <complexType>
         <attribute name="extensions" type="string">
            <annotation>
               <documentation>
                  Used in various places, mainly to filter files out. For example file may be parsed, AST and TModel built, but IDE will not organize imports in those files.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         0.0.1
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         The following is an example demonstrating how to declare transpilable, runnable and test file extensions for n4js language:
&lt;p&gt; 
&lt;pre&gt;
   &lt;extension
     point=&quot;org.eclipse.n4js.utils.fileExtensions&quot;&gt;
     &lt;transpilableFileExtensions extensions=&quot;n4js, js&quot;/&gt;
     &lt;runnableFileExtensions extensions=&quot;n4js, js&quot;/&gt;
     &lt;testFileExtensions extensions=&quot;n4js&quot;/&gt;
     &lt;typableFileExtensions extensions=&quot;n4jsd, n4js, js&quot;/&gt;
     &lt;rawFileExtensions extensions=&quot;js&quot;/&gt;
   &lt;/extension&gt;
&lt;/pre&gt; 
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         See example for usage.
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         &lt;pre&gt;
Copyright (c) 2017 NumberFour AG.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
   NumberFour AG - Initial API and implementation
&lt;/pre&gt;
      </documentation>
   </annotation>

</schema>
