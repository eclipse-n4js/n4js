/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@Ecore(nsURI="http://www.eclipse.org/n4js/projectDescription/projectDescription")
@GenModel(fileExtensions="n4jsProjectDescription",
// As with IDE-1456 removing the modelPluginID to avoid IOE with 'The path' ... 'is unmapped.' in
// the maven plugin: "xtext-maven-plugin:2.8.2:generate"
//	modelPluginID="org.eclipse.n4js.model",
	modelDirectory="/org.eclipse.n4js.model/emf-gen",
	forceOverwrite="true",
	updateClasspath="false",
	complianceLevel="11.0",
	copyrightFields="false",
	// both copyrightText and documentation are required to align the output of the MWE2 and incremental builder (see GH-841)
	copyrightText="Copyright (c) 2016 NumberFour AG.\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nwhich accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html\n\nContributors:\n  NumberFour AG - Initial API and implementation",
	documentation="*\nCopyright (c) 2016 NumberFour AG.\nAll rights reserved. This program and the accompanying materials\nare made available under the terms of the Eclipse Public License v1.0\nwhich accompanies this distribution, and is available at\nhttp://www.eclipse.org/legal/epl-v10.html\n * Contributors:\n  NumberFour AG - Initial API and implementation",
	language="")

package org.eclipse.n4js.projectDescription

import org.eclipse.n4js.semver.Semver.NPMVersionRequirement
import org.eclipse.n4js.semver.Semver.VersionNumber

/*
 * Basic information about a project, as read from the {@code package.json}
 * file in the project's root folder.
 */
class ProjectDescription {

	/*
	 * The <em>N4JS project name</em>, as defined at
	 * {@link org.eclipse.n4js.utils.ProjectDescriptionUtils#isProjectNameWithScope(String)}.
	 */
	String projectName
	String vendorId
	String vendorName
	contains VersionNumber projectVersion
	ProjectType projectType
	String mainModule
	contains ProjectReference extendedRuntimeEnvironment
	contains ProjectReference[] providedRuntimeLibraries
	contains ProjectReference[] requiredRuntimeLibraries
	contains ProjectDependency[] projectDependencies
	String implementationId
	contains ProjectReference[] implementedProjects
	String outputPath
	contains SourceContainerDescription[] sourceContainers
	contains ModuleFilter[] moduleFilters
	contains ProjectReference[] testedProjects

	/**
	 *  Returns the name of the package the project provides type definitions for.
	 *
	 * {@code null} if this project does not specify the property (i.e. not a 
	 * type definitions project (cf. {@link ProjectType#DEFINITION}).
	 */
	String definesPackage

	/* 
	 * Tells if the project represented by this project description has a nested
	 * "node_modules" folder, i.e. a folder named "node_modules" located right next
	 * to the package.json file.
	 */
	boolean hasNestedNodeModulesFolder

	/*
	 * Indicates whether the underlying project description explicitly configured
	 * the project to be an N4JS project (e.g. includes n4js section). 
	 */
	boolean hasN4JSNature
	
	/*
	 * Tells whether the project represented by this project description is the root of a yarn workspace.
	 * This flag will be {@code true} iff the package.json contains yarn's top-level property "workspaces",
	 * no matter the value (i.e. will be {@code true} even if the value is the empty array).
	 */
	boolean yarnWorkspaceRoot

	/*
	 * Value of top-level property "workspaces" in package.json, used by yarn to denote the contained projects.
	 */
	String[] workspaces
}

/*
 * Lists one or more source folders inside the project with a common intended usage (e.g. main source, tests).
 */
class SourceContainerDescription {
	SourceContainerType sourceContainerType
	String[] paths
}

/* Reference to another project without version requirement. */
class ProjectReference {
	String projectName
}

/* Reference to another project, including a version requirement. */
class ProjectDependency extends ProjectReference {
	DependencyType ^type
	String versionRequirementString
	contains NPMVersionRequirement versionRequirement
}

/*
 * Lists the filters that add special treatment to some of the files regarding
 * validation, compilation and wrapping of output code.
 */
class ModuleFilter {
	ModuleFilterType moduleFilterType
	contains ModuleFilterSpecifier[] moduleSpecifiers
}

class ModuleFilterSpecifier {
	String moduleSpecifierWithWildcard
	String sourcePath
}

enum ProjectType {
	PLAINJS = 0,
	VALIDATION = 1,
	DEFINITION = 2,
	APPLICATION = 3,
	PROCESSOR = 4,
	LIBRARY = 5,
	API = 6,
	RUNTIME_ENVIRONMENT = 7,
	RUNTIME_LIBRARY = 8,
	TEST = 9
}

enum SourceContainerType {
	SOURCE = 0,
	TEST = 1,
	EXTERNAL = 2
}

enum ModuleFilterType {
	/* Turns off validation of affected modules. */
	NO_VALIDATE = 0
}

/** Different types of dependencies. */
enum DependencyType {
	/** Dependencies of this type must always be present. */
	RUNTIME,
	/** Dependencies of this type must be present at development-time. */
	DEVELOPMENT,
	/** Dependencies of this type are added by n4jsc during project discovery. */
	IMPLICIT
}
