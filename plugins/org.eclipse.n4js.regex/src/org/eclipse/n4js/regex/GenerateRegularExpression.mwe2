/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
module org.eclipse.n4js.regex.GenerateRegularExpression

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import org.eclipse.n4js.generation.*

var rootPath = ".." // in the build this variable is configured externally, see 'plugins/pom.xml'
var runtimeProjectName = "org.eclipse.n4js.regex"

Workflow {
	component = XtextGenerator {
		configuration = RegularExpressionGeneratorModule {
			project = StandardProjectConfig {
				baseName = runtimeProjectName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					root = "${rootPath}/../tests/${runtimeProjectName}.tests"
				}
				genericIde = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = false
			}
			code = {
				encoding = "UTF-8"
				// same as org.eclipse.n4js.releng.utils.license.LicenseTemplate.COPYRIGHT_HEADER
				// should re-use in the long run
				fileHeader = "/**\n * Copyright (c) 2017 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */"
				lineDelimiter = '\n'
				preferXtendStubs = true
			}
		}

		language = XtextGeneratorLanguage {
			name = "org.eclipse.n4js.regex.RegularExpression"
			fileExtensions = "regex"
			generateXtendStubs = false

			// Java API to access grammar elements (required by several other fragments)
			// fragment = org.eclipse.n4js.antlr.grammarAccess.WindowsAwareGrammarAccessFragment auto-inject {}
			fragment = grammarAccess.GrammarAccessFragment2 {}
			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment2 {
				// this seems to be the youngest version available an maven central
				emfRuntimeVersion = "2.11"
			}

			// serializer 2.0
			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment2 {}

			// The antlr parser generator fragment.
			fragment = org.eclipse.n4js.antlr.N4AntlrGeneratorFragment2 {
				antlrParam = "-Xconversiontimeout"
				antlrParam = "10000"
				combinedGrammar = false
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 {
			//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				inheritImplementation = false
			}

			// old scoping and exporting API
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {
			 	inheritImplementation = false
			}
			fragment = exporting.QualifiedNamesFragment2 {}
			fragment = builder.BuilderIntegrationFragment2 {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			//  -- deactivated as currently not required
			// fragment = formatting.Formatter2Fragment2 {}

			// labeling API
			fragment = ui.labeling.LabelProviderFragment2 {}

			// outline API
			fragment = ui.outline.OutlineTreeProviderFragment2 {}
			fragment = ui.outline.QuickOutlineFragment2 {}

			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 {
				inheritImplementation = false
			}

			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 {
				inheritImplementation = false
			}

			// generates junit test support classes into Generator#pathTestProject
			//fragment = junit.Junit4Fragment2 {}

			// project wizard (optional)
			// fragment = ui.projectWizard.SimpleProjectWizardFragment2 {
			//      generatorProjectName = "${runtimeProject}"
			// }

			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 {}

			// provides a preference page for template proposals
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}

			// provides a compare view
			fragment = ui.compare.CompareFragment2 {}
		}
	}
}
