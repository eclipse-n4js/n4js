/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


// ^^^ the content of this file must not be contained in define block (if compiled, remove first line)
/*
 * This file is used to (manually) generate the built-in types, the compiled code is directly provided by the engine.
 * Internally we use this file to let the compiler create the engine provided code.
 * See /org.eclipse.n4js/predefined/builtin_n4.n4ts for the types
 * See /org.eclipse.n4js.runner/res/ide-nodejs-env/n4js-es5/preload/N4BuiltInClasses.js for the compiled (and manually adapted) code.
 *
 * !!! WARNING !!!
 * code in N4BuiltInClasses.js has been changed manually; so, before re-generating from this file, incorporate those changes here!
 */

// Note: N4Class is named N4Class_ here in order make file compilable with default N4Class present.


/**
 * Base class for all N4 reflective elements.
 */
export public abstract class N4Element extends Object {

	/**
	 * Annotations attached to this element.
	 */
	public Array<N4Annotation> annotations = [];

	/**
	 * Returns true if an annotation with the given name is attached to the element.
	 */
	public boolean hasAnnotation(string name) {
		return this.annotations.some(function (a) {
			return a.name === name
		});
	}

	/**
	 * Returns any annotation with the given name attached to the element, or null if no such annotation is found.
	 */
	public N4Annotation anyAnnotation(string name) {
		//see https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.find
		for (var i = this.annotations.length - 1; i >= 0; i--) {
			var a = this.annotations[i];
			if (a.name === name) {
				return a;
			}
		}
		return null;
	}

	/**
	 * Returns all annotations with the given name attached to the element, or an empty array if no such annotations are found.
	 */
	public Array<N4Annotation> allAnnotations(string name) {
		return this.annotations.filter(function (a) {
			return a.name === name
		});
	}
}

/**
 * Base class for all reflective classes with a name.
 */
export public abstract class N4NamedElement extends N4Element {

	/**
	 * The simple name of a named element.
	 */
	public string name;
}

/**
 * Base class for all reflective classes describing a type (declaration).
 */
export public abstract class N4Type extends N4NamedElement {

	/**
	 * The FQN of the type.
	 */
	public string fqn;

	/**
	 * Given an instance of <code>N4Object</code> or a value of type <code>type{N4Object}</code>
	 * (e.g. the constructor of an N4JS class), this method returns its <code>N4Type</code> meta
	 * object. For any other argument <code>undefined</code> is returned.
	 */
	public static /*N4Class*/ any of(N4Object n4object) {
		return n4object ? n4object.n4type || n4object.constructor.n4type : undefined;
	}

	/**
	 * Returns true if this N4Class describes an N4-class declaration.
	 */
	public boolean get isClass() { return false; }

	/**
	 * Returns true if this N4Class describes an N4-interface declaration.
	 */
	public boolean get isInterface() { return false; }

	/**
	 * Returns true if this N4Class describes an N4-enumeration declaration.
	 */
	public boolean get isEnum() { return false; }
}

/**
 * Base class for meta types of classes, interfaces, or roles.
 */
export public abstract class N4Classifier extends N4Type {

	/**
	 * The N4Class of the super type, may be null if super type is a not an N4Class.
	 */
	public N4Class n4superType;

	/**
	 * Array of the FQN of all (transitively) implemented interfaces, i.e. interfaces directly implemented by this class, its super
	 * class or interfaces extended by directly implemented interfaces.
	 */
	public Array<string> allImplementedInterfaces;

	/**
	 * Array of all owned members, that is members defined in the class directly.
	 * This field is private as it is an internal detail, members are accessed via methods defined in this class.
	 */
	private Array<N4Member> ownedMembers;

	/**
	 * Array of all consumed members, that is members mixed into the classifier via interface consumption.
	 * This field is private as it is an internal detail, members are accessed via methods defined in this class.
	 */
	private Array<N4Member> consumedMembers;

	/**
	 * Only used internally, must not be called by client.
	 */
	protected constructor(@Spec ~~this spec) {}

	/**
	 * Returns all members defined by this class directly, consumed, and inherited. The boolean flags control which members are returned.
	 *
	 * @param consumed if set, consumed members are returned as well (false by default)
	 * @param inherited if set, inherited members are returned as well (false by default)
	 * @param _static if set, static members are returned, otherwise instance members (false by default).
	 * @return array of members, may be empty but never null
	 */
	public Array<? extends N4Member> members(boolean? consumed, boolean? inherited, boolean? _static) {
		var Array<? extends N4Member> arr = [];
		var self = this;
		if(_static === true){
			arr = arr.concat(this.ownedMembers.filter(function(N4Member m){
				return m.isStatic;
			}));
		}else{
			arr = arr.concat(this.ownedMembers)
		}

		//get consumed
		if(consumed === true){
		arr = arr.concat(this.consumedMembers)
		}

		//get inherited,
		if(inherited === true){
			//top level element (should be N4Object) has no supertype
			if(typeof this.n4superType === 'undefined'){
				return arr;
			}
			var any tmp = this.n4superType.members(consumed, inherited, _static);
			arr = arr.concat(tmp as Array<? extends N4Member>);
		}

		return arr;
	}

	/**
	 * Returns all members defined in this classifier (or inherited) with an annotation
	 * of given name attached to it. The boolean flags control which methods are returned.
	 *
	 * @param name name of annotation to be used as filter
	 * @param consumed if set, consumed members are returned as well (false by default)
	 * @param inherited if set, inherited members are returned as well (false by default)
	 * @param _static if set, static members are returned, otherwise instance members (false by default).
	 * @return array of members, may be empty but never null
	 */
	public Array<? extends N4Member> membersWithAnnotation(string name, boolean? consumed, boolean? inherited, boolean? _static) {
				var Array<? extends N4Member> arr = [];
		var self = this;
		if(_static === true){
			arr = arr.concat(this.ownedMembers.filter(function(N4Member m){
				return m.isStatic;
			}));
		}else{
			arr = arr.concat(this.ownedMembers)
		}

		//get consumed
		if(consumed === true){
		arr = arr.concat(this.consumedMembers)
		}

		//get inherited,
		if(inherited === true){
			//top level element (should be N4Object) has no supertype
			if(typeof this.n4superType === 'undefined'){
				return arr;
			}
			var any tmp = this.n4superType.membersWithAnnotation(name, consumed, inherited, _static);
			arr = arr.concat(tmp as Array<? extends N4Member>);
		}

		return arr.filter(function(N4Member m){
			return m.hasAnnotation(name);
		})
	}

	/**
	 * Returns all data fields defined by this class directly, consumed, and inherited. The boolean flags control which data fields are returned.
	 *
	 * @param consumed if set, consumed data fields are returned as well (false by default)
	 * @param inherited if set, inherited data fields are returned as well (false by default)
	 * @param _static if set, static data fields are returned, otherwise instance members (false by default).
	 * @return array of data fields, may be empty but never null
	 */
	public Array<? extends N4DataField> dataFields(boolean? consumed, boolean? inherited, boolean? _static) {
		var Array<? extends N4DataField> arr = [];
		var self = this;
		var Array<N4DataField> tmp = [];
		if(_static === true){
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4DataField)
				}
			});
		}else{
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField){
					tmp.push(m as N4DataField)
				}
			})
		}
		arr = arr.concat(tmp);
		tmp = [];

		//get consumed
		if(consumed === true){
			this.consumedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4DataField)
				}
			});
		arr = arr.concat(tmp);
		tmp = [];
		}

		//get inherited,
		if(inherited === true){
			//top level element (should be N4Object) has no supertype
			if(typeof this.n4superType === 'undefined'){
				return arr;
			}
			var any tmp2 = this.n4superType.dataFields(consumed, inherited, _static);
			arr = arr.concat(tmp2 as Array<? extends N4DataField>);
		}

		return arr;
	}

	/**
	 * Returns all data fields defined in this classifier (or inherited) with an annotation
	 * of given name attached to it. The boolean flags control which data fields are returned.
	 *
	 * @param name name of annotation to be used as filter
	 * @param consumed if set, consumed data fields are returned as well (false by default)
	 * @param inherited if set, inherited data fields are returned as well (false by default)
	 * @param _static if set, static data fields are returned, otherwise instance members (false by default).
	 * @return array of data fields, may be empty but never null
	 */
	public Array<? extends N4DataField> dataFieldsWithAnnotation(string name, boolean? consumed, boolean? inherited, boolean? _static) {
		var Array<? extends N4DataField> arr = [];
		var self = this;
		var Array<N4DataField> tmp = [];
		if(_static === true){
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4DataField)
				}
			});
		}else{
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField){
					tmp.push(m as N4DataField)
				}
			})
		}
		arr = arr.concat(tmp);
		tmp = [];

		//get consumed
		if(consumed === true){
			this.consumedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4DataField)
				}
			});
		arr = arr.concat(tmp);
		tmp = [];
		}

		//get inherited,
		if(inherited === true){
			//top level element (should be N4Object) has no supertype
			if(typeof this.n4superType === 'undefined'){
				return arr;
			}
			var any tmp2 = this.n4superType.dataFieldsWithAnnotation(name, consumed, inherited, _static);
			arr = arr.concat(tmp2 as Array<? extends N4DataField>);
		}

		return arr.filter(function(N4DataField df){
			return df.hasAnnotation(name);
		});
	}

	/**
	 * Returns all methods defined by this class directly, consumed, and inherited. The boolean flags control which methods are returned.
	 *
	 * @param consumed if set, consumed methods are returned as well (false by default)
	 * @param inherited if set, inherited methods are returned as well (false by default)
	 * @param _static if set, static methods are returned, otherwise instance members (false by default).
	 * @return array of methods, may be empty but never null
	 */
	public Array<? extends N4Method> methods(boolean? consumed, boolean? inherited, boolean? _static) {
		var Array<? extends N4Method> arr = [];
		var self = this;
		var Array<N4Method> tmp = [];
		if(_static === true){
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4Method)
				}
			});
		}else{
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField){
					tmp.push(m as N4Method)
				}
			})
		}
		arr = arr.concat(tmp);
		tmp = [];

		//get consumed
		if(consumed === true){
			this.consumedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4Method)
				}
			});
		arr = arr.concat(tmp);
		tmp = [];
		}

		//get inherited,
		if(inherited === true){
			//top level element (should be N4Object) has no supertype
			if(typeof this.n4superType === 'undefined'){
				return arr;
			}
			var any tmp2 = this.n4superType.methods(consumed, inherited, _static);
			arr = arr.concat(tmp2 as Array<? extends N4Method>);
		}

		return arr;
	}

	/**
	 * Returns all methods defined in this classifier (or inherited) with an annotation
	 * of given name attached to it. The boolean flags control which methods are returned.
	 *
	 * @param name name of annotation to be used as filter
	 * @param consumed if set, consumed methods are returned as well (false by default)
	 * @param inherited if set, inherited methods are returned as well (false by default)
	 * @param _static if set, static methods are returned, otherwise instance members (false by default).
	 * @return array of methods, may be empty but never null
	 */
	public Array<? extends N4Method> methodsWithAnnotation(string name, boolean? consumed, boolean? inherited, boolean? _static) {
				var Array<? extends N4Method> arr = [];
		var self = this;
		var Array<N4Method> tmp = [];
		if(_static === true){
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4Method)
				}
			});
		}else{
			this.ownedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField){
					tmp.push(m as N4Method)
				}
			})
		}
		arr = arr.concat(tmp);
		tmp = [];

		//get consumed
		if(consumed === true){
			this.consumedMembers.forEach(function(N4Member m){
				if(m instanceof N4DataField && m.isStatic){
					tmp.push(m as N4Method)
				}
			});
		arr = arr.concat(tmp);
		tmp = [];
		}

		//get inherited,
		if(inherited === true){
			//top level element (should be N4Object) has no supertype
			if(typeof this.n4superType === 'undefined'){
				return arr;
			}
			var any tmp2 = this.n4superType.methods(consumed, inherited, _static);
			arr = arr.concat(tmp2 as Array<? extends N4Method>);
		}

		return arr.filter(function(N4Method m){
			return m.hasAnnotation(name);
		})
	}
}

/**
 * Meta information of an n4 class.
 */
export @Final public class N4Class_ extends N4Classifier {

	/**
	 * Returns true if this N4Class describes an N4-class declaration.
	 */
	@Override
	public boolean get isClass() { return true; }
}

/**
 * Meta information of an n4 interface.
 */
export @Final public class N4Interface extends N4Classifier {

	/**
	 * Returns true if this N4Class describes an N4-interface declaration.
	 */
	@Override
	public boolean get isInterface() { return true; }
}

/**
 * Description of a member, that is a method or field.
 */
export public abstract class N4Member extends N4NamedElement {
	public N4Classifier owner;
	public boolean isStatic;
}

/**
 * Description of a method.
 */
export @Final public class N4Method extends N4Member {
	public Function jsFunction;
}

/**
 * Description of a simple data field.
 */
export @Final public class N4DataField extends N4Member {
}

/**
 * Description of an accessor, that is a getter or setter.
 */
export @Final public class N4Accessor extends N4Member {

	/**
	 * Flag indicating whether accessor is a getter or setter, internal detail.
	 */
	private boolean getter;
	/**
	 * Returns true if accessor is a getter.
	 */
	public boolean isGetter() { return this.getter; }
	/**
	 * Returns true if accessor is a setter.
	 */
	public boolean isSetter() { return ! this.getter; }
}

/**
 * Description of an N4Enum
 */
export @Final public class N4EnumType extends N4Type {

	/**
	 * Returns true if this N4Clasifier describes an N4-enumeration declaration.
	 */
	@Override public boolean get isEnum() { return true; }
}

/**
 * Base class for all enumeration, literals are assumed to be static constant fields of concrete subclasses.
 */
export public abstract class N4Enum  extends Object {

	/**
	 * Returns the name of a concrete literal
	 */
	public abstract string get name();

	/**
	 * Returns the value of a concrete literal. If no value is
	 * explicitly set, it is similar to the name.
	 */
	public abstract string get value()

	/**
	 * Returns a string representation of a concrete literal, it returns
	 * the same result as value()
	 */
	@Override public string toString() { return this.value }

	/**
	 * Returns the enum class object of this enum literal for reflection.
	 * The very same meta class object can be retrieved from the enumeration type directly.
	 */
	public abstract N4Enum get n4Enum()

	/**
	 * Returns array of concrete enum literals
	 */
	public static Array<? extends N4Enum> get literals(){return null;}

	/**
	 * Returns concrete enum literal that matches provided name,
	 * if no match found returns undefined.
	 */
	public static N4Enum findLiteralByName(string name){return null;}

	/**
	 * Returns concrete enum literal that matches provided value,
	 * if no match found returns undefined.
	 */
	public static N4Enum findLiteralByValue (string value){return null;}
}

/**
 * Annotation with value.
 */
export @Final public class N4Annotation extends Object {
	public string name;
	public Array<string> details;
	public N4Element target;
}

/**
 * The base class for all instances of n4 classes.
 */
export public class N4Object {

	/**
	 * Returns the meta class object of this class for reflection.
	 * The very same meta class object can be retrieved from an instance by calling
	 * <code>instance.constructor.n4type</code>
	 */
	// defined in types model, added by $makeClass:
	// public static N4Class get n4type() { return null; }
}

/**
 * Provides instances of type <tt>T</tt>. For any type <tt>T</tt> that can be injected,
 * one can inject <tt>N4Provider&lt;T&gt;</tt> instead. Unlike injecting type <tt>T</tt>
 * directly into the injection point, injecting the provider enables the followings:
 * <p>
 * <ul>
 * <li>retrieval of multiple instances of the given type</li>
 * <li>lazily or optionally retrieving an instance of the type</li>
 * <li>breaking circular dependencies</li>
 * </ul>
 */
export public interface ~N4Provider<T> {

	/**
	 * Provides and returns with fully constructed and injected instance of type <tt>T</tt>.
	 */
	public abstract T get()
}

// ^^^ the content of this file must not be exported, instead use the following snippet to make types available:
/*
if (typeof GLOBAL !== "undefined") {
	GLOBAL.N4ClassifierType = N4ClassifierType;
}
*/
