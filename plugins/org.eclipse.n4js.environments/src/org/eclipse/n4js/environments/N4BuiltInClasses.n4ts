/*
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */


/*
 ------------------------------------------------------------------------------
 The classes defined here are provided by the runtime engine.
 See /org.eclipse.n4js.runner/res/ide-nodejs-env/n4js-es5/preload/N4BuiltInClasses.js for the compiled (and manually adapted) code.
 
 Use /org.eclipse.n4js/predefined/N4BuiltInClasses.n4js
 compile the corresponding classes, and manually adjust the 
 compiled code as needed. The compiled code is then added to the runtime.
 ------------------------------------------------------------------------------ 
 */

/**
 * Base class for all N4 reflective elements.
 */
public abstract class N4Element extends Object {
	/**
	 * Map of annotations attached to the element.
	 */
	public Object annotations;

	/**
	 * Returns true if an annotation with the given name is attached to the element.
	 */
	public boolean hasAnnotation(string name)

	/**
	 * Returns the annotation with the given name attached to the element, or null if no such annotation is found.
	 */
	public N4Annotation getAnnotation(string name)
}

/**
 * Base class for all reflective classes with a name.
 */
public abstract class N4NamedElement extends N4Element {
	/**
	 * The simple name of a named element.
	 */
	public string name;
}

/**
 * Base class for all reflective classes describing a type (declaration).
 */
public abstract class N4Type extends N4NamedElement {
	/**
	 * The FQN of the type.
	 */
	public string fqn;

	/**
	 * Returns true if this N4Class describes an N4-class declaration.
	 */
	public boolean get isClass() 

	/**
	 * Returns true if this N4Class describes an N4-interface declaration.
	 */
	public boolean get isInterface() 

	/**
	 * Returns true if this N4Class describes an N4-enumeration declaration.
	 */
	public boolean get isEnum() 
}

/**
 * Base class for meta types of classes, interfaces, or roles.
 */
public abstract class N4Classifier extends N4Type {

	/**
	 * The N4Class of the super type, may be null if super type is a not an N4Class.
	 */
	public N4Class n4superType;

	/**
	 * Array of the FQN of all (transitively) implemented interfaces, i.e. interfaces directly implemented by this class, its super 
	 * class or interfaces extended by directly implemented interfaces.
	 */
	public Array<string> allImplementedInterfaces;

	/**
	 * Array of all members, that is members defined in the class directly and inherited (or consumed) members.
	 * Do not access this data field directly, instead use getMembers() (as internally this implementation may be changed).
	 */
	public Array<N4Member> allMembers;

	/**
	 * Returns all members defined in this classifier and inherited members.
	 */
	public Array<? extends N4Member> getMembers()

	/**
	 * Returns all methods defined in this classifier (or inherited) with an annotation
	 * of given name attached to it.
	 */
	public Array<? extends N4Method> getMethodsWithAnnotation(string annotationName)

	/**
	 * Returns all data fields defined in this classifier (or inherited) with an annotation
	 * of given name attached to it.
	 */
	public Array<? extends N4DataField> getDataFieldsWithAnnotation(string annotationName)

	/**
	 * Returns all data fields and accessors defined in this classifier (or inherited) with an annotation
	 * of given name attached to it.
	 * @param annotationName the name of the annotation
	 * @param setters by default, data fields and getters are returned; if setters is true, data fields and setter are returned. 
	 */
	public Array<? extends N4Field> getFieldsWithAnnotation(string annotationName, boolean? setters)
}

/**
 * Meta information of an n4 class.
 */
public /* @Final */ class N4Class extends N4Classifier {
	
	/**
	 * Returns the N4Class instance for a given n4object. This is similar to 
	 * {@code n4object.constructor.n4class}, however it can also be used in roles
	 * to get reflective information of the consumer.
	 */
	public static N4Class of(N4Object n4object)

	/**
	 * Returns true if this N4Class describes an N4-class declaration.
	 */

	public boolean get isClass()
}

//**
 * Meta information of an n4 interface.
 */
public /* @Final */ class N4Interface extends N4Classifier {
	/**
	 * Returns true if this N4Class describes an N4-interface declaration.
	 */
	
	public boolean get isInterface() 
}

/**
 * Description of a member, that is a method or field.
 */
public abstract class N4Member extends N4Element {
	public string name;
}

/**
 * Description of a method.
 */
 public /* @Final */ class N4Method extends N4Member {
	public Function jsFunction;
}

/** 
 * Description of a field, that is either a data field or an accessor. 
 */
public abstract class N4Field extends N4Member {
}

/**
 * Description of a simple data field.
 */
 public /* @Final */ class N4DataField extends N4Member {
}

/**
 * Description of an accessor, that is a getter or setter.
 */
 public /* @Final */ class N4Accessor extends N4Member {
	public boolean getter;
	public boolean isGetter()
	public boolean isSetter()
}

/**
 * Description of an N4Enum
 */
public /* @Final */ class N4EnumType extends N4Type {
	/**
	 * Returns true if this N4Clasifier describes an N4-enumeration declaration.
	 */
	public boolean get isEnum()
}

/**
 * Base class for all enumerations, literals are assumed to be static constant fields of concrete subclasses with the type of these subclasses.
 */
public object N4Enum extends any {
	
	/** 
	 * Returns the name of a concrete literal 
 	 */
	public string get name()
	
	/** 
	 * Returns the value of a concrete literal. If no value is
     * explicitly set, it is similar to the name. 
     */
	public string get value()

	/**
	 * Returns a string representation of a concrete literal, it returns 
	 * the same result as value() 
	 */
	 public string toString()

	/**
	 * Returns the meta class object of this enum literal for reflection.
	 * The very same meta class object can be retrieved from the enumeration type directly.
	 */
	public N4EnumType get n4type()

	//IDE-785 this as return type in static

	/**
	 * Returns array of concrete enum literals
	 */
	public static Array<? extends this> get literals()

	/**
	 * Returns concrete enum literal that matches provided name,
	 * if no match found returns undefined.
	 */
	public static this findLiteralByName(string name)

	/**
	 * Returns concrete enum literal that matches provided value,
	 * if no match found returns undefined.
	 */
	public static this findLiteralByValue (string value)
}

/**
 * Annotation with value.
 */
public /* @Final */ class N4Annotation extends Object {
	public string name;
	public Array<string> value;
}

/**
 * The base class for all instances of n4 classes.
 */
public class N4Object extends Object { 
	/**
	 * Returns the meta class object of this class for reflection.
	 * The very same meta class object can be retrieved from an instance by calling
	 * <code>instance.constructor.n4class</code> or, preferred, via
	 * <code>N4Class.of(instance)</code>
	 */
	public static N4Class get n4class() 
}
