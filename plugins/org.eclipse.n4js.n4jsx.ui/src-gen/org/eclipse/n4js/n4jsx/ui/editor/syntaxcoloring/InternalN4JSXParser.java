package org.eclipse.n4js.n4jsx.ui.editor.syntaxcoloring;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.n4js.n4jsx.services.N4JSXGrammarAccess;
import org.eclipse.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSXParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSXParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSXParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSXParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSXParser.g"; }



     	private N4JSXGrammarAccess grammarAccess;

        public InternalN4JSXParser(TokenStream input, N4JSXGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
        }

    	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleIDLScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIDLScript();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleIDLScript() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_0 = null;




        try {
            {
            {
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getIDLScriptAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    ScriptElementsScriptElementParserRuleCall_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.stop):null), grammarAccess.getIDLScriptAccess().getScriptElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryExpression_return retval = new InternalN4JSXParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_3 = null;

        InternalN4JSXParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_4 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_7 = null;

        InternalN4JSXParser.ruleParenExpression_return ParenExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_12 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_13 = null;




        try {
            {
            int alt3=14;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_3=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.start):null), (JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_4=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.start):null), (ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_5=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.start):null), (LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_6=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.start):null), (ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_7=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.start):null), (ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_8=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.start):null), (ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_9=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.start):null), (AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_10=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.start):null), (FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_11=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.start):null), (AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_12=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.start):null), (N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_13=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.start):null), (TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PrimaryExpression_return retval = new InternalN4JSXParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_4 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_12 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_13 = null;




        try {
            {
            int alt4=14;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_3=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.start):null), (JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_4=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.start):null), (ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_5=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.start):null), (LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_6=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.start):null), (ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_7=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.start):null), (ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_8=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.start):null), (ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_9=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.start):null), (AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_10=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.start):null), (FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_11=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.start):null), (AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_12=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.start):null), (N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_13=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.start):null), (TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElement_return ruleJSXElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElement_return retval = new InternalN4JSXParser.ruleJSXElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_3_0_0=null;
        Token SolidusKeyword_3_1_0=null;
        Token GreaterThanSignKeyword_3_1_1=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxElementNameJSXElementNameParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleJSXAttributes_return JSXAttributesParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0_1_0 = null;

        InternalN4JSXParser.ruleJSXClosingElement_return JSXClosingElementParserRuleCall_3_0_2 = null;




        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LessThanSignKeyword_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_6);
            JsxElementNameJSXElementNameParserRuleCall_1_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.start):null), (JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxElementNameAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_7);
            JSXAttributesParserRuleCall_2=ruleJSXAttributes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.start):null), (JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.stop):null), grammarAccess.getJSXElementAccess().getJSXAttributesParserRuleCall_2()); 
            }
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==GreaterThanSign) ) {
                alt6=1;
            }
            else if ( (LA6_0==Solidus) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_3_0_0=(Token)match(input,GreaterThanSign,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(GreaterThanSignKeyword_3_0_0, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0());
                      			
                    }
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==LessThanSign) ) {
                            int LA5_1 = input.LA(2);

                            if ( ((LA5_1>=Intersection && LA5_1<=Implements)||(LA5_1>=Promisify && LA5_1<=Abstract)||LA5_1==External||(LA5_1>=Private && LA5_1<=Project)||LA5_1==Public||LA5_1==Static||LA5_1==Target||(LA5_1>=Async && LA5_1<=Await)||LA5_1==Union||(LA5_1>=Yield && LA5_1<=This)||LA5_1==From||LA5_1==Type||(LA5_1>=Get && LA5_1<=Let)||(LA5_1>=Out && LA5_1<=Set)||LA5_1==As||LA5_1==Of||LA5_1==RULE_IDENTIFIER) ) {
                                alt5=1;
                            }


                        }
                        else if ( (LA5_0==LeftCurlyBracket) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_8);
                    	    JsxChildrenJSXChildParserRuleCall_3_0_1_0=ruleJSXChild();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxChildrenAssignment_3_0_1());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    JSXClosingElementParserRuleCall_3_0_2=ruleJSXClosingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.start):null), (JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.stop):null), grammarAccess.getJSXElementAccess().getJSXClosingElementParserRuleCall_3_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SolidusKeyword_3_1_0=(Token)match(input,Solidus,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SolidusKeyword_3_1_0, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0());
                      			
                    }
                    GreaterThanSignKeyword_3_1_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(GreaterThanSignKeyword_3_1_1, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleJSXClosingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXClosingElement_return ruleJSXClosingElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXClosingElement_return retval = new InternalN4JSXParser.ruleJSXClosingElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token SolidusKeyword_1=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxClosingNameJSXElementNameParserRuleCall_2_0 = null;




        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_10); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LessThanSignKeyword_0, grammarAccess.getJSXClosingElementAccess().getLessThanSignKeyword_0());
              	
            }
            SolidusKeyword_1=(Token)match(input,Solidus,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SolidusKeyword_1, grammarAccess.getJSXClosingElementAccess().getSolidusKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_9);
            JsxClosingNameJSXElementNameParserRuleCall_2_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.start):null), (JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.stop):null), grammarAccess.getJSXClosingElementAccess().getJsxClosingNameAssignment_2());
              			
            }

            }


            }

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GreaterThanSignKeyword_3, grammarAccess.getJSXClosingElementAccess().getGreaterThanSignKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXChild() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXChild();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXChild_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXChild_return ruleJSXChild() throws RecognitionException {
        InternalN4JSXParser.ruleJSXChild_return retval = new InternalN4JSXParser.ruleJSXChild_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleJSXExpression_return JSXExpressionParserRuleCall_1 = null;




        try {
            {
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LessThanSign) ) {
                alt7=1;
            }
            else if ( (LA7_0==LeftCurlyBracket) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_0=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.start):null), (JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.stop):null), grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXExpressionParserRuleCall_1=ruleJSXExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXExpressionParserRuleCall_1!=null?((Token)JSXExpressionParserRuleCall_1.start):null), (JSXExpressionParserRuleCall_1!=null?((Token)JSXExpressionParserRuleCall_1.stop):null), grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXExpression_return ruleJSXExpression() throws RecognitionException {
        InternalN4JSXParser.ruleJSXExpression_return retval = new InternalN4JSXParser.ruleJSXExpression_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_12);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getJSXExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXElementName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementName_return ruleJSXElementName() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementName_return retval = new InternalN4JSXParser.ruleJSXElementName_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElementNameExpression_return ExpressionJSXElementNameExpressionParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionJSXElementNameExpressionParserRuleCall_0=ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.start):null), (ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameAccess().getExpressionAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementNameExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXElementNameExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementNameExpression_return ruleJSXElementNameExpression() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementNameExpression_return retval = new InternalN4JSXParser.ruleJSXElementNameExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_13);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0()); 
            }
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==FullStop) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_13);
            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1=ruleParameterizedPropertyAccessExpressionTail();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1()); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleJSXAttributes_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttributes_return ruleJSXAttributes() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttributes_return retval = new InternalN4JSXParser.ruleJSXAttributes_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXAttribute_return JsxAttributesJSXAttributeParserRuleCall_0 = null;




        try {
            {
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( ((LA9_0>=Intersection && LA9_0<=With)||(LA9_0>=For && LA9_0<=Var)||(LA9_0>=As && LA9_0<=Of)||LA9_0==LeftCurlyBracket||LA9_0==RULE_IDENTIFIER) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    JsxAttributesJSXAttributeParserRuleCall_0=ruleJSXAttribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce((JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.start):null), (JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributesAccess().getJsxAttributesAssignment());
            	      		
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttribute_return ruleJSXAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttribute_return retval = new InternalN4JSXParser.ruleJSXAttribute_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXSpreadAttribute_return JSXSpreadAttributeParserRuleCall_0 = null;

        InternalN4JSXParser.ruleJSXPropertyAttribute_return JSXPropertyAttributeParserRuleCall_1 = null;




        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==LeftCurlyBracket) ) {
                alt10=1;
            }
            else if ( ((LA10_0>=Intersection && LA10_0<=With)||(LA10_0>=For && LA10_0<=Var)||(LA10_0>=As && LA10_0<=Of)||LA10_0==RULE_IDENTIFIER) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXSpreadAttributeParserRuleCall_0=ruleJSXSpreadAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.start):null), (JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXPropertyAttributeParserRuleCall_1=ruleJSXPropertyAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.start):null), (JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.stop):null), grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXSpreadAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXSpreadAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXSpreadAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXSpreadAttribute_return ruleJSXSpreadAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXSpreadAttribute_return retval = new InternalN4JSXParser.ruleJSXSpreadAttribute_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token FullStopFullStopFullStopKeyword_1=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_15); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            FullStopFullStopFullStopKeyword_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FullStopFullStopFullStopKeyword_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_12);
            ExpressionAssignmentExpressionParserRuleCall_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXPropertyAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXPropertyAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleJSXPropertyAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXPropertyAttribute_return ruleJSXPropertyAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXPropertyAttribute_return retval = new InternalN4JSXParser.ruleJSXPropertyAttribute_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0=null;
        Token LeftCurlyBracketKeyword_1_1_1_0=null;
        Token RightCurlyBracketKeyword_1_1_1_2=null;
        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleStringLiteral_return JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getPropertyAssignment_0());
              			
            }

            }


            }
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==EqualsSign) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_17); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0());
                      		
                    }
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==RULE_STRING) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==LeftCurlyBracket) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;
                    }
                    switch (alt11) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0=ruleStringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.start):null), (JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_0());
                              					
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            LeftCurlyBracketKeyword_1_1_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(LeftCurlyBracketKeyword_1_1_1_0, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_1_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_12);
                            JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_1_1());
                              						
                            }

                            }


                            }

                            RightCurlyBracketKeyword_1_1_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(RightCurlyBracketKeyword_1_1_1_2, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_1_2());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleScriptElement_return retval = new InternalN4JSXParser.ruleScriptElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;




        try {
            {
            int alt13=7;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSXParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_4=null;
        Token CommaKeyword_1_4_6_0=null;
        Token RightCurlyBracketKeyword_1_4_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_3_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_3_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_18);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt26=5;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( ((LA14_0>=Protected && LA14_0<=Abstract)||LA14_0==External||(LA14_0>=Private && LA14_0<=Project)||LA14_0==Public||LA14_0==Static||LA14_0==Const) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            {
                            {
                            loop15:
                            do {
                                int alt15=2;
                                int LA15_0 = input.LA(1);

                                if ( ((LA15_0>=Protected && LA15_0<=Abstract)||LA15_0==External||(LA15_0>=Private && LA15_0<=Project)||LA15_0==Public||LA15_0==Static||LA15_0==Const) ) {
                                    alt15=1;
                                }


                                switch (alt15) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop15;
                                }
                            } while (true);

                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                              					
                            }
                            int alt16=2;
                            int LA16_0 = input.LA(1);

                            if ( (LA16_0==Tilde) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4());
                              							
                            }

                            }


                            }
                            int alt17=2;
                            int LA17_0 = input.LA(1);

                            if ( (LA17_0==LessThanSign) ) {
                                alt17=1;
                            }
                            switch (alt17) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.start):null), (TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt18=2;
                            int LA18_0 = input.LA(1);

                            if ( (LA18_0==Implements||LA18_0==Extends) ) {
                                alt18=1;
                            }
                            switch (alt18) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_3_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop19:
                            do {
                                int alt19=2;
                                int LA19_0 = input.LA(1);

                                if ( ((LA19_0>=Protected && LA19_0<=Abstract)||LA19_0==External||(LA19_0>=Private && LA19_0<=Project)||LA19_0==Public||LA19_0==Static||LA19_0==Const) ) {
                                    alt19=1;
                                }


                                switch (alt19) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop19;
                                }
                            } while (true);

                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                              					
                            }
                            int alt20=2;
                            int LA20_0 = input.LA(1);

                            if ( (LA20_0==Tilde) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4());
                              							
                            }

                            }


                            }
                            int alt21=2;
                            int LA21_0 = input.LA(1);

                            if ( (LA21_0==LessThanSign) ) {
                                alt21=1;
                            }
                            switch (alt21) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.start):null), (TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt22=2;
                            int LA22_0 = input.LA(1);

                            if ( (LA22_0==Implements||LA22_0==Extends) ) {
                                alt22=1;
                            }
                            switch (alt22) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_3_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);

                        if ( ((LA24_0>=Protected && LA24_0<=Abstract)||LA24_0==External||(LA24_0>=Private && LA24_0<=Project)||LA24_0==Public||LA24_0==Static||LA24_0==Const) ) {
                            alt24=1;
                        }


                        switch (alt24) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);

                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3());
                      					
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_4_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftCurlyBracketKeyword_1_4_4, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_5());
                      					
                    }

                    }


                    }
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==Comma) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce(CommaKeyword_1_4_6_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop25;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_4_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_4_7, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariables_return retval = new InternalN4JSXParser.ruleTypeVariables_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;




        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1());
              			
            }

            }


            }
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==Comma) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclaration_return retval = new InternalN4JSXParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclarationImpl_return retval = new InternalN4JSXParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;




        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_30); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
              	
            }
            int alt30=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt30=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt30=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt30=3;
                }
                break;
            case Default:
                {
                alt30=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_31); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_32);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==From) && (synpred10_InternalN4JSXParser())) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_32);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_34); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                      					
                    }

                    }


                    }
                    int alt29=2;
                    alt29 = dfa29.predict(input);
                    switch (alt29) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0());
                              						
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_32);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0());
                              							
                            }

                            }


                            }

                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportFromClause_return retval = new InternalN4JSXParser.ruleExportFromClause_return();
        retval.start = input.LT(1);

        Token FromKeyword_0=null;
        InternalN4JSXParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;




        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportClause_return retval = new InternalN4JSXParser.ruleExportClause_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_36); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( ((LA33_0>=Intersection && LA33_0<=Implements)||(LA33_0>=Promisify && LA33_0<=Abstract)||LA33_0==External||(LA33_0>=Private && LA33_0<=Project)||LA33_0==Public||LA33_0==Static||LA33_0==Target||(LA33_0>=Async && LA33_0<=Await)||LA33_0==Union||(LA33_0>=Yield && LA33_0<=This)||LA33_0==From||LA33_0==Type||(LA33_0>=Get && LA33_0<=Let)||(LA33_0>=Out && LA33_0<=Set)||LA33_0==As||LA33_0==Of||LA33_0==RULE_IDENTIFIER) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0());
                      				
                    }

                    }


                    }
                    loop31:
                    do {
                        int alt31=2;
                        int LA31_0 = input.LA(1);

                        if ( (LA31_0==Comma) ) {
                            int LA31_1 = input.LA(2);

                            if ( ((LA31_1>=Intersection && LA31_1<=Implements)||(LA31_1>=Promisify && LA31_1<=Abstract)||LA31_1==External||(LA31_1>=Private && LA31_1<=Project)||LA31_1==Public||LA31_1==Static||LA31_1==Target||(LA31_1>=Async && LA31_1<=Await)||LA31_1==Union||(LA31_1>=Yield && LA31_1<=This)||LA31_1==From||LA31_1==Type||(LA31_1>=Get && LA31_1<=Let)||(LA31_1>=Out && LA31_1<=Set)||LA31_1==As||LA31_1==Of||LA31_1==RULE_IDENTIFIER) ) {
                                alt31=1;
                            }


                        }


                        switch (alt31) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop31;
                        }
                    } while (true);
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==Comma) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                              			
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleExportSpecifier_return retval = new InternalN4JSXParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0=null;
        InternalN4JSXParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_37);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0());
              			
            }

            }


            }
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==As) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleExportableElement_return retval = new InternalN4JSXParser.ruleExportableElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleExportedFunctionDeclaration_return ExportedFunctionDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;




        try {
            {
            int alt35=6;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedFunctionDeclarationParserRuleCall_4=ruleExportedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.start):null), (ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getExportedFunctionDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSXParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_2_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_2_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_39);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt50=4;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    {
                    {
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( ((LA36_0>=Protected && LA36_0<=Abstract)||LA36_0==External||(LA36_0>=Private && LA36_0<=Project)||LA36_0==Public||LA36_0==Static||LA36_0==Const) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop37:
                    do {
                        int alt37=2;
                        alt37 = dfa37.predict(input);
                        switch (alt37) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_40);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_41);
                    ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3());
                      					
                    }

                    }


                    }
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==Comma) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_42);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt47=2;
                    alt47 = dfa47.predict(input);
                    switch (alt47) {
                        case 1 :
                            {
                            {
                            loop39:
                            do {
                                int alt39=2;
                                int LA39_0 = input.LA(1);

                                if ( ((LA39_0>=Protected && LA39_0<=Abstract)||LA39_0==External||(LA39_0>=Private && LA39_0<=Project)||LA39_0==Public||LA39_0==Static||LA39_0==Const) ) {
                                    alt39=1;
                                }


                                switch (alt39) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop39;
                                }
                            } while (true);

                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                              					
                            }
                            int alt40=2;
                            int LA40_0 = input.LA(1);

                            if ( (LA40_0==Tilde) ) {
                                alt40=1;
                            }
                            switch (alt40) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4());
                              							
                            }

                            }


                            }
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==LessThanSign) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt42=2;
                            int LA42_0 = input.LA(1);

                            if ( (LA42_0==Implements||LA42_0==Extends) ) {
                                alt42=1;
                            }
                            switch (alt42) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_2_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop43:
                            do {
                                int alt43=2;
                                int LA43_0 = input.LA(1);

                                if ( ((LA43_0>=Protected && LA43_0<=Abstract)||LA43_0==External||(LA43_0>=Private && LA43_0<=Project)||LA43_0==Public||LA43_0==Static||LA43_0==Const) ) {
                                    alt43=1;
                                }


                                switch (alt43) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop43;
                                }
                            } while (true);

                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                              					
                            }
                            int alt44=2;
                            int LA44_0 = input.LA(1);

                            if ( (LA44_0==Tilde) ) {
                                alt44=1;
                            }
                            switch (alt44) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4());
                              							
                            }

                            }


                            }
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==LessThanSign) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==Implements||LA46_0==Extends) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_2_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( ((LA48_0>=Protected && LA48_0<=Abstract)||LA48_0==External||(LA48_0>=Private && LA48_0<=Project)||LA48_0==Public||LA48_0==Static||LA48_0==Const) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);

                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3());
                      					
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5());
                      					
                    }

                    }


                    }
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==Comma) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclaration_return retval = new InternalN4JSXParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclarationImpl_return retval = new InternalN4JSXParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSXParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
              	
            }
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=Intersection && LA51_0<=Implements)||(LA51_0>=Promisify && LA51_0<=Abstract)||LA51_0==External||(LA51_0>=Private && LA51_0<=Project)||LA51_0==Public||LA51_0==Static||LA51_0==Target||(LA51_0>=Async && LA51_0<=Await)||LA51_0==Union||(LA51_0>=Yield && LA51_0<=This)||LA51_0==From||LA51_0==Type||(LA51_0>=Get && LA51_0<=Let)||(LA51_0>=Out && LA51_0<=Set)||LA51_0==As||LA51_0==Of||LA51_0==Asterisk||LA51_0==LeftCurlyBracket||LA51_0==RULE_IDENTIFIER) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    pushFollow(FOLLOW_31);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_32);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSXParser.ruleImportClause_return retval = new InternalN4JSXParser.ruleImportClause_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        InternalN4JSXParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;




        try {
            {
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=Intersection && LA53_0<=Implements)||(LA53_0>=Promisify && LA53_0<=Abstract)||LA53_0==External||(LA53_0>=Private && LA53_0<=Project)||LA53_0==Public||LA53_0==Static||LA53_0==Target||(LA53_0>=Async && LA53_0<=Await)||LA53_0==Union||(LA53_0>=Yield && LA53_0<=This)||LA53_0==From||LA53_0==Type||(LA53_0>=Get && LA53_0<=Let)||(LA53_0>=Out && LA53_0<=Set)||LA53_0==As||LA53_0==Of||LA53_0==RULE_IDENTIFIER) ) {
                alt53=1;
            }
            else if ( (LA53_0==Asterisk||LA53_0==LeftCurlyBracket) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0());
                      				
                    }

                    }


                    }
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==Comma) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                              			
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( (LA57_0==LeftCurlyBracket) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                      		
                    }
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( ((LA56_0>=Intersection && LA56_0<=With)||(LA56_0>=For && LA56_0<=Var)||(LA56_0>=As && LA56_0<=Of)||LA56_0==RULE_IDENTIFIER) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_27);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0());
                              					
                            }

                            }


                            }
                            loop54:
                            do {
                                int alt54=2;
                                int LA54_0 = input.LA(1);

                                if ( (LA54_0==Comma) ) {
                                    int LA54_1 = input.LA(2);

                                    if ( ((LA54_1>=Intersection && LA54_1<=With)||(LA54_1>=For && LA54_1<=Var)||(LA54_1>=As && LA54_1<=Of)||LA54_1==RULE_IDENTIFIER) ) {
                                        alt54=1;
                                    }


                                }


                                switch (alt54) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_38); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	      				
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_27);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      							announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1());
                            	      						
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop54;
                                }
                            } while (true);
                            int alt55=2;
                            int LA55_0 = input.LA(1);

                            if ( (LA55_0==Comma) ) {
                                alt55=1;
                            }
                            switch (alt55) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      					announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                      				
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamedImportSpecifier_return retval = new InternalN4JSXParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;




        try {
            {
            int alt58=2;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0());
                      				
                    }

                    }


                    }

                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSXParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSXParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;




        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
              	
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_48);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3());
              			
            }

            }


            }
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==PlusSign) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleModuleSpecifier_return retval = new InternalN4JSXParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);



        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionDeclaration_return retval = new InternalN4JSXParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( ((LA60_0>=Protected && LA60_0<=Abstract)||LA60_0==External||(LA60_0>=Private && LA60_0<=Project)||LA60_0==Public||LA60_0==Static||LA60_0==Const) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt61=2;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionDeclaration_return retval = new InternalN4JSXParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0>=Protected && LA62_0<=Abstract)||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Const) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Semicolon) ) {
                int LA63_1 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt63=1;
                }
            }
            else if ( (LA63_0==EOF) && (synpred22_InternalN4JSXParser())) {
                alt63=1;
            }
            else if ( (LA63_0==RULE_EOL) && (synpred22_InternalN4JSXParser())) {
                alt63=1;
            }
            else if ( (LA63_0==RULE_ML_COMMENT) && (synpred22_InternalN4JSXParser())) {
                alt63=1;
            }
            else if ( (LA63_0==RightCurlyBracket) ) {
                int LA63_5 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt63=1;
                }
            }
            switch (alt63) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;




        try {
            {
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==Async) ) {
                int LA64_1 = input.LA(2);

                if ( ((LA64_1>=Intersection && LA64_1<=With)||(LA64_1>=For && LA64_1<=Var)||(LA64_1>=As && LA64_1<=Of)||LA64_1==LeftSquareBracket||LA64_1==RULE_DOUBLE||LA64_1==RULE_HEX_INT||LA64_1==RULE_OCTAL_INT||LA64_1==RULE_SCIENTIFIC_INT||LA64_1==RULE_IDENTIFIER||LA64_1==RULE_STRING||LA64_1==RULE_NO_LINE_TERMINATOR||LA64_1==RULE_INT) ) {
                    alt64=1;
                }
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                      			
                    }

                    }


                    }

                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionImpl_return retval = new InternalN4JSXParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;




        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              	
            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Asterisk) ) {
                alt65=1;
            }
            else if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Async && LA65_0<=Await)||LA65_0==Union||(LA65_0>=Yield && LA65_0<=This)||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||(LA65_0>=Out && LA65_0<=Set)||LA65_0==As||LA65_0==Of||LA65_0==LeftParenthesis||LA65_0==LessThanSign||LA65_0==RULE_IDENTIFIER) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionImpl_return retval = new InternalN4JSXParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;




        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              	
            }
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Asterisk) ) {
                alt66=1;
            }
            else if ( ((LA66_0>=Intersection && LA66_0<=Implements)||(LA66_0>=Promisify && LA66_0<=Abstract)||LA66_0==External||(LA66_0>=Private && LA66_0<=Project)||LA66_0==Public||LA66_0==Static||LA66_0==Target||(LA66_0>=Async && LA66_0<=Await)||LA66_0==Union||LA66_0==This||LA66_0==From||LA66_0==Type||(LA66_0>=Get && LA66_0<=Let)||(LA66_0>=Out && LA66_0<=Set)||LA66_0==As||LA66_0==Of||LA66_0==LeftParenthesis||LA66_0==LessThanSign||LA66_0==RULE_IDENTIFIER) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_FunctionImpl_return retval = new InternalN4JSXParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;




        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              	
            }
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==Asterisk) ) {
                alt67=1;
            }
            else if ( ((LA67_0>=Intersection && LA67_0<=Implements)||(LA67_0>=Promisify && LA67_0<=Abstract)||LA67_0==External||(LA67_0>=Private && LA67_0<=Project)||LA67_0==Public||LA67_0==Static||LA67_0==Target||(LA67_0>=Async && LA67_0<=Await)||LA67_0==Union||(LA67_0>=Yield && LA67_0<=This)||LA67_0==From||LA67_0==Type||(LA67_0>=Get && LA67_0<=Let)||(LA67_0>=Out && LA67_0<=Set)||LA67_0==As||LA67_0==Of||LA67_0==LeftParenthesis||LA67_0==LessThanSign||LA67_0==RULE_IDENTIFIER) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionHeader_return retval = new InternalN4JSXParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LessThanSign) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( ((LA69_0>=Intersection && LA69_0<=Implements)||(LA69_0>=Promisify && LA69_0<=Abstract)||LA69_0==External||(LA69_0>=Private && LA69_0<=Project)||LA69_0==Public||LA69_0==Static||LA69_0==Target||(LA69_0>=Async && LA69_0<=Await)||LA69_0==Union||(LA69_0>=Yield && LA69_0<=This)||LA69_0==From||LA69_0==Type||(LA69_0>=Get && LA69_0<=Let)||(LA69_0>=Out && LA69_0<=Set)||LA69_0==As||LA69_0==Of||LA69_0==RULE_IDENTIFIER) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==Colon) && (synpred23_InternalN4JSXParser())) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionHeader_return retval = new InternalN4JSXParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==LessThanSign) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0>=Intersection && LA72_0<=Implements)||(LA72_0>=Promisify && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Target||(LA72_0>=Async && LA72_0<=Await)||LA72_0==Union||LA72_0==This||LA72_0==From||LA72_0==Type||(LA72_0>=Get && LA72_0<=Let)||(LA72_0>=Out && LA72_0<=Set)||LA72_0==As||LA72_0==Of||LA72_0==RULE_IDENTIFIER) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Colon) && (synpred24_InternalN4JSXParser())) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionHeader_return retval = new InternalN4JSXParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LessThanSign) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( ((LA75_0>=Intersection && LA75_0<=Implements)||(LA75_0>=Promisify && LA75_0<=Abstract)||LA75_0==External||(LA75_0>=Private && LA75_0<=Project)||LA75_0==Public||LA75_0==Static||LA75_0==Target||(LA75_0>=Async && LA75_0<=Await)||LA75_0==Union||(LA75_0>=Yield && LA75_0<=This)||LA75_0==From||LA75_0==Type||(LA75_0>=Get && LA75_0<=Let)||(LA75_0>=Out && LA75_0<=Set)||LA75_0==As||LA75_0==Of||LA75_0==RULE_IDENTIFIER) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==Colon) && (synpred25_InternalN4JSXParser())) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionHeader_return retval = new InternalN4JSXParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==LessThanSign) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=Intersection && LA78_0<=Implements)||(LA78_0>=Promisify && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||LA78_0==This||LA78_0==From||LA78_0==Type||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||LA78_0==RULE_IDENTIFIER) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Colon) && (synpred26_InternalN4JSXParser())) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionBody_return retval = new InternalN4JSXParser.ruleFunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;




        try {
            {
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionBody_return retval = new InternalN4JSXParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;




        try {
            {
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionBody_return retval = new InternalN4JSXParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionBody_return retval = new InternalN4JSXParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedFunctionDeclaration_return ruleExportedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleExportedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionDeclarationParserRuleCall=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.start):null), (FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.stop):null), grammarAccess.getExportedFunctionDeclarationAccess().getFunctionDeclarationParserRuleCall()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
              			
            }

            }


            }
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0>=Protected && LA82_0<=Abstract)||LA82_0==External||(LA82_0>=Private && LA82_0<=Project)||LA82_0==Public||LA82_0==Static||LA82_0==Const) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
              			
            }

            }


            }
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( ((LA83_0>=Protected && LA83_0<=Abstract)||LA83_0==External||(LA83_0>=Private && LA83_0<=Project)||LA83_0==Public||LA83_0==Static||LA83_0==Const) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionExpression_return retval = new InternalN4JSXParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSXParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;




        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
              					
            }

            }


            }

            pushFollow(FOLLOW_57);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
              			
            }

            }


            }

            pushFollow(FOLLOW_25);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowExpression_return retval = new InternalN4JSXParser.ruleArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt90=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt90=1;
                }
                break;
            case Async:
                {
                int LA90_2 = input.LA(2);

                if ( (LA90_2==RULE_NO_LINE_TERMINATOR) && (synpred37_InternalN4JSXParser())) {
                    alt90=2;
                }
                else if ( (LA90_2==LeftParenthesis) && (synpred37_InternalN4JSXParser())) {
                    alt90=2;
                }
                else if ( (LA90_2==EqualsSignGreaterThanSign) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt90=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( ((LA85_0>=Intersection && LA85_0<=Implements)||(LA85_0>=Promisify && LA85_0<=Abstract)||LA85_0==External||(LA85_0>=Private && LA85_0<=Project)||LA85_0==Public||LA85_0==Static||LA85_0==Target||(LA85_0>=Async && LA85_0<=Await)||LA85_0==Union||(LA85_0>=Yield && LA85_0<=This)||LA85_0==From||LA85_0==This_1||(LA85_0>=Type && LA85_0<=Void)||LA85_0==FullStopFullStopFullStop||(LA85_0>=Get && LA85_0<=Let)||(LA85_0>=Out && LA85_0<=Set)||LA85_0==As||LA85_0==Of||(LA85_0>=CommercialAt && LA85_0<=LeftSquareBracket)||LA85_0==LeftCurlyBracket||LA85_0==Tilde||LA85_0==RULE_IDENTIFIER) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop84:
                            do {
                                int alt84=2;
                                int LA84_0 = input.LA(1);

                                if ( (LA84_0==Comma) ) {
                                    alt84=1;
                                }


                                switch (alt84) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop84;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==Colon) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( ((LA88_0>=Intersection && LA88_0<=Implements)||(LA88_0>=Promisify && LA88_0<=Abstract)||LA88_0==External||(LA88_0>=Private && LA88_0<=Project)||LA88_0==Public||LA88_0==Static||LA88_0==Target||(LA88_0>=Async && LA88_0<=Await)||LA88_0==Union||(LA88_0>=Yield && LA88_0<=This)||LA88_0==From||LA88_0==This_1||(LA88_0>=Type && LA88_0<=Void)||LA88_0==FullStopFullStopFullStop||(LA88_0>=Get && LA88_0<=Let)||(LA88_0>=Out && LA88_0<=Set)||LA88_0==As||LA88_0==Of||(LA88_0>=CommercialAt && LA88_0<=LeftSquareBracket)||LA88_0==LeftCurlyBracket||LA88_0==Tilde||LA88_0==RULE_IDENTIFIER) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop87:
                            do {
                                int alt87=2;
                                int LA87_0 = input.LA(1);

                                if ( (LA87_0==Comma) ) {
                                    alt87=1;
                                }


                                switch (alt87) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop87;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==Colon) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt91=2;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrowExpression_return retval = new InternalN4JSXParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt98=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt98=1;
                }
                break;
            case Async:
                {
                int LA98_2 = input.LA(2);

                if ( (LA98_2==RULE_NO_LINE_TERMINATOR) && (synpred41_InternalN4JSXParser())) {
                    alt98=2;
                }
                else if ( (LA98_2==LeftParenthesis) && (synpred41_InternalN4JSXParser())) {
                    alt98=2;
                }
                else if ( (LA98_2==EqualsSignGreaterThanSign) ) {
                    alt98=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( ((LA93_0>=Intersection && LA93_0<=Implements)||(LA93_0>=Promisify && LA93_0<=Abstract)||LA93_0==External||(LA93_0>=Private && LA93_0<=Project)||LA93_0==Public||LA93_0==Static||LA93_0==Target||(LA93_0>=Async && LA93_0<=Await)||LA93_0==Union||(LA93_0>=Yield && LA93_0<=This)||LA93_0==From||LA93_0==This_1||(LA93_0>=Type && LA93_0<=Void)||LA93_0==FullStopFullStopFullStop||(LA93_0>=Get && LA93_0<=Let)||(LA93_0>=Out && LA93_0<=Set)||LA93_0==As||LA93_0==Of||(LA93_0>=CommercialAt && LA93_0<=LeftSquareBracket)||LA93_0==LeftCurlyBracket||LA93_0==Tilde||LA93_0==RULE_IDENTIFIER) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop92:
                            do {
                                int alt92=2;
                                int LA92_0 = input.LA(1);

                                if ( (LA92_0==Comma) ) {
                                    alt92=1;
                                }


                                switch (alt92) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop92;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==Colon) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( ((LA96_0>=Intersection && LA96_0<=Implements)||(LA96_0>=Promisify && LA96_0<=Abstract)||LA96_0==External||(LA96_0>=Private && LA96_0<=Project)||LA96_0==Public||LA96_0==Static||LA96_0==Target||(LA96_0>=Async && LA96_0<=Await)||LA96_0==Union||(LA96_0>=Yield && LA96_0<=This)||LA96_0==From||LA96_0==This_1||(LA96_0>=Type && LA96_0<=Void)||LA96_0==FullStopFullStopFullStop||(LA96_0>=Get && LA96_0<=Let)||(LA96_0>=Out && LA96_0<=Set)||LA96_0==As||LA96_0==Of||(LA96_0>=CommercialAt && LA96_0<=LeftSquareBracket)||LA96_0==LeftCurlyBracket||LA96_0==Tilde||LA96_0==RULE_IDENTIFIER) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop95:
                            do {
                                int alt95=2;
                                int LA95_0 = input.LA(1);

                                if ( (LA95_0==Comma) ) {
                                    alt95=1;
                                }


                                switch (alt95) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop95;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==Colon) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt99=2;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ArrowExpression_return retval = new InternalN4JSXParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt106=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt106=1;
                }
                break;
            case Async:
                {
                int LA106_2 = input.LA(2);

                if ( (LA106_2==RULE_NO_LINE_TERMINATOR) && (synpred45_InternalN4JSXParser())) {
                    alt106=2;
                }
                else if ( (LA106_2==LeftParenthesis) && (synpred45_InternalN4JSXParser())) {
                    alt106=2;
                }
                else if ( (LA106_2==EqualsSignGreaterThanSign) ) {
                    alt106=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt106=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }

            switch (alt106) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( ((LA101_0>=Intersection && LA101_0<=Implements)||(LA101_0>=Promisify && LA101_0<=Abstract)||LA101_0==External||(LA101_0>=Private && LA101_0<=Project)||LA101_0==Public||LA101_0==Static||LA101_0==Target||(LA101_0>=Async && LA101_0<=Await)||LA101_0==Union||LA101_0==This||LA101_0==From||LA101_0==This_1||(LA101_0>=Type && LA101_0<=Void)||LA101_0==FullStopFullStopFullStop||(LA101_0>=Get && LA101_0<=Let)||(LA101_0>=Out && LA101_0<=Set)||LA101_0==As||LA101_0==Of||(LA101_0>=CommercialAt && LA101_0<=LeftSquareBracket)||LA101_0==LeftCurlyBracket||LA101_0==Tilde||LA101_0==RULE_IDENTIFIER) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop100:
                            do {
                                int alt100=2;
                                int LA100_0 = input.LA(1);

                                if ( (LA100_0==Comma) ) {
                                    alt100=1;
                                }


                                switch (alt100) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop100;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==Colon) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( ((LA104_0>=Intersection && LA104_0<=Implements)||(LA104_0>=Promisify && LA104_0<=Abstract)||LA104_0==External||(LA104_0>=Private && LA104_0<=Project)||LA104_0==Public||LA104_0==Static||LA104_0==Target||(LA104_0>=Async && LA104_0<=Await)||LA104_0==Union||LA104_0==This||LA104_0==From||LA104_0==This_1||(LA104_0>=Type && LA104_0<=Void)||LA104_0==FullStopFullStopFullStop||(LA104_0>=Get && LA104_0<=Let)||(LA104_0>=Out && LA104_0<=Set)||LA104_0==As||LA104_0==Of||(LA104_0>=CommercialAt && LA104_0<=LeftSquareBracket)||LA104_0==LeftCurlyBracket||LA104_0==Tilde||LA104_0==RULE_IDENTIFIER) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop103:
                            do {
                                int alt103=2;
                                int LA103_0 = input.LA(1);

                                if ( (LA103_0==Comma) ) {
                                    alt103=1;
                                }


                                switch (alt103) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop103;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==Colon) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ArrowExpression_return retval = new InternalN4JSXParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt114=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt114=1;
                }
                break;
            case Async:
                {
                int LA114_2 = input.LA(2);

                if ( (LA114_2==RULE_NO_LINE_TERMINATOR) && (synpred49_InternalN4JSXParser())) {
                    alt114=2;
                }
                else if ( (LA114_2==LeftParenthesis) && (synpred49_InternalN4JSXParser())) {
                    alt114=2;
                }
                else if ( (LA114_2==EqualsSignGreaterThanSign) ) {
                    alt114=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt114=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( ((LA109_0>=Intersection && LA109_0<=Implements)||(LA109_0>=Promisify && LA109_0<=Abstract)||LA109_0==External||(LA109_0>=Private && LA109_0<=Project)||LA109_0==Public||LA109_0==Static||LA109_0==Target||(LA109_0>=Async && LA109_0<=Await)||LA109_0==Union||LA109_0==This||LA109_0==From||LA109_0==This_1||(LA109_0>=Type && LA109_0<=Void)||LA109_0==FullStopFullStopFullStop||(LA109_0>=Get && LA109_0<=Let)||(LA109_0>=Out && LA109_0<=Set)||LA109_0==As||LA109_0==Of||(LA109_0>=CommercialAt && LA109_0<=LeftSquareBracket)||LA109_0==LeftCurlyBracket||LA109_0==Tilde||LA109_0==RULE_IDENTIFIER) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop108:
                            do {
                                int alt108=2;
                                int LA108_0 = input.LA(1);

                                if ( (LA108_0==Comma) ) {
                                    alt108=1;
                                }


                                switch (alt108) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop108;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==Colon) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( ((LA112_0>=Intersection && LA112_0<=Implements)||(LA112_0>=Promisify && LA112_0<=Abstract)||LA112_0==External||(LA112_0>=Private && LA112_0<=Project)||LA112_0==Public||LA112_0==Static||LA112_0==Target||(LA112_0>=Async && LA112_0<=Await)||LA112_0==Union||LA112_0==This||LA112_0==From||LA112_0==This_1||(LA112_0>=Type && LA112_0<=Void)||LA112_0==FullStopFullStopFullStop||(LA112_0>=Get && LA112_0<=Let)||(LA112_0>=Out && LA112_0<=Set)||LA112_0==As||LA112_0==Of||(LA112_0>=CommercialAt && LA112_0<=LeftSquareBracket)||LA112_0==LeftCurlyBracket||LA112_0==Tilde||LA112_0==RULE_IDENTIFIER) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop111:
                            do {
                                int alt111=2;
                                int LA111_0 = input.LA(1);

                                if ( (LA111_0==Comma) ) {
                                    alt111=1;
                                }


                                switch (alt111) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop111;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==Colon) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.ruleStrictFormalParameters_return retval = new InternalN4JSXParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=Intersection && LA117_0<=Implements)||(LA117_0>=Promisify && LA117_0<=Abstract)||LA117_0==External||(LA117_0>=Private && LA117_0<=Project)||LA117_0==Public||LA117_0==Static||LA117_0==Target||(LA117_0>=Async && LA117_0<=Await)||LA117_0==Union||(LA117_0>=Yield && LA117_0<=This)||LA117_0==From||LA117_0==This_1||(LA117_0>=Type && LA117_0<=Void)||LA117_0==FullStopFullStopFullStop||(LA117_0>=Get && LA117_0<=Let)||(LA117_0>=Out && LA117_0<=Set)||LA117_0==As||LA117_0==Of||(LA117_0>=CommercialAt && LA117_0<=LeftSquareBracket)||LA117_0==LeftCurlyBracket||LA117_0==Tilde||LA117_0==RULE_IDENTIFIER) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                      				
                    }

                    }


                    }
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==Comma) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.norm1_StrictFormalParameters_return retval = new InternalN4JSXParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=Intersection && LA119_0<=Implements)||(LA119_0>=Promisify && LA119_0<=Abstract)||LA119_0==External||(LA119_0>=Private && LA119_0<=Project)||LA119_0==Public||LA119_0==Static||LA119_0==Target||(LA119_0>=Async && LA119_0<=Await)||LA119_0==Union||LA119_0==This||LA119_0==From||LA119_0==This_1||(LA119_0>=Type && LA119_0<=Void)||LA119_0==FullStopFullStopFullStop||(LA119_0>=Get && LA119_0<=Let)||(LA119_0>=Out && LA119_0<=Set)||LA119_0==As||LA119_0==Of||(LA119_0>=CommercialAt && LA119_0<=LeftSquareBracket)||LA119_0==LeftCurlyBracket||LA119_0==Tilde||LA119_0==RULE_IDENTIFIER) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                      				
                    }

                    }


                    }
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==Comma) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlockMinusBraces() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlockMinusBraces();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBlockMinusBraces_return ruleBlockMinusBraces() throws RecognitionException {
        InternalN4JSXParser.ruleBlockMinusBraces_return retval = new InternalN4JSXParser.ruleBlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0>=Intersection && LA120_0<=Implements)||(LA120_0>=Promisify && LA120_0<=Function)||(LA120_0>=Private && LA120_0<=Delete)||(LA120_0>=Public && LA120_0<=Break)||(LA120_0>=Class && LA120_0<=This)||(LA120_0>=From && LA120_0<=With)||(LA120_0>=For && LA120_0<=Var)||LA120_0==PlusSignPlusSign||LA120_0==HyphenMinusHyphenMinus||LA120_0==SolidusEqualsSign||(LA120_0>=As && LA120_0<=If)||LA120_0==Of||LA120_0==ExclamationMark||LA120_0==LeftParenthesis||LA120_0==PlusSign||LA120_0==HyphenMinus||LA120_0==Solidus||(LA120_0>=Semicolon && LA120_0<=LessThanSign)||(LA120_0>=CommercialAt && LA120_0<=LeftSquareBracket)||LA120_0==LeftCurlyBracket||LA120_0==Tilde||LA120_0==RULE_DOUBLE||(LA120_0>=RULE_HEX_INT && LA120_0<=RULE_LEGACY_OCTAL_INT)||LA120_0==RULE_SCIENTIFIC_INT||LA120_0==RULE_IDENTIFIER||LA120_0==RULE_STRING||(LA120_0>=RULE_TEMPLATE_HEAD && LA120_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA120_0==RULE_INT) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSXParser.norm1_BlockMinusBraces_return retval = new InternalN4JSXParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=Intersection && LA121_0<=Implements)||(LA121_0>=Promisify && LA121_0<=Function)||(LA121_0>=Private && LA121_0<=Delete)||(LA121_0>=Public && LA121_0<=Break)||(LA121_0>=Class && LA121_0<=This)||(LA121_0>=From && LA121_0<=With)||(LA121_0>=For && LA121_0<=Var)||LA121_0==PlusSignPlusSign||LA121_0==HyphenMinusHyphenMinus||LA121_0==SolidusEqualsSign||(LA121_0>=As && LA121_0<=If)||LA121_0==Of||LA121_0==ExclamationMark||LA121_0==LeftParenthesis||LA121_0==PlusSign||LA121_0==HyphenMinus||LA121_0==Solidus||(LA121_0>=Semicolon && LA121_0<=LessThanSign)||(LA121_0>=CommercialAt && LA121_0<=LeftSquareBracket)||LA121_0==LeftCurlyBracket||LA121_0==Tilde||LA121_0==RULE_DOUBLE||(LA121_0>=RULE_HEX_INT && LA121_0<=RULE_LEGACY_OCTAL_INT)||LA121_0==RULE_SCIENTIFIC_INT||LA121_0==RULE_IDENTIFIER||LA121_0==RULE_STRING||(LA121_0>=RULE_TEMPLATE_HEAD && LA121_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA121_0==RULE_INT) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionDisguisedAsBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return ruleExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm1_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentExpressionStatement_return ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpressionStatement_return retval = new InternalN4JSXParser.ruleAssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AssignmentExpressionStatement_return norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpressionStatement_return retval = new InternalN4JSXParser.norm1_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExpression_return retval = new InternalN4JSXParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==Class) ) {
                alt124=1;
            }
            else if ( (LA124_0==Function||LA124_0==Async) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      			
                    }
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( ((LA122_0>=Intersection && LA122_0<=Constructor)||(LA122_0>=Promisify && LA122_0<=Abstract)||LA122_0==External||(LA122_0>=Private && LA122_0<=Project)||LA122_0==Public||LA122_0==Static||LA122_0==Target||(LA122_0>=Async && LA122_0<=Await)||LA122_0==Union||(LA122_0>=Yield && LA122_0<=This)||LA122_0==From||LA122_0==Type||(LA122_0>=Get && LA122_0<=Let)||(LA122_0>=Out && LA122_0<=Set)||LA122_0==As||LA122_0==Of||LA122_0==RULE_IDENTIFIER) ) {
                        alt122=1;
                    }
                    else if ( (LA122_0==Implements) ) {
                        int LA122_2 = input.LA(2);

                        if ( (LA122_2==Implements||LA122_2==Extends||LA122_2==LeftCurlyBracket) ) {
                            alt122=1;
                        }
                    }
                    switch (alt122) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==Implements||LA123_0==Extends) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_22);
                            ClassExtendsClauseParserRuleCall_1_0_3=ruleClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedExpression_return retval = new InternalN4JSXParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==Class) ) {
                alt127=1;
            }
            else if ( (LA127_0==Function||LA127_0==Async) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      			
                    }
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( ((LA125_0>=Intersection && LA125_0<=Constructor)||(LA125_0>=Promisify && LA125_0<=Abstract)||LA125_0==External||(LA125_0>=Private && LA125_0<=Project)||LA125_0==Public||LA125_0==Static||LA125_0==Target||(LA125_0>=Async && LA125_0<=Await)||LA125_0==Union||LA125_0==This||LA125_0==From||LA125_0==Type||(LA125_0>=Get && LA125_0<=Let)||(LA125_0>=Out && LA125_0<=Set)||LA125_0==As||LA125_0==Of||LA125_0==RULE_IDENTIFIER) ) {
                        alt125=1;
                    }
                    else if ( (LA125_0==Implements) ) {
                        int LA125_2 = input.LA(2);

                        if ( (LA125_2==Implements||LA125_2==Extends||LA125_2==LeftCurlyBracket) ) {
                            alt125=1;
                        }
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_68);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==Implements||LA126_0==Extends) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_68);
                            ClassExtendsClauseParserRuleCall_1_0_3=norm1_ClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariable_return retval = new InternalN4JSXParser.ruleTypeVariable_return();
        retval.start = input.LT(1);

        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_2_1_0 = null;




        try {
            {
            {
            int alt128=3;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==Out) ) {
                alt128=1;
            }
            else if ( (LA128_0==In) ) {
                alt128=2;
            }
            switch (alt128) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_69);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1());
              			
            }

            }


            }
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==Extends) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_2_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleFormalParameter_return retval = new InternalN4JSXParser.ruleFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_FormalParameter_return retval = new InternalN4JSXParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElementFragment_return retval = new InternalN4JSXParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token HasInitializerAssignmentEqualsSignKeyword_1_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt134=2;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==CommercialAt) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_70);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);
                    int alt131=2;
                    alt131 = dfa131.predict(input);
                    switch (alt131) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_71);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==FullStopFullStopFullStop) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_72);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3());
                      					
                    }

                    }


                    }
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==Colon) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_16);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==EqualsSign) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_1_0_0=(Token)match(input,EqualsSign,FOLLOW_73); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(HasInitializerAssignmentEqualsSignKeyword_1_0_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                      				
                    }

                    }


                    }
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( ((LA135_0>=Intersection && LA135_0<=Implements)||(LA135_0>=Promisify && LA135_0<=Abstract)||(LA135_0>=External && LA135_0<=Function)||(LA135_0>=Private && LA135_0<=Delete)||LA135_0==Public||LA135_0==Static||(LA135_0>=Target && LA135_0<=Await)||LA135_0==Class||(LA135_0>=False && LA135_0<=Super)||LA135_0==Union||(LA135_0>=Yield && LA135_0<=This)||(LA135_0>=From && LA135_0<=Void)||(LA135_0>=Get && LA135_0<=Set)||LA135_0==PlusSignPlusSign||LA135_0==HyphenMinusHyphenMinus||LA135_0==SolidusEqualsSign||LA135_0==As||LA135_0==Of||LA135_0==ExclamationMark||LA135_0==LeftParenthesis||LA135_0==PlusSign||LA135_0==HyphenMinus||LA135_0==Solidus||LA135_0==LessThanSign||(LA135_0>=CommercialAt && LA135_0<=LeftSquareBracket)||LA135_0==LeftCurlyBracket||LA135_0==Tilde||LA135_0==RULE_DOUBLE||(LA135_0>=RULE_HEX_INT && LA135_0<=RULE_LEGACY_OCTAL_INT)||LA135_0==RULE_SCIENTIFIC_INT||LA135_0==RULE_IDENTIFIER||LA135_0==RULE_STRING||(LA135_0>=RULE_TEMPLATE_HEAD && LA135_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA135_0==RULE_INT) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElementFragment_return retval = new InternalN4JSXParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token HasInitializerAssignmentEqualsSignKeyword_1_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==CommercialAt) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_70);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);
                    int alt138=2;
                    alt138 = dfa138.predict(input);
                    switch (alt138) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_71);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==FullStopFullStopFullStop) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_72);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3());
                      					
                    }

                    }


                    }
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==Colon) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_16);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==EqualsSign) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_1_0_0=(Token)match(input,EqualsSign,FOLLOW_73); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(HasInitializerAssignmentEqualsSignKeyword_1_0_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                      				
                    }

                    }


                    }
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( ((LA142_0>=Intersection && LA142_0<=Implements)||(LA142_0>=Promisify && LA142_0<=Abstract)||(LA142_0>=External && LA142_0<=Function)||(LA142_0>=Private && LA142_0<=Delete)||LA142_0==Public||LA142_0==Static||(LA142_0>=Target && LA142_0<=Await)||LA142_0==Class||(LA142_0>=False && LA142_0<=Super)||LA142_0==Union||(LA142_0>=Yield && LA142_0<=This)||(LA142_0>=From && LA142_0<=Void)||(LA142_0>=Get && LA142_0<=Set)||LA142_0==PlusSignPlusSign||LA142_0==HyphenMinusHyphenMinus||LA142_0==SolidusEqualsSign||LA142_0==As||LA142_0==Of||LA142_0==ExclamationMark||LA142_0==LeftParenthesis||LA142_0==PlusSign||LA142_0==HyphenMinus||LA142_0==Solidus||LA142_0==LessThanSign||(LA142_0>=CommercialAt && LA142_0<=LeftSquareBracket)||LA142_0==LeftCurlyBracket||LA142_0==Tilde||LA142_0==RULE_DOUBLE||(LA142_0>=RULE_HEX_INT && LA142_0<=RULE_LEGACY_OCTAL_INT)||LA142_0==RULE_SCIENTIFIC_INT||LA142_0==RULE_IDENTIFIER||LA142_0==RULE_STRING||(LA142_0>=RULE_TEMPLATE_HEAD && LA142_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA142_0==RULE_INT) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleColonSepTypeRef_return retval = new InternalN4JSXParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;




        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getDeclaredTypeRefAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleBogusTypeRefFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRefFragment_return ruleBogusTypeRefFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRefFragment_return retval = new InternalN4JSXParser.ruleBogusTypeRefFragment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBogusTypeRef_return BogusTypeRefBogusTypeRefParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BogusTypeRefBogusTypeRefParserRuleCall_0=ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.start):null), (BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.stop):null), grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSXParser.ruleBlock_return retval = new InternalN4JSXParser.ruleBlock_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              			
            }

            }


            }
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( ((LA144_0>=Intersection && LA144_0<=Implements)||(LA144_0>=Promisify && LA144_0<=Function)||(LA144_0>=Private && LA144_0<=Delete)||(LA144_0>=Public && LA144_0<=Break)||(LA144_0>=Class && LA144_0<=This)||(LA144_0>=From && LA144_0<=With)||(LA144_0>=For && LA144_0<=Var)||LA144_0==PlusSignPlusSign||LA144_0==HyphenMinusHyphenMinus||LA144_0==SolidusEqualsSign||(LA144_0>=As && LA144_0<=If)||LA144_0==Of||LA144_0==ExclamationMark||LA144_0==LeftParenthesis||LA144_0==PlusSign||LA144_0==HyphenMinus||LA144_0==Solidus||(LA144_0>=Semicolon && LA144_0<=LessThanSign)||(LA144_0>=CommercialAt && LA144_0<=LeftSquareBracket)||LA144_0==LeftCurlyBracket||LA144_0==Tilde||LA144_0==RULE_DOUBLE||(LA144_0>=RULE_HEX_INT && LA144_0<=RULE_LEGACY_OCTAL_INT)||LA144_0==RULE_SCIENTIFIC_INT||LA144_0==RULE_IDENTIFIER||LA144_0==RULE_STRING||(LA144_0>=RULE_TEMPLATE_HEAD && LA144_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA144_0==RULE_INT) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSXParser.norm1_Block_return retval = new InternalN4JSXParser.norm1_Block_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              			
            }

            }


            }
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( ((LA145_0>=Intersection && LA145_0<=Implements)||(LA145_0>=Promisify && LA145_0<=Function)||(LA145_0>=Private && LA145_0<=Delete)||(LA145_0>=Public && LA145_0<=Break)||(LA145_0>=Class && LA145_0<=This)||(LA145_0>=From && LA145_0<=With)||(LA145_0>=For && LA145_0<=Var)||LA145_0==PlusSignPlusSign||LA145_0==HyphenMinusHyphenMinus||LA145_0==SolidusEqualsSign||(LA145_0>=As && LA145_0<=If)||LA145_0==Of||LA145_0==ExclamationMark||LA145_0==LeftParenthesis||LA145_0==PlusSign||LA145_0==HyphenMinus||LA145_0==Solidus||(LA145_0>=Semicolon && LA145_0<=LessThanSign)||(LA145_0>=CommercialAt && LA145_0<=LeftSquareBracket)||LA145_0==LeftCurlyBracket||LA145_0==Tilde||LA145_0==RULE_DOUBLE||(LA145_0>=RULE_HEX_INT && LA145_0<=RULE_LEGACY_OCTAL_INT)||LA145_0==RULE_SCIENTIFIC_INT||LA145_0==RULE_IDENTIFIER||LA145_0==RULE_STRING||(LA145_0>=RULE_TEMPLATE_HEAD && LA145_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA145_0==RULE_INT) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSXParser.ruleRootStatement_return retval = new InternalN4JSXParser.ruleRootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;




        try {
            {
            int alt146=16;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_RootStatement_return retval = new InternalN4JSXParser.norm1_RootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;




        try {
            {
            int alt147=16;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSXParser.ruleStatement_return retval = new InternalN4JSXParser.ruleStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;




        try {
            {
            int alt148=2;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSXParser.norm1_Statement_return retval = new InternalN4JSXParser.norm1_Statement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;




        try {
            {
            int alt149=2;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableStatement_return retval = new InternalN4JSXParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
              			
            }

            }


            }
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==Comma) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableStatement_return retval = new InternalN4JSXParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
              			
            }

            }


            }
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==Comma) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableStatement_return retval = new InternalN4JSXParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_4_0=null;
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;




        try {
            {
            {
            loop152:
            do {
                int alt152=2;
                alt152 = dfa152.predict(input);
                switch (alt152) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_40);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3());
              			
            }

            }


            }
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==Comma) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LeftCurlyBracket) && (synpred67_InternalN4JSXParser())) {
                alt154=1;
            }
            else if ( (LA154_0==LeftSquareBracket) && (synpred67_InternalN4JSXParser())) {
                alt154=1;
            }
            else if ( ((LA154_0>=Intersection && LA154_0<=Implements)||(LA154_0>=Promisify && LA154_0<=Abstract)||LA154_0==External||(LA154_0>=Private && LA154_0<=Project)||LA154_0==Public||LA154_0==Static||LA154_0==Target||(LA154_0>=Async && LA154_0<=Await)||LA154_0==Union||(LA154_0>=Yield && LA154_0<=This)||LA154_0==From||LA154_0==Type||(LA154_0>=Get && LA154_0<=Let)||(LA154_0>=Out && LA154_0<=Set)||LA154_0==As||LA154_0==Of||LA154_0==CommercialAt||LA154_0==RULE_IDENTIFIER) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LeftCurlyBracket) && (synpred68_InternalN4JSXParser())) {
                alt155=1;
            }
            else if ( (LA155_0==LeftSquareBracket) && (synpred68_InternalN4JSXParser())) {
                alt155=1;
            }
            else if ( ((LA155_0>=Intersection && LA155_0<=Implements)||(LA155_0>=Promisify && LA155_0<=Abstract)||LA155_0==External||(LA155_0>=Private && LA155_0<=Project)||LA155_0==Public||LA155_0==Static||LA155_0==Target||(LA155_0>=Async && LA155_0<=Await)||LA155_0==Union||(LA155_0>=Yield && LA155_0<=This)||LA155_0==From||LA155_0==Type||(LA155_0>=Get && LA155_0<=Let)||(LA155_0>=Out && LA155_0<=Set)||LA155_0==As||LA155_0==Of||LA155_0==CommercialAt||LA155_0==RULE_IDENTIFIER) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LeftCurlyBracket) && (synpred69_InternalN4JSXParser())) {
                alt156=1;
            }
            else if ( (LA156_0==LeftSquareBracket) && (synpred69_InternalN4JSXParser())) {
                alt156=1;
            }
            else if ( ((LA156_0>=Intersection && LA156_0<=Implements)||(LA156_0>=Promisify && LA156_0<=Abstract)||LA156_0==External||(LA156_0>=Private && LA156_0<=Project)||LA156_0==Public||LA156_0==Static||LA156_0==Target||(LA156_0>=Async && LA156_0<=Await)||LA156_0==Union||LA156_0==This||LA156_0==From||LA156_0==Type||(LA156_0>=Get && LA156_0<=Let)||(LA156_0>=Out && LA156_0<=Set)||LA156_0==As||LA156_0==Of||LA156_0==CommercialAt||LA156_0==RULE_IDENTIFIER) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==LeftCurlyBracket) && (synpred70_InternalN4JSXParser())) {
                alt157=1;
            }
            else if ( (LA157_0==LeftSquareBracket) && (synpred70_InternalN4JSXParser())) {
                alt157=1;
            }
            else if ( ((LA157_0>=Intersection && LA157_0<=Implements)||(LA157_0>=Promisify && LA157_0<=Abstract)||LA157_0==External||(LA157_0>=Private && LA157_0<=Project)||LA157_0==Public||LA157_0==Static||LA157_0==Target||(LA157_0>=Async && LA157_0<=Await)||LA157_0==Union||LA157_0==This||LA157_0==From||LA157_0==Type||(LA157_0>=Get && LA157_0<=Let)||(LA157_0>=Out && LA157_0<=Set)||LA157_0==As||LA157_0==Of||LA157_0==CommercialAt||LA157_0==RULE_IDENTIFIER) ) {
                alt157=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==LeftCurlyBracket) && (synpred71_InternalN4JSXParser())) {
                alt158=1;
            }
            else if ( (LA158_0==LeftSquareBracket) && (synpred71_InternalN4JSXParser())) {
                alt158=1;
            }
            else if ( ((LA158_0>=Intersection && LA158_0<=Implements)||(LA158_0>=Promisify && LA158_0<=Abstract)||LA158_0==External||(LA158_0>=Private && LA158_0<=Project)||LA158_0==Public||LA158_0==Static||LA158_0==Target||(LA158_0>=Async && LA158_0<=Await)||LA158_0==Union||(LA158_0>=Yield && LA158_0<=This)||LA158_0==From||LA158_0==Type||(LA158_0>=Get && LA158_0<=Let)||(LA158_0>=Out && LA158_0<=Set)||LA158_0==As||LA158_0==Of||LA158_0==CommercialAt||LA158_0==RULE_IDENTIFIER) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==LeftCurlyBracket) && (synpred72_InternalN4JSXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==LeftSquareBracket) && (synpred72_InternalN4JSXParser())) {
                alt159=1;
            }
            else if ( ((LA159_0>=Intersection && LA159_0<=Implements)||(LA159_0>=Promisify && LA159_0<=Abstract)||LA159_0==External||(LA159_0>=Private && LA159_0<=Project)||LA159_0==Public||LA159_0==Static||LA159_0==Target||(LA159_0>=Async && LA159_0<=Await)||LA159_0==Union||LA159_0==This||LA159_0==From||LA159_0==Type||(LA159_0>=Get && LA159_0<=Let)||(LA159_0>=Out && LA159_0<=Set)||LA159_0==As||LA159_0==Of||LA159_0==CommercialAt||LA159_0==RULE_IDENTIFIER) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableBinding_return retval = new InternalN4JSXParser.ruleVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_74);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableBinding_return retval = new InternalN4JSXParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_74);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableBinding_return retval = new InternalN4JSXParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_74);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableBinding_return retval = new InternalN4JSXParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_74);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableBinding_return retval = new InternalN4JSXParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==EqualsSign) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==EqualsSign) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableBinding_return retval = new InternalN4JSXParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==EqualsSign) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EqualsSign) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclaration_return retval = new InternalN4JSXParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclaration_return retval = new InternalN4JSXParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclaration_return retval = new InternalN4JSXParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return retval = new InternalN4JSXParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclaration_return retval = new InternalN4JSXParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return retval = new InternalN4JSXParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop164:
            do {
                int alt164=2;
                alt164 = dfa164.predict(input);
                switch (alt164) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==EqualsSign) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop166:
            do {
                int alt166=2;
                alt166 = dfa166.predict(input);
                switch (alt166) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==EqualsSign) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop168:
            do {
                int alt168=2;
                alt168 = dfa168.predict(input);
                switch (alt168) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==EqualsSign) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop170:
            do {
                int alt170=2;
                alt170 = dfa170.predict(input);
                switch (alt170) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==EqualsSign) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop172:
            do {
                int alt172=2;
                alt172 = dfa172.predict(input);
                switch (alt172) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==Colon) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==EqualsSign) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop175:
            do {
                int alt175=2;
                alt175 = dfa175.predict(input);
                switch (alt175) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==Colon) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==EqualsSign) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop178:
            do {
                int alt178=2;
                alt178 = dfa178.predict(input);
                switch (alt178) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==Colon) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==EqualsSign) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop181:
            do {
                int alt181=2;
                alt181 = dfa181.predict(input);
                switch (alt181) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_75);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==Colon) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    pushFollow(FOLLOW_16);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==EqualsSign) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==LeftCurlyBracket) && (synpred89_InternalN4JSXParser())) {
                alt184=1;
            }
            else if ( (LA184_0==LeftSquareBracket) && (synpred89_InternalN4JSXParser())) {
                alt184=1;
            }
            else if ( ((LA184_0>=Intersection && LA184_0<=Implements)||(LA184_0>=Promisify && LA184_0<=Abstract)||LA184_0==External||(LA184_0>=Private && LA184_0<=Project)||LA184_0==Public||LA184_0==Static||LA184_0==Target||(LA184_0>=Async && LA184_0<=Await)||LA184_0==Union||(LA184_0>=Yield && LA184_0<=This)||LA184_0==From||LA184_0==Type||(LA184_0>=Get && LA184_0<=Let)||(LA184_0>=Out && LA184_0<=Set)||LA184_0==As||LA184_0==Of||LA184_0==CommercialAt||LA184_0==RULE_IDENTIFIER) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==LeftCurlyBracket) && (synpred90_InternalN4JSXParser())) {
                alt185=1;
            }
            else if ( (LA185_0==LeftSquareBracket) && (synpred90_InternalN4JSXParser())) {
                alt185=1;
            }
            else if ( ((LA185_0>=Intersection && LA185_0<=Implements)||(LA185_0>=Promisify && LA185_0<=Abstract)||LA185_0==External||(LA185_0>=Private && LA185_0<=Project)||LA185_0==Public||LA185_0==Static||LA185_0==Target||(LA185_0>=Async && LA185_0<=Await)||LA185_0==Union||LA185_0==This||LA185_0==From||LA185_0==Type||(LA185_0>=Get && LA185_0<=Let)||(LA185_0>=Out && LA185_0<=Set)||LA185_0==As||LA185_0==Of||LA185_0==CommercialAt||LA185_0==RULE_IDENTIFIER) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableBinding_return retval = new InternalN4JSXParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_74);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSXParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_74);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSXParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSXParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSXParser.ruleEmptyStatement_return retval = new InternalN4JSXParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;



        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionStatement_return retval = new InternalN4JSXParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ExpressionStatement_return retval = new InternalN4JSXParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIfStatement_return retval = new InternalN4JSXParser.ruleIfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;




        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_78);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
              			
            }

            }


            }
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==Else) ) {
                int LA186_1 = input.LA(2);

                if ( (synpred93_InternalN4JSXParser()) ) {
                    alt186=1;
                }
            }
            switch (alt186) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_77); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IfStatement_return retval = new InternalN4JSXParser.norm1_IfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;




        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_78);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
              			
            }

            }


            }
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==Else) ) {
                int LA187_1 = input.LA(2);

                if ( (synpred94_InternalN4JSXParser()) ) {
                    alt187=1;
                }
            }
            switch (alt187) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_77); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIterationStatement_return retval = new InternalN4JSXParser.ruleIterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;




        try {
            {
            int alt188=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt188=1;
                }
                break;
            case While:
                {
                alt188=2;
                }
                break;
            case For:
                {
                alt188=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IterationStatement_return retval = new InternalN4JSXParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;




        try {
            {
            int alt189=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt189=1;
                }
                break;
            case While:
                {
                alt189=2;
                }
                break;
            case For:
                {
                alt189=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDoStatement_return retval = new InternalN4JSXParser.ruleDoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;




        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_79);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              	
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
              			
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              	
            }
            int alt190=2;
            alt190 = dfa190.predict(input);
            switch (alt190) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_DoStatement_return retval = new InternalN4JSXParser.norm1_DoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;




        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_79);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              	
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
              			
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              	
            }
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==Semicolon) ) {
                int LA191_1 = input.LA(2);

                if ( (synpred96_InternalN4JSXParser()) ) {
                    alt191=1;
                }
            }
            else if ( (LA191_0==EOF) && (synpred96_InternalN4JSXParser())) {
                alt191=1;
            }
            else if ( (LA191_0==RULE_EOL) && (synpred96_InternalN4JSXParser())) {
                alt191=1;
            }
            else if ( (LA191_0==RULE_ML_COMMENT) && (synpred96_InternalN4JSXParser())) {
                alt191=1;
            }
            else if ( (LA191_0==RightCurlyBracket) ) {
                int LA191_5 = input.LA(2);

                if ( (synpred96_InternalN4JSXParser()) ) {
                    alt191=1;
                }
            }
            switch (alt191) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWhileStatement_return retval = new InternalN4JSXParser.ruleWhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WhileStatement_return retval = new InternalN4JSXParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSXParser.ruleForStatement_return retval = new InternalN4JSXParser.ruleForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_80); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              	
            }
            int alt209=2;
            alt209 = dfa209.predict(input);
            switch (alt209) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_81);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_76);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2());
                      						
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt208=3;
                    alt208 = dfa208.predict(input);
                    switch (alt208) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt200=2;
                            alt200 = dfa200.predict(input);
                            switch (alt200) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_82);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0());
                                      										
                                    }

                                    }


                                    }
                                    int alt192=2;
                                    int LA192_0 = input.LA(1);

                                    if ( (LA192_0==In) ) {
                                        alt192=1;
                                    }
                                    else if ( (LA192_0==Of) ) {
                                        alt192=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 192, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt192) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt193=2;
                                    alt193 = dfa193.predict(input);
                                    switch (alt193) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              											announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2());
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_84);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt199=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt199=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt199=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt199=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 199, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt199) {
                                        case 1 :
                                            {
                                            {
                                            loop194:
                                            do {
                                                int alt194=2;
                                                int LA194_0 = input.LA(1);

                                                if ( (LA194_0==Comma) ) {
                                                    alt194=1;
                                                }


                                                switch (alt194) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      											announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      										
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_85);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1());
                                            	      												
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop194;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              									
                                            }
                                            int alt195=2;
                                            int LA195_0 = input.LA(1);

                                            if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||LA195_0==Public||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||LA195_0==HyphenMinusHyphenMinus||LA195_0==SolidusEqualsSign||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                                alt195=1;
                                            }
                                            switch (alt195) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_87);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              									
                                            }
                                            int alt196=2;
                                            int LA196_0 = input.LA(1);

                                            if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||LA196_0==Public||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||(LA196_0>=Get && LA196_0<=Set)||LA196_0==PlusSignPlusSign||LA196_0==HyphenMinusHyphenMinus||LA196_0==SolidusEqualsSign||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||LA196_0==PlusSign||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_HEX_INT && LA196_0<=RULE_LEGACY_OCTAL_INT)||LA196_0==RULE_SCIENTIFIC_INT||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_STRING||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_INT) ) {
                                                alt196=1;
                                            }
                                            switch (alt196) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_76);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt197=2;
                                            int LA197_0 = input.LA(1);

                                            if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Abstract)||(LA197_0>=External && LA197_0<=Function)||(LA197_0>=Private && LA197_0<=Delete)||LA197_0==Public||LA197_0==Static||(LA197_0>=Target && LA197_0<=Await)||LA197_0==Class||(LA197_0>=False && LA197_0<=Super)||LA197_0==Union||(LA197_0>=Yield && LA197_0<=This)||(LA197_0>=From && LA197_0<=Void)||(LA197_0>=Get && LA197_0<=Set)||LA197_0==PlusSignPlusSign||LA197_0==HyphenMinusHyphenMinus||LA197_0==SolidusEqualsSign||LA197_0==As||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||LA197_0==PlusSign||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_HEX_INT && LA197_0<=RULE_LEGACY_OCTAL_INT)||LA197_0==RULE_SCIENTIFIC_INT||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_STRING||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_INT) ) {
                                                alt197=1;
                                            }
                                            switch (alt197) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_76);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt198=2;
                                            int LA198_0 = input.LA(1);

                                            if ( ((LA198_0>=Intersection && LA198_0<=Implements)||(LA198_0>=Promisify && LA198_0<=Abstract)||(LA198_0>=External && LA198_0<=Function)||(LA198_0>=Private && LA198_0<=Delete)||LA198_0==Public||LA198_0==Static||(LA198_0>=Target && LA198_0<=Await)||LA198_0==Class||(LA198_0>=False && LA198_0<=Super)||LA198_0==Union||(LA198_0>=Yield && LA198_0<=This)||(LA198_0>=From && LA198_0<=Void)||(LA198_0>=Get && LA198_0<=Set)||LA198_0==PlusSignPlusSign||LA198_0==HyphenMinusHyphenMinus||LA198_0==SolidusEqualsSign||LA198_0==As||LA198_0==Of||LA198_0==ExclamationMark||LA198_0==LeftParenthesis||LA198_0==PlusSign||LA198_0==HyphenMinus||LA198_0==Solidus||LA198_0==LessThanSign||(LA198_0>=CommercialAt && LA198_0<=LeftSquareBracket)||LA198_0==LeftCurlyBracket||LA198_0==Tilde||LA198_0==RULE_DOUBLE||(LA198_0>=RULE_HEX_INT && LA198_0<=RULE_LEGACY_OCTAL_INT)||LA198_0==RULE_SCIENTIFIC_INT||LA198_0==RULE_IDENTIFIER||LA198_0==RULE_STRING||(LA198_0>=RULE_TEMPLATE_HEAD && LA198_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA198_0==RULE_INT) ) {
                                                alt198=1;
                                            }
                                            switch (alt198) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_76);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_88);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0());
                              							
                            }

                            }


                            }
                            int alt205=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt205=1;
                                }
                                break;
                            case In:
                                {
                                alt205=2;
                                }
                                break;
                            case Of:
                                {
                                alt205=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 205, 0, input);

                                throw nvae;
                            }

                            switch (alt205) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      							
                                    }
                                    int alt201=2;
                                    int LA201_0 = input.LA(1);

                                    if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||(LA201_0>=External && LA201_0<=Function)||(LA201_0>=Private && LA201_0<=Delete)||LA201_0==Public||LA201_0==Static||(LA201_0>=Target && LA201_0<=Await)||LA201_0==Class||(LA201_0>=False && LA201_0<=Super)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||(LA201_0>=From && LA201_0<=Void)||(LA201_0>=Get && LA201_0<=Set)||LA201_0==PlusSignPlusSign||LA201_0==HyphenMinusHyphenMinus||LA201_0==SolidusEqualsSign||LA201_0==As||LA201_0==Of||LA201_0==ExclamationMark||LA201_0==LeftParenthesis||LA201_0==PlusSign||LA201_0==HyphenMinus||LA201_0==Solidus||LA201_0==LessThanSign||(LA201_0>=CommercialAt && LA201_0<=LeftSquareBracket)||LA201_0==LeftCurlyBracket||LA201_0==Tilde||LA201_0==RULE_DOUBLE||(LA201_0>=RULE_HEX_INT && LA201_0<=RULE_LEGACY_OCTAL_INT)||LA201_0==RULE_SCIENTIFIC_INT||LA201_0==RULE_IDENTIFIER||LA201_0==RULE_STRING||(LA201_0>=RULE_TEMPLATE_HEAD && LA201_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA201_0==RULE_INT) ) {
                                        alt201=1;
                                    }
                                    switch (alt201) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_87);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      							
                                    }
                                    int alt202=2;
                                    int LA202_0 = input.LA(1);

                                    if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||LA202_0==Public||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||(LA202_0>=Get && LA202_0<=Set)||LA202_0==PlusSignPlusSign||LA202_0==HyphenMinusHyphenMinus||LA202_0==SolidusEqualsSign||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||LA202_0==PlusSign||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_HEX_INT && LA202_0<=RULE_LEGACY_OCTAL_INT)||LA202_0==RULE_SCIENTIFIC_INT||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_STRING||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_INT) ) {
                                        alt202=1;
                                    }
                                    switch (alt202) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt203=2;
                                    int LA203_0 = input.LA(1);

                                    if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||LA203_0==Public||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||LA203_0==HyphenMinusHyphenMinus||LA203_0==SolidusEqualsSign||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                        alt203=1;
                                    }
                                    switch (alt203) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt204=2;
                                    int LA204_0 = input.LA(1);

                                    if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||LA204_0==Public||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||LA204_0==HyphenMinusHyphenMinus||LA204_0==SolidusEqualsSign||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {
                                        alt204=1;
                                    }
                                    switch (alt204) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              					
                            }
                            int alt206=2;
                            int LA206_0 = input.LA(1);

                            if ( ((LA206_0>=Intersection && LA206_0<=Implements)||(LA206_0>=Promisify && LA206_0<=Abstract)||(LA206_0>=External && LA206_0<=Function)||(LA206_0>=Private && LA206_0<=Delete)||LA206_0==Public||LA206_0==Static||(LA206_0>=Target && LA206_0<=Await)||LA206_0==Class||(LA206_0>=False && LA206_0<=Super)||LA206_0==Union||(LA206_0>=Yield && LA206_0<=This)||(LA206_0>=From && LA206_0<=Void)||(LA206_0>=Get && LA206_0<=Set)||LA206_0==PlusSignPlusSign||LA206_0==HyphenMinusHyphenMinus||LA206_0==SolidusEqualsSign||LA206_0==As||LA206_0==Of||LA206_0==ExclamationMark||LA206_0==LeftParenthesis||LA206_0==PlusSign||LA206_0==HyphenMinus||LA206_0==Solidus||LA206_0==LessThanSign||(LA206_0>=CommercialAt && LA206_0<=LeftSquareBracket)||LA206_0==LeftCurlyBracket||LA206_0==Tilde||LA206_0==RULE_DOUBLE||(LA206_0>=RULE_HEX_INT && LA206_0<=RULE_LEGACY_OCTAL_INT)||LA206_0==RULE_SCIENTIFIC_INT||LA206_0==RULE_IDENTIFIER||LA206_0==RULE_STRING||(LA206_0>=RULE_TEMPLATE_HEAD && LA206_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA206_0==RULE_INT) ) {
                                alt206=1;
                            }
                            switch (alt206) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_87);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              					
                            }
                            int alt207=2;
                            int LA207_0 = input.LA(1);

                            if ( ((LA207_0>=Intersection && LA207_0<=Implements)||(LA207_0>=Promisify && LA207_0<=Abstract)||(LA207_0>=External && LA207_0<=Function)||(LA207_0>=Private && LA207_0<=Delete)||LA207_0==Public||LA207_0==Static||(LA207_0>=Target && LA207_0<=Await)||LA207_0==Class||(LA207_0>=False && LA207_0<=Super)||LA207_0==Union||(LA207_0>=Yield && LA207_0<=This)||(LA207_0>=From && LA207_0<=Void)||(LA207_0>=Get && LA207_0<=Set)||LA207_0==PlusSignPlusSign||LA207_0==HyphenMinusHyphenMinus||LA207_0==SolidusEqualsSign||LA207_0==As||LA207_0==Of||LA207_0==ExclamationMark||LA207_0==LeftParenthesis||LA207_0==PlusSign||LA207_0==HyphenMinus||LA207_0==Solidus||LA207_0==LessThanSign||(LA207_0>=CommercialAt && LA207_0<=LeftSquareBracket)||LA207_0==LeftCurlyBracket||LA207_0==Tilde||LA207_0==RULE_DOUBLE||(LA207_0>=RULE_HEX_INT && LA207_0<=RULE_LEGACY_OCTAL_INT)||LA207_0==RULE_SCIENTIFIC_INT||LA207_0==RULE_IDENTIFIER||LA207_0==RULE_STRING||(LA207_0>=RULE_TEMPLATE_HEAD && LA207_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA207_0==RULE_INT) ) {
                                alt207=1;
                            }
                            switch (alt207) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_76);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ForStatement_return retval = new InternalN4JSXParser.norm1_ForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_80); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              	
            }
            int alt227=2;
            alt227 = dfa227.predict(input);
            switch (alt227) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_81);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_76);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2());
                      						
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt226=3;
                    alt226 = dfa226.predict(input);
                    switch (alt226) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt218=2;
                            alt218 = dfa218.predict(input);
                            switch (alt218) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_82);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0());
                                      										
                                    }

                                    }


                                    }
                                    int alt210=2;
                                    int LA210_0 = input.LA(1);

                                    if ( (LA210_0==In) ) {
                                        alt210=1;
                                    }
                                    else if ( (LA210_0==Of) ) {
                                        alt210=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 210, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt210) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt211=2;
                                    alt211 = dfa211.predict(input);
                                    switch (alt211) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              											announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2());
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_84);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt217=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt217=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt217=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt217=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 217, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt217) {
                                        case 1 :
                                            {
                                            {
                                            loop212:
                                            do {
                                                int alt212=2;
                                                int LA212_0 = input.LA(1);

                                                if ( (LA212_0==Comma) ) {
                                                    alt212=1;
                                                }


                                                switch (alt212) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      											announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      										
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_85);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1());
                                            	      												
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop212;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              									
                                            }
                                            int alt213=2;
                                            int LA213_0 = input.LA(1);

                                            if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||LA213_0==Public||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||(LA213_0>=Get && LA213_0<=Set)||LA213_0==PlusSignPlusSign||LA213_0==HyphenMinusHyphenMinus||LA213_0==SolidusEqualsSign||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||LA213_0==PlusSign||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                                                alt213=1;
                                            }
                                            switch (alt213) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_87);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              									
                                            }
                                            int alt214=2;
                                            int LA214_0 = input.LA(1);

                                            if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Abstract)||(LA214_0>=External && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||LA214_0==Public||LA214_0==Static||(LA214_0>=Target && LA214_0<=Await)||LA214_0==Class||(LA214_0>=False && LA214_0<=Super)||LA214_0==Union||(LA214_0>=Yield && LA214_0<=This)||(LA214_0>=From && LA214_0<=Void)||(LA214_0>=Get && LA214_0<=Set)||LA214_0==PlusSignPlusSign||LA214_0==HyphenMinusHyphenMinus||LA214_0==SolidusEqualsSign||LA214_0==As||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||LA214_0==PlusSign||LA214_0==HyphenMinus||LA214_0==Solidus||LA214_0==LessThanSign||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_HEX_INT && LA214_0<=RULE_LEGACY_OCTAL_INT)||LA214_0==RULE_SCIENTIFIC_INT||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_STRING||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_INT) ) {
                                                alt214=1;
                                            }
                                            switch (alt214) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_76);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt215=2;
                                            int LA215_0 = input.LA(1);

                                            if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||LA215_0==Public||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||(LA215_0>=Get && LA215_0<=Set)||LA215_0==PlusSignPlusSign||LA215_0==HyphenMinusHyphenMinus||LA215_0==SolidusEqualsSign||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||LA215_0==PlusSign||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_HEX_INT && LA215_0<=RULE_LEGACY_OCTAL_INT)||LA215_0==RULE_SCIENTIFIC_INT||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_STRING||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_INT) ) {
                                                alt215=1;
                                            }
                                            switch (alt215) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_76);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt216=2;
                                            int LA216_0 = input.LA(1);

                                            if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||(LA216_0>=External && LA216_0<=Function)||(LA216_0>=Private && LA216_0<=Delete)||LA216_0==Public||LA216_0==Static||(LA216_0>=Target && LA216_0<=Await)||LA216_0==Class||(LA216_0>=False && LA216_0<=Super)||LA216_0==Union||(LA216_0>=Yield && LA216_0<=This)||(LA216_0>=From && LA216_0<=Void)||(LA216_0>=Get && LA216_0<=Set)||LA216_0==PlusSignPlusSign||LA216_0==HyphenMinusHyphenMinus||LA216_0==SolidusEqualsSign||LA216_0==As||LA216_0==Of||LA216_0==ExclamationMark||LA216_0==LeftParenthesis||LA216_0==PlusSign||LA216_0==HyphenMinus||LA216_0==Solidus||LA216_0==LessThanSign||(LA216_0>=CommercialAt && LA216_0<=LeftSquareBracket)||LA216_0==LeftCurlyBracket||LA216_0==Tilde||LA216_0==RULE_DOUBLE||(LA216_0>=RULE_HEX_INT && LA216_0<=RULE_LEGACY_OCTAL_INT)||LA216_0==RULE_SCIENTIFIC_INT||LA216_0==RULE_IDENTIFIER||LA216_0==RULE_STRING||(LA216_0>=RULE_TEMPLATE_HEAD && LA216_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA216_0==RULE_INT) ) {
                                                alt216=1;
                                            }
                                            switch (alt216) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_76);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_88);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0());
                              							
                            }

                            }


                            }
                            int alt223=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt223=1;
                                }
                                break;
                            case In:
                                {
                                alt223=2;
                                }
                                break;
                            case Of:
                                {
                                alt223=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 223, 0, input);

                                throw nvae;
                            }

                            switch (alt223) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      							
                                    }
                                    int alt219=2;
                                    int LA219_0 = input.LA(1);

                                    if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Abstract)||(LA219_0>=External && LA219_0<=Function)||(LA219_0>=Private && LA219_0<=Delete)||LA219_0==Public||LA219_0==Static||(LA219_0>=Target && LA219_0<=Await)||LA219_0==Class||(LA219_0>=False && LA219_0<=Super)||LA219_0==Union||(LA219_0>=Yield && LA219_0<=This)||(LA219_0>=From && LA219_0<=Void)||(LA219_0>=Get && LA219_0<=Set)||LA219_0==PlusSignPlusSign||LA219_0==HyphenMinusHyphenMinus||LA219_0==SolidusEqualsSign||LA219_0==As||LA219_0==Of||LA219_0==ExclamationMark||LA219_0==LeftParenthesis||LA219_0==PlusSign||LA219_0==HyphenMinus||LA219_0==Solidus||LA219_0==LessThanSign||(LA219_0>=CommercialAt && LA219_0<=LeftSquareBracket)||LA219_0==LeftCurlyBracket||LA219_0==Tilde||LA219_0==RULE_DOUBLE||(LA219_0>=RULE_HEX_INT && LA219_0<=RULE_LEGACY_OCTAL_INT)||LA219_0==RULE_SCIENTIFIC_INT||LA219_0==RULE_IDENTIFIER||LA219_0==RULE_STRING||(LA219_0>=RULE_TEMPLATE_HEAD && LA219_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA219_0==RULE_INT) ) {
                                        alt219=1;
                                    }
                                    switch (alt219) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_87);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      							
                                    }
                                    int alt220=2;
                                    int LA220_0 = input.LA(1);

                                    if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||(LA220_0>=External && LA220_0<=Function)||(LA220_0>=Private && LA220_0<=Delete)||LA220_0==Public||LA220_0==Static||(LA220_0>=Target && LA220_0<=Await)||LA220_0==Class||(LA220_0>=False && LA220_0<=Super)||LA220_0==Union||(LA220_0>=Yield && LA220_0<=This)||(LA220_0>=From && LA220_0<=Void)||(LA220_0>=Get && LA220_0<=Set)||LA220_0==PlusSignPlusSign||LA220_0==HyphenMinusHyphenMinus||LA220_0==SolidusEqualsSign||LA220_0==As||LA220_0==Of||LA220_0==ExclamationMark||LA220_0==LeftParenthesis||LA220_0==PlusSign||LA220_0==HyphenMinus||LA220_0==Solidus||LA220_0==LessThanSign||(LA220_0>=CommercialAt && LA220_0<=LeftSquareBracket)||LA220_0==LeftCurlyBracket||LA220_0==Tilde||LA220_0==RULE_DOUBLE||(LA220_0>=RULE_HEX_INT && LA220_0<=RULE_LEGACY_OCTAL_INT)||LA220_0==RULE_SCIENTIFIC_INT||LA220_0==RULE_IDENTIFIER||LA220_0==RULE_STRING||(LA220_0>=RULE_TEMPLATE_HEAD && LA220_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA220_0==RULE_INT) ) {
                                        alt220=1;
                                    }
                                    switch (alt220) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt221=2;
                                    int LA221_0 = input.LA(1);

                                    if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||(LA221_0>=External && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||LA221_0==Public||LA221_0==Static||(LA221_0>=Target && LA221_0<=Await)||LA221_0==Class||(LA221_0>=False && LA221_0<=Super)||LA221_0==Union||(LA221_0>=Yield && LA221_0<=This)||(LA221_0>=From && LA221_0<=Void)||(LA221_0>=Get && LA221_0<=Set)||LA221_0==PlusSignPlusSign||LA221_0==HyphenMinusHyphenMinus||LA221_0==SolidusEqualsSign||LA221_0==As||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||LA221_0==PlusSign||LA221_0==HyphenMinus||LA221_0==Solidus||LA221_0==LessThanSign||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_HEX_INT && LA221_0<=RULE_LEGACY_OCTAL_INT)||LA221_0==RULE_SCIENTIFIC_INT||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_STRING||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_INT) ) {
                                        alt221=1;
                                    }
                                    switch (alt221) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt222=2;
                                    int LA222_0 = input.LA(1);

                                    if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||(LA222_0>=External && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||LA222_0==Public||LA222_0==Static||(LA222_0>=Target && LA222_0<=Await)||LA222_0==Class||(LA222_0>=False && LA222_0<=Super)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||(LA222_0>=From && LA222_0<=Void)||(LA222_0>=Get && LA222_0<=Set)||LA222_0==PlusSignPlusSign||LA222_0==HyphenMinusHyphenMinus||LA222_0==SolidusEqualsSign||LA222_0==As||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||LA222_0==PlusSign||LA222_0==HyphenMinus||LA222_0==Solidus||LA222_0==LessThanSign||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_HEX_INT && LA222_0<=RULE_LEGACY_OCTAL_INT)||LA222_0==RULE_SCIENTIFIC_INT||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_STRING||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_INT) ) {
                                        alt222=1;
                                    }
                                    switch (alt222) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_76);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_86); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              					
                            }
                            int alt224=2;
                            int LA224_0 = input.LA(1);

                            if ( ((LA224_0>=Intersection && LA224_0<=Implements)||(LA224_0>=Promisify && LA224_0<=Abstract)||(LA224_0>=External && LA224_0<=Function)||(LA224_0>=Private && LA224_0<=Delete)||LA224_0==Public||LA224_0==Static||(LA224_0>=Target && LA224_0<=Await)||LA224_0==Class||(LA224_0>=False && LA224_0<=Super)||LA224_0==Union||(LA224_0>=Yield && LA224_0<=This)||(LA224_0>=From && LA224_0<=Void)||(LA224_0>=Get && LA224_0<=Set)||LA224_0==PlusSignPlusSign||LA224_0==HyphenMinusHyphenMinus||LA224_0==SolidusEqualsSign||LA224_0==As||LA224_0==Of||LA224_0==ExclamationMark||LA224_0==LeftParenthesis||LA224_0==PlusSign||LA224_0==HyphenMinus||LA224_0==Solidus||LA224_0==LessThanSign||(LA224_0>=CommercialAt && LA224_0<=LeftSquareBracket)||LA224_0==LeftCurlyBracket||LA224_0==Tilde||LA224_0==RULE_DOUBLE||(LA224_0>=RULE_HEX_INT && LA224_0<=RULE_LEGACY_OCTAL_INT)||LA224_0==RULE_SCIENTIFIC_INT||LA224_0==RULE_IDENTIFIER||LA224_0==RULE_STRING||(LA224_0>=RULE_TEMPLATE_HEAD && LA224_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA224_0==RULE_INT) ) {
                                alt224=1;
                            }
                            switch (alt224) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_87);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              					
                            }
                            int alt225=2;
                            int LA225_0 = input.LA(1);

                            if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||(LA225_0>=External && LA225_0<=Function)||(LA225_0>=Private && LA225_0<=Delete)||LA225_0==Public||LA225_0==Static||(LA225_0>=Target && LA225_0<=Await)||LA225_0==Class||(LA225_0>=False && LA225_0<=Super)||LA225_0==Union||(LA225_0>=Yield && LA225_0<=This)||(LA225_0>=From && LA225_0<=Void)||(LA225_0>=Get && LA225_0<=Set)||LA225_0==PlusSignPlusSign||LA225_0==HyphenMinusHyphenMinus||LA225_0==SolidusEqualsSign||LA225_0==As||LA225_0==Of||LA225_0==ExclamationMark||LA225_0==LeftParenthesis||LA225_0==PlusSign||LA225_0==HyphenMinus||LA225_0==Solidus||LA225_0==LessThanSign||(LA225_0>=CommercialAt && LA225_0<=LeftSquareBracket)||LA225_0==LeftCurlyBracket||LA225_0==Tilde||LA225_0==RULE_DOUBLE||(LA225_0>=RULE_HEX_INT && LA225_0<=RULE_LEGACY_OCTAL_INT)||LA225_0==RULE_SCIENTIFIC_INT||LA225_0==RULE_IDENTIFIER||LA225_0==RULE_STRING||(LA225_0>=RULE_TEMPLATE_HEAD && LA225_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA225_0==RULE_INT) ) {
                                alt225=1;
                            }
                            switch (alt225) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_76);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleLetIdentifierRef_return retval = new InternalN4JSXParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleLetAsIdentifier_return retval = new InternalN4JSXParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);

        Token LetKeyword=null;



        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSXParser.ruleContinueStatement_return retval = new InternalN4JSXParser.ruleContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              	
            }
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Abstract)||LA228_0==External||(LA228_0>=Private && LA228_0<=Project)||LA228_0==Public||LA228_0==Static||LA228_0==Target||(LA228_0>=Async && LA228_0<=Await)||LA228_0==Union||(LA228_0>=Yield && LA228_0<=This)||LA228_0==From||LA228_0==Type||(LA228_0>=Get && LA228_0<=Let)||(LA228_0>=Out && LA228_0<=Set)||LA228_0==As||LA228_0==Of||LA228_0==RULE_IDENTIFIER) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ContinueStatement_return retval = new InternalN4JSXParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              	
            }
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Abstract)||LA229_0==External||(LA229_0>=Private && LA229_0<=Project)||LA229_0==Public||LA229_0==Static||LA229_0==Target||(LA229_0>=Async && LA229_0<=Await)||LA229_0==Union||LA229_0==This||LA229_0==From||LA229_0==Type||(LA229_0>=Get && LA229_0<=Let)||(LA229_0>=Out && LA229_0<=Set)||LA229_0==As||LA229_0==Of||LA229_0==RULE_IDENTIFIER) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSXParser.ruleBreakStatement_return retval = new InternalN4JSXParser.ruleBreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              	
            }
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Abstract)||LA230_0==External||(LA230_0>=Private && LA230_0<=Project)||LA230_0==Public||LA230_0==Static||LA230_0==Target||(LA230_0>=Async && LA230_0<=Await)||LA230_0==Union||(LA230_0>=Yield && LA230_0<=This)||LA230_0==From||LA230_0==Type||(LA230_0>=Get && LA230_0<=Let)||(LA230_0>=Out && LA230_0<=Set)||LA230_0==As||LA230_0==Of||LA230_0==RULE_IDENTIFIER) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_BreakStatement_return retval = new InternalN4JSXParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              	
            }
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( ((LA231_0>=Intersection && LA231_0<=Implements)||(LA231_0>=Promisify && LA231_0<=Abstract)||LA231_0==External||(LA231_0>=Private && LA231_0<=Project)||LA231_0==Public||LA231_0==Static||LA231_0==Target||(LA231_0>=Async && LA231_0<=Await)||LA231_0==Union||LA231_0==This||LA231_0==From||LA231_0==Type||(LA231_0>=Get && LA231_0<=Let)||(LA231_0>=Out && LA231_0<=Set)||LA231_0==As||LA231_0==Of||LA231_0==RULE_IDENTIFIER) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSXParser.ruleReturnStatement_return retval = new InternalN4JSXParser.ruleReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              	
            }
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( ((LA232_0>=Intersection && LA232_0<=Implements)||(LA232_0>=Promisify && LA232_0<=Abstract)||(LA232_0>=External && LA232_0<=Function)||(LA232_0>=Private && LA232_0<=Delete)||LA232_0==Public||LA232_0==Static||(LA232_0>=Target && LA232_0<=Await)||LA232_0==Class||(LA232_0>=False && LA232_0<=Super)||LA232_0==Union||(LA232_0>=Yield && LA232_0<=This)||(LA232_0>=From && LA232_0<=Void)||(LA232_0>=Get && LA232_0<=Set)||LA232_0==PlusSignPlusSign||LA232_0==HyphenMinusHyphenMinus||LA232_0==SolidusEqualsSign||LA232_0==As||LA232_0==Of||LA232_0==ExclamationMark||LA232_0==LeftParenthesis||LA232_0==PlusSign||LA232_0==HyphenMinus||LA232_0==Solidus||LA232_0==LessThanSign||(LA232_0>=CommercialAt && LA232_0<=LeftSquareBracket)||LA232_0==LeftCurlyBracket||LA232_0==Tilde||LA232_0==RULE_DOUBLE||(LA232_0>=RULE_HEX_INT && LA232_0<=RULE_LEGACY_OCTAL_INT)||LA232_0==RULE_SCIENTIFIC_INT||LA232_0==RULE_IDENTIFIER||LA232_0==RULE_STRING||(LA232_0>=RULE_TEMPLATE_HEAD && LA232_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA232_0==RULE_INT) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ReturnStatement_return retval = new InternalN4JSXParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              	
            }
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( ((LA233_0>=Intersection && LA233_0<=Implements)||(LA233_0>=Promisify && LA233_0<=Abstract)||(LA233_0>=External && LA233_0<=Function)||(LA233_0>=Private && LA233_0<=Delete)||LA233_0==Public||LA233_0==Static||(LA233_0>=Target && LA233_0<=Await)||LA233_0==Class||(LA233_0>=False && LA233_0<=Super)||LA233_0==Union||(LA233_0>=Yield && LA233_0<=This)||(LA233_0>=From && LA233_0<=Void)||(LA233_0>=Get && LA233_0<=Set)||LA233_0==PlusSignPlusSign||LA233_0==HyphenMinusHyphenMinus||LA233_0==SolidusEqualsSign||LA233_0==As||LA233_0==Of||LA233_0==ExclamationMark||LA233_0==LeftParenthesis||LA233_0==PlusSign||LA233_0==HyphenMinus||LA233_0==Solidus||LA233_0==LessThanSign||(LA233_0>=CommercialAt && LA233_0<=LeftSquareBracket)||LA233_0==LeftCurlyBracket||LA233_0==Tilde||LA233_0==RULE_DOUBLE||(LA233_0>=RULE_HEX_INT && LA233_0<=RULE_LEGACY_OCTAL_INT)||LA233_0==RULE_SCIENTIFIC_INT||LA233_0==RULE_IDENTIFIER||LA233_0==RULE_STRING||(LA233_0>=RULE_TEMPLATE_HEAD && LA233_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA233_0==RULE_INT) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWithStatement_return retval = new InternalN4JSXParser.ruleWithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WithStatement_return retval = new InternalN4JSXParser.norm1_WithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSXParser.ruleSwitchStatement_return retval = new InternalN4JSXParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;




        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              	
            }
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==Case) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_91);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==Default) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                      				
                    }

                    }


                    }
                    loop235:
                    do {
                        int alt235=2;
                        int LA235_0 = input.LA(1);

                        if ( (LA235_0==Case) ) {
                            alt235=1;
                        }


                        switch (alt235) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_92);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	      				
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop235;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_SwitchStatement_return retval = new InternalN4JSXParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;




        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              	
            }
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==Case) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_91);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==Default) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                      				
                    }

                    }


                    }
                    loop238:
                    do {
                        int alt238=2;
                        int LA238_0 = input.LA(1);

                        if ( (LA238_0==Case) ) {
                            alt238=1;
                        }


                        switch (alt238) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_92);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	      				
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop238;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSXParser.ruleCaseClause_return retval = new InternalN4JSXParser.ruleCaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_93);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              	
            }
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( ((LA240_0>=Intersection && LA240_0<=Implements)||(LA240_0>=Promisify && LA240_0<=Function)||(LA240_0>=Private && LA240_0<=Delete)||(LA240_0>=Public && LA240_0<=Break)||(LA240_0>=Class && LA240_0<=This)||(LA240_0>=From && LA240_0<=With)||(LA240_0>=For && LA240_0<=Var)||LA240_0==PlusSignPlusSign||LA240_0==HyphenMinusHyphenMinus||LA240_0==SolidusEqualsSign||(LA240_0>=As && LA240_0<=If)||LA240_0==Of||LA240_0==ExclamationMark||LA240_0==LeftParenthesis||LA240_0==PlusSign||LA240_0==HyphenMinus||LA240_0==Solidus||(LA240_0>=Semicolon && LA240_0<=LessThanSign)||(LA240_0>=CommercialAt && LA240_0<=LeftSquareBracket)||LA240_0==LeftCurlyBracket||LA240_0==Tilde||LA240_0==RULE_DOUBLE||(LA240_0>=RULE_HEX_INT && LA240_0<=RULE_LEGACY_OCTAL_INT)||LA240_0==RULE_SCIENTIFIC_INT||LA240_0==RULE_IDENTIFIER||LA240_0==RULE_STRING||(LA240_0>=RULE_TEMPLATE_HEAD && LA240_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA240_0==RULE_INT) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSXParser.norm1_CaseClause_return retval = new InternalN4JSXParser.norm1_CaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_93);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              	
            }
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( ((LA241_0>=Intersection && LA241_0<=Implements)||(LA241_0>=Promisify && LA241_0<=Function)||(LA241_0>=Private && LA241_0<=Delete)||(LA241_0>=Public && LA241_0<=Break)||(LA241_0>=Class && LA241_0<=This)||(LA241_0>=From && LA241_0<=With)||(LA241_0>=For && LA241_0<=Var)||LA241_0==PlusSignPlusSign||LA241_0==HyphenMinusHyphenMinus||LA241_0==SolidusEqualsSign||(LA241_0>=As && LA241_0<=If)||LA241_0==Of||LA241_0==ExclamationMark||LA241_0==LeftParenthesis||LA241_0==PlusSign||LA241_0==HyphenMinus||LA241_0==Solidus||(LA241_0>=Semicolon && LA241_0<=LessThanSign)||(LA241_0>=CommercialAt && LA241_0<=LeftSquareBracket)||LA241_0==LeftCurlyBracket||LA241_0==Tilde||LA241_0==RULE_DOUBLE||(LA241_0>=RULE_HEX_INT && LA241_0<=RULE_LEGACY_OCTAL_INT)||LA241_0==RULE_SCIENTIFIC_INT||LA241_0==RULE_IDENTIFIER||LA241_0==RULE_STRING||(LA241_0>=RULE_TEMPLATE_HEAD && LA241_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA241_0==RULE_INT) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultClause_return retval = new InternalN4JSXParser.ruleDefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              	
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              	
            }
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( ((LA242_0>=Intersection && LA242_0<=Implements)||(LA242_0>=Promisify && LA242_0<=Function)||(LA242_0>=Private && LA242_0<=Delete)||(LA242_0>=Public && LA242_0<=Break)||(LA242_0>=Class && LA242_0<=This)||(LA242_0>=From && LA242_0<=With)||(LA242_0>=For && LA242_0<=Var)||LA242_0==PlusSignPlusSign||LA242_0==HyphenMinusHyphenMinus||LA242_0==SolidusEqualsSign||(LA242_0>=As && LA242_0<=If)||LA242_0==Of||LA242_0==ExclamationMark||LA242_0==LeftParenthesis||LA242_0==PlusSign||LA242_0==HyphenMinus||LA242_0==Solidus||(LA242_0>=Semicolon && LA242_0<=LessThanSign)||(LA242_0>=CommercialAt && LA242_0<=LeftSquareBracket)||LA242_0==LeftCurlyBracket||LA242_0==Tilde||LA242_0==RULE_DOUBLE||(LA242_0>=RULE_HEX_INT && LA242_0<=RULE_LEGACY_OCTAL_INT)||LA242_0==RULE_SCIENTIFIC_INT||LA242_0==RULE_IDENTIFIER||LA242_0==RULE_STRING||(LA242_0>=RULE_TEMPLATE_HEAD && LA242_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA242_0==RULE_INT) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSXParser.norm1_DefaultClause_return retval = new InternalN4JSXParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              	
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              	
            }
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( ((LA243_0>=Intersection && LA243_0<=Implements)||(LA243_0>=Promisify && LA243_0<=Function)||(LA243_0>=Private && LA243_0<=Delete)||(LA243_0>=Public && LA243_0<=Break)||(LA243_0>=Class && LA243_0<=This)||(LA243_0>=From && LA243_0<=With)||(LA243_0>=For && LA243_0<=Var)||LA243_0==PlusSignPlusSign||LA243_0==HyphenMinusHyphenMinus||LA243_0==SolidusEqualsSign||(LA243_0>=As && LA243_0<=If)||LA243_0==Of||LA243_0==ExclamationMark||LA243_0==LeftParenthesis||LA243_0==PlusSign||LA243_0==HyphenMinus||LA243_0==Solidus||(LA243_0>=Semicolon && LA243_0<=LessThanSign)||(LA243_0>=CommercialAt && LA243_0<=LeftSquareBracket)||LA243_0==LeftCurlyBracket||LA243_0==Tilde||LA243_0==RULE_DOUBLE||(LA243_0>=RULE_HEX_INT && LA243_0<=RULE_LEGACY_OCTAL_INT)||LA243_0==RULE_SCIENTIFIC_INT||LA243_0==RULE_IDENTIFIER||LA243_0==RULE_STRING||(LA243_0>=RULE_TEMPLATE_HEAD && LA243_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA243_0==RULE_INT) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSXParser.ruleLabelledStatement_return retval = new InternalN4JSXParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_93);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
              					
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_LabelledStatement_return retval = new InternalN4JSXParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_93);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
              					
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSXParser.ruleThrowStatement_return retval = new InternalN4JSXParser.ruleThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;




        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ThrowStatement_return retval = new InternalN4JSXParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;




        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSXParser.ruleTryStatement_return retval = new InternalN4JSXParser.ruleTryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;




        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_94);
            BlockBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
              			
            }

            }


            }
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==Catch) ) {
                alt245=1;
            }
            else if ( (LA245_0==Finally) ) {
                alt245=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }
            switch (alt245) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                      					
                    }

                    }


                    }
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==Finally) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_TryStatement_return retval = new InternalN4JSXParser.norm1_TryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;




        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_94);
            BlockBlockParserRuleCall_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
              			
            }

            }


            }
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==Catch) ) {
                alt247=1;
            }
            else if ( (LA247_0==Finally) ) {
                alt247=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }
            switch (alt247) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                      					
                    }

                    }


                    }
                    int alt246=2;
                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==Finally) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSXParser.ruleCatchBlock_return retval = new InternalN4JSXParser.ruleCatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchBlock_return retval = new InternalN4JSXParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSXParser.ruleCatchVariable_return retval = new InternalN4JSXParser.ruleCatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;




        try {
            {
            int alt249=3;
            alt249 = dfa249.predict(input);
            switch (alt249) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                      					
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt248=2;
                    alt248 = dfa248.predict(input);
                    switch (alt248) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchVariable_return retval = new InternalN4JSXParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;




        try {
            {
            int alt251=3;
            alt251 = dfa251.predict(input);
            switch (alt251) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                      					
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt250=2;
                    alt250 = dfa250.predict(input);
                    switch (alt250) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSXParser.ruleFinallyBlock_return retval = new InternalN4JSXParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_FinallyBlock_return retval = new InternalN4JSXParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDebuggerStatement_return retval = new InternalN4JSXParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);

        Token DebuggerKeyword_1=null;
        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;




        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_32); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
              	
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParenExpression_return retval = new InternalN4JSXParser.ruleParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParenExpression_return retval = new InternalN4JSXParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierRef_return retval = new InternalN4JSXParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSXParser.norm1_IdentifierRef_return retval = new InternalN4JSXParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleSuperLiteral_return retval = new InternalN4JSXParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);

        Token SuperKeyword_1=null;



        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleThisLiteral_return retval = new InternalN4JSXParser.ruleThisLiteral_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;



        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleArrayLiteral_return retval = new InternalN4JSXParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_97); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==Comma) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_97);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( ((LA257_0>=Intersection && LA257_0<=Implements)||(LA257_0>=Promisify && LA257_0<=Abstract)||(LA257_0>=External && LA257_0<=Function)||(LA257_0>=Private && LA257_0<=Delete)||LA257_0==Public||LA257_0==Static||(LA257_0>=Target && LA257_0<=Await)||LA257_0==Class||(LA257_0>=False && LA257_0<=Super)||LA257_0==Union||(LA257_0>=Yield && LA257_0<=This)||(LA257_0>=From && LA257_0<=Void)||LA257_0==FullStopFullStopFullStop||(LA257_0>=Get && LA257_0<=Set)||LA257_0==PlusSignPlusSign||LA257_0==HyphenMinusHyphenMinus||LA257_0==SolidusEqualsSign||LA257_0==As||LA257_0==Of||LA257_0==ExclamationMark||LA257_0==LeftParenthesis||LA257_0==PlusSign||LA257_0==HyphenMinus||LA257_0==Solidus||LA257_0==LessThanSign||(LA257_0>=CommercialAt && LA257_0<=LeftSquareBracket)||LA257_0==LeftCurlyBracket||LA257_0==Tilde||LA257_0==RULE_DOUBLE||(LA257_0>=RULE_HEX_INT && LA257_0<=RULE_LEGACY_OCTAL_INT)||LA257_0==RULE_SCIENTIFIC_INT||LA257_0==RULE_IDENTIFIER||LA257_0==RULE_STRING||(LA257_0>=RULE_TEMPLATE_HEAD && LA257_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA257_0==RULE_INT) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_98);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop254:
                    do {
                        int alt254=2;
                        alt254 = dfa254.predict(input);
                        switch (alt254) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop253:
                    	    do {
                    	        int alt253=2;
                    	        int LA253_0 = input.LA(1);

                    	        if ( (LA253_0==Comma) ) {
                    	            alt253=1;
                    	        }


                    	        switch (alt253) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_99);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop253;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_98);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop254;
                        }
                    } while (true);
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==Comma) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              					
                            }

                            }


                            }
                            loop255:
                            do {
                                int alt255=2;
                                int LA255_0 = input.LA(1);

                                if ( (LA255_0==Comma) ) {
                                    alt255=1;
                                }


                                switch (alt255) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_98);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop255;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayLiteral_return retval = new InternalN4JSXParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_97); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==Comma) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_97);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop258;
                }
            } while (true);
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( ((LA263_0>=Intersection && LA263_0<=Implements)||(LA263_0>=Promisify && LA263_0<=Abstract)||(LA263_0>=External && LA263_0<=Function)||(LA263_0>=Private && LA263_0<=Delete)||LA263_0==Public||LA263_0==Static||(LA263_0>=Target && LA263_0<=Await)||LA263_0==Class||(LA263_0>=False && LA263_0<=Super)||LA263_0==Union||(LA263_0>=Yield && LA263_0<=This)||(LA263_0>=From && LA263_0<=Void)||LA263_0==FullStopFullStopFullStop||(LA263_0>=Get && LA263_0<=Set)||LA263_0==PlusSignPlusSign||LA263_0==HyphenMinusHyphenMinus||LA263_0==SolidusEqualsSign||LA263_0==As||LA263_0==Of||LA263_0==ExclamationMark||LA263_0==LeftParenthesis||LA263_0==PlusSign||LA263_0==HyphenMinus||LA263_0==Solidus||LA263_0==LessThanSign||(LA263_0>=CommercialAt && LA263_0<=LeftSquareBracket)||LA263_0==LeftCurlyBracket||LA263_0==Tilde||LA263_0==RULE_DOUBLE||(LA263_0>=RULE_HEX_INT && LA263_0<=RULE_LEGACY_OCTAL_INT)||LA263_0==RULE_SCIENTIFIC_INT||LA263_0==RULE_IDENTIFIER||LA263_0==RULE_STRING||(LA263_0>=RULE_TEMPLATE_HEAD && LA263_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA263_0==RULE_INT) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_98);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop260:
                    do {
                        int alt260=2;
                        alt260 = dfa260.predict(input);
                        switch (alt260) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop259:
                    	    do {
                    	        int alt259=2;
                    	        int LA259_0 = input.LA(1);

                    	        if ( (LA259_0==Comma) ) {
                    	            alt259=1;
                    	        }


                    	        switch (alt259) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_99);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop259;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_98);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop260;
                        }
                    } while (true);
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==Comma) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              					
                            }

                            }


                            }
                            loop261:
                            do {
                                int alt261=2;
                                int LA261_0 = input.LA(1);

                                if ( (LA261_0==Comma) ) {
                                    alt261=1;
                                }


                                switch (alt261) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_98);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop261;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSXParser.ruleArrayPadding_return retval = new InternalN4JSXParser.ruleArrayPadding_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;



        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSXParser.ruleArrayElement_return retval = new InternalN4JSXParser.ruleArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==FullStopFullStopFullStop) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayElement_return retval = new InternalN4JSXParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==FullStopFullStopFullStop) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleObjectLiteral_return retval = new InternalN4JSXParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( ((LA268_0>=Intersection && LA268_0<=With)||(LA268_0>=For && LA268_0<=Var)||(LA268_0>=As && LA268_0<=Of)||LA268_0==LeftParenthesis||LA268_0==Asterisk||LA268_0==LessThanSign||(LA268_0>=CommercialAt && LA268_0<=LeftSquareBracket)||LA268_0==LeftCurlyBracket||LA268_0==Tilde||LA268_0==RULE_DOUBLE||LA268_0==RULE_HEX_INT||LA268_0==RULE_OCTAL_INT||LA268_0==RULE_SCIENTIFIC_INT||LA268_0==RULE_IDENTIFIER||LA268_0==RULE_STRING||LA268_0==RULE_INT) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop266:
                    do {
                        int alt266=2;
                        int LA266_0 = input.LA(1);

                        if ( (LA266_0==Comma) ) {
                            int LA266_1 = input.LA(2);

                            if ( ((LA266_1>=Intersection && LA266_1<=With)||(LA266_1>=For && LA266_1<=Var)||(LA266_1>=As && LA266_1<=Of)||LA266_1==LeftParenthesis||LA266_1==Asterisk||LA266_1==LessThanSign||(LA266_1>=CommercialAt && LA266_1<=LeftSquareBracket)||LA266_1==LeftCurlyBracket||LA266_1==Tilde||LA266_1==RULE_DOUBLE||LA266_1==RULE_HEX_INT||LA266_1==RULE_OCTAL_INT||LA266_1==RULE_SCIENTIFIC_INT||LA266_1==RULE_IDENTIFIER||LA266_1==RULE_STRING||LA266_1==RULE_INT) ) {
                                alt266=1;
                            }


                        }


                        switch (alt266) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop266;
                        }
                    } while (true);
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==Comma) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              			
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectLiteral_return retval = new InternalN4JSXParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( ((LA271_0>=Intersection && LA271_0<=With)||(LA271_0>=For && LA271_0<=Var)||(LA271_0>=As && LA271_0<=Of)||LA271_0==LeftParenthesis||LA271_0==Asterisk||LA271_0==LessThanSign||(LA271_0>=CommercialAt && LA271_0<=LeftSquareBracket)||LA271_0==LeftCurlyBracket||LA271_0==Tilde||LA271_0==RULE_DOUBLE||LA271_0==RULE_HEX_INT||LA271_0==RULE_OCTAL_INT||LA271_0==RULE_SCIENTIFIC_INT||LA271_0==RULE_IDENTIFIER||LA271_0==RULE_STRING||LA271_0==RULE_INT) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop269:
                    do {
                        int alt269=2;
                        int LA269_0 = input.LA(1);

                        if ( (LA269_0==Comma) ) {
                            int LA269_1 = input.LA(2);

                            if ( ((LA269_1>=Intersection && LA269_1<=With)||(LA269_1>=For && LA269_1<=Var)||(LA269_1>=As && LA269_1<=Of)||LA269_1==LeftParenthesis||LA269_1==Asterisk||LA269_1==LessThanSign||(LA269_1>=CommercialAt && LA269_1<=LeftSquareBracket)||LA269_1==LeftCurlyBracket||LA269_1==Tilde||LA269_1==RULE_DOUBLE||LA269_1==RULE_HEX_INT||LA269_1==RULE_OCTAL_INT||LA269_1==RULE_SCIENTIFIC_INT||LA269_1==RULE_IDENTIFIER||LA269_1==RULE_STRING||LA269_1==RULE_INT) ) {
                                alt269=1;
                            }


                        }


                        switch (alt269) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop269;
                        }
                    } while (true);
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==Comma) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              			
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignment_return retval = new InternalN4JSXParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;




        try {
            {
            int alt272=6;
            alt272 = dfa272.predict(input);
            switch (alt272) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyAssignment_return retval = new InternalN4JSXParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;




        try {
            {
            int alt273=6;
            alt273 = dfa273.predict(input);
            switch (alt273) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_2_1_0=null;
        Token LeftParenthesisKeyword_1_2_2=null;
        Token RightParenthesisKeyword_1_2_4=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_5_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_102);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt282=5;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt274=2;
                    alt274 = dfa274.predict(input);
                    switch (alt274) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                              							
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                      							
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_104);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                      							
                    }

                    }


                    }


                    }


                    }
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==QuestionMark) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_2_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(DeclaredOptionalQuestionMarkKeyword_1_2_1_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                              					
                            }

                            }


                            }
                            break;

                    }

                    LeftParenthesisKeyword_1_2_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_2_2, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_76);
                    FparFormalParameterParserRuleCall_1_2_3_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.start):null), (FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_3());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_2_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_5_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.start):null), (BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_5());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==LessThanSign) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt277=2;
                    alt277 = dfa277.predict(input);
                    switch (alt277) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_105);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2());
                              							
                            }

                            }


                            }
                            break;

                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==Asterisk) ) {
                        alt278=1;
                    }
                    else if ( ((LA278_0>=Intersection && LA278_0<=With)||(LA278_0>=For && LA278_0<=Var)||(LA278_0>=As && LA278_0<=Of)||LA278_0==LeftSquareBracket||LA278_0==RULE_DOUBLE||LA278_0==RULE_HEX_INT||LA278_0==RULE_OCTAL_INT||LA278_0==RULE_SCIENTIFIC_INT||LA278_0==RULE_IDENTIFIER||LA278_0==RULE_STRING||LA278_0==RULE_INT) ) {
                        alt278=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 278, 0, input);

                        throw nvae;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==Semicolon) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt280=2;
                    alt280 = dfa280.predict(input);
                    switch (alt280) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2());
                      					
                    }

                    }


                    }
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==EqualsSign) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_2_1_0=null;
        Token LeftParenthesisKeyword_1_2_2=null;
        Token RightParenthesisKeyword_1_2_4=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_5_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_102);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt291=5;
            alt291 = dfa291.predict(input);
            switch (alt291) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt283=2;
                    alt283 = dfa283.predict(input);
                    switch (alt283) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                              							
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                      							
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_104);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                      							
                    }

                    }


                    }


                    }


                    }
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==QuestionMark) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_2_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(DeclaredOptionalQuestionMarkKeyword_1_2_1_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                              					
                            }

                            }


                            }
                            break;

                    }

                    LeftParenthesisKeyword_1_2_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_2_2, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_76);
                    FparFormalParameterParserRuleCall_1_2_3_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.start):null), (FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_3());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_2_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_5_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.start):null), (BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_5());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==LessThanSign) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt286=2;
                    alt286 = dfa286.predict(input);
                    switch (alt286) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_105);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2());
                              							
                            }

                            }


                            }
                            break;

                    }
                    int alt287=2;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==Asterisk) ) {
                        alt287=1;
                    }
                    else if ( ((LA287_0>=Intersection && LA287_0<=With)||(LA287_0>=For && LA287_0<=Var)||(LA287_0>=As && LA287_0<=Of)||LA287_0==LeftSquareBracket||LA287_0==RULE_DOUBLE||LA287_0==RULE_HEX_INT||LA287_0==RULE_OCTAL_INT||LA287_0==RULE_SCIENTIFIC_INT||LA287_0==RULE_IDENTIFIER||LA287_0==RULE_STRING||LA287_0==RULE_INT) ) {
                        alt287=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 287, 0, input);

                        throw nvae;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==Semicolon) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt289=2;
                    alt289 = dfa289.predict(input);
                    switch (alt289) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2());
                      					
                    }

                    }


                    }
                    int alt290=2;
                    int LA290_0 = input.LA(1);

                    if ( (LA290_0==EqualsSign) ) {
                        alt290=1;
                    }
                    switch (alt290) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSXParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;




        try {
            {
            {
            {
            {
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==LessThanSign) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    pushFollow(FOLLOW_105);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt293=2;
            alt293 = dfa293.predict(input);
            switch (alt293) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_105);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==Asterisk) ) {
                alt294=1;
            }
            else if ( ((LA294_0>=Intersection && LA294_0<=With)||(LA294_0>=For && LA294_0<=Var)||(LA294_0>=As && LA294_0<=Of)||LA294_0==LeftSquareBracket||LA294_0==RULE_DOUBLE||LA294_0==RULE_HEX_INT||LA294_0==RULE_OCTAL_INT||LA294_0==RULE_SCIENTIFIC_INT||LA294_0==RULE_IDENTIFIER||LA294_0==RULE_STRING||LA294_0==RULE_INT) ) {
                alt294=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);

                throw nvae;
            }
            switch (alt294) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==Semicolon) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;




        try {
            {
            {
            {
            {
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==LessThanSign) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    pushFollow(FOLLOW_105);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt297=2;
            alt297 = dfa297.predict(input);
            switch (alt297) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_105);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==Asterisk) ) {
                alt298=1;
            }
            else if ( ((LA298_0>=Intersection && LA298_0<=With)||(LA298_0>=For && LA298_0<=Var)||(LA298_0>=As && LA298_0<=Of)||LA298_0==LeftSquareBracket||LA298_0==RULE_DOUBLE||LA298_0==RULE_HEX_INT||LA298_0==RULE_OCTAL_INT||LA298_0==RULE_SCIENTIFIC_INT||LA298_0==RULE_IDENTIFIER||LA298_0==RULE_STRING||LA298_0==RULE_INT) ) {
                alt298=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 298, 0, input);

                throw nvae;
            }
            switch (alt298) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==Semicolon) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePair_return retval = new InternalN4JSXParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token DeclaredOptionalQuestionMarkKeyword_0_0_3_0=null;
        Token ColonKeyword_0_0_4=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            int alt300=2;
            alt300 = dfa300.predict(input);
            switch (alt300) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                      					
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==QuestionMark) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_0_0_3_0=(Token)match(input,QuestionMark,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(DeclaredOptionalQuestionMarkKeyword_0_0_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                      					
                    }

                    }


                    }
                    break;

            }

            ColonKeyword_0_0_4=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token DeclaredOptionalQuestionMarkKeyword_0_0_3_0=null;
        Token ColonKeyword_0_0_4=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            int alt302=2;
            alt302 = dfa302.predict(input);
            switch (alt302) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                      					
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_107);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==QuestionMark) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_0_0_3_0=(Token)match(input,QuestionMark,FOLLOW_93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(DeclaredOptionalQuestionMarkKeyword_0_0_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                      					
                    }

                    }


                    }
                    break;

            }

            ColonKeyword_0_0_4=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;




        try {
            {
            {
            int alt304=2;
            alt304 = dfa304.predict(input);
            switch (alt304) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_16);
            IdentifierRefIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1());
              			
            }

            }


            }
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==EqualsSign) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;




        try {
            {
            {
            int alt306=2;
            alt306 = dfa306.predict(input);
            switch (alt306) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_16);
            IdentifierRefIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1());
              			
            }

            }


            }
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==EqualsSign) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSXParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertySetterDeclaration_return retval = new InternalN4JSXParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_104);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==QuestionMark) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            FparFormalParameterParserRuleCall_3_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_104);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==QuestionMark) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            FparFormalParameterParserRuleCall_3_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedCallExpression_return retval = new InternalN4JSXParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=ruleArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSXParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=norm1_ArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLeftHandSideExpression_return retval = new InternalN4JSXParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_108);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==LeftParenthesis) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    {
                    pushFollow(FOLLOW_109);
                    ArgumentsWithParenthesesParserRuleCall_1_1=ruleArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop310:
                    do {
                        int alt310=5;
                        int LA310_0 = input.LA(1);

                        if ( (LA310_0==LeftParenthesis) ) {
                            alt310=1;
                        }
                        else if ( (LA310_0==LeftSquareBracket) ) {
                            alt310=2;
                        }
                        else if ( (LA310_0==FullStop) ) {
                            alt310=3;
                        }
                        else if ( (LA310_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred163_InternalN4JSXParser())) {
                            alt310=4;
                        }
                        else if ( (LA310_0==RULE_TEMPLATE_HEAD) && (synpred163_InternalN4JSXParser())) {
                            alt310=4;
                        }


                        switch (alt310) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=ruleArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1());
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop310;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSXParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_108);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==LeftParenthesis) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    pushFollow(FOLLOW_109);
                    ArgumentsWithParenthesesParserRuleCall_1_1=norm1_ArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop312:
                    do {
                        int alt312=5;
                        int LA312_0 = input.LA(1);

                        if ( (LA312_0==LeftParenthesis) ) {
                            alt312=1;
                        }
                        else if ( (LA312_0==LeftSquareBracket) ) {
                            alt312=2;
                        }
                        else if ( (LA312_0==FullStop) ) {
                            alt312=3;
                        }
                        else if ( (LA312_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred164_InternalN4JSXParser())) {
                            alt312=4;
                        }
                        else if ( (LA312_0==RULE_TEMPLATE_HEAD) && (synpred164_InternalN4JSXParser())) {
                            alt312=4;
                        }


                        switch (alt312) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=norm1_ArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1());
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop312;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSXParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( ((LA314_0>=Intersection && LA314_0<=Implements)||(LA314_0>=Promisify && LA314_0<=Abstract)||(LA314_0>=External && LA314_0<=Function)||(LA314_0>=Private && LA314_0<=Delete)||LA314_0==Public||LA314_0==Static||(LA314_0>=Target && LA314_0<=Await)||LA314_0==Class||(LA314_0>=False && LA314_0<=Super)||LA314_0==Union||(LA314_0>=Yield && LA314_0<=This)||(LA314_0>=From && LA314_0<=Void)||LA314_0==FullStopFullStopFullStop||(LA314_0>=Get && LA314_0<=Set)||LA314_0==PlusSignPlusSign||LA314_0==HyphenMinusHyphenMinus||LA314_0==SolidusEqualsSign||LA314_0==As||LA314_0==Of||LA314_0==ExclamationMark||LA314_0==LeftParenthesis||LA314_0==PlusSign||LA314_0==HyphenMinus||LA314_0==Solidus||LA314_0==LessThanSign||(LA314_0>=CommercialAt && LA314_0<=LeftSquareBracket)||LA314_0==LeftCurlyBracket||LA314_0==Tilde||LA314_0==RULE_DOUBLE||(LA314_0>=RULE_HEX_INT && LA314_0<=RULE_LEGACY_OCTAL_INT)||LA314_0==RULE_SCIENTIFIC_INT||LA314_0==RULE_IDENTIFIER||LA314_0==RULE_STRING||(LA314_0>=RULE_TEMPLATE_HEAD && LA314_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA314_0==RULE_INT) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    {
                    pushFollow(FOLLOW_76);
                    ArgumentsParserRuleCall_1=ruleArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSXParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( ((LA315_0>=Intersection && LA315_0<=Implements)||(LA315_0>=Promisify && LA315_0<=Abstract)||(LA315_0>=External && LA315_0<=Function)||(LA315_0>=Private && LA315_0<=Delete)||LA315_0==Public||LA315_0==Static||(LA315_0>=Target && LA315_0<=Await)||LA315_0==Class||(LA315_0>=False && LA315_0<=Super)||LA315_0==Union||(LA315_0>=Yield && LA315_0<=This)||(LA315_0>=From && LA315_0<=Void)||LA315_0==FullStopFullStopFullStop||(LA315_0>=Get && LA315_0<=Set)||LA315_0==PlusSignPlusSign||LA315_0==HyphenMinusHyphenMinus||LA315_0==SolidusEqualsSign||LA315_0==As||LA315_0==Of||LA315_0==ExclamationMark||LA315_0==LeftParenthesis||LA315_0==PlusSign||LA315_0==HyphenMinus||LA315_0==Solidus||LA315_0==LessThanSign||(LA315_0>=CommercialAt && LA315_0<=LeftSquareBracket)||LA315_0==LeftCurlyBracket||LA315_0==Tilde||LA315_0==RULE_DOUBLE||(LA315_0>=RULE_HEX_INT && LA315_0<=RULE_LEGACY_OCTAL_INT)||LA315_0==RULE_SCIENTIFIC_INT||LA315_0==RULE_IDENTIFIER||LA315_0==RULE_STRING||(LA315_0>=RULE_TEMPLATE_HEAD && LA315_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA315_0==RULE_INT) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    {
                    pushFollow(FOLLOW_76);
                    ArgumentsParserRuleCall_1=norm1_Arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSXParser.ruleArguments_return retval = new InternalN4JSXParser.ruleArguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
              			
            }

            }


            }
            loop316:
            do {
                int alt316=2;
                int LA316_0 = input.LA(1);

                if ( (LA316_0==Comma) ) {
                    alt316=1;
                }


                switch (alt316) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_111); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop316;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSXParser.norm1_Arguments_return retval = new InternalN4JSXParser.norm1_Arguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
              			
            }

            }


            }
            loop317:
            do {
                int alt317=2;
                int LA317_0 = input.LA(1);

                if ( (LA317_0==Comma) ) {
                    alt317=1;
                }


                switch (alt317) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_111); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop317;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSXParser.ruleArgument_return retval = new InternalN4JSXParser.ruleArgument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==FullStopFullStopFullStop) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSXParser.norm1_Argument_return retval = new InternalN4JSXParser.norm1_Argument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==FullStopFullStopFullStop) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArguments_return retval = new InternalN4JSXParser.ruleTypeArguments_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;




        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1());
              			
            }

            }


            }
            loop320:
            do {
                int alt320=2;
                int LA320_0 = input.LA(1);

                if ( (LA320_0==Comma) ) {
                    alt320=1;
                }


                switch (alt320) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop320;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMemberExpression_return retval = new InternalN4JSXParser.ruleMemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;




        try {
            {
            int alt326=3;
            alt326 = dfa326.predict(input);
            switch (alt326) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      				
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      				
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_115);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                      				
                    }

                    }


                    }
                    int alt321=2;
                    int LA321_0 = input.LA(1);

                    if ( (LA321_0==LessThanSign) ) {
                        int LA321_1 = input.LA(2);

                        if ( (synpred167_InternalN4JSXParser()) ) {
                            alt321=1;
                        }
                    }
                    switch (alt321) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_108);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt324=2;
                    int LA324_0 = input.LA(1);

                    if ( (LA324_0==LeftParenthesis) ) {
                        int LA324_1 = input.LA(2);

                        if ( (synpred168_InternalN4JSXParser()) ) {
                            alt324=1;
                        }
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_110); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              					
                            }

                            }


                            }
                            int alt322=2;
                            int LA322_0 = input.LA(1);

                            if ( ((LA322_0>=Intersection && LA322_0<=Implements)||(LA322_0>=Promisify && LA322_0<=Abstract)||(LA322_0>=External && LA322_0<=Function)||(LA322_0>=Private && LA322_0<=Delete)||LA322_0==Public||LA322_0==Static||(LA322_0>=Target && LA322_0<=Await)||LA322_0==Class||(LA322_0>=False && LA322_0<=Super)||LA322_0==Union||(LA322_0>=Yield && LA322_0<=This)||(LA322_0>=From && LA322_0<=Void)||LA322_0==FullStopFullStopFullStop||(LA322_0>=Get && LA322_0<=Set)||LA322_0==PlusSignPlusSign||LA322_0==HyphenMinusHyphenMinus||LA322_0==SolidusEqualsSign||LA322_0==As||LA322_0==Of||LA322_0==ExclamationMark||LA322_0==LeftParenthesis||LA322_0==PlusSign||LA322_0==HyphenMinus||LA322_0==Solidus||LA322_0==LessThanSign||(LA322_0>=CommercialAt && LA322_0<=LeftSquareBracket)||LA322_0==LeftCurlyBracket||LA322_0==Tilde||LA322_0==RULE_DOUBLE||(LA322_0>=RULE_HEX_INT && LA322_0<=RULE_LEGACY_OCTAL_INT)||LA322_0==RULE_SCIENTIFIC_INT||LA322_0==RULE_IDENTIFIER||LA322_0==RULE_STRING||(LA322_0>=RULE_TEMPLATE_HEAD && LA322_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA322_0==RULE_INT) ) {
                                alt322=1;
                            }
                            switch (alt322) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_76);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              			
                            }
                            loop323:
                            do {
                                int alt323=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt323=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt323=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt323=3;
                                    }
                                    break;

                                }

                                switch (alt323) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_109);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_109);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_109);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1());
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop323;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop325:
                    do {
                        int alt325=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt325=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt325=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt325=3;
                            }
                            break;

                        }

                        switch (alt325) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop325;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MemberExpression_return retval = new InternalN4JSXParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;




        try {
            {
            int alt332=3;
            alt332 = dfa332.predict(input);
            switch (alt332) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      				
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      				
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_115);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                      				
                    }

                    }


                    }
                    int alt327=2;
                    int LA327_0 = input.LA(1);

                    if ( (LA327_0==LessThanSign) ) {
                        int LA327_1 = input.LA(2);

                        if ( (synpred171_InternalN4JSXParser()) ) {
                            alt327=1;
                        }
                    }
                    switch (alt327) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_108);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt330=2;
                    int LA330_0 = input.LA(1);

                    if ( (LA330_0==LeftParenthesis) ) {
                        int LA330_1 = input.LA(2);

                        if ( (synpred172_InternalN4JSXParser()) ) {
                            alt330=1;
                        }
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_110); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              					
                            }

                            }


                            }
                            int alt328=2;
                            int LA328_0 = input.LA(1);

                            if ( ((LA328_0>=Intersection && LA328_0<=Implements)||(LA328_0>=Promisify && LA328_0<=Abstract)||(LA328_0>=External && LA328_0<=Function)||(LA328_0>=Private && LA328_0<=Delete)||LA328_0==Public||LA328_0==Static||(LA328_0>=Target && LA328_0<=Await)||LA328_0==Class||(LA328_0>=False && LA328_0<=Super)||LA328_0==Union||(LA328_0>=Yield && LA328_0<=This)||(LA328_0>=From && LA328_0<=Void)||LA328_0==FullStopFullStopFullStop||(LA328_0>=Get && LA328_0<=Set)||LA328_0==PlusSignPlusSign||LA328_0==HyphenMinusHyphenMinus||LA328_0==SolidusEqualsSign||LA328_0==As||LA328_0==Of||LA328_0==ExclamationMark||LA328_0==LeftParenthesis||LA328_0==PlusSign||LA328_0==HyphenMinus||LA328_0==Solidus||LA328_0==LessThanSign||(LA328_0>=CommercialAt && LA328_0<=LeftSquareBracket)||LA328_0==LeftCurlyBracket||LA328_0==Tilde||LA328_0==RULE_DOUBLE||(LA328_0>=RULE_HEX_INT && LA328_0<=RULE_LEGACY_OCTAL_INT)||LA328_0==RULE_SCIENTIFIC_INT||LA328_0==RULE_IDENTIFIER||LA328_0==RULE_STRING||(LA328_0>=RULE_TEMPLATE_HEAD && LA328_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA328_0==RULE_INT) ) {
                                alt328=1;
                            }
                            switch (alt328) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_76);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              			
                            }
                            loop329:
                            do {
                                int alt329=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt329=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt329=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt329=3;
                                    }
                                    break;

                                }

                                switch (alt329) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_109);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_109);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_109);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1());
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop329;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop331:
                    do {
                        int alt331=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt331=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt331=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt331=3;
                            }
                            break;

                        }

                        switch (alt331) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_109);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop331;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSXParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return IndexExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_116);
            IndexExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1());
              			
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return IndexExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_116);
            IndexExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1());
              			
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;




        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0());
              	
            }
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==LessThanSign) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;




        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0());
              	
            }
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==LessThanSign) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSXParser.rulePostfixExpression_return retval = new InternalN4JSXParser.rulePostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_118);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==PlusSignPlusSign) && (synpred173_InternalN4JSXParser())) {
                alt335=1;
            }
            else if ( (LA335_0==HyphenMinusHyphenMinus) && (synpred173_InternalN4JSXParser())) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PostfixExpression_return retval = new InternalN4JSXParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_118);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==PlusSignPlusSign) && (synpred174_InternalN4JSXParser())) {
                alt336=1;
            }
            else if ( (LA336_0==HyphenMinusHyphenMinus) && (synpred174_InternalN4JSXParser())) {
                alt336=1;
            }
            switch (alt336) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSXParser.ruleCastExpression_return retval = new InternalN4JSXParser.ruleCastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==As) && (synpred175_InternalN4JSXParser())) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_CastExpression_return retval = new InternalN4JSXParser.norm1_CastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==As) && (synpred176_InternalN4JSXParser())) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnaryExpression_return retval = new InternalN4JSXParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;




        try {
            {
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( ((LA339_0>=Intersection && LA339_0<=Implements)||(LA339_0>=Promisify && LA339_0<=Abstract)||(LA339_0>=External && LA339_0<=Function)||(LA339_0>=Private && LA339_0<=Project)||LA339_0==Public||LA339_0==Static||LA339_0==Target||(LA339_0>=Async && LA339_0<=Await)||LA339_0==Class||(LA339_0>=False && LA339_0<=Super)||LA339_0==Union||(LA339_0>=Yield && LA339_0<=This)||(LA339_0>=From && LA339_0<=Type)||(LA339_0>=Get && LA339_0<=Set)||LA339_0==SolidusEqualsSign||LA339_0==As||LA339_0==Of||LA339_0==LeftParenthesis||LA339_0==Solidus||LA339_0==LessThanSign||(LA339_0>=CommercialAt && LA339_0<=LeftSquareBracket)||LA339_0==LeftCurlyBracket||LA339_0==RULE_DOUBLE||(LA339_0>=RULE_HEX_INT && LA339_0<=RULE_LEGACY_OCTAL_INT)||LA339_0==RULE_SCIENTIFIC_INT||LA339_0==RULE_IDENTIFIER||LA339_0==RULE_STRING||(LA339_0>=RULE_TEMPLATE_HEAD && LA339_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA339_0==RULE_INT) ) {
                alt339=1;
            }
            else if ( (LA339_0==Delete||LA339_0==Typeof||LA339_0==Void||LA339_0==PlusSignPlusSign||LA339_0==HyphenMinusHyphenMinus||LA339_0==ExclamationMark||LA339_0==PlusSign||LA339_0==HyphenMinus||LA339_0==Tilde) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_11);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_UnaryExpression_return retval = new InternalN4JSXParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;




        try {
            {
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( ((LA340_0>=Intersection && LA340_0<=Implements)||(LA340_0>=Promisify && LA340_0<=Abstract)||(LA340_0>=External && LA340_0<=Function)||(LA340_0>=Private && LA340_0<=Project)||LA340_0==Public||LA340_0==Static||LA340_0==Target||(LA340_0>=Async && LA340_0<=Await)||LA340_0==Class||(LA340_0>=False && LA340_0<=Super)||LA340_0==Union||LA340_0==This||(LA340_0>=From && LA340_0<=Type)||(LA340_0>=Get && LA340_0<=Set)||LA340_0==SolidusEqualsSign||LA340_0==As||LA340_0==Of||LA340_0==LeftParenthesis||LA340_0==Solidus||LA340_0==LessThanSign||(LA340_0>=CommercialAt && LA340_0<=LeftSquareBracket)||LA340_0==LeftCurlyBracket||LA340_0==RULE_DOUBLE||(LA340_0>=RULE_HEX_INT && LA340_0<=RULE_LEGACY_OCTAL_INT)||LA340_0==RULE_SCIENTIFIC_INT||LA340_0==RULE_IDENTIFIER||LA340_0==RULE_STRING||(LA340_0>=RULE_TEMPLATE_HEAD && LA340_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA340_0==RULE_INT) ) {
                alt340=1;
            }
            else if ( (LA340_0==Delete||LA340_0==Typeof||LA340_0==Void||LA340_0==PlusSignPlusSign||LA340_0==HyphenMinusHyphenMinus||LA340_0==ExclamationMark||LA340_0==PlusSign||LA340_0==HyphenMinus||LA340_0==Tilde) ) {
                alt340=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);

                throw nvae;
            }
            switch (alt340) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_11);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMultiplicativeExpression_return retval = new InternalN4JSXParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_119);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop341:
            do {
                int alt341=2;
                int LA341_0 = input.LA(1);

                if ( (LA341_0==Asterisk) && (synpred177_InternalN4JSXParser())) {
                    alt341=1;
                }
                else if ( (LA341_0==Solidus) && (synpred177_InternalN4JSXParser())) {
                    alt341=1;
                }
                else if ( (LA341_0==PercentSign) && (synpred177_InternalN4JSXParser())) {
                    alt341=1;
                }


                switch (alt341) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSXParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_119);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop342:
            do {
                int alt342=2;
                int LA342_0 = input.LA(1);

                if ( (LA342_0==Asterisk) && (synpred178_InternalN4JSXParser())) {
                    alt342=1;
                }
                else if ( (LA342_0==Solidus) && (synpred178_InternalN4JSXParser())) {
                    alt342=1;
                }
                else if ( (LA342_0==PercentSign) && (synpred178_InternalN4JSXParser())) {
                    alt342=1;
                }


                switch (alt342) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAdditiveExpression_return retval = new InternalN4JSXParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_120);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop343:
            do {
                int alt343=2;
                int LA343_0 = input.LA(1);

                if ( (LA343_0==PlusSign) && (synpred179_InternalN4JSXParser())) {
                    alt343=1;
                }
                else if ( (LA343_0==HyphenMinus) && (synpred179_InternalN4JSXParser())) {
                    alt343=1;
                }


                switch (alt343) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop343;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AdditiveExpression_return retval = new InternalN4JSXParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_120);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop344:
            do {
                int alt344=2;
                int LA344_0 = input.LA(1);

                if ( (LA344_0==PlusSign) && (synpred180_InternalN4JSXParser())) {
                    alt344=1;
                }
                else if ( (LA344_0==HyphenMinus) && (synpred180_InternalN4JSXParser())) {
                    alt344=1;
                }


                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSXParser.ruleShiftExpression_return retval = new InternalN4JSXParser.ruleShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_121);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop345:
            do {
                int alt345=2;
                alt345 = dfa345.predict(input);
                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ShiftExpression_return retval = new InternalN4JSXParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_121);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                alt346 = dfa346.predict(input);
                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSXParser.ruleShiftOperator_return retval = new InternalN4JSXParser.ruleShiftOperator_return();
        retval.start = input.LT(1);

        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;



        try {
            {
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==GreaterThanSign) ) {
                alt348=1;
            }
            else if ( (LA348_0==LessThanSignLessThanSign) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);

                throw nvae;
            }
            switch (alt348) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                      		
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                      		
                    }
                    int alt347=2;
                    int LA347_0 = input.LA(1);

                    if ( (LA347_0==GreaterThanSign) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                              			
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalExpression_return retval = new InternalN4JSXParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_123);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop349:
            do {
                int alt349=2;
                alt349 = dfa349.predict(input);
                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalExpression_return retval = new InternalN4JSXParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_124);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                alt350 = dfa350.predict(input);
                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_RelationalExpression_return retval = new InternalN4JSXParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_123);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                alt351 = dfa351.predict(input);
                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_RelationalExpression_return retval = new InternalN4JSXParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_124);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                alt352 = dfa352.predict(input);
                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop352;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalOperator_return retval = new InternalN4JSXParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;



        try {
            {
            int alt353=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt353=1;
                }
                break;
            case GreaterThanSign:
                {
                alt353=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt353=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt353=4;
                }
                break;
            case Instanceof:
                {
                alt353=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);

                throw nvae;
            }

            switch (alt353) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalOperator_return retval = new InternalN4JSXParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;
        Token InKeyword_5_0=null;



        try {
            {
            int alt354=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt354=1;
                }
                break;
            case GreaterThanSign:
                {
                alt354=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt354=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt354=4;
                }
                break;
            case Instanceof:
                {
                alt354=5;
                }
                break;
            case In:
                {
                alt354=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);

                throw nvae;
            }

            switch (alt354) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    InKeyword_5_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(InKeyword_5_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSXParser.ruleEqualityExpression_return retval = new InternalN4JSXParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_125);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==EqualsSignEqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt355=1;
                }
                else if ( (LA355_0==ExclamationMarkEqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt355=1;
                }
                else if ( (LA355_0==EqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt355=1;
                }
                else if ( (LA355_0==ExclamationMarkEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt355=1;
                }


                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop355;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_EqualityExpression_return retval = new InternalN4JSXParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_125);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);

                if ( (LA356_0==EqualsSignEqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt356=1;
                }
                else if ( (LA356_0==ExclamationMarkEqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt356=1;
                }
                else if ( (LA356_0==EqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt356=1;
                }
                else if ( (LA356_0==ExclamationMarkEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt356=1;
                }


                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop356;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_EqualityExpression_return retval = new InternalN4JSXParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_125);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==EqualsSignEqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt357=1;
                }
                else if ( (LA357_0==ExclamationMarkEqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt357=1;
                }
                else if ( (LA357_0==EqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt357=1;
                }
                else if ( (LA357_0==ExclamationMarkEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_EqualityExpression_return retval = new InternalN4JSXParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_125);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==EqualsSignEqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==ExclamationMarkEqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==EqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==ExclamationMarkEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDExpression_return retval = new InternalN4JSXParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_126);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==Ampersand) && (synpred195_InternalN4JSXParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_126);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==Ampersand) && (synpred196_InternalN4JSXParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_126);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==Ampersand) && (synpred197_InternalN4JSXParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_126);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==Ampersand) && (synpred198_InternalN4JSXParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDOperator_return retval = new InternalN4JSXParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword=null;



        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXORExpression_return retval = new InternalN4JSXParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==CircumflexAccent) && (synpred199_InternalN4JSXParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==CircumflexAccent) && (synpred200_InternalN4JSXParser())) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop364;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==CircumflexAccent) && (synpred201_InternalN4JSXParser())) {
                    alt365=1;
                }


                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop365;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==CircumflexAccent) && (synpred202_InternalN4JSXParser())) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXOROperator_return retval = new InternalN4JSXParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);

        Token CircumflexAccentKeyword=null;



        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseORExpression_return retval = new InternalN4JSXParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_128);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==VerticalLine) && (synpred203_InternalN4JSXParser())) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_128);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);

                if ( (LA368_0==VerticalLine) && (synpred204_InternalN4JSXParser())) {
                    alt368=1;
                }


                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop368;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_128);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);

                if ( (LA369_0==VerticalLine) && (synpred205_InternalN4JSXParser())) {
                    alt369=1;
                }


                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop369;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_128);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);

                if ( (LA370_0==VerticalLine) && (synpred206_InternalN4JSXParser())) {
                    alt370=1;
                }


                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop370;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseOROperator_return retval = new InternalN4JSXParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword=null;



        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDExpression_return retval = new InternalN4JSXParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_129);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);

                if ( (LA371_0==AmpersandAmpersand) && (synpred207_InternalN4JSXParser())) {
                    alt371=1;
                }


                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_129);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop371;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalANDExpression_return retval = new InternalN4JSXParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_129);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);

                if ( (LA372_0==AmpersandAmpersand) && (synpred208_InternalN4JSXParser())) {
                    alt372=1;
                }


                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_129);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop372;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalANDExpression_return retval = new InternalN4JSXParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_129);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);

                if ( (LA373_0==AmpersandAmpersand) && (synpred209_InternalN4JSXParser())) {
                    alt373=1;
                }


                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_129);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop373;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalANDExpression_return retval = new InternalN4JSXParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_129);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);

                if ( (LA374_0==AmpersandAmpersand) && (synpred210_InternalN4JSXParser())) {
                    alt374=1;
                }


                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_129);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop374;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDOperator_return retval = new InternalN4JSXParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandAmpersandKeyword=null;



        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalORExpression_return retval = new InternalN4JSXParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_130);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);

                if ( (LA375_0==VerticalLineVerticalLine) && (synpred211_InternalN4JSXParser())) {
                    alt375=1;
                }


                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_130);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop375;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalORExpression_return retval = new InternalN4JSXParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_130);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);

                if ( (LA376_0==VerticalLineVerticalLine) && (synpred212_InternalN4JSXParser())) {
                    alt376=1;
                }


                switch (alt376) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_130);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop376;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalORExpression_return retval = new InternalN4JSXParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_130);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);

                if ( (LA377_0==VerticalLineVerticalLine) && (synpred213_InternalN4JSXParser())) {
                    alt377=1;
                }


                switch (alt377) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_130);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop377;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalORExpression_return retval = new InternalN4JSXParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_130);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop378:
            do {
                int alt378=2;
                int LA378_0 = input.LA(1);

                if ( (LA378_0==VerticalLineVerticalLine) && (synpred214_InternalN4JSXParser())) {
                    alt378=1;
                }


                switch (alt378) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_130);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop378;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalOROperator_return retval = new InternalN4JSXParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineVerticalLineKeyword=null;



        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleConditionalExpression_return retval = new InternalN4JSXParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_131);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt379=2;
            int LA379_0 = input.LA(1);

            if ( (LA379_0==QuestionMark) && (synpred215_InternalN4JSXParser())) {
                alt379=1;
            }
            switch (alt379) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ConditionalExpression_return retval = new InternalN4JSXParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_131);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt380=2;
            int LA380_0 = input.LA(1);

            if ( (LA380_0==QuestionMark) && (synpred216_InternalN4JSXParser())) {
                alt380=1;
            }
            switch (alt380) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ConditionalExpression_return retval = new InternalN4JSXParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_131);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==QuestionMark) && (synpred217_InternalN4JSXParser())) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ConditionalExpression_return retval = new InternalN4JSXParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_131);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==QuestionMark) && (synpred218_InternalN4JSXParser())) {
                alt382=1;
            }
            switch (alt382) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpression_return retval = new InternalN4JSXParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt384=4;
            alt384 = dfa384.predict(input);
            switch (alt384) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_132);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt383=2;
                    alt383 = dfa383.predict(input);
                    switch (alt383) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpression_return retval = new InternalN4JSXParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt386=4;
            alt386 = dfa386.predict(input);
            switch (alt386) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_132);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt385=2;
                    alt385 = dfa385.predict(input);
                    switch (alt385) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AssignmentExpression_return retval = new InternalN4JSXParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt388=5;
            alt388 = dfa388.predict(input);
            switch (alt388) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_132);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt387=2;
                    alt387 = dfa387.predict(input);
                    switch (alt387) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AssignmentExpression_return retval = new InternalN4JSXParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt390=5;
            alt390 = dfa390.predict(input);
            switch (alt390) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_132);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt389=2;
                    alt389 = dfa389.predict(input);
                    switch (alt389) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSXParser.ruleYieldExpression_return retval = new InternalN4JSXParser.ruleYieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;




        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              	
            }
            int alt391=2;
            int LA391_0 = input.LA(1);

            if ( (LA391_0==Asterisk) && (synpred239_InternalN4JSXParser())) {
                alt391=1;
            }
            switch (alt391) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_73); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt392=2;
            alt392 = dfa392.predict(input);
            switch (alt392) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_YieldExpression_return retval = new InternalN4JSXParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;




        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              	
            }
            int alt393=2;
            int LA393_0 = input.LA(1);

            if ( (LA393_0==Asterisk) && (synpred241_InternalN4JSXParser())) {
                alt393=1;
            }
            switch (alt393) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_73); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt394=2;
            alt394 = dfa394.predict(input);
            switch (alt394) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentOperator_return retval = new InternalN4JSXParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusEqualsSignKeyword_5=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignEqualsSignKeyword_7_2=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;



        try {
            {
            int alt396=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt396=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt396=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt396=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt396=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt396=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt396=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt396=7;
                }
                break;
            case GreaterThanSign:
                {
                alt396=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt396=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt396=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt396=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 396, 0, input);

                throw nvae;
            }

            switch (alt396) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    HyphenMinusEqualsSignKeyword_5=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(HyphenMinusEqualsSignKeyword_5, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5());
                      	
                    }

                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                      	
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                      		
                    }
                    int alt395=2;
                    int LA395_0 = input.LA(1);

                    if ( (LA395_0==GreaterThanSign) ) {
                        alt395=1;
                    }
                    switch (alt395) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_135); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                              			
                            }

                            }
                            break;

                    }

                    GreaterThanSignEqualsSignKeyword_7_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignEqualsSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2());
                      		
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                      	
                    }

                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                      	
                    }

                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAwaitExpression_return retval = new InternalN4JSXParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AwaitExpression_return retval = new InternalN4JSXParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AwaitExpression_return retval = new InternalN4JSXParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AwaitExpression_return retval = new InternalN4JSXParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.rulePromisifyExpression_return retval = new InternalN4JSXParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PromisifyExpression_return retval = new InternalN4JSXParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_PromisifyExpression_return retval = new InternalN4JSXParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_PromisifyExpression_return retval = new InternalN4JSXParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSXParser.ruleExpression_return retval = new InternalN4JSXParser.ruleExpression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt398=2;
            int LA398_0 = input.LA(1);

            if ( (LA398_0==Comma) ) {
                alt398=1;
            }
            switch (alt398) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop397:
                    do {
                        int alt397=2;
                        int LA397_0 = input.LA(1);

                        if ( (LA397_0==Comma) ) {
                            alt397=1;
                        }


                        switch (alt397) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop397;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSXParser.norm1_Expression_return retval = new InternalN4JSXParser.norm1_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt400=2;
            int LA400_0 = input.LA(1);

            if ( (LA400_0==Comma) ) {
                alt400=1;
            }
            switch (alt400) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop399:
                    do {
                        int alt399=2;
                        int LA399_0 = input.LA(1);

                        if ( (LA399_0==Comma) ) {
                            alt399=1;
                        }


                        switch (alt399) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop399;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSXParser.norm2_Expression_return retval = new InternalN4JSXParser.norm2_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==Comma) ) {
                alt402=1;
            }
            switch (alt402) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop401:
                    do {
                        int alt401=2;
                        int LA401_0 = input.LA(1);

                        if ( (LA401_0==Comma) ) {
                            alt401=1;
                        }


                        switch (alt401) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop401;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSXParser.norm3_Expression_return retval = new InternalN4JSXParser.norm3_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt404=2;
            int LA404_0 = input.LA(1);

            if ( (LA404_0==Comma) ) {
                alt404=1;
            }
            switch (alt404) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop403:
                    do {
                        int alt403=2;
                        int LA403_0 = input.LA(1);

                        if ( (LA403_0==Comma) ) {
                            alt403=1;
                        }


                        switch (alt403) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop403;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateLiteral_return retval = new InternalN4JSXParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;




        try {
            {
            {
            int alt408=2;
            int LA408_0 = input.LA(1);

            if ( (LA408_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt408=1;
            }
            else if ( (LA408_0==RULE_TEMPLATE_HEAD) ) {
                alt408=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);

                throw nvae;
            }
            switch (alt408) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_137);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                      					
                    }

                    }


                    }
                    int alt405=2;
                    int LA405_0 = input.LA(1);

                    if ( ((LA405_0>=Intersection && LA405_0<=Implements)||(LA405_0>=Promisify && LA405_0<=Abstract)||(LA405_0>=External && LA405_0<=Function)||(LA405_0>=Private && LA405_0<=Delete)||LA405_0==Public||LA405_0==Static||(LA405_0>=Target && LA405_0<=Await)||LA405_0==Class||(LA405_0>=False && LA405_0<=Super)||LA405_0==Union||(LA405_0>=Yield && LA405_0<=This)||(LA405_0>=From && LA405_0<=Void)||(LA405_0>=Get && LA405_0<=Set)||LA405_0==PlusSignPlusSign||LA405_0==HyphenMinusHyphenMinus||LA405_0==SolidusEqualsSign||LA405_0==As||LA405_0==Of||LA405_0==ExclamationMark||LA405_0==LeftParenthesis||LA405_0==PlusSign||LA405_0==HyphenMinus||LA405_0==Solidus||LA405_0==LessThanSign||(LA405_0>=CommercialAt && LA405_0<=LeftSquareBracket)||LA405_0==LeftCurlyBracket||LA405_0==Tilde||LA405_0==RULE_DOUBLE||(LA405_0>=RULE_HEX_INT && LA405_0<=RULE_LEGACY_OCTAL_INT)||LA405_0==RULE_SCIENTIFIC_INT||LA405_0==RULE_IDENTIFIER||LA405_0==RULE_STRING||(LA405_0>=RULE_TEMPLATE_HEAD && LA405_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA405_0==RULE_INT) ) {
                        alt405=1;
                    }
                    switch (alt405) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_137);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                              					
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_138);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop407:
                    do {
                        int alt407=2;
                        int LA407_0 = input.LA(1);

                        if ( (LA407_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt407=1;
                        }


                        switch (alt407) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_137);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	      						
                    	    }

                    	    }


                    	    }
                    	    int alt406=2;
                    	    int LA406_0 = input.LA(1);

                    	    if ( ((LA406_0>=Intersection && LA406_0<=Implements)||(LA406_0>=Promisify && LA406_0<=Abstract)||(LA406_0>=External && LA406_0<=Function)||(LA406_0>=Private && LA406_0<=Delete)||LA406_0==Public||LA406_0==Static||(LA406_0>=Target && LA406_0<=Await)||LA406_0==Class||(LA406_0>=False && LA406_0<=Super)||LA406_0==Union||(LA406_0>=Yield && LA406_0<=This)||(LA406_0>=From && LA406_0<=Void)||(LA406_0>=Get && LA406_0<=Set)||LA406_0==PlusSignPlusSign||LA406_0==HyphenMinusHyphenMinus||LA406_0==SolidusEqualsSign||LA406_0==As||LA406_0==Of||LA406_0==ExclamationMark||LA406_0==LeftParenthesis||LA406_0==PlusSign||LA406_0==HyphenMinus||LA406_0==Solidus||LA406_0==LessThanSign||(LA406_0>=CommercialAt && LA406_0<=LeftSquareBracket)||LA406_0==LeftCurlyBracket||LA406_0==Tilde||LA406_0==RULE_DOUBLE||(LA406_0>=RULE_HEX_INT && LA406_0<=RULE_LEGACY_OCTAL_INT)||LA406_0==RULE_SCIENTIFIC_INT||LA406_0==RULE_IDENTIFIER||LA406_0==RULE_STRING||(LA406_0>=RULE_TEMPLATE_HEAD && LA406_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA406_0==RULE_INT) ) {
                    	        alt406=1;
                    	    }
                    	    switch (alt406) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_137);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {

                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	              						
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_138);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop407;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_TemplateLiteral_return retval = new InternalN4JSXParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;




        try {
            {
            {
            int alt412=2;
            int LA412_0 = input.LA(1);

            if ( (LA412_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt412=1;
            }
            else if ( (LA412_0==RULE_TEMPLATE_HEAD) ) {
                alt412=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 412, 0, input);

                throw nvae;
            }
            switch (alt412) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_137);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                      					
                    }

                    }


                    }
                    int alt409=2;
                    int LA409_0 = input.LA(1);

                    if ( ((LA409_0>=Intersection && LA409_0<=Implements)||(LA409_0>=Promisify && LA409_0<=Abstract)||(LA409_0>=External && LA409_0<=Function)||(LA409_0>=Private && LA409_0<=Delete)||LA409_0==Public||LA409_0==Static||(LA409_0>=Target && LA409_0<=Await)||LA409_0==Class||(LA409_0>=False && LA409_0<=Super)||LA409_0==Union||(LA409_0>=Yield && LA409_0<=This)||(LA409_0>=From && LA409_0<=Void)||(LA409_0>=Get && LA409_0<=Set)||LA409_0==PlusSignPlusSign||LA409_0==HyphenMinusHyphenMinus||LA409_0==SolidusEqualsSign||LA409_0==As||LA409_0==Of||LA409_0==ExclamationMark||LA409_0==LeftParenthesis||LA409_0==PlusSign||LA409_0==HyphenMinus||LA409_0==Solidus||LA409_0==LessThanSign||(LA409_0>=CommercialAt && LA409_0<=LeftSquareBracket)||LA409_0==LeftCurlyBracket||LA409_0==Tilde||LA409_0==RULE_DOUBLE||(LA409_0>=RULE_HEX_INT && LA409_0<=RULE_LEGACY_OCTAL_INT)||LA409_0==RULE_SCIENTIFIC_INT||LA409_0==RULE_IDENTIFIER||LA409_0==RULE_STRING||(LA409_0>=RULE_TEMPLATE_HEAD && LA409_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA409_0==RULE_INT) ) {
                        alt409=1;
                    }
                    switch (alt409) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_137);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                              					
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_138);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop411:
                    do {
                        int alt411=2;
                        int LA411_0 = input.LA(1);

                        if ( (LA411_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt411=1;
                        }


                        switch (alt411) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_137);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	      						
                    	    }

                    	    }


                    	    }
                    	    int alt410=2;
                    	    int LA410_0 = input.LA(1);

                    	    if ( ((LA410_0>=Intersection && LA410_0<=Implements)||(LA410_0>=Promisify && LA410_0<=Abstract)||(LA410_0>=External && LA410_0<=Function)||(LA410_0>=Private && LA410_0<=Delete)||LA410_0==Public||LA410_0==Static||(LA410_0>=Target && LA410_0<=Await)||LA410_0==Class||(LA410_0>=False && LA410_0<=Super)||LA410_0==Union||(LA410_0>=Yield && LA410_0<=This)||(LA410_0>=From && LA410_0<=Void)||(LA410_0>=Get && LA410_0<=Set)||LA410_0==PlusSignPlusSign||LA410_0==HyphenMinusHyphenMinus||LA410_0==SolidusEqualsSign||LA410_0==As||LA410_0==Of||LA410_0==ExclamationMark||LA410_0==LeftParenthesis||LA410_0==PlusSign||LA410_0==HyphenMinus||LA410_0==Solidus||LA410_0==LessThanSign||(LA410_0>=CommercialAt && LA410_0<=LeftSquareBracket)||LA410_0==LeftCurlyBracket||LA410_0==Tilde||LA410_0==RULE_DOUBLE||(LA410_0>=RULE_HEX_INT && LA410_0<=RULE_LEGACY_OCTAL_INT)||LA410_0==RULE_SCIENTIFIC_INT||LA410_0==RULE_IDENTIFIER||LA410_0==RULE_STRING||(LA410_0>=RULE_TEMPLATE_HEAD && LA410_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA410_0==RULE_INT) ) {
                    	        alt410=1;
                    	    }
                    	    switch (alt410) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_137);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {

                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	              						
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_138);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop411;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSXParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);

        Token RightCurlyBracketKeyword=null;


        	setInTemplateSegment();

        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSXParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSXParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);

        Token RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;



        try {
            {
            {
            {
            {
            RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateHead_return retval = new InternalN4JSXParser.ruleTemplateHead_return();
        retval.start = input.LT(1);

        Token RawValueTEMPLATE_HEADTerminalRuleCall_1_0=null;



        try {
            {
            {
            {
            {
            RawValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(RawValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTail_return retval = new InternalN4JSXParser.ruleTemplateTail_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateTailLiteral_return RawValueTemplateTailLiteralParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.start):null), (RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddle_return retval = new InternalN4JSXParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateMiddleLiteral_return RawValueTemplateMiddleLiteralParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLiteral_return retval = new InternalN4JSXParser.ruleLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;




        try {
            {
            int alt413=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt413=1;
                }
                break;
            case False:
            case True:
                {
                alt413=2;
                }
                break;
            case RULE_STRING:
                {
                alt413=3;
                }
                break;
            case Null:
                {
                alt413=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt413=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 413, 0, input);

                throw nvae;
            }

            switch (alt413) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNullLiteral_return retval = new InternalN4JSXParser.ruleNullLiteral_return();
        retval.start = input.LT(1);

        Token NullKeyword_1=null;



        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBooleanLiteral_return retval = new InternalN4JSXParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);

        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;



        try {
            {
            {
            int alt414=2;
            int LA414_0 = input.LA(1);

            if ( (LA414_0==True) ) {
                alt414=1;
            }
            else if ( (LA414_0==False) ) {
                alt414=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 414, 0, input);

                throw nvae;
            }
            switch (alt414) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleStringLiteral_return retval = new InternalN4JSXParser.ruleStringLiteral_return();
        retval.start = input.LT(1);

        Token ValueSTRINGTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteral_return retval = new InternalN4JSXParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;

        InternalN4JSXParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;




        try {
            {
            int alt415=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt415=1;
                }
                break;
            case RULE_INT:
                {
                alt415=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt415=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt415=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt415=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt415=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt415=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 415, 0, input);

                throw nvae;
            }

            switch (alt415) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleDoubleLiteral_return retval = new InternalN4JSXParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);

        Token ValueDOUBLETerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleIntLiteral_return retval = new InternalN4JSXParser.ruleIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueINTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleOctalIntLiteral_return retval = new InternalN4JSXParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueOCTAL_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSXParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleHexIntLiteral_return retval = new InternalN4JSXParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueHEX_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBinaryIntLiteral_return retval = new InternalN4JSXParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueBINARY_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleScientificIntLiteral_return retval = new InternalN4JSXParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSXParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteralAsString_return retval = new InternalN4JSXParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);



        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierOrThis_return retval = new InternalN4JSXParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;



        try {
            {
            int alt416=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt416=1;
                }
                break;
            case This:
                {
                alt416=2;
                }
                break;
            case Promisify:
                {
                alt416=3;
                }
                break;
            case Target:
                {
                alt416=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);

                throw nvae;
            }

            switch (alt416) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationName_return retval = new InternalN4JSXParser.ruleAnnotationName_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;



        try {
            {
            int alt417=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt417=1;
                }
                break;
            case This:
                {
                alt417=2;
                }
                break;
            case Target:
                {
                alt417=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);

                throw nvae;
            }

            switch (alt417) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSXParser.ruleREGEX_LITERAL_return retval = new InternalN4JSXParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);

        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;


        	setInRegularExpression();

        try {
            {
            {
            int alt418=2;
            int LA418_0 = input.LA(1);

            if ( (LA418_0==Solidus) ) {
                alt418=1;
            }
            else if ( (LA418_0==SolidusEqualsSign) ) {
                alt418=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);

                throw nvae;
            }
            switch (alt418) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                      		
                    }

                    }
                    break;

            }
            int alt419=2;
            int LA419_0 = input.LA(1);

            if ( (LA419_0==RULE_REGEX_TAIL) ) {
                alt419=1;
            }
            switch (alt419) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTailLiteral_return retval = new InternalN4JSXParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);



        try {
            {
            int alt420=2;
            int LA420_0 = input.LA(1);

            if ( (LA420_0==RULE_TEMPLATE_END) ) {
                alt420=1;
            }
            switch (alt420) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSXParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);



        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSXParser.ruleSemi_return retval = new InternalN4JSXParser.ruleSemi_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword=null;


        	int marker = input.mark();
        	promoteEOL();

        try {
            int alt421=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt421=1;
                }
                break;
            case EOF:
                {
                alt421=2;
                }
                break;
            case RULE_EOL:
                {
                alt421=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt421=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt421=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);

                throw nvae;
            }

            switch (alt421) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      	announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword());

                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSXParser.ruleNoLineTerminator_return retval = new InternalN4JSXParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);

        Token NO_LINE_TERMINATORTerminalRuleCall=null;



        try {
            {
            int alt422=2;
            int LA422_0 = input.LA(1);

            if ( (LA422_0==RULE_NO_LINE_TERMINATOR) ) {
                alt422=1;
            }
            switch (alt422) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotation_return retval = new InternalN4JSXParser.ruleAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;




        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
              	
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return retval = new InternalN4JSXParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;




        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
              	
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSXParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSXParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_108);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0());
              			
            }

            }


            }
            int alt425=2;
            alt425 = dfa425.predict(input);
            switch (alt425) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }

                    }
                    int alt424=2;
                    int LA424_0 = input.LA(1);

                    if ( ((LA424_0>=Intersection && LA424_0<=Constructor)||LA424_0==Promisify||LA424_0==Target||LA424_0==Await||LA424_0==False||LA424_0==Union||LA424_0==This||(LA424_0>=Null && LA424_0<=Void)||LA424_0==SolidusEqualsSign||LA424_0==LeftParenthesis||LA424_0==Solidus||LA424_0==LeftSquareBracket||LA424_0==LeftCurlyBracket||LA424_0==Tilde||LA424_0==RULE_DOUBLE||(LA424_0>=RULE_HEX_INT && LA424_0<=RULE_LEGACY_OCTAL_INT)||LA424_0==RULE_SCIENTIFIC_INT||LA424_0==RULE_IDENTIFIER||LA424_0==RULE_STRING||LA424_0==RULE_INT) ) {
                        alt424=1;
                    }
                    switch (alt424) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0());
                              					
                            }

                            }


                            }
                            loop423:
                            do {
                                int alt423=2;
                                int LA423_0 = input.LA(1);

                                if ( (LA423_0==Comma) ) {
                                    alt423=1;
                                }


                                switch (alt423) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_142); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	      				
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      							announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1());
                            	      						
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop423;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationArgument_return retval = new InternalN4JSXParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;




        try {
            {
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==False||LA426_0==Null||LA426_0==True||LA426_0==SolidusEqualsSign||LA426_0==Solidus||LA426_0==RULE_DOUBLE||(LA426_0>=RULE_HEX_INT && LA426_0<=RULE_LEGACY_OCTAL_INT)||LA426_0==RULE_SCIENTIFIC_INT||LA426_0==RULE_STRING||LA426_0==RULE_INT) ) {
                alt426=1;
            }
            else if ( ((LA426_0>=Intersection && LA426_0<=Constructor)||LA426_0==Promisify||LA426_0==Target||LA426_0==Await||LA426_0==Union||LA426_0==This||LA426_0==This_1||(LA426_0>=Type && LA426_0<=Void)||LA426_0==LeftParenthesis||LA426_0==LeftSquareBracket||LA426_0==LeftCurlyBracket||LA426_0==Tilde||LA426_0==RULE_IDENTIFIER) ) {
                alt426=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);

                throw nvae;
            }
            switch (alt426) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSXParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSXParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationList_return retval = new InternalN4JSXParser.ruleAnnotationList_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_143);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2());
              					
            }

            }


            }


            }


            }
            loop427:
            do {
                int alt427=2;
                int LA427_0 = input.LA(1);

                if ( (LA427_0==CommercialAt) ) {
                    alt427=1;
                }


                switch (alt427) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop427;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionAnnotationList_return retval = new InternalN4JSXParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            int cnt428=0;
            loop428:
            do {
                int alt428=2;
                int LA428_0 = input.LA(1);

                if ( (LA428_0==CommercialAt) ) {
                    alt428=1;
                }


                switch (alt428) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt428 >= 1 ) break loop428;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(428, input);
                        throw eee;
                }
                cnt428++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            int cnt429=0;
            loop429:
            do {
                int alt429=2;
                int LA429_0 = input.LA(1);

                if ( (LA429_0==CommercialAt) ) {
                    alt429=1;
                }


                switch (alt429) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt429 >= 1 ) break loop429;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(429, input);
                        throw eee;
                }
                cnt429++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSXParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            int cnt430=0;
            loop430:
            do {
                int alt430=2;
                int LA430_0 = input.LA(1);

                if ( (LA430_0==CommercialAt) ) {
                    alt430=1;
                }


                switch (alt430) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt430 >= 1 ) break loop430;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(430, input);
                        throw eee;
                }
                cnt430++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSXParser.ruleTypeReferenceName_return retval = new InternalN4JSXParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);

        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;



        try {
            {
            int alt431=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt431=1;
                }
                break;
            case This:
                {
                alt431=2;
                }
                break;
            case Await:
                {
                alt431=3;
                }
                break;
            case Promisify:
                {
                alt431=4;
                }
                break;
            case Target:
                {
                alt431=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt431=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 431, 0, input);

                throw nvae;
            }

            switch (alt431) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleQualifiedTypeReferenceName() throws RecognitionException {
        Token FullStopKeyword_1_0=null;



        try {
            {
            {
            match(input,RULE_IDENTIFIER,FOLLOW_13); if (state.failed) return ;
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==FullStop) ) {
                alt432=1;
            }
            switch (alt432) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_144); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(FullStopKeyword_1_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0());
                      		
                    }
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassDeclaration_return retval = new InternalN4JSXParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);

        Token ClassKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            loop433:
            do {
                int alt433=2;
                int LA433_0 = input.LA(1);

                if ( ((LA433_0>=Protected && LA433_0<=Abstract)||LA433_0==External||(LA433_0>=Private && LA433_0<=Project)||LA433_0==Public||LA433_0==Static||LA433_0==Const) ) {
                    alt433=1;
                }


                switch (alt433) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_20);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop433;
                }
            } while (true);

            ClassKeyword_0_0_2=(Token)match(input,Class,FOLLOW_145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ClassKeyword_0_0_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2());
              			
            }
            int alt434=2;
            int LA434_0 = input.LA(1);

            if ( (LA434_0==Tilde) ) {
                alt434=1;
            }
            switch (alt434) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_3());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt435=2;
            int LA435_0 = input.LA(1);

            if ( ((LA435_0>=Intersection && LA435_0<=Constructor)||(LA435_0>=Promisify && LA435_0<=Abstract)||LA435_0==External||(LA435_0>=Private && LA435_0<=Project)||LA435_0==Public||LA435_0==Static||LA435_0==Target||(LA435_0>=Async && LA435_0<=Await)||LA435_0==Union||(LA435_0>=Yield && LA435_0<=This)||LA435_0==From||LA435_0==Type||(LA435_0>=Get && LA435_0<=Let)||(LA435_0>=Out && LA435_0<=Set)||LA435_0==As||LA435_0==Of||LA435_0==RULE_IDENTIFIER) ) {
                alt435=1;
            }
            else if ( (LA435_0==Implements) ) {
                int LA435_2 = input.LA(2);

                if ( (LA435_2==Implements||LA435_2==Extends||LA435_2==LessThanSign||LA435_2==LeftCurlyBracket) ) {
                    alt435=1;
                }
            }
            switch (alt435) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_4());
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt436=2;
            int LA436_0 = input.LA(1);

            if ( (LA436_0==LessThanSign) ) {
                alt436=1;
            }
            switch (alt436) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt437=2;
            int LA437_0 = input.LA(1);

            if ( (LA437_0==Implements||LA437_0==Extends) ) {
                alt437=1;
            }
            switch (alt437) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_2=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.start):null), (ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSXParser.ruleMembers_return retval = new InternalN4JSXParser.ruleMembers_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            loop438:
            do {
                int alt438=2;
                int LA438_0 = input.LA(1);

                if ( ((LA438_0>=Intersection && LA438_0<=With)||(LA438_0>=For && LA438_0<=Var)||(LA438_0>=As && LA438_0<=Of)||LA438_0==LeftParenthesis||LA438_0==Asterisk||LA438_0==LessThanSign||(LA438_0>=CommercialAt && LA438_0<=LeftSquareBracket)||LA438_0==LeftCurlyBracket||LA438_0==Tilde||LA438_0==RULE_DOUBLE||LA438_0==RULE_HEX_INT||LA438_0==RULE_OCTAL_INT||LA438_0==RULE_SCIENTIFIC_INT||LA438_0==RULE_IDENTIFIER||LA438_0==RULE_STRING||LA438_0==RULE_INT) ) {
                    alt438=1;
                }


                switch (alt438) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_100);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop438;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSXParser.norm1_Members_return retval = new InternalN4JSXParser.norm1_Members_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);

                if ( ((LA439_0>=Intersection && LA439_0<=With)||(LA439_0>=For && LA439_0<=Var)||(LA439_0>=As && LA439_0<=Of)||LA439_0==LeftParenthesis||LA439_0==Asterisk||LA439_0==LessThanSign||(LA439_0>=CommercialAt && LA439_0<=LeftSquareBracket)||LA439_0==LeftCurlyBracket||LA439_0==Tilde||LA439_0==RULE_DOUBLE||LA439_0==RULE_HEX_INT||LA439_0==RULE_OCTAL_INT||LA439_0==RULE_SCIENTIFIC_INT||LA439_0==RULE_IDENTIFIER||LA439_0==RULE_STRING||LA439_0==RULE_INT) ) {
                    alt439=1;
                }


                switch (alt439) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_100);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop439;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.ruleClassExtendsClause_return retval = new InternalN4JSXParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;




        try {
            {
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( (LA443_0==Extends) ) {
                alt443=1;
            }
            else if ( (LA443_0==Implements) ) {
                alt443=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 443, 0, input);

                throw nvae;
            }
            switch (alt443) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0());
                      		
                    }
                    int alt442=2;
                    int LA442_0 = input.LA(1);

                    if ( (LA442_0==Void) && (synpred255_InternalN4JSXParser())) {
                        alt442=1;
                    }
                    else if ( (LA442_0==This) ) {
                        int LA442_2 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt442=1;
                        }
                        else if ( (true) ) {
                            alt442=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 442, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA442_0==Await) ) {
                        int LA442_3 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt442=1;
                        }
                        else if ( (true) ) {
                            alt442=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 442, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA442_0==Promisify) ) {
                        int LA442_4 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt442=1;
                        }
                        else if ( (true) ) {
                            alt442=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 442, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA442_0==Target) ) {
                        int LA442_5 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt442=1;
                        }
                        else if ( (true) ) {
                            alt442=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 442, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA442_0==RULE_IDENTIFIER) ) {
                        int LA442_6 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt442=1;
                        }
                        else if ( (true) ) {
                            alt442=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 442, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA442_0>=Intersection && LA442_0<=Implements)||(LA442_0>=Interface && LA442_0<=Abstract)||(LA442_0>=External && LA442_0<=Function)||(LA442_0>=Private && LA442_0<=Project)||LA442_0==Public||LA442_0==Static||LA442_0==Async||LA442_0==Class||(LA442_0>=False && LA442_0<=Super)||LA442_0==Union||LA442_0==Yield||(LA442_0>=From && LA442_0<=Type)||(LA442_0>=Get && LA442_0<=Set)||LA442_0==SolidusEqualsSign||LA442_0==As||LA442_0==Of||LA442_0==LeftParenthesis||LA442_0==Solidus||LA442_0==LessThanSign||(LA442_0>=CommercialAt && LA442_0<=LeftSquareBracket)||LA442_0==LeftCurlyBracket||LA442_0==RULE_DOUBLE||(LA442_0>=RULE_HEX_INT && LA442_0<=RULE_LEGACY_OCTAL_INT)||LA442_0==RULE_SCIENTIFIC_INT||LA442_0==RULE_STRING||(LA442_0>=RULE_TEMPLATE_HEAD && LA442_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA442_0==RULE_INT) ) {
                        alt442=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 442, 0, input);

                        throw nvae;
                    }
                    switch (alt442) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_147);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0());
                              						
                            }

                            }


                            }
                            int alt441=2;
                            int LA441_0 = input.LA(1);

                            if ( (LA441_0==Implements||LA441_0==Extends) ) {
                                alt441=1;
                            }
                            switch (alt441) {
                                case 1 :
                                    {
                                    int alt440=2;
                                    int LA440_0 = input.LA(1);

                                    if ( (LA440_0==Implements) ) {
                                        alt440=1;
                                    }
                                    else if ( (LA440_0==Extends) ) {
                                        alt440=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 440, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt440) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_148); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0());
                                              						
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_148); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1());
                                              						
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.norm1_ClassExtendsClause_return retval = new InternalN4JSXParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;




        try {
            {
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( (LA447_0==Extends) ) {
                alt447=1;
            }
            else if ( (LA447_0==Implements) ) {
                alt447=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 447, 0, input);

                throw nvae;
            }
            switch (alt447) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0());
                      		
                    }
                    int alt446=2;
                    int LA446_0 = input.LA(1);

                    if ( (LA446_0==Void) && (synpred256_InternalN4JSXParser())) {
                        alt446=1;
                    }
                    else if ( (LA446_0==This) ) {
                        int LA446_2 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt446=1;
                        }
                        else if ( (true) ) {
                            alt446=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 446, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA446_0==Await) ) {
                        int LA446_3 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt446=1;
                        }
                        else if ( (true) ) {
                            alt446=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 446, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA446_0==Promisify) ) {
                        int LA446_4 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt446=1;
                        }
                        else if ( (true) ) {
                            alt446=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 446, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA446_0==Target) ) {
                        int LA446_5 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt446=1;
                        }
                        else if ( (true) ) {
                            alt446=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 446, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA446_0==RULE_IDENTIFIER) ) {
                        int LA446_6 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt446=1;
                        }
                        else if ( (true) ) {
                            alt446=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 446, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA446_0>=Intersection && LA446_0<=Implements)||(LA446_0>=Interface && LA446_0<=Abstract)||(LA446_0>=External && LA446_0<=Function)||(LA446_0>=Private && LA446_0<=Project)||LA446_0==Public||LA446_0==Static||LA446_0==Async||LA446_0==Class||(LA446_0>=False && LA446_0<=Super)||LA446_0==Union||(LA446_0>=From && LA446_0<=Type)||(LA446_0>=Get && LA446_0<=Set)||LA446_0==SolidusEqualsSign||LA446_0==As||LA446_0==Of||LA446_0==LeftParenthesis||LA446_0==Solidus||LA446_0==LessThanSign||(LA446_0>=CommercialAt && LA446_0<=LeftSquareBracket)||LA446_0==LeftCurlyBracket||LA446_0==RULE_DOUBLE||(LA446_0>=RULE_HEX_INT && LA446_0<=RULE_LEGACY_OCTAL_INT)||LA446_0==RULE_SCIENTIFIC_INT||LA446_0==RULE_STRING||(LA446_0>=RULE_TEMPLATE_HEAD && LA446_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA446_0==RULE_INT) ) {
                        alt446=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 446, 0, input);

                        throw nvae;
                    }
                    switch (alt446) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_147);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0());
                              						
                            }

                            }


                            }
                            int alt445=2;
                            int LA445_0 = input.LA(1);

                            if ( (LA445_0==Implements||LA445_0==Extends) ) {
                                alt445=1;
                            }
                            switch (alt445) {
                                case 1 :
                                    {
                                    int alt444=2;
                                    int LA444_0 = input.LA(1);

                                    if ( (LA444_0==Implements) ) {
                                        alt444=1;
                                    }
                                    else if ( (LA444_0==Extends) ) {
                                        alt444=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 444, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt444) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_148); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0());
                                              						
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_148); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1());
                                              						
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleClassImplementsList_return retval = new InternalN4JSXParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0_0=null;
        Token ImplementsKeyword_1_0_1=null;
        Token ExtendsKeyword_1_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_149);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_0());
              			
            }

            }


            }
            loop449:
            do {
                int alt449=2;
                int LA449_0 = input.LA(1);

                if ( (LA449_0==Implements||LA449_0==Extends||LA449_0==Comma) ) {
                    alt449=1;
                }


                switch (alt449) {
            	case 1 :
            	    {
            	    int alt448=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt448=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt448=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt448=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 448, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt448) {
            	        case 1 :
            	            {
            	            CommaKeyword_1_0_0=(Token)match(input,Comma,FOLLOW_148); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(CommaKeyword_1_0_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0());
            	              			
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_1_0_1=(Token)match(input,Implements,FOLLOW_148); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ImplementsKeyword_1_0_1, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1());
            	              			
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_1_0_2=(Token)match(input,Extends,FOLLOW_148); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ExtendsKeyword_1_0_2, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2());
            	              			
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_149);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop449;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassExpression_return retval = new InternalN4JSXParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_4 = null;




        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              	
            }
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( ((LA450_0>=Intersection && LA450_0<=Constructor)||(LA450_0>=Promisify && LA450_0<=Abstract)||LA450_0==External||(LA450_0>=Private && LA450_0<=Project)||LA450_0==Public||LA450_0==Static||LA450_0==Target||(LA450_0>=Async && LA450_0<=Await)||LA450_0==Union||(LA450_0>=Yield && LA450_0<=This)||LA450_0==From||LA450_0==Type||(LA450_0>=Get && LA450_0<=Let)||(LA450_0>=Out && LA450_0<=Set)||LA450_0==As||LA450_0==Of||LA450_0==RULE_IDENTIFIER) ) {
                alt450=1;
            }
            else if ( (LA450_0==Implements) ) {
                int LA450_2 = input.LA(2);

                if ( (LA450_2==Implements||LA450_2==Extends||LA450_2==LeftCurlyBracket) ) {
                    alt450=1;
                }
            }
            switch (alt450) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt451=2;
            int LA451_0 = input.LA(1);

            if ( (LA451_0==Implements||LA451_0==Extends) ) {
                alt451=1;
            }
            switch (alt451) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_3=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_N4ClassExpression_return retval = new InternalN4JSXParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_4 = null;




        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              	
            }
            int alt452=2;
            int LA452_0 = input.LA(1);

            if ( ((LA452_0>=Intersection && LA452_0<=Constructor)||(LA452_0>=Promisify && LA452_0<=Abstract)||LA452_0==External||(LA452_0>=Private && LA452_0<=Project)||LA452_0==Public||LA452_0==Static||LA452_0==Target||(LA452_0>=Async && LA452_0<=Await)||LA452_0==Union||LA452_0==This||LA452_0==From||LA452_0==Type||(LA452_0>=Get && LA452_0<=Let)||(LA452_0>=Out && LA452_0<=Set)||LA452_0==As||LA452_0==Of||LA452_0==RULE_IDENTIFIER) ) {
                alt452=1;
            }
            else if ( (LA452_0==Implements) ) {
                int LA452_2 = input.LA(2);

                if ( (LA452_2==Implements||LA452_2==Extends||LA452_2==LeftCurlyBracket) ) {
                    alt452=1;
                }
            }
            switch (alt452) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_68);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( (LA453_0==Implements||LA453_0==Extends) ) {
                alt453=1;
            }
            switch (alt453) {
                case 1 :
                    {
                    pushFollow(FOLLOW_68);
                    ClassExtendsClauseParserRuleCall_3=norm1_ClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSXParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);

        Token InterfaceKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            loop454:
            do {
                int alt454=2;
                int LA454_0 = input.LA(1);

                if ( ((LA454_0>=Protected && LA454_0<=Abstract)||LA454_0==External||(LA454_0>=Private && LA454_0<=Project)||LA454_0==Public||LA454_0==Static||LA454_0==Const) ) {
                    alt454=1;
                }


                switch (alt454) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_23);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop454;
                }
            } while (true);

            InterfaceKeyword_0_0_2=(Token)match(input,Interface,FOLLOW_145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(InterfaceKeyword_0_0_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2());
              			
            }
            int alt455=2;
            int LA455_0 = input.LA(1);

            if ( (LA455_0==Tilde) ) {
                alt455=1;
            }
            switch (alt455) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_3());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( ((LA456_0>=Intersection && LA456_0<=Constructor)||(LA456_0>=Promisify && LA456_0<=Abstract)||LA456_0==External||(LA456_0>=Private && LA456_0<=Project)||LA456_0==Public||LA456_0==Static||LA456_0==Target||(LA456_0>=Async && LA456_0<=Await)||LA456_0==Union||(LA456_0>=Yield && LA456_0<=This)||LA456_0==From||LA456_0==Type||(LA456_0>=Get && LA456_0<=Let)||(LA456_0>=Out && LA456_0<=Set)||LA456_0==As||LA456_0==Of||LA456_0==RULE_IDENTIFIER) ) {
                alt456=1;
            }
            else if ( (LA456_0==Implements) ) {
                int LA456_2 = input.LA(2);

                if ( (LA456_2==Implements||LA456_2==Extends||LA456_2==LessThanSign||LA456_2==LeftCurlyBracket) ) {
                    alt456=1;
                }
            }
            switch (alt456) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_4());
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt457=2;
            int LA457_0 = input.LA(1);

            if ( (LA457_0==LessThanSign) ) {
                alt457=1;
            }
            switch (alt457) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( (LA458_0==Implements||LA458_0==Extends) ) {
                alt458=1;
            }
            switch (alt458) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    InterfaceImplementsListParserRuleCall_2=ruleInterfaceImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.start):null), (InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleInterfaceImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleInterfaceImplementsList_return ruleInterfaceImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleInterfaceImplementsList_return retval = new InternalN4JSXParser.ruleInterfaceImplementsList_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0_0=null;
        Token ImplementsKeyword_2_0_1=null;
        Token ExtendsKeyword_2_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;




        try {
            {
            {
            int alt459=2;
            int LA459_0 = input.LA(1);

            if ( (LA459_0==Extends) ) {
                alt459=1;
            }
            else if ( (LA459_0==Implements) ) {
                alt459=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 459, 0, input);

                throw nvae;
            }
            switch (alt459) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1());
                      		
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_149);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_1());
              			
            }

            }


            }
            loop461:
            do {
                int alt461=2;
                int LA461_0 = input.LA(1);

                if ( (LA461_0==Implements||LA461_0==Extends||LA461_0==Comma) ) {
                    alt461=1;
                }


                switch (alt461) {
            	case 1 :
            	    {
            	    int alt460=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt460=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt460=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt460=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 460, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt460) {
            	        case 1 :
            	            {
            	            CommaKeyword_2_0_0=(Token)match(input,Comma,FOLLOW_148); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(CommaKeyword_2_0_0, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0());
            	              			
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_2_0_1=(Token)match(input,Implements,FOLLOW_148); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ImplementsKeyword_2_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1());
            	              			
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_2_0_2=(Token)match(input,Extends,FOLLOW_148); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ExtendsKeyword_2_0_2, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2());
            	              			
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_149);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop461;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumDeclaration_return retval = new InternalN4JSXParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);

        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            {
            {
            loop462:
            do {
                int alt462=2;
                int LA462_0 = input.LA(1);

                if ( ((LA462_0>=Protected && LA462_0<=Abstract)||LA462_0==External||(LA462_0>=Private && LA462_0<=Project)||LA462_0==Public||LA462_0==Static||LA462_0==Const) ) {
                    alt462=1;
                }


                switch (alt462) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_24);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop462;
                }
            } while (true);

            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
              			
            }
            int alt463=2;
            int LA463_0 = input.LA(1);

            if ( ((LA463_0>=Intersection && LA463_0<=Implements)||(LA463_0>=Promisify && LA463_0<=Abstract)||LA463_0==External||(LA463_0>=Private && LA463_0<=Project)||LA463_0==Public||LA463_0==Static||LA463_0==Target||(LA463_0>=Async && LA463_0<=Await)||LA463_0==Union||(LA463_0>=Yield && LA463_0<=This)||LA463_0==From||LA463_0==Type||(LA463_0>=Get && LA463_0<=Let)||(LA463_0>=Out && LA463_0<=Set)||LA463_0==As||LA463_0==Of||LA463_0==RULE_IDENTIFIER) ) {
                alt463=1;
            }
            switch (alt463) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3());
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }

            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt465=2;
            int LA465_0 = input.LA(1);

            if ( (LA465_0==Promisify||LA465_0==Target||LA465_0==This||LA465_0==RULE_IDENTIFIER) ) {
                alt465=1;
            }
            switch (alt465) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop464:
                    do {
                        int alt464=2;
                        int LA464_0 = input.LA(1);

                        if ( (LA464_0==Comma) ) {
                            alt464=1;
                        }


                        switch (alt464) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop464;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumLiteral_return retval = new InternalN4JSXParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        Token ValueSTRINGTerminalRuleCall_1_1_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_54);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0());
              			
            }

            }


            }
            int alt466=2;
            int LA466_0 = input.LA(1);

            if ( (LA466_0==Colon) ) {
                alt466=1;
            }
            switch (alt466) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                      		
                    }
                    {
                    {
                    ValueSTRINGTerminalRuleCall_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ValueSTRINGTerminalRuleCall_1_1_0, grammarAccess.getN4EnumLiteralAccess().getValueAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;




        try {
            {
            int alt467=6;
            alt467 = dfa467.predict(input);
            switch (alt467) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;




        try {
            {
            int alt468=6;
            alt468 = dfa468.predict(input);
            switch (alt468) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_1_1_0=null;
        Token LeftParenthesisKeyword_1_1_2=null;
        Token RightParenthesisKeyword_1_1_4=null;
        Token SemicolonKeyword_1_1_6=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_5_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_152);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt481=4;
            alt481 = dfa481.predict(input);
            switch (alt481) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop469:
                    do {
                        int alt469=2;
                        int LA469_0 = input.LA(1);

                        if ( ((LA469_0>=Protected && LA469_0<=Abstract)||LA469_0==External||(LA469_0>=Private && LA469_0<=Project)||LA469_0==Public||LA469_0==Static||LA469_0==Const) ) {
                            alt469=1;
                        }


                        switch (alt469) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_153);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop469;
                        }
                    } while (true);

                    pushFollow(FOLLOW_154);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt470=2;
                    alt470 = dfa470.predict(input);
                    switch (alt470) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt471=2;
                    int LA471_0 = input.LA(1);

                    if ( (LA471_0==Semicolon) ) {
                        alt471=1;
                    }
                    switch (alt471) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop472:
                    do {
                        int alt472=2;
                        int LA472_0 = input.LA(1);

                        if ( ((LA472_0>=Protected && LA472_0<=Abstract)||LA472_0==External||(LA472_0>=Private && LA472_0<=Project)||LA472_0==Public||LA472_0==Static||LA472_0==Const) ) {
                            alt472=1;
                        }


                        switch (alt472) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_155);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop472;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_104);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                      							
                    }

                    }


                    }


                    }


                    }
                    int alt473=2;
                    int LA473_0 = input.LA(1);

                    if ( (LA473_0==QuestionMark) ) {
                        alt473=1;
                    }
                    switch (alt473) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_1_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(DeclaredOptionalQuestionMarkKeyword_1_1_1_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                              					
                            }

                            }


                            }
                            break;

                    }

                    LeftParenthesisKeyword_1_1_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_1_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_76);
                    FparFormalParameterParserRuleCall_1_1_3_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.start):null), (FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_3());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_4=(Token)match(input,RightParenthesis,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_1_4, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                      			
                    }
                    int alt474=2;
                    alt474 = dfa474.predict(input);
                    switch (alt474) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            BodyBlockParserRuleCall_1_1_5_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.start):null), (BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_5());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt475=2;
                    int LA475_0 = input.LA(1);

                    if ( (LA475_0==Semicolon) ) {
                        alt475=1;
                    }
                    switch (alt475) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_1_6, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop476:
                    do {
                        int alt476=2;
                        alt476 = dfa476.predict(input);
                        switch (alt476) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop476;
                        }
                    } while (true);
                    int alt477=2;
                    int LA477_0 = input.LA(1);

                    if ( (LA477_0==LessThanSign) ) {
                        alt477=1;
                    }
                    switch (alt477) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt478=2;
                    alt478 = dfa478.predict(input);
                    switch (alt478) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt479=2;
                    int LA479_0 = input.LA(1);

                    if ( (LA479_0==Asterisk) ) {
                        alt479=1;
                    }
                    else if ( ((LA479_0>=Intersection && LA479_0<=With)||(LA479_0>=For && LA479_0<=Var)||(LA479_0>=As && LA479_0<=Of)||LA479_0==LeftSquareBracket||LA479_0==RULE_DOUBLE||LA479_0==RULE_HEX_INT||LA479_0==RULE_OCTAL_INT||LA479_0==RULE_SCIENTIFIC_INT||LA479_0==RULE_IDENTIFIER||LA479_0==RULE_STRING||LA479_0==RULE_INT) ) {
                        alt479=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 479, 0, input);

                        throw nvae;
                    }
                    switch (alt479) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_101);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt480=2;
                    int LA480_0 = input.LA(1);

                    if ( (LA480_0==Semicolon) ) {
                        alt480=1;
                    }
                    switch (alt480) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_1_1_0=null;
        Token LeftParenthesisKeyword_1_1_2=null;
        Token RightParenthesisKeyword_1_1_4=null;
        Token SemicolonKeyword_1_1_6=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_3_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_1_5_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_152);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt494=4;
            alt494 = dfa494.predict(input);
            switch (alt494) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop482:
                    do {
                        int alt482=2;
                        int LA482_0 = input.LA(1);

                        if ( ((LA482_0>=Protected && LA482_0<=Abstract)||LA482_0==External||(LA482_0>=Private && LA482_0<=Project)||LA482_0==Public||LA482_0==Static||LA482_0==Const) ) {
                            alt482=1;
                        }


                        switch (alt482) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_153);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop482;
                        }
                    } while (true);

                    pushFollow(FOLLOW_154);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt483=2;
                    alt483 = dfa483.predict(input);
                    switch (alt483) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt484=2;
                    int LA484_0 = input.LA(1);

                    if ( (LA484_0==Semicolon) ) {
                        alt484=1;
                    }
                    switch (alt484) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop485:
                    do {
                        int alt485=2;
                        int LA485_0 = input.LA(1);

                        if ( ((LA485_0>=Protected && LA485_0<=Abstract)||LA485_0==External||(LA485_0>=Private && LA485_0<=Project)||LA485_0==Public||LA485_0==Static||LA485_0==Const) ) {
                            alt485=1;
                        }


                        switch (alt485) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_155);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop485;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_104);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                      							
                    }

                    }


                    }


                    }


                    }
                    int alt486=2;
                    int LA486_0 = input.LA(1);

                    if ( (LA486_0==QuestionMark) ) {
                        alt486=1;
                    }
                    switch (alt486) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_1_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(DeclaredOptionalQuestionMarkKeyword_1_1_1_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                              					
                            }

                            }


                            }
                            break;

                    }

                    LeftParenthesisKeyword_1_1_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_1_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_76);
                    FparFormalParameterParserRuleCall_1_1_3_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.start):null), (FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_3());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_4=(Token)match(input,RightParenthesis,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_1_4, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                      			
                    }
                    int alt487=2;
                    alt487 = dfa487.predict(input);
                    switch (alt487) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_106);
                            BodyBlockParserRuleCall_1_1_5_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.start):null), (BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_5());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt488=2;
                    int LA488_0 = input.LA(1);

                    if ( (LA488_0==Semicolon) ) {
                        alt488=1;
                    }
                    switch (alt488) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_1_6, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop489:
                    do {
                        int alt489=2;
                        alt489 = dfa489.predict(input);
                        switch (alt489) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop489;
                        }
                    } while (true);
                    int alt490=2;
                    int LA490_0 = input.LA(1);

                    if ( (LA490_0==LessThanSign) ) {
                        alt490=1;
                    }
                    switch (alt490) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt491=2;
                    alt491 = dfa491.predict(input);
                    switch (alt491) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt492=2;
                    int LA492_0 = input.LA(1);

                    if ( (LA492_0==Asterisk) ) {
                        alt492=1;
                    }
                    else if ( ((LA492_0>=Intersection && LA492_0<=With)||(LA492_0>=For && LA492_0<=Var)||(LA492_0>=As && LA492_0<=Of)||LA492_0==LeftSquareBracket||LA492_0==RULE_DOUBLE||LA492_0==RULE_HEX_INT||LA492_0==RULE_OCTAL_INT||LA492_0==RULE_SCIENTIFIC_INT||LA492_0==RULE_IDENTIFIER||LA492_0==RULE_STRING||LA492_0==RULE_INT) ) {
                        alt492=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 492, 0, input);

                        throw nvae;
                    }
                    switch (alt492) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_101);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_106);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt493=2;
                    int LA493_0 = input.LA(1);

                    if ( (LA493_0==Semicolon) ) {
                        alt493=1;
                    }
                    switch (alt493) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSXParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token DeclaredOptionalQuestionMarkKeyword_3_0=null;
        Token EqualsSignKeyword_5_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_5_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;




        try {
            {
            {
            loop495:
            do {
                int alt495=2;
                alt495 = dfa495.predict(input);
                switch (alt495) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_103);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop495;
                }
            } while (true);
            int alt496=2;
            alt496 = dfa496.predict(input);
            switch (alt496) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_156);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }
            int alt497=2;
            int LA497_0 = input.LA(1);

            if ( (LA497_0==QuestionMark) ) {
                alt497=1;
            }
            switch (alt497) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_3_0=(Token)match(input,QuestionMark,FOLLOW_157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt498=2;
            int LA498_0 = input.LA(1);

            if ( (LA498_0==Colon) ) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    {
                    pushFollow(FOLLOW_158);
                    ColonSepTypeRefParserRuleCall_4=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.start):null), (ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_4()); 
                    }

                    }
                    break;

            }
            int alt499=2;
            int LA499_0 = input.LA(1);

            if ( (LA499_0==EqualsSign) ) {
                alt499=1;
            }
            switch (alt499) {
                case 1 :
                    {
                    EqualsSignKeyword_5_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_5_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_5_1_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionExpressionParserRuleCall_5_1_0!=null?((Token)ExpressionExpressionParserRuleCall_5_1_0.start):null), (ExpressionExpressionParserRuleCall_5_1_0!=null?((Token)ExpressionExpressionParserRuleCall_5_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_5_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_6=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSXParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token DeclaredOptionalQuestionMarkKeyword_3_0=null;
        Token EqualsSignKeyword_5_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_4 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_5_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;




        try {
            {
            {
            loop500:
            do {
                int alt500=2;
                alt500 = dfa500.predict(input);
                switch (alt500) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_103);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop500;
                }
            } while (true);
            int alt501=2;
            alt501 = dfa501.predict(input);
            switch (alt501) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_156);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }
            int alt502=2;
            int LA502_0 = input.LA(1);

            if ( (LA502_0==QuestionMark) ) {
                alt502=1;
            }
            switch (alt502) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_3_0=(Token)match(input,QuestionMark,FOLLOW_157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==Colon) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    {
                    pushFollow(FOLLOW_158);
                    ColonSepTypeRefParserRuleCall_4=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.start):null), (ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_4()); 
                    }

                    }
                    break;

            }
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( (LA504_0==EqualsSign) ) {
                alt504=1;
            }
            switch (alt504) {
                case 1 :
                    {
                    EqualsSignKeyword_5_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_5_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_5_1_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionExpressionParserRuleCall_5_1_0!=null?((Token)ExpressionExpressionParserRuleCall_5_1_0.start):null), (ExpressionExpressionParserRuleCall_5_1_0!=null?((Token)ExpressionExpressionParserRuleCall_5_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_5_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_6=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4FieldDeclaration_return retval = new InternalN4JSXParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSXParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MethodDeclaration_return retval = new InternalN4JSXParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;




        try {
            {
            {
            {
            {
            loop505:
            do {
                int alt505=2;
                alt505 = dfa505.predict(input);
                switch (alt505) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop505;
                }
            } while (true);
            int alt506=2;
            int LA506_0 = input.LA(1);

            if ( (LA506_0==LessThanSign) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    {
                    pushFollow(FOLLOW_105);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt507=2;
            alt507 = dfa507.predict(input);
            switch (alt507) {
                case 1 :
                    {
                    pushFollow(FOLLOW_105);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt508=2;
            int LA508_0 = input.LA(1);

            if ( (LA508_0==Asterisk) ) {
                alt508=1;
            }
            else if ( ((LA508_0>=Intersection && LA508_0<=With)||(LA508_0>=For && LA508_0<=Var)||(LA508_0>=As && LA508_0<=Of)||LA508_0==LeftSquareBracket||LA508_0==RULE_DOUBLE||LA508_0==RULE_HEX_INT||LA508_0==RULE_OCTAL_INT||LA508_0==RULE_SCIENTIFIC_INT||LA508_0==RULE_IDENTIFIER||LA508_0==RULE_STRING||LA508_0==RULE_INT) ) {
                alt508=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 508, 0, input);

                throw nvae;
            }
            switch (alt508) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_101);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt509=2;
            int LA509_0 = input.LA(1);

            if ( (LA509_0==Semicolon) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSXParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;




        try {
            {
            {
            {
            {
            loop510:
            do {
                int alt510=2;
                alt510 = dfa510.predict(input);
                switch (alt510) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop510;
                }
            } while (true);
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==LessThanSign) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    pushFollow(FOLLOW_105);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt512=2;
            alt512 = dfa512.predict(input);
            switch (alt512) {
                case 1 :
                    {
                    pushFollow(FOLLOW_105);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==Asterisk) ) {
                alt513=1;
            }
            else if ( ((LA513_0>=Intersection && LA513_0<=With)||(LA513_0>=For && LA513_0<=Var)||(LA513_0>=As && LA513_0<=Of)||LA513_0==LeftSquareBracket||LA513_0==RULE_DOUBLE||LA513_0==RULE_HEX_INT||LA513_0==RULE_OCTAL_INT||LA513_0==RULE_SCIENTIFIC_INT||LA513_0==RULE_IDENTIFIER||LA513_0==RULE_STRING||LA513_0==RULE_INT) ) {
                alt513=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 513, 0, input);

                throw nvae;
            }
            switch (alt513) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_101);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_106);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt514=2;
            int LA514_0 = input.LA(1);

            if ( (LA514_0==Semicolon) ) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_106);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==Semicolon) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_106);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==Semicolon) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_159);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( (LA517_0==LeftCurlyBracket) && (synpred287_InternalN4JSXParser())) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_159);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt518=2;
            int LA518_0 = input.LA(1);

            if ( (LA518_0==LeftCurlyBracket) && (synpred288_InternalN4JSXParser())) {
                alt518=1;
            }
            switch (alt518) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_160);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt519=2;
            int LA519_0 = input.LA(1);

            if ( (LA519_0==Colon) ) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_159);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            int alt520=2;
            alt520 = dfa520.predict(input);
            switch (alt520) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_160);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt521=2;
            int LA521_0 = input.LA(1);

            if ( (LA521_0==Colon) ) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_159);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            int alt522=2;
            alt522 = dfa522.predict(input);
            switch (alt522) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4GetterDeclaration_return retval = new InternalN4JSXParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            loop523:
            do {
                int alt523=2;
                int LA523_0 = input.LA(1);

                if ( ((LA523_0>=Protected && LA523_0<=Abstract)||LA523_0==External||(LA523_0>=Private && LA523_0<=Project)||LA523_0==Public||LA523_0==Static||LA523_0==Const) ) {
                    alt523=1;
                }


                switch (alt523) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_153);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop523;
                }
            } while (true);

            pushFollow(FOLLOW_154);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt524=2;
            alt524 = dfa524.predict(input);
            switch (alt524) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt525=2;
            int LA525_0 = input.LA(1);

            if ( (LA525_0==Semicolon) ) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            loop526:
            do {
                int alt526=2;
                int LA526_0 = input.LA(1);

                if ( ((LA526_0>=Protected && LA526_0<=Abstract)||LA526_0==External||(LA526_0>=Private && LA526_0<=Project)||LA526_0==Public||LA526_0==Static||LA526_0==Const) ) {
                    alt526=1;
                }


                switch (alt526) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_153);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop526;
                }
            } while (true);

            pushFollow(FOLLOW_154);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt527=2;
            alt527 = dfa527.predict(input);
            switch (alt527) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt528=2;
            int LA528_0 = input.LA(1);

            if ( (LA528_0==Semicolon) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSXParser.ruleGetterHeader_return retval = new InternalN4JSXParser.ruleGetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_3_0=null;
        Token LeftParenthesisKeyword_4=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_6 = null;




        try {
            {
            {
            int alt529=2;
            int LA529_0 = input.LA(1);

            if ( ((LA529_0>=Intersection && LA529_0<=Constructor)||LA529_0==Promisify||LA529_0==Target||LA529_0==Await||LA529_0==Union||LA529_0==This||LA529_0==This_1||(LA529_0>=Type && LA529_0<=Void)||LA529_0==LeftCurlyBracket||LA529_0==Tilde||LA529_0==RULE_IDENTIFIER) ) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    pushFollow(FOLLOW_161);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_104);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }
            int alt530=2;
            int LA530_0 = input.LA(1);

            if ( (LA530_0==QuestionMark) ) {
                alt530=1;
            }
            switch (alt530) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_3_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_4=(Token)match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
              	
            }
            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
              	
            }
            int alt531=2;
            int LA531_0 = input.LA(1);

            if ( (LA531_0==Colon) ) {
                alt531=1;
            }
            switch (alt531) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_6=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_6!=null?((Token)ColonSepTypeRefParserRuleCall_6.start):null), (ColonSepTypeRefParserRuleCall_6!=null?((Token)ColonSepTypeRefParserRuleCall_6.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_GetterHeader_return retval = new InternalN4JSXParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_3_0=null;
        Token LeftParenthesisKeyword_4=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_6 = null;




        try {
            {
            {
            int alt532=2;
            int LA532_0 = input.LA(1);

            if ( ((LA532_0>=Intersection && LA532_0<=Constructor)||LA532_0==Promisify||LA532_0==Target||LA532_0==Await||LA532_0==Union||LA532_0==This||LA532_0==This_1||(LA532_0>=Type && LA532_0<=Void)||LA532_0==LeftCurlyBracket||LA532_0==Tilde||LA532_0==RULE_IDENTIFIER) ) {
                alt532=1;
            }
            switch (alt532) {
                case 1 :
                    {
                    pushFollow(FOLLOW_161);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_104);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }
            int alt533=2;
            int LA533_0 = input.LA(1);

            if ( (LA533_0==QuestionMark) ) {
                alt533=1;
            }
            switch (alt533) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_3_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_4=(Token)match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
              	
            }
            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
              	
            }
            int alt534=2;
            int LA534_0 = input.LA(1);

            if ( (LA534_0==Colon) ) {
                alt534=1;
            }
            switch (alt534) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_6=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_6!=null?((Token)ColonSepTypeRefParserRuleCall_6.start):null), (ColonSepTypeRefParserRuleCall_6!=null?((Token)ColonSepTypeRefParserRuleCall_6.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4SetterDeclaration_return retval = new InternalN4JSXParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        Token SemicolonKeyword_6=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            {
            {
            loop535:
            do {
                int alt535=2;
                int LA535_0 = input.LA(1);

                if ( ((LA535_0>=Protected && LA535_0<=Abstract)||LA535_0==External||(LA535_0>=Private && LA535_0<=Project)||LA535_0==Public||LA535_0==Static||LA535_0==Const) ) {
                    alt535=1;
                }


                switch (alt535) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop535;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              			
            }
            {
            {
            pushFollow(FOLLOW_104);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
              					
            }

            }


            }


            }


            }
            int alt536=2;
            int LA536_0 = input.LA(1);

            if ( (LA536_0==QuestionMark) ) {
                alt536=1;
            }
            switch (alt536) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            FparFormalParameterParserRuleCall_3_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
              	
            }
            int alt537=2;
            alt537 = dfa537.predict(input);
            switch (alt537) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    BodyBlockParserRuleCall_5_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_5());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt538=2;
            int LA538_0 = input.LA(1);

            if ( (LA538_0==Semicolon) ) {
                alt538=1;
            }
            switch (alt538) {
                case 1 :
                    {
                    SemicolonKeyword_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_6, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        Token SemicolonKeyword_6=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            {
            {
            loop539:
            do {
                int alt539=2;
                int LA539_0 = input.LA(1);

                if ( ((LA539_0>=Protected && LA539_0<=Abstract)||LA539_0==External||(LA539_0>=Private && LA539_0<=Project)||LA539_0==Public||LA539_0==Static||LA539_0==Const) ) {
                    alt539=1;
                }


                switch (alt539) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop539;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              			
            }
            {
            {
            pushFollow(FOLLOW_104);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
              					
            }

            }


            }


            }


            }
            int alt540=2;
            int LA540_0 = input.LA(1);

            if ( (LA540_0==QuestionMark) ) {
                alt540=1;
            }
            switch (alt540) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            FparFormalParameterParserRuleCall_3_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
              	
            }
            int alt541=2;
            alt541 = dfa541.predict(input);
            switch (alt541) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    BodyBlockParserRuleCall_5_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_5());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt542=2;
            int LA542_0 = input.LA(1);

            if ( (LA542_0==Semicolon) ) {
                alt542=1;
            }
            switch (alt542) {
                case 1 :
                    {
                    SemicolonKeyword_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_6, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleBindingPattern_return retval = new InternalN4JSXParser.ruleBindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;




        try {
            {
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( (LA543_0==LeftCurlyBracket) ) {
                alt543=1;
            }
            else if ( (LA543_0==LeftSquareBracket) ) {
                alt543=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 543, 0, input);

                throw nvae;
            }
            switch (alt543) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingPattern_return retval = new InternalN4JSXParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;




        try {
            {
            int alt544=2;
            int LA544_0 = input.LA(1);

            if ( (LA544_0==LeftCurlyBracket) ) {
                alt544=1;
            }
            else if ( (LA544_0==LeftSquareBracket) ) {
                alt544=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 544, 0, input);

                throw nvae;
            }
            switch (alt544) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleObjectBindingPattern_return retval = new InternalN4JSXParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt546=2;
            int LA546_0 = input.LA(1);

            if ( ((LA546_0>=Intersection && LA546_0<=With)||(LA546_0>=For && LA546_0<=Var)||(LA546_0>=As && LA546_0<=Of)||(LA546_0>=CommercialAt && LA546_0<=LeftSquareBracket)||LA546_0==RULE_DOUBLE||LA546_0==RULE_HEX_INT||LA546_0==RULE_OCTAL_INT||LA546_0==RULE_SCIENTIFIC_INT||LA546_0==RULE_IDENTIFIER||LA546_0==RULE_STRING||LA546_0==RULE_INT) ) {
                alt546=1;
            }
            switch (alt546) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop545:
                    do {
                        int alt545=2;
                        int LA545_0 = input.LA(1);

                        if ( (LA545_0==Comma) ) {
                            alt545=1;
                        }


                        switch (alt545) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop545;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSXParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt548=2;
            int LA548_0 = input.LA(1);

            if ( ((LA548_0>=Intersection && LA548_0<=With)||(LA548_0>=For && LA548_0<=Var)||(LA548_0>=As && LA548_0<=Of)||(LA548_0>=CommercialAt && LA548_0<=LeftSquareBracket)||LA548_0==RULE_DOUBLE||LA548_0==RULE_HEX_INT||LA548_0==RULE_OCTAL_INT||LA548_0==RULE_SCIENTIFIC_INT||LA548_0==RULE_IDENTIFIER||LA548_0==RULE_STRING||LA548_0==RULE_INT) ) {
                alt548=1;
            }
            switch (alt548) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop547:
                    do {
                        int alt547=2;
                        int LA547_0 = input.LA(1);

                        if ( (LA547_0==Comma) ) {
                            alt547=1;
                        }


                        switch (alt547) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop547;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleArrayBindingPattern_return retval = new InternalN4JSXParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop549:
            do {
                int alt549=2;
                int LA549_0 = input.LA(1);

                if ( (LA549_0==Comma) ) {
                    alt549=1;
                }


                switch (alt549) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_164);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop549;
                }
            } while (true);
            int alt554=2;
            int LA554_0 = input.LA(1);

            if ( ((LA554_0>=Intersection && LA554_0<=Implements)||(LA554_0>=Promisify && LA554_0<=Abstract)||LA554_0==External||(LA554_0>=Private && LA554_0<=Project)||LA554_0==Public||LA554_0==Static||LA554_0==Target||(LA554_0>=Async && LA554_0<=Await)||LA554_0==Union||(LA554_0>=Yield && LA554_0<=This)||LA554_0==From||LA554_0==Type||LA554_0==FullStopFullStopFullStop||(LA554_0>=Get && LA554_0<=Let)||(LA554_0>=Out && LA554_0<=Set)||LA554_0==As||LA554_0==Of||(LA554_0>=CommercialAt && LA554_0<=LeftSquareBracket)||LA554_0==LeftCurlyBracket||LA554_0==RULE_IDENTIFIER) ) {
                alt554=1;
            }
            switch (alt554) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_98);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop551:
                    do {
                        int alt551=2;
                        alt551 = dfa551.predict(input);
                        switch (alt551) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_165); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop550:
                    	    do {
                    	        int alt550=2;
                    	        int LA550_0 = input.LA(1);

                    	        if ( (LA550_0==Comma) ) {
                    	            alt550=1;
                    	        }


                    	        switch (alt550) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_165);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop550;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_98);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop551;
                        }
                    } while (true);
                    int alt553=2;
                    int LA553_0 = input.LA(1);

                    if ( (LA553_0==Comma) ) {
                        alt553=1;
                    }
                    switch (alt553) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              			
                            }
                            loop552:
                            do {
                                int alt552=2;
                                int LA552_0 = input.LA(1);

                                if ( (LA552_0==Comma) ) {
                                    alt552=1;
                                }


                                switch (alt552) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_98);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop552;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSXParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop555:
            do {
                int alt555=2;
                int LA555_0 = input.LA(1);

                if ( (LA555_0==Comma) ) {
                    alt555=1;
                }


                switch (alt555) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_164);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop555;
                }
            } while (true);
            int alt560=2;
            int LA560_0 = input.LA(1);

            if ( ((LA560_0>=Intersection && LA560_0<=Implements)||(LA560_0>=Promisify && LA560_0<=Abstract)||LA560_0==External||(LA560_0>=Private && LA560_0<=Project)||LA560_0==Public||LA560_0==Static||LA560_0==Target||(LA560_0>=Async && LA560_0<=Await)||LA560_0==Union||LA560_0==This||LA560_0==From||LA560_0==Type||LA560_0==FullStopFullStopFullStop||(LA560_0>=Get && LA560_0<=Let)||(LA560_0>=Out && LA560_0<=Set)||LA560_0==As||LA560_0==Of||(LA560_0>=CommercialAt && LA560_0<=LeftSquareBracket)||LA560_0==LeftCurlyBracket||LA560_0==RULE_IDENTIFIER) ) {
                alt560=1;
            }
            switch (alt560) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_98);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop557:
                    do {
                        int alt557=2;
                        alt557 = dfa557.predict(input);
                        switch (alt557) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_165); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop556:
                    	    do {
                    	        int alt556=2;
                    	        int LA556_0 = input.LA(1);

                    	        if ( (LA556_0==Comma) ) {
                    	            alt556=1;
                    	        }


                    	        switch (alt556) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_165);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop556;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_98);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop557;
                        }
                    } while (true);
                    int alt559=2;
                    int LA559_0 = input.LA(1);

                    if ( (LA559_0==Comma) ) {
                        alt559=1;
                    }
                    switch (alt559) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              			
                            }
                            loop558:
                            do {
                                int alt558=2;
                                int LA558_0 = input.LA(1);

                                if ( (LA558_0==Comma) ) {
                                    alt558=1;
                                }


                                switch (alt558) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_98);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop558;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSXParser.ruleBindingProperty_return retval = new InternalN4JSXParser.ruleBindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;




        try {
            {
            int alt561=2;
            alt561 = dfa561.predict(input);
            switch (alt561) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                      						
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingProperty_return retval = new InternalN4JSXParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;




        try {
            {
            int alt562=2;
            alt562 = dfa562.predict(input);
            switch (alt562) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                      						
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.ruleSingleNameBinding_return retval = new InternalN4JSXParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_SingleNameBinding_return retval = new InternalN4JSXParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElement_return retval = new InternalN4JSXParser.ruleBindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;




        try {
            {
            int alt564=2;
            int LA564_0 = input.LA(1);

            if ( (LA564_0==LeftCurlyBracket) && (synpred305_InternalN4JSXParser())) {
                alt564=1;
            }
            else if ( (LA564_0==LeftSquareBracket) && (synpred305_InternalN4JSXParser())) {
                alt564=1;
            }
            else if ( ((LA564_0>=Intersection && LA564_0<=Implements)||(LA564_0>=Promisify && LA564_0<=Abstract)||LA564_0==External||(LA564_0>=Private && LA564_0<=Project)||LA564_0==Public||LA564_0==Static||LA564_0==Target||(LA564_0>=Async && LA564_0<=Await)||LA564_0==Union||(LA564_0>=Yield && LA564_0<=This)||LA564_0==From||LA564_0==Type||(LA564_0>=Get && LA564_0<=Let)||(LA564_0>=Out && LA564_0<=Set)||LA564_0==As||LA564_0==Of||LA564_0==CommercialAt||LA564_0==RULE_IDENTIFIER) ) {
                alt564=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 564, 0, input);

                throw nvae;
            }
            switch (alt564) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0());
                      					
                    }

                    }


                    }


                    }
                    int alt563=2;
                    int LA563_0 = input.LA(1);

                    if ( (LA563_0==EqualsSign) ) {
                        alt563=1;
                    }
                    switch (alt563) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0());
                              			
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElement_return retval = new InternalN4JSXParser.norm1_BindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;




        try {
            {
            int alt566=2;
            int LA566_0 = input.LA(1);

            if ( (LA566_0==LeftCurlyBracket) && (synpred306_InternalN4JSXParser())) {
                alt566=1;
            }
            else if ( (LA566_0==LeftSquareBracket) && (synpred306_InternalN4JSXParser())) {
                alt566=1;
            }
            else if ( ((LA566_0>=Intersection && LA566_0<=Implements)||(LA566_0>=Promisify && LA566_0<=Abstract)||LA566_0==External||(LA566_0>=Private && LA566_0<=Project)||LA566_0==Public||LA566_0==Static||LA566_0==Target||(LA566_0>=Async && LA566_0<=Await)||LA566_0==Union||LA566_0==This||LA566_0==From||LA566_0==Type||(LA566_0>=Get && LA566_0<=Let)||(LA566_0>=Out && LA566_0<=Set)||LA566_0==As||LA566_0==Of||LA566_0==CommercialAt||LA566_0==RULE_IDENTIFIER) ) {
                alt566=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 566, 0, input);

                throw nvae;
            }
            switch (alt566) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0());
                      					
                    }

                    }


                    }


                    }
                    int alt565=2;
                    int LA565_0 = input.LA(1);

                    if ( (LA565_0==EqualsSign) ) {
                        alt565=1;
                    }
                    switch (alt565) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0());
                              			
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingRestElement_return retval = new InternalN4JSXParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt567=2;
            int LA567_0 = input.LA(1);

            if ( (LA567_0==FullStopFullStopFullStop) ) {
                alt567=1;
            }
            switch (alt567) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt569=2;
            int LA569_0 = input.LA(1);

            if ( (LA569_0==LeftCurlyBracket) && (synpred307_InternalN4JSXParser())) {
                alt569=1;
            }
            else if ( (LA569_0==LeftSquareBracket) && (synpred307_InternalN4JSXParser())) {
                alt569=1;
            }
            else if ( ((LA569_0>=Intersection && LA569_0<=Implements)||(LA569_0>=Promisify && LA569_0<=Abstract)||LA569_0==External||(LA569_0>=Private && LA569_0<=Project)||LA569_0==Public||LA569_0==Static||LA569_0==Target||(LA569_0>=Async && LA569_0<=Await)||LA569_0==Union||(LA569_0>=Yield && LA569_0<=This)||LA569_0==From||LA569_0==Type||(LA569_0>=Get && LA569_0<=Let)||(LA569_0>=Out && LA569_0<=Set)||LA569_0==As||LA569_0==Of||LA569_0==CommercialAt||LA569_0==RULE_IDENTIFIER) ) {
                alt569=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 569, 0, input);

                throw nvae;
            }
            switch (alt569) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0());
                      						
                    }

                    }


                    }


                    }
                    int alt568=2;
                    int LA568_0 = input.LA(1);

                    if ( (LA568_0==EqualsSign) ) {
                        alt568=1;
                    }
                    switch (alt568) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingRestElement_return retval = new InternalN4JSXParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt570=2;
            int LA570_0 = input.LA(1);

            if ( (LA570_0==FullStopFullStopFullStop) ) {
                alt570=1;
            }
            switch (alt570) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt572=2;
            int LA572_0 = input.LA(1);

            if ( (LA572_0==LeftCurlyBracket) && (synpred308_InternalN4JSXParser())) {
                alt572=1;
            }
            else if ( (LA572_0==LeftSquareBracket) && (synpred308_InternalN4JSXParser())) {
                alt572=1;
            }
            else if ( ((LA572_0>=Intersection && LA572_0<=Implements)||(LA572_0>=Promisify && LA572_0<=Abstract)||LA572_0==External||(LA572_0>=Private && LA572_0<=Project)||LA572_0==Public||LA572_0==Static||LA572_0==Target||(LA572_0>=Async && LA572_0<=Await)||LA572_0==Union||LA572_0==This||LA572_0==From||LA572_0==Type||(LA572_0>=Get && LA572_0<=Let)||(LA572_0>=Out && LA572_0<=Set)||LA572_0==As||LA572_0==Of||LA572_0==CommercialAt||LA572_0==RULE_IDENTIFIER) ) {
                alt572=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 572, 0, input);

                throw nvae;
            }
            switch (alt572) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_16);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0());
                      						
                    }

                    }


                    }


                    }
                    int alt571=2;
                    int LA571_0 = input.LA(1);

                    if ( (LA571_0==EqualsSign) ) {
                        alt571=1;
                    }
                    switch (alt571) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSXParser.ruleElision_return retval = new InternalN4JSXParser.ruleElision_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;



        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;




        try {
            {
            int alt573=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt573=1;
                }
                break;
            case RULE_STRING:
                {
                alt573=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt573=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt573=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 573, 0, input);

                throw nvae;
            }

            switch (alt573) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_116);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                      				
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;




        try {
            {
            int alt574=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt574=1;
                }
                break;
            case RULE_STRING:
                {
                alt574=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt574=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt574=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 574, 0, input);

                throw nvae;
            }

            switch (alt574) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_116);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                      				
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRef_return retval = new InternalN4JSXParser.ruleTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall = null;




        try {
            {
            pushFollow(FOLLOW_2);
            UnionTypeExpressionParserRuleCall=ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.start):null), (UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.stop):null), grammarAccess.getTypeRefAccess().getUnionTypeExpressionParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpression_return ruleUnionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpression_return retval = new InternalN4JSXParser.ruleUnionTypeExpression_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSXParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_128);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt576=2;
            int LA576_0 = input.LA(1);

            if ( (LA576_0==VerticalLine) ) {
                alt576=1;
            }
            switch (alt576) {
                case 1 :
                    {
                    int cnt575=0;
                    loop575:
                    do {
                        int alt575=2;
                        int LA575_0 = input.LA(1);

                        if ( (LA575_0==VerticalLine) ) {
                            alt575=1;
                        }


                        switch (alt575) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(VerticalLineKeyword_1_1_0, grammarAccess.getUnionTypeExpressionAccess().getVerticalLineKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_128);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt575 >= 1 ) break loop575;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(575, input);
                                throw eee;
                        }
                        cnt575++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSXParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_126);
            PrimaryTypeExpressionParserRuleCall_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.start):null), (PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0()); 
            }
            int alt578=2;
            int LA578_0 = input.LA(1);

            if ( (LA578_0==Ampersand) ) {
                alt578=1;
            }
            switch (alt578) {
                case 1 :
                    {
                    int cnt577=0;
                    loop577:
                    do {
                        int alt577=2;
                        int LA577_0 = input.LA(1);

                        if ( (LA577_0==Ampersand) ) {
                            alt577=1;
                        }


                        switch (alt577) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_126);
                    	    TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt577 >= 1 ) break loop577;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(577, input);
                                throw eee;
                        }
                        cnt577++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryTypeExpression_return retval = new InternalN4JSXParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_1=null;
        Token RightParenthesisKeyword_0_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_0_4=null;
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_0_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;




        try {
            {
            int alt579=4;
            alt579 = dfa579.predict(input);
            switch (alt579) {
                case 1 :
                    {
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(LeftParenthesisKeyword_0_0_0_1, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_0_0_0_1());
                      				
                    }
                    pushFollow(FOLLOW_76);
                    TAnonymousFormalParameterListParserRuleCall_0_0_0_2=ruleTAnonymousFormalParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_0_2()); 
                    }
                    RightParenthesisKeyword_0_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(RightParenthesisKeyword_0_0_0_3, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_0_0_0_3());
                      				
                    }
                    EqualsSignGreaterThanSignKeyword_0_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(EqualsSignGreaterThanSignKeyword_0_0_0_4, grammarAccess.getPrimaryTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_0_4());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getReturnTypeRefAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                      		
                    }
                    pushFollow(FOLLOW_76);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBogusTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBogusTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRef_return ruleBogusTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRef_return retval = new InternalN4JSXParser.ruleBogusTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall = null;




        try {
            {
            pushFollow(FOLLOW_2);
            TypeRefWithModifiersParserRuleCall=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.start):null), (TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.stop):null), grammarAccess.getBogusTypeRefAccess().getTypeRefWithModifiersParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);

        Token FollowedByQuestionMarkQuestionMarkKeyword_1_0=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_131);
            TypeRefWithoutModifiersParserRuleCall_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithoutModifiersParserRuleCall_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0()); 
            }
            int alt580=2;
            alt580 = dfa580.predict(input);
            switch (alt580) {
                case 1 :
                    {
                    {
                    FollowedByQuestionMarkQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(FollowedByQuestionMarkQuestionMarkKeyword_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);

        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;




        try {
            {
            int alt583=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt583=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt583=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt583=3;
                }
                break;
            case Union:
                {
                alt583=4;
                }
                break;
            case Intersection:
                {
                alt583=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 583, 0, input);

                throw nvae;
            }

            switch (alt583) {
                case 1 :
                    {
                    {
                    int alt581=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt581=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA581_4 = input.LA(3);

                            if ( (LA581_4==Promisify||LA581_4==Target||LA581_4==Await||LA581_4==This||LA581_4==Void||LA581_4==RULE_IDENTIFIER) ) {
                                alt581=1;
                            }
                            else if ( (LA581_4==This_1) ) {
                                alt581=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 581, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA581_5 = input.LA(3);

                            if ( (LA581_5==This_1) ) {
                                alt581=2;
                            }
                            else if ( (LA581_5==Promisify||LA581_5==Target||LA581_5==Await||LA581_5==This||LA581_5==Void||LA581_5==RULE_IDENTIFIER) ) {
                                alt581=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 581, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt581=2;
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt581=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 581, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt581=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 581, 0, input);

                        throw nvae;
                    }

                    switch (alt581) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_48);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }

                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_48);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt582=2;
                    alt582 = dfa582.predict(input);
                    switch (alt582) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;




        try {
            {
            int alt584=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt584=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt584=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt584=3;
                }
                break;
            case Union:
                {
                alt584=4;
                }
                break;
            case Intersection:
                {
                alt584=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 584, 0, input);

                throw nvae;
            }

            switch (alt584) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefForCast() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefForCast_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefForCast_return ruleTypeRefForCast() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefForCast_return retval = new InternalN4JSXParser.ruleTypeRefForCast_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_4 = null;

        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_5 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_7 = null;




        try {
            {
            int alt585=8;
            alt585 = dfa585.predict(input);
            switch (alt585) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefForCastAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefParserRuleCall_2=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.start):null), (ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.start):null), (TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.stop):null), grammarAccess.getTypeRefForCastAccess().getTypeTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.start):null), (FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_5=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.start):null), (ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.stop):null), grammarAccess.getTypeRefForCastAccess().getArrowFunctionTypeExpressionParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_6=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.start):null), (UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.stop):null), grammarAccess.getTypeRefForCastAccess().getUnionTypeExpressionOLDParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_7=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.start):null), (IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.stop):null), grammarAccess.getTypeRefForCastAccess().getIntersectionTypeExpressionOLDParserRuleCall_7()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_2 = null;




        try {
            {
            int alt586=3;
            int LA586_0 = input.LA(1);

            if ( (LA586_0==Promisify||LA586_0==Target||LA586_0==Await||LA586_0==This||LA586_0==Void||LA586_0==RULE_IDENTIFIER) ) {
                alt586=1;
            }
            else if ( (LA586_0==This_1) ) {
                alt586=2;
            }
            else if ( (LA586_0==QuestionMark) && (synpred312_InternalN4JSXParser())) {
                alt586=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 586, 0, input);

                throw nvae;
            }
            switch (alt586) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.start):null), (WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRef_return retval = new InternalN4JSXParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;




        try {
            {
            int alt587=2;
            int LA587_0 = input.LA(1);

            if ( (LA587_0==This_1) ) {
                alt587=1;
            }
            else if ( (LA587_0==Tilde) ) {
                alt587=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 587, 0, input);

                throw nvae;
            }
            switch (alt587) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefNominal_return retval = new InternalN4JSXParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;



        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefStructural_return retval = new InternalN4JSXParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_167);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0());
              			
            }

            }


            }

            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
              	
            }
            int alt588=2;
            int LA588_0 = input.LA(1);

            if ( (LA588_0==With) ) {
                int LA588_1 = input.LA(2);

                if ( (LA588_1==LeftCurlyBracket) ) {
                    alt588=1;
                }
            }
            switch (alt588) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token ColonKeyword_8_0=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_8_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt589=2;
            int LA589_0 = input.LA(1);

            if ( (LA589_0==CommercialAt) ) {
                alt589=1;
            }
            switch (alt589) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                      		
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                      		
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_76);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3());
                      				
                    }

                    }


                    }

                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                      		
                    }

                    }
                    break;

            }

            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
              	
            }
            int alt591=2;
            int LA591_0 = input.LA(1);

            if ( (LA591_0==LessThanSign) ) {
                alt591=1;
            }
            switch (alt591) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1());
                      				
                    }

                    }


                    }
                    loop590:
                    do {
                        int alt590=2;
                        int LA590_0 = input.LA(1);

                        if ( (LA590_0==Comma) ) {
                            alt590=1;
                        }


                        switch (alt590) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop590;
                        }
                    } while (true);

                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                      		
                    }

                    }
                    break;

            }

            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
              	
            }
            pushFollow(FOLLOW_76);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
              	
            }
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==Colon) ) {
                alt592=1;
            }
            switch (alt592) {
                case 1 :
                    {
                    ColonKeyword_8_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_8_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getColonKeyword_8_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    ReturnTypeRefTypeRefParserRuleCall_8_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getReturnTypeRefAssignment_8_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token EqualsSignGreaterThanSignKeyword_4=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_1());
              	
            }
            pushFollow(FOLLOW_76);
            TAnonymousFormalParameterListParserRuleCall_2=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.start):null), (TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_3());
              	
            }
            EqualsSignGreaterThanSignKeyword_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(EqualsSignGreaterThanSignKeyword_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;




        try {
            {
            int alt594=2;
            int LA594_0 = input.LA(1);

            if ( ((LA594_0>=Intersection && LA594_0<=Implements)||(LA594_0>=Promisify && LA594_0<=Abstract)||LA594_0==External||(LA594_0>=Private && LA594_0<=Project)||LA594_0==Public||LA594_0==Static||LA594_0==Target||(LA594_0>=Async && LA594_0<=Await)||LA594_0==Union||(LA594_0>=Yield && LA594_0<=This)||LA594_0==From||LA594_0==This_1||(LA594_0>=Type && LA594_0<=Void)||LA594_0==FullStopFullStopFullStop||(LA594_0>=Get && LA594_0<=Let)||(LA594_0>=Out && LA594_0<=Set)||LA594_0==As||LA594_0==Of||LA594_0==LeftParenthesis||LA594_0==LeftSquareBracket||LA594_0==LeftCurlyBracket||LA594_0==Tilde||LA594_0==RULE_IDENTIFIER) ) {
                alt594=1;
            }
            switch (alt594) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0());
                      			
                    }

                    }


                    }
                    loop593:
                    do {
                        int alt593=2;
                        int LA593_0 = input.LA(1);

                        if ( (LA593_0==Comma) ) {
                            alt593=1;
                        }


                        switch (alt593) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_174); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      			announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	      		
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1());
                    	      				
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop593;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        Token ColonKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleDefaultFormalParameter_return DefaultFormalParameterParserRuleCall_3 = null;




        try {
            {
            {
            int alt595=2;
            int LA595_0 = input.LA(1);

            if ( (LA595_0==FullStopFullStopFullStop) ) {
                alt595=1;
            }
            switch (alt595) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt596=2;
            alt596 = dfa596.predict(input);
            switch (alt596) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_93);
                    NameBindingIdentifierParserRuleCall_1_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_1=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_1, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1());
                      		
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_74);
            TypeRefTypeRefParserRuleCall_2_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.start):null), (TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_2());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            DefaultFormalParameterParserRuleCall_3=ruleDefaultFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefaultFormalParameterParserRuleCall_3!=null?((Token)DefaultFormalParameterParserRuleCall_3.start):null), (DefaultFormalParameterParserRuleCall_3!=null?((Token)DefaultFormalParameterParserRuleCall_3.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleDefaultFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultFormalParameter_return ruleDefaultFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultFormalParameter_return retval = new InternalN4JSXParser.ruleDefaultFormalParameter_return();
        retval.start = input.LT(1);

        Token HasInitializerAssignmentEqualsSignKeyword_0_0=null;
        InternalN4JSXParser.ruleTypeReferenceName_return AstInitializerTypeReferenceNameParserRuleCall_1_0 = null;




        try {
            {
            int alt598=2;
            int LA598_0 = input.LA(1);

            if ( (LA598_0==EqualsSign) ) {
                alt598=1;
            }
            switch (alt598) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_0_0=(Token)match(input,EqualsSign,FOLLOW_176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(HasInitializerAssignmentEqualsSignKeyword_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                      			
                    }

                    }


                    }
                    int alt597=2;
                    int LA597_0 = input.LA(1);

                    if ( (LA597_0==Promisify||LA597_0==Target||LA597_0==Await||LA597_0==This||LA597_0==Void||LA597_0==RULE_IDENTIFIER) ) {
                        alt597=1;
                    }
                    switch (alt597) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            AstInitializerTypeReferenceNameParserRuleCall_1_0=ruleTypeReferenceName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce((AstInitializerTypeReferenceNameParserRuleCall_1_0!=null?((Token)AstInitializerTypeReferenceNameParserRuleCall_1_0.start):null), (AstInitializerTypeReferenceNameParserRuleCall_1_0!=null?((Token)AstInitializerTypeReferenceNameParserRuleCall_1_0.stop):null), grammarAccess.getDefaultFormalParameterAccess().getAstInitializerAssignment_1());
                              			
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;




        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
              	
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
              			
            }

            }


            }
            loop599:
            do {
                int alt599=2;
                int LA599_0 = input.LA(1);

                if ( (LA599_0==Comma) ) {
                    alt599=1;
                }


                switch (alt599) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop599;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;




        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
              	
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
              			
            }

            }


            }
            loop600:
            do {
                int alt600=2;
                int LA600_0 = input.LA(1);

                if ( (LA600_0==Comma) ) {
                    alt600=1;
                }


                switch (alt600) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop600;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRef_return retval = new InternalN4JSXParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;




        try {
            {
            int alt601=2;
            int LA601_0 = input.LA(1);

            if ( (LA601_0==Promisify||LA601_0==Target||LA601_0==Await||LA601_0==This||LA601_0==Void||LA601_0==RULE_IDENTIFIER) ) {
                alt601=1;
            }
            else if ( (LA601_0==Tilde) ) {
                alt601=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 601, 0, input);

                throw nvae;
            }
            switch (alt601) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_1_0=null;
        Token CommaKeyword_1_2_0=null;
        Token GreaterThanSignKeyword_1_3=null;
        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_2_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_178);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeAssignment_0());
              			
            }

            }


            }
            int alt603=2;
            alt603 = dfa603.predict(input);
            switch (alt603) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_1_0=(Token)match(input,LessThanSign,FOLLOW_179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LessThanSignKeyword_1_0, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_1());
                      				
                    }

                    }


                    }
                    loop602:
                    do {
                        int alt602=2;
                        int LA602_0 = input.LA(1);

                        if ( (LA602_0==Comma) ) {
                            alt602=1;
                        }


                        switch (alt602) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_2_0=(Token)match(input,Comma,FOLLOW_179); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_2_0, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_1_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_2_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop602;
                        }
                    } while (true);

                    GreaterThanSignKeyword_1_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_1_3, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayTypeRef_return ruleArrayTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleArrayTypeRef_return retval = new InternalN4JSXParser.ruleArrayTypeRef_return();
        retval.start = input.LT(1);

        Token ArrayTypeLiteralLeftSquareBracketKeyword_0_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            ArrayTypeLiteralLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ArrayTypeLiteralLeftSquareBracketKeyword_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_116);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getArrayTypeRefAccess().getTypeArgsAssignment_1());
              			
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_2_0=null;
        Token CommaKeyword_2_2_0=null;
        Token GreaterThanSignKeyword_2_3=null;
        Token WithKeyword_3_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_2_1_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_3_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_148);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_180);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeAssignment_1());
              			
            }

            }


            }
            int alt605=2;
            alt605 = dfa605.predict(input);
            switch (alt605) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_2_0=(Token)match(input,LessThanSign,FOLLOW_179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LessThanSignKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_1());
                      				
                    }

                    }


                    }
                    loop604:
                    do {
                        int alt604=2;
                        int LA604_0 = input.LA(1);

                        if ( (LA604_0==Comma) ) {
                            alt604=1;
                        }


                        switch (alt604) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_2_0=(Token)match(input,Comma,FOLLOW_179); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_2_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_2_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop604;
                        }
                    } while (true);

                    GreaterThanSignKeyword_2_3=(Token)match(input,GreaterThanSign,FOLLOW_168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_2_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3());
                      		
                    }

                    }
                    break;

            }
            int alt606=2;
            int LA606_0 = input.LA(1);

            if ( (LA606_0==With) ) {
                int LA606_1 = input.LA(2);

                if ( (LA606_1==LeftCurlyBracket) ) {
                    alt606=1;
                }
            }
            switch (alt606) {
                case 1 :
                    {
                    WithKeyword_3_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(WithKeyword_3_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_3_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.start):null), (TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMemberList_return retval = new InternalN4JSXParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            loop608:
            do {
                int alt608=2;
                int LA608_0 = input.LA(1);

                if ( ((LA608_0>=Intersection && LA608_0<=With)||(LA608_0>=For && LA608_0<=Var)||(LA608_0>=As && LA608_0<=Of)||LA608_0==LessThanSign||LA608_0==RULE_IDENTIFIER) ) {
                    alt608=1;
                }


                switch (alt608) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_182);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0());
            	      				
            	    }

            	    }


            	    }
            	    int alt607=3;
            	    int LA607_0 = input.LA(1);

            	    if ( (LA607_0==Semicolon) ) {
            	        alt607=1;
            	    }
            	    else if ( (LA607_0==Comma) ) {
            	        alt607=2;
            	    }
            	    switch (alt607) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_181); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	              			
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_181); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	              			
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop608;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMember_return retval = new InternalN4JSXParser.ruleTStructMember_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;




        try {
            {
            int alt609=4;
            alt609 = dfa609.predict(input);
            switch (alt609) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMethod_return retval = new InternalN4JSXParser.ruleTStructMethod_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0_0_1_0=null;
        Token CommaKeyword_0_0_1_2_0=null;
        Token GreaterThanSignKeyword_0_0_1_3=null;
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            {
            {
            int alt611=2;
            int LA611_0 = input.LA(1);

            if ( (LA611_0==LessThanSign) ) {
                alt611=1;
            }
            switch (alt611) {
                case 1 :
                    {
                    LessThanSignKeyword_0_0_1_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(LessThanSignKeyword_0_0_1_0, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0());
                      				
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeVarsTypeVariableParserRuleCall_0_0_1_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_1());
                      						
                    }

                    }


                    }
                    loop610:
                    do {
                        int alt610=2;
                        int LA610_0 = input.LA(1);

                        if ( (LA610_0==Comma) ) {
                            alt610=1;
                        }


                        switch (alt610) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_0_1_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce(CommaKeyword_0_0_1_2_0, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      								announce((TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_2_1());
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop610;
                        }
                    } while (true);

                    GreaterThanSignKeyword_0_0_1_3=(Token)match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(GreaterThanSignKeyword_0_0_1_3, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3());
                      				
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2());
              					
            }

            }


            }

            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
              			
            }

            }


            }

            pushFollow(FOLLOW_76);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
              	
            }
            int alt612=2;
            int LA612_0 = input.LA(1);

            if ( (LA612_0==Colon) ) {
                alt612=1;
            }
            switch (alt612) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_3_0, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructMethodAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSXParser.ruleTStructField_return retval = new InternalN4JSXParser.ruleTStructField_return();
        retval.start = input.LT(1);

        Token OptionalQuestionMarkKeyword_1_0=null;
        Token ColonKeyword_2_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_183);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0());
              			
            }

            }


            }
            int alt613=2;
            int LA613_0 = input.LA(1);

            if ( (LA613_0==QuestionMark) ) {
                alt613=1;
            }
            switch (alt613) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt614=2;
            int LA614_0 = input.LA(1);

            if ( (LA614_0==Colon) ) {
                alt614=1;
            }
            switch (alt614) {
                case 1 :
                    {
                    ColonKeyword_2_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_2_0, grammarAccess.getTStructFieldAccess().getColonKeyword_2_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefTypeRefParserRuleCall_2_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TypeRefTypeRefParserRuleCall_2_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_1_0.start):null), (TypeRefTypeRefParserRuleCall_2_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTStructFieldAccess().getTypeRefAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructGetter_return retval = new InternalN4JSXParser.ruleTStructGetter_return();
        retval.start = input.LT(1);

        Token GetKeyword_0_0_1=null;
        Token OptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_3=null;
        Token ColonKeyword_4_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_4_1_0 = null;




        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_104);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }
            int alt615=2;
            int LA615_0 = input.LA(1);

            if ( (LA615_0==QuestionMark) ) {
                alt615=1;
            }
            switch (alt615) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
              	
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
              	
            }
            int alt616=2;
            int LA616_0 = input.LA(1);

            if ( (LA616_0==Colon) ) {
                alt616=1;
            }
            switch (alt616) {
                case 1 :
                    {
                    ColonKeyword_4_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_4_0, grammarAccess.getTStructGetterAccess().getColonKeyword_4_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_4_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredTypeRefTypeRefParserRuleCall_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_4_1_0.stop):null), grammarAccess.getTStructGetterAccess().getDeclaredTypeRefAssignment_4_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructSetter_return retval = new InternalN4JSXParser.ruleTStructSetter_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token OptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_3_0 = null;




        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_104);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }
            int alt617=2;
            int LA617_0 = input.LA(1);

            if ( (LA617_0==QuestionMark) ) {
                alt617=1;
            }
            switch (alt617) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_76);
            FparTAnonymousFormalParameterParserRuleCall_3_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparTAnonymousFormalParameterParserRuleCall_3_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_3_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_3_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;



        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
              	
            }
            int alt618=3;
            int LA618_0 = input.LA(1);

            if ( (LA618_0==Tilde) ) {
                alt618=1;
            }
            else if ( (LA618_0==RULE_STRUCTMODSUFFIX) ) {
                alt618=2;
            }
            switch (alt618) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword=null;



        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);

        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;




        try {
            {
            {
            int alt619=2;
            int LA619_0 = input.LA(1);

            if ( (LA619_0==Type) ) {
                alt619=1;
            }
            else if ( (LA619_0==Constructor) ) {
                alt619=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 619, 0, input);

                throw nvae;
            }
            switch (alt619) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_12);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3());
              			
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgument_return retval = new InternalN4JSXParser.ruleTypeArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_2 = null;




        try {
            {
            int alt620=3;
            int LA620_0 = input.LA(1);

            if ( (LA620_0==QuestionMark) && (synpred322_InternalN4JSXParser())) {
                alt620=1;
            }
            else if ( (LA620_0==Out||LA620_0==In) ) {
                alt620=2;
            }
            else if ( ((LA620_0>=Intersection && LA620_0<=Constructor)||LA620_0==Promisify||LA620_0==Target||LA620_0==Await||LA620_0==Union||LA620_0==This||LA620_0==This_1||(LA620_0>=Type && LA620_0<=Void)||LA620_0==LeftParenthesis||LA620_0==LeftSquareBracket||LA620_0==LeftCurlyBracket||LA620_0==Tilde||LA620_0==RULE_IDENTIFIER) ) {
                alt620=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 620, 0, input);

                throw nvae;
            }
            switch (alt620) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.start):null), (TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSXParser.ruleWildcard_return retval = new InternalN4JSXParser.ruleWildcard_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1());
              			
            }

            }


            }
            int alt621=3;
            int LA621_0 = input.LA(1);

            if ( (LA621_0==Extends) ) {
                alt621=1;
            }
            else if ( (LA621_0==Super) ) {
                alt621=2;
            }
            switch (alt621) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredUpperBoundAssignment_1_0_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SuperKeyword_1_1_0, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredLowerBoundAssignment_1_1_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSXParser.ruleWildcardNewNotation_return retval = new InternalN4JSXParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);

        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;




        try {
            {
            int alt622=2;
            int LA622_0 = input.LA(1);

            if ( (LA622_0==Out) ) {
                alt622=1;
            }
            else if ( (LA622_0==In) ) {
                alt622=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 622, 0, input);

                throw nvae;
            }
            switch (alt622) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifier_return retval = new InternalN4JSXParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1_0=null;



        try {
            {
            int alt623=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt623=1;
                }
                break;
            case Yield:
                {
                alt623=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt623=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 623, 0, input);

                throw nvae;
            }

            switch (alt623) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifier_return retval = new InternalN4JSXParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);



        try {
            {
            int alt624=2;
            int LA624_0 = input.LA(1);

            if ( (LA624_0==RULE_IDENTIFIER) ) {
                alt624=1;
            }
            else if ( ((LA624_0>=Intersection && LA624_0<=Implements)||(LA624_0>=Promisify && LA624_0<=Abstract)||LA624_0==External||(LA624_0>=Private && LA624_0<=Project)||LA624_0==Public||LA624_0==Static||LA624_0==Target||(LA624_0>=Async && LA624_0<=Await)||LA624_0==Union||LA624_0==This||LA624_0==From||LA624_0==Type||(LA624_0>=Get && LA624_0<=Let)||(LA624_0>=Out && LA624_0<=Set)||LA624_0==As||LA624_0==Of) ) {
                alt624=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 624, 0, input);

                throw nvae;
            }
            switch (alt624) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierName_return retval = new InternalN4JSXParser.ruleIdentifierName_return();
        retval.start = input.LT(1);



        try {
            {
            int alt625=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt625=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt625=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt625=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 625, 0, input);

                throw nvae;
            }

            switch (alt625) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;



        try {
            {
            int alt626=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt626=1;
                }
                break;
            case Case:
                {
                alt626=2;
                }
                break;
            case Catch:
                {
                alt626=3;
                }
                break;
            case Class:
                {
                alt626=4;
                }
                break;
            case Const:
                {
                alt626=5;
                }
                break;
            case Continue:
                {
                alt626=6;
                }
                break;
            case Debugger:
                {
                alt626=7;
                }
                break;
            case Default:
                {
                alt626=8;
                }
                break;
            case Delete:
                {
                alt626=9;
                }
                break;
            case Do:
                {
                alt626=10;
                }
                break;
            case Else:
                {
                alt626=11;
                }
                break;
            case Export:
                {
                alt626=12;
                }
                break;
            case Extends:
                {
                alt626=13;
                }
                break;
            case Finally:
                {
                alt626=14;
                }
                break;
            case For:
                {
                alt626=15;
                }
                break;
            case Function:
                {
                alt626=16;
                }
                break;
            case If:
                {
                alt626=17;
                }
                break;
            case Import:
                {
                alt626=18;
                }
                break;
            case In:
                {
                alt626=19;
                }
                break;
            case Instanceof:
                {
                alt626=20;
                }
                break;
            case New:
                {
                alt626=21;
                }
                break;
            case Return:
                {
                alt626=22;
                }
                break;
            case Super:
                {
                alt626=23;
                }
                break;
            case Switch:
                {
                alt626=24;
                }
                break;
            case This_1:
                {
                alt626=25;
                }
                break;
            case Throw:
                {
                alt626=26;
                }
                break;
            case Try:
                {
                alt626=27;
                }
                break;
            case Typeof:
                {
                alt626=28;
                }
                break;
            case Var:
                {
                alt626=29;
                }
                break;
            case Void:
                {
                alt626=30;
                }
                break;
            case While:
                {
                alt626=31;
                }
                break;
            case With:
                {
                alt626=32;
                }
                break;
            case Yield:
                {
                alt626=33;
                }
                break;
            case Null:
                {
                alt626=34;
                }
                break;
            case True:
                {
                alt626=35;
                }
                break;
            case False:
                {
                alt626=36;
                }
                break;
            case Enum:
                {
                alt626=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 626, 0, input);

                throw nvae;
            }

            switch (alt626) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                      	
                    }

                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                      	
                    }

                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                      	
                    }

                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                      	
                    }

                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                      	
                    }

                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                      	
                    }

                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                      	
                    }

                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                      	
                    }

                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                      	
                    }

                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14());
                      	
                    }

                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                      	
                    }

                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                      	
                    }

                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                      	
                    }

                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18());
                      	
                    }

                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                      	
                    }

                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                      	
                    }

                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                      	
                    }

                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                      	
                    }

                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                      	
                    }

                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                      	
                    }

                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                      	
                    }

                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                      	
                    }

                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                      	
                    }

                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                      	
                    }

                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                      	
                    }

                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                      	
                    }

                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                      	
                    }

                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                      	
                    }

                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                      	
                    }

                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                      	
                    }

                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                      	
                    }

                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                      	
                    }

                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;



        try {
            {
            int alt627=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt627=1;
                }
                break;
            case Set:
                {
                alt627=2;
                }
                break;
            case Let:
                {
                alt627=3;
                }
                break;
            case Project:
                {
                alt627=4;
                }
                break;
            case External:
                {
                alt627=5;
                }
                break;
            case Abstract:
                {
                alt627=6;
                }
                break;
            case Static:
                {
                alt627=7;
                }
                break;
            case As:
                {
                alt627=8;
                }
                break;
            case From:
                {
                alt627=9;
                }
                break;
            case Constructor:
                {
                alt627=10;
                }
                break;
            case Of:
                {
                alt627=11;
                }
                break;
            case Target:
                {
                alt627=12;
                }
                break;
            case Type:
                {
                alt627=13;
                }
                break;
            case Union:
                {
                alt627=14;
                }
                break;
            case Intersection:
                {
                alt627=15;
                }
                break;
            case This:
                {
                alt627=16;
                }
                break;
            case Promisify:
                {
                alt627=17;
                }
                break;
            case Await:
                {
                alt627=18;
                }
                break;
            case Async:
                {
                alt627=19;
                }
                break;
            case Implements:
                {
                alt627=20;
                }
                break;
            case Interface:
                {
                alt627=21;
                }
                break;
            case Private:
                {
                alt627=22;
                }
                break;
            case Protected:
                {
                alt627=23;
                }
                break;
            case Public:
                {
                alt627=24;
                }
                break;
            case Out:
                {
                alt627=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 627, 0, input);

                throw nvae;
            }

            switch (alt627) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                      	
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                      	
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                      	
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                      	
                    }

                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                      	
                    }

                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                      	
                    }

                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                      	
                    }

                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                      	
                    }

                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                      	
                    }

                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                      	
                    }

                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                      	
                    }

                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                      	
                    }

                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                      	
                    }

                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                      	
                    }

                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                      	
                    }

                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                      	
                    }

                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                      	
                    }

                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                      	
                    }

                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                      	
                    }

                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                      	
                    }

                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;

        try {
            {
            int alt628=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt628=1;
                }
                break;
            case Const:
                {
                alt628=2;
                }
                break;
            case Let:
                {
                alt628=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 628, 0, input);

                throw nvae;
            }

            switch (alt628) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt629=2;
            int LA629_0 = input.LA(1);

            if ( (LA629_0==PlusSignPlusSign) ) {
                alt629=1;
            }
            else if ( (LA629_0==HyphenMinusHyphenMinus) ) {
                alt629=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 629, 0, input);

                throw nvae;
            }
            switch (alt629) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;

        try {
            {
            int alt630=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt630=1;
                }
                break;
            case Void:
                {
                alt630=2;
                }
                break;
            case Typeof:
                {
                alt630=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt630=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt630=5;
                }
                break;
            case PlusSign:
                {
                alt630=6;
                }
                break;
            case HyphenMinus:
                {
                alt630=7;
                }
                break;
            case Tilde:
                {
                alt630=8;
                }
                break;
            case ExclamationMark:
                {
                alt630=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 630, 0, input);

                throw nvae;
            }

            switch (alt630) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                      		
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                      		
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                      		
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                      		
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                      		
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;

        try {
            {
            int alt631=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt631=1;
                }
                break;
            case Solidus:
                {
                alt631=2;
                }
                break;
            case PercentSign:
                {
                alt631=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 631, 0, input);

                throw nvae;
            }

            switch (alt631) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt632=2;
            int LA632_0 = input.LA(1);

            if ( (LA632_0==PlusSign) ) {
                alt632=1;
            }
            else if ( (LA632_0==HyphenMinus) ) {
                alt632=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 632, 0, input);

                throw nvae;
            }
            switch (alt632) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;

        try {
            {
            int alt633=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt633=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt633=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt633=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt633=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 633, 0, input);

                throw nvae;
            }

            switch (alt633) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;

        try {
            {
            int alt634=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt634=1;
                }
                break;
            case Project:
                {
                alt634=2;
                }
                break;
            case Protected:
                {
                alt634=3;
                }
                break;
            case Public:
                {
                alt634=4;
                }
                break;
            case External:
                {
                alt634=5;
                }
                break;
            case Abstract:
                {
                alt634=6;
                }
                break;
            case Static:
                {
                alt634=7;
                }
                break;
            case Const:
                {
                alt634=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 634, 0, input);

                throw nvae;
            }

            switch (alt634) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                      		
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                      		
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                      		
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                      		
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred2_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred3_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred4_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop635:
        do {
            int alt635=2;
            int LA635_0 = input.LA(1);

            if ( ((LA635_0>=Protected && LA635_0<=Abstract)||LA635_0==External||(LA635_0>=Private && LA635_0<=Project)||LA635_0==Public||LA635_0==Static||LA635_0==Const) ) {
                alt635=1;
            }


            switch (alt635) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop635;
            }
        } while (true);

        match(input,Class,FOLLOW_187); if (state.failed) return ;
        int alt636=2;
        int LA636_0 = input.LA(1);

        if ( (LA636_0==Tilde) ) {
            alt636=1;
        }
        switch (alt636) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_188);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt637=2;
        int LA637_0 = input.LA(1);

        if ( ((LA637_0>=Intersection && LA637_0<=Implements)||(LA637_0>=Promisify && LA637_0<=Abstract)||LA637_0==External||(LA637_0>=Private && LA637_0<=Project)||LA637_0==Public||LA637_0==Static||LA637_0==Target||(LA637_0>=Async && LA637_0<=Await)||LA637_0==Union||(LA637_0>=Yield && LA637_0<=This)||LA637_0==From||LA637_0==Type||(LA637_0>=Get && LA637_0<=Let)||(LA637_0>=Out && LA637_0<=Set)||LA637_0==As||LA637_0==Of||LA637_0==RULE_IDENTIFIER) ) {
            alt637=1;
        }
        switch (alt637) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred5_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop638:
        do {
            int alt638=2;
            int LA638_0 = input.LA(1);

            if ( ((LA638_0>=Protected && LA638_0<=Abstract)||LA638_0==External||(LA638_0>=Private && LA638_0<=Project)||LA638_0==Public||LA638_0==Static||LA638_0==Const) ) {
                alt638=1;
            }


            switch (alt638) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop638;
            }
        } while (true);

        match(input,Interface,FOLLOW_187); if (state.failed) return ;
        int alt639=2;
        int LA639_0 = input.LA(1);

        if ( (LA639_0==Tilde) ) {
            alt639=1;
        }
        switch (alt639) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_188);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt640=2;
        int LA640_0 = input.LA(1);

        if ( ((LA640_0>=Intersection && LA640_0<=Implements)||(LA640_0>=Promisify && LA640_0<=Abstract)||LA640_0==External||(LA640_0>=Private && LA640_0<=Project)||LA640_0==Public||LA640_0==Static||LA640_0==Target||(LA640_0>=Async && LA640_0<=Await)||LA640_0==Union||(LA640_0>=Yield && LA640_0<=This)||LA640_0==From||LA640_0==Type||(LA640_0>=Get && LA640_0<=Let)||(LA640_0>=Out && LA640_0<=Set)||LA640_0==As||LA640_0==Of||LA640_0==RULE_IDENTIFIER) ) {
            alt640=1;
        }
        switch (alt640) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred6_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop641:
        do {
            int alt641=2;
            int LA641_0 = input.LA(1);

            if ( ((LA641_0>=Protected && LA641_0<=Abstract)||LA641_0==External||(LA641_0>=Private && LA641_0<=Project)||LA641_0==Public||LA641_0==Static||LA641_0==Const) ) {
                alt641=1;
            }


            switch (alt641) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop641;
            }
        } while (true);

        match(input,Enum,FOLLOW_188); if (state.failed) return ;
        int alt642=2;
        int LA642_0 = input.LA(1);

        if ( ((LA642_0>=Intersection && LA642_0<=Implements)||(LA642_0>=Promisify && LA642_0<=Abstract)||LA642_0==External||(LA642_0>=Private && LA642_0<=Project)||LA642_0==Public||LA642_0==Static||LA642_0==Target||(LA642_0>=Async && LA642_0<=Await)||LA642_0==Union||(LA642_0>=Yield && LA642_0<=This)||LA642_0==From||LA642_0==Type||(LA642_0>=Get && LA642_0<=Let)||(LA642_0>=Out && LA642_0<=Set)||LA642_0==As||LA642_0==Of||LA642_0==RULE_IDENTIFIER) ) {
            alt642=1;
        }
        switch (alt642) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred8_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop643:
        do {
            int alt643=2;
            int LA643_0 = input.LA(1);

            if ( ((LA643_0>=Protected && LA643_0<=Abstract)||LA643_0==External||(LA643_0>=Private && LA643_0<=Project)||LA643_0==Public||LA643_0==Static||LA643_0==Const) ) {
                alt643=1;
            }


            switch (alt643) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop643;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred10_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred11_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred12_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred13_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop644:
        do {
            int alt644=2;
            int LA644_0 = input.LA(1);

            if ( ((LA644_0>=Protected && LA644_0<=Abstract)||LA644_0==External||(LA644_0>=Private && LA644_0<=Project)||LA644_0==Public||LA644_0==Static||LA644_0==Const) ) {
                alt644=1;
            }


            switch (alt644) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop644;
            }
        } while (true);

        match(input,Class,FOLLOW_187); if (state.failed) return ;
        int alt645=2;
        int LA645_0 = input.LA(1);

        if ( (LA645_0==Tilde) ) {
            alt645=1;
        }
        switch (alt645) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_188);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt646=2;
        int LA646_0 = input.LA(1);

        if ( ((LA646_0>=Intersection && LA646_0<=Implements)||(LA646_0>=Promisify && LA646_0<=Abstract)||LA646_0==External||(LA646_0>=Private && LA646_0<=Project)||LA646_0==Public||LA646_0==Static||LA646_0==Target||(LA646_0>=Async && LA646_0<=Await)||LA646_0==Union||(LA646_0>=Yield && LA646_0<=This)||LA646_0==From||LA646_0==Type||(LA646_0>=Get && LA646_0<=Let)||(LA646_0>=Out && LA646_0<=Set)||LA646_0==As||LA646_0==Of||LA646_0==RULE_IDENTIFIER) ) {
            alt646=1;
        }
        switch (alt646) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred14_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop647:
        do {
            int alt647=2;
            int LA647_0 = input.LA(1);

            if ( ((LA647_0>=Protected && LA647_0<=Abstract)||LA647_0==External||(LA647_0>=Private && LA647_0<=Project)||LA647_0==Public||LA647_0==Static||LA647_0==Const) ) {
                alt647=1;
            }


            switch (alt647) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop647;
            }
        } while (true);

        match(input,Interface,FOLLOW_187); if (state.failed) return ;
        int alt648=2;
        int LA648_0 = input.LA(1);

        if ( (LA648_0==Tilde) ) {
            alt648=1;
        }
        switch (alt648) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_188);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt649=2;
        int LA649_0 = input.LA(1);

        if ( ((LA649_0>=Intersection && LA649_0<=Implements)||(LA649_0>=Promisify && LA649_0<=Abstract)||LA649_0==External||(LA649_0>=Private && LA649_0<=Project)||LA649_0==Public||LA649_0==Static||LA649_0==Target||(LA649_0>=Async && LA649_0<=Await)||LA649_0==Union||(LA649_0>=Yield && LA649_0<=This)||LA649_0==From||LA649_0==Type||(LA649_0>=Get && LA649_0<=Let)||(LA649_0>=Out && LA649_0<=Set)||LA649_0==As||LA649_0==Of||LA649_0==RULE_IDENTIFIER) ) {
            alt649=1;
        }
        switch (alt649) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred15_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop650:
        do {
            int alt650=2;
            int LA650_0 = input.LA(1);

            if ( ((LA650_0>=Protected && LA650_0<=Abstract)||LA650_0==External||(LA650_0>=Private && LA650_0<=Project)||LA650_0==Public||LA650_0==Static||LA650_0==Const) ) {
                alt650=1;
            }


            switch (alt650) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop650;
            }
        } while (true);

        match(input,Enum,FOLLOW_188); if (state.failed) return ;
        int alt651=2;
        int LA651_0 = input.LA(1);

        if ( ((LA651_0>=Intersection && LA651_0<=Implements)||(LA651_0>=Promisify && LA651_0<=Abstract)||LA651_0==External||(LA651_0>=Private && LA651_0<=Project)||LA651_0==Public||LA651_0==Static||LA651_0==Target||(LA651_0>=Async && LA651_0<=Await)||LA651_0==Union||(LA651_0>=Yield && LA651_0<=This)||LA651_0==From||LA651_0==Type||(LA651_0>=Get && LA651_0<=Let)||(LA651_0>=Out && LA651_0<=Set)||LA651_0==As||LA651_0==Of||LA651_0==RULE_IDENTIFIER) ) {
            alt651=1;
        }
        switch (alt651) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred19_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred26_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred27_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred28_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred37_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred38_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred41_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred42_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred45_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred46_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred49_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred50_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred51_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred52_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred55_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred56_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop683:
        do {
            int alt683=2;
            int LA683_0 = input.LA(1);

            if ( ((LA683_0>=Protected && LA683_0<=Abstract)||LA683_0==External||(LA683_0>=Private && LA683_0<=Project)||LA683_0==Public||LA683_0==Static||LA683_0==Const) ) {
                alt683=1;
            }


            switch (alt683) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop683;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred57_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred58_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred59_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred60_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop684:
        do {
            int alt684=2;
            int LA684_0 = input.LA(1);

            if ( ((LA684_0>=Protected && LA684_0<=Abstract)||LA684_0==External||(LA684_0>=Private && LA684_0<=Project)||LA684_0==Public||LA684_0==Static||LA684_0==Const) ) {
                alt684=1;
            }


            switch (alt684) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop684;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred61_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred62_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred63_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred64_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred67_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred68_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred69_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred70_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred71_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred72_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred81_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred82_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred83_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred84_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred85_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt685=2;
        int LA685_0 = input.LA(1);

        if ( (LA685_0==Colon) ) {
            alt685=1;
        }
        switch (alt685) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred86_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt686=2;
        int LA686_0 = input.LA(1);

        if ( (LA686_0==Colon) ) {
            alt686=1;
        }
        switch (alt686) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred87_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt687=2;
        int LA687_0 = input.LA(1);

        if ( (LA687_0==Colon) ) {
            alt687=1;
        }
        switch (alt687) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred88_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt688=2;
        int LA688_0 = input.LA(1);

        if ( (LA688_0==Colon) ) {
            alt688=1;
        }
        switch (alt688) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred89_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred90_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred93_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred94_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred95_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred96_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred97_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_11); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_76);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred98_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred99_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt689=2;
        int LA689_0 = input.LA(1);

        if ( (LA689_0==In) ) {
            alt689=1;
        }
        else if ( (LA689_0==Of) ) {
            alt689=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 689, 0, input);

            throw nvae;
        }
        switch (alt689) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_73); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_73); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt690=2;
        int LA690_0 = input.LA(1);

        if ( ((LA690_0>=Intersection && LA690_0<=Implements)||(LA690_0>=Promisify && LA690_0<=Abstract)||(LA690_0>=External && LA690_0<=Function)||(LA690_0>=Private && LA690_0<=Delete)||LA690_0==Public||LA690_0==Static||(LA690_0>=Target && LA690_0<=Await)||LA690_0==Class||(LA690_0>=False && LA690_0<=Super)||LA690_0==Union||(LA690_0>=Yield && LA690_0<=This)||(LA690_0>=From && LA690_0<=Void)||(LA690_0>=Get && LA690_0<=Set)||LA690_0==PlusSignPlusSign||LA690_0==HyphenMinusHyphenMinus||LA690_0==SolidusEqualsSign||LA690_0==As||LA690_0==Of||LA690_0==ExclamationMark||LA690_0==LeftParenthesis||LA690_0==PlusSign||LA690_0==HyphenMinus||LA690_0==Solidus||LA690_0==LessThanSign||(LA690_0>=CommercialAt && LA690_0<=LeftSquareBracket)||LA690_0==LeftCurlyBracket||LA690_0==Tilde||LA690_0==RULE_DOUBLE||(LA690_0>=RULE_HEX_INT && LA690_0<=RULE_LEGACY_OCTAL_INT)||LA690_0==RULE_SCIENTIFIC_INT||LA690_0==RULE_IDENTIFIER||LA690_0==RULE_STRING||(LA690_0>=RULE_TEMPLATE_HEAD && LA690_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA690_0==RULE_INT) ) {
            alt690=1;
        }
        switch (alt690) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred100_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred101_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_11); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_76);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred102_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred103_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_82);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt691=2;
        int LA691_0 = input.LA(1);

        if ( (LA691_0==In) ) {
            alt691=1;
        }
        else if ( (LA691_0==Of) ) {
            alt691=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 691, 0, input);

            throw nvae;
        }
        switch (alt691) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_73); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_73); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt692=2;
        int LA692_0 = input.LA(1);

        if ( ((LA692_0>=Intersection && LA692_0<=Implements)||(LA692_0>=Promisify && LA692_0<=Abstract)||(LA692_0>=External && LA692_0<=Function)||(LA692_0>=Private && LA692_0<=Delete)||LA692_0==Public||LA692_0==Static||(LA692_0>=Target && LA692_0<=Await)||LA692_0==Class||(LA692_0>=False && LA692_0<=Super)||LA692_0==Union||(LA692_0>=Yield && LA692_0<=This)||(LA692_0>=From && LA692_0<=Void)||(LA692_0>=Get && LA692_0<=Set)||LA692_0==PlusSignPlusSign||LA692_0==HyphenMinusHyphenMinus||LA692_0==SolidusEqualsSign||LA692_0==As||LA692_0==Of||LA692_0==ExclamationMark||LA692_0==LeftParenthesis||LA692_0==PlusSign||LA692_0==HyphenMinus||LA692_0==Solidus||LA692_0==LessThanSign||(LA692_0>=CommercialAt && LA692_0<=LeftSquareBracket)||LA692_0==LeftCurlyBracket||LA692_0==Tilde||LA692_0==RULE_DOUBLE||(LA692_0>=RULE_HEX_INT && LA692_0<=RULE_LEGACY_OCTAL_INT)||LA692_0==RULE_SCIENTIFIC_INT||LA692_0==RULE_IDENTIFIER||LA692_0==RULE_STRING||(LA692_0>=RULE_TEMPLATE_HEAD && LA692_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA692_0==RULE_INT) ) {
            alt692=1;
        }
        switch (alt692) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred104_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred111_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred112_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred114_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred115_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred119_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt693=2;
        alt693 = dfa693.predict(input);
        switch (alt693) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_107);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt694=2;
        int LA694_0 = input.LA(1);

        if ( (LA694_0==QuestionMark) ) {
            alt694=1;
        }
        switch (alt694) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_93); if (state.failed) return ;

                }


                }
                break;

        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred120_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred121_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred122_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt695=2;
        int LA695_0 = input.LA(1);

        if ( (LA695_0==LessThanSign) ) {
            alt695=1;
        }
        switch (alt695) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt696=2;
        alt696 = dfa696.predict(input);
        switch (alt696) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_105);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt697=2;
        int LA697_0 = input.LA(1);

        if ( (LA697_0==Asterisk) ) {
            alt697=1;
        }
        else if ( ((LA697_0>=Intersection && LA697_0<=With)||(LA697_0>=For && LA697_0<=Var)||(LA697_0>=As && LA697_0<=Of)||LA697_0==LeftSquareBracket||LA697_0==RULE_DOUBLE||LA697_0==RULE_HEX_INT||LA697_0==RULE_OCTAL_INT||LA697_0==RULE_SCIENTIFIC_INT||LA697_0==RULE_IDENTIFIER||LA697_0==RULE_STRING||LA697_0==RULE_INT) ) {
            alt697=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 697, 0, input);

            throw nvae;
        }
        switch (alt697) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred123_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt698=2;
        alt698 = dfa698.predict(input);
        switch (alt698) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_107);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt699=2;
        int LA699_0 = input.LA(1);

        if ( (LA699_0==QuestionMark) ) {
            alt699=1;
        }
        switch (alt699) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_93); if (state.failed) return ;

                }


                }
                break;

        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred124_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred125_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred126_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt700=2;
        int LA700_0 = input.LA(1);

        if ( (LA700_0==LessThanSign) ) {
            alt700=1;
        }
        switch (alt700) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt701=2;
        alt701 = dfa701.predict(input);
        switch (alt701) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_105);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt702=2;
        int LA702_0 = input.LA(1);

        if ( (LA702_0==Asterisk) ) {
            alt702=1;
        }
        else if ( ((LA702_0>=Intersection && LA702_0<=With)||(LA702_0>=For && LA702_0<=Var)||(LA702_0>=As && LA702_0<=Of)||LA702_0==LeftSquareBracket||LA702_0==RULE_DOUBLE||LA702_0==RULE_HEX_INT||LA702_0==RULE_OCTAL_INT||LA702_0==RULE_SCIENTIFIC_INT||LA702_0==RULE_IDENTIFIER||LA702_0==RULE_STRING||LA702_0==RULE_INT) ) {
            alt702=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 702, 0, input);

            throw nvae;
        }
        switch (alt702) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred127_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt703=2;
        alt703 = dfa703.predict(input);
        switch (alt703) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_93);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred130_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred133_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt704=2;
        int LA704_0 = input.LA(1);

        if ( (LA704_0==LessThanSign) ) {
            alt704=1;
        }
        switch (alt704) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt705=2;
        alt705 = dfa705.predict(input);
        switch (alt705) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_105);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt706=2;
        int LA706_0 = input.LA(1);

        if ( (LA706_0==Asterisk) ) {
            alt706=1;
        }
        else if ( ((LA706_0>=Intersection && LA706_0<=With)||(LA706_0>=For && LA706_0<=Var)||(LA706_0>=As && LA706_0<=Of)||LA706_0==LeftSquareBracket||LA706_0==RULE_DOUBLE||LA706_0==RULE_HEX_INT||LA706_0==RULE_OCTAL_INT||LA706_0==RULE_SCIENTIFIC_INT||LA706_0==RULE_IDENTIFIER||LA706_0==RULE_STRING||LA706_0==RULE_INT) ) {
            alt706=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 706, 0, input);

            throw nvae;
        }
        switch (alt706) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred136_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt707=2;
        alt707 = dfa707.predict(input);
        switch (alt707) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_93);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred139_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt708=2;
        int LA708_0 = input.LA(1);

        if ( (LA708_0==LessThanSign) ) {
            alt708=1;
        }
        switch (alt708) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt709=2;
        alt709 = dfa709.predict(input);
        switch (alt709) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_105);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt710=2;
        int LA710_0 = input.LA(1);

        if ( (LA710_0==Asterisk) ) {
            alt710=1;
        }
        else if ( ((LA710_0>=Intersection && LA710_0<=With)||(LA710_0>=For && LA710_0<=Var)||(LA710_0>=As && LA710_0<=Of)||LA710_0==LeftSquareBracket||LA710_0==RULE_DOUBLE||LA710_0==RULE_HEX_INT||LA710_0==RULE_OCTAL_INT||LA710_0==RULE_SCIENTIFIC_INT||LA710_0==RULE_IDENTIFIER||LA710_0==RULE_STRING||LA710_0==RULE_INT) ) {
            alt710=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 710, 0, input);

            throw nvae;
        }
        switch (alt710) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred163_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred164_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred165_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_112); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred166_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred167_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred168_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred169_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_112); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred170_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred171_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred172_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred173_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred174_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred175_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred176_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred177_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred178_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred179_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred180_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred181_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred182_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred183_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred185_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred187_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_190);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred189_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_190);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred191_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred192_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred193_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred194_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred195_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred196_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred197_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred198_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred199_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred200_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred201_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred202_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred203_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred204_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred205_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred206_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred207_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred216_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred217_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred218_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred219_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred220_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred221_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred222_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt727=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt727=1;
            }
            break;
        case Async:
            {
            int LA727_2 = input.LA(2);

            if ( (LA727_2==EqualsSignGreaterThanSign) ) {
                alt727=3;
            }
            else if ( (LA727_2==RULE_NO_LINE_TERMINATOR) && (synpred221_InternalN4JSXParser())) {
                alt727=2;
            }
            else if ( (LA727_2==LeftParenthesis) && (synpred221_InternalN4JSXParser())) {
                alt727=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 727, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt727=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 727, 0, input);

            throw nvae;
        }

        switch (alt727) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt722=2;
                int LA722_0 = input.LA(1);

                if ( ((LA722_0>=Intersection && LA722_0<=Implements)||(LA722_0>=Promisify && LA722_0<=Abstract)||LA722_0==External||(LA722_0>=Private && LA722_0<=Project)||LA722_0==Public||LA722_0==Static||LA722_0==Target||(LA722_0>=Async && LA722_0<=Await)||LA722_0==Union||(LA722_0>=Yield && LA722_0<=This)||LA722_0==From||LA722_0==This_1||(LA722_0>=Type && LA722_0<=Void)||LA722_0==FullStopFullStopFullStop||(LA722_0>=Get && LA722_0<=Let)||(LA722_0>=Out && LA722_0<=Set)||LA722_0==As||LA722_0==Of||(LA722_0>=CommercialAt && LA722_0<=LeftSquareBracket)||LA722_0==LeftCurlyBracket||LA722_0==Tilde||LA722_0==RULE_IDENTIFIER) ) {
                    alt722=1;
                }
                switch (alt722) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop721:
                        do {
                            int alt721=2;
                            int LA721_0 = input.LA(1);

                            if ( (LA721_0==Comma) ) {
                                alt721=1;
                            }


                            switch (alt721) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop721;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt723=2;
                int LA723_0 = input.LA(1);

                if ( (LA723_0==Colon) ) {
                    alt723=1;
                }
                switch (alt723) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt725=2;
                int LA725_0 = input.LA(1);

                if ( ((LA725_0>=Intersection && LA725_0<=Implements)||(LA725_0>=Promisify && LA725_0<=Abstract)||LA725_0==External||(LA725_0>=Private && LA725_0<=Project)||LA725_0==Public||LA725_0==Static||LA725_0==Target||(LA725_0>=Async && LA725_0<=Await)||LA725_0==Union||(LA725_0>=Yield && LA725_0<=This)||LA725_0==From||LA725_0==This_1||(LA725_0>=Type && LA725_0<=Void)||LA725_0==FullStopFullStopFullStop||(LA725_0>=Get && LA725_0<=Let)||(LA725_0>=Out && LA725_0<=Set)||LA725_0==As||LA725_0==Of||(LA725_0>=CommercialAt && LA725_0<=LeftSquareBracket)||LA725_0==LeftCurlyBracket||LA725_0==Tilde||LA725_0==RULE_IDENTIFIER) ) {
                    alt725=1;
                }
                switch (alt725) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop724:
                        do {
                            int alt724=2;
                            int LA724_0 = input.LA(1);

                            if ( (LA724_0==Comma) ) {
                                alt724=1;
                            }


                            switch (alt724) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop724;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt726=2;
                int LA726_0 = input.LA(1);

                if ( (LA726_0==Colon) ) {
                    alt726=1;
                }
                switch (alt726) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred223_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred225_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred226_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred227_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt734=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt734=1;
            }
            break;
        case Async:
            {
            int LA734_2 = input.LA(2);

            if ( (LA734_2==RULE_NO_LINE_TERMINATOR) && (synpred226_InternalN4JSXParser())) {
                alt734=2;
            }
            else if ( (LA734_2==LeftParenthesis) && (synpred226_InternalN4JSXParser())) {
                alt734=2;
            }
            else if ( (LA734_2==EqualsSignGreaterThanSign) ) {
                alt734=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 734, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt734=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 734, 0, input);

            throw nvae;
        }

        switch (alt734) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt729=2;
                int LA729_0 = input.LA(1);

                if ( ((LA729_0>=Intersection && LA729_0<=Implements)||(LA729_0>=Promisify && LA729_0<=Abstract)||LA729_0==External||(LA729_0>=Private && LA729_0<=Project)||LA729_0==Public||LA729_0==Static||LA729_0==Target||(LA729_0>=Async && LA729_0<=Await)||LA729_0==Union||(LA729_0>=Yield && LA729_0<=This)||LA729_0==From||LA729_0==This_1||(LA729_0>=Type && LA729_0<=Void)||LA729_0==FullStopFullStopFullStop||(LA729_0>=Get && LA729_0<=Let)||(LA729_0>=Out && LA729_0<=Set)||LA729_0==As||LA729_0==Of||(LA729_0>=CommercialAt && LA729_0<=LeftSquareBracket)||LA729_0==LeftCurlyBracket||LA729_0==Tilde||LA729_0==RULE_IDENTIFIER) ) {
                    alt729=1;
                }
                switch (alt729) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop728:
                        do {
                            int alt728=2;
                            int LA728_0 = input.LA(1);

                            if ( (LA728_0==Comma) ) {
                                alt728=1;
                            }


                            switch (alt728) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop728;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt730=2;
                int LA730_0 = input.LA(1);

                if ( (LA730_0==Colon) ) {
                    alt730=1;
                }
                switch (alt730) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt732=2;
                int LA732_0 = input.LA(1);

                if ( ((LA732_0>=Intersection && LA732_0<=Implements)||(LA732_0>=Promisify && LA732_0<=Abstract)||LA732_0==External||(LA732_0>=Private && LA732_0<=Project)||LA732_0==Public||LA732_0==Static||LA732_0==Target||(LA732_0>=Async && LA732_0<=Await)||LA732_0==Union||(LA732_0>=Yield && LA732_0<=This)||LA732_0==From||LA732_0==This_1||(LA732_0>=Type && LA732_0<=Void)||LA732_0==FullStopFullStopFullStop||(LA732_0>=Get && LA732_0<=Let)||(LA732_0>=Out && LA732_0<=Set)||LA732_0==As||LA732_0==Of||(LA732_0>=CommercialAt && LA732_0<=LeftSquareBracket)||LA732_0==LeftCurlyBracket||LA732_0==Tilde||LA732_0==RULE_IDENTIFIER) ) {
                    alt732=1;
                }
                switch (alt732) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop731:
                        do {
                            int alt731=2;
                            int LA731_0 = input.LA(1);

                            if ( (LA731_0==Comma) ) {
                                alt731=1;
                            }


                            switch (alt731) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop731;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt733=2;
                int LA733_0 = input.LA(1);

                if ( (LA733_0==Colon) ) {
                    alt733=1;
                }
                switch (alt733) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred228_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred229_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred230_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred231_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt741=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt741=1;
            }
            break;
        case Async:
            {
            int LA741_2 = input.LA(2);

            if ( (LA741_2==EqualsSignGreaterThanSign) ) {
                alt741=3;
            }
            else if ( (LA741_2==RULE_NO_LINE_TERMINATOR) && (synpred231_InternalN4JSXParser())) {
                alt741=2;
            }
            else if ( (LA741_2==LeftParenthesis) && (synpred231_InternalN4JSXParser())) {
                alt741=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 741, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt741=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 741, 0, input);

            throw nvae;
        }

        switch (alt741) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt736=2;
                int LA736_0 = input.LA(1);

                if ( ((LA736_0>=Intersection && LA736_0<=Implements)||(LA736_0>=Promisify && LA736_0<=Abstract)||LA736_0==External||(LA736_0>=Private && LA736_0<=Project)||LA736_0==Public||LA736_0==Static||LA736_0==Target||(LA736_0>=Async && LA736_0<=Await)||LA736_0==Union||LA736_0==This||LA736_0==From||LA736_0==This_1||(LA736_0>=Type && LA736_0<=Void)||LA736_0==FullStopFullStopFullStop||(LA736_0>=Get && LA736_0<=Let)||(LA736_0>=Out && LA736_0<=Set)||LA736_0==As||LA736_0==Of||(LA736_0>=CommercialAt && LA736_0<=LeftSquareBracket)||LA736_0==LeftCurlyBracket||LA736_0==Tilde||LA736_0==RULE_IDENTIFIER) ) {
                    alt736=1;
                }
                switch (alt736) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop735:
                        do {
                            int alt735=2;
                            int LA735_0 = input.LA(1);

                            if ( (LA735_0==Comma) ) {
                                alt735=1;
                            }


                            switch (alt735) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop735;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt737=2;
                int LA737_0 = input.LA(1);

                if ( (LA737_0==Colon) ) {
                    alt737=1;
                }
                switch (alt737) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt739=2;
                int LA739_0 = input.LA(1);

                if ( ((LA739_0>=Intersection && LA739_0<=Implements)||(LA739_0>=Promisify && LA739_0<=Abstract)||LA739_0==External||(LA739_0>=Private && LA739_0<=Project)||LA739_0==Public||LA739_0==Static||LA739_0==Target||(LA739_0>=Async && LA739_0<=Await)||LA739_0==Union||LA739_0==This||LA739_0==From||LA739_0==This_1||(LA739_0>=Type && LA739_0<=Void)||LA739_0==FullStopFullStopFullStop||(LA739_0>=Get && LA739_0<=Let)||(LA739_0>=Out && LA739_0<=Set)||LA739_0==As||LA739_0==Of||(LA739_0>=CommercialAt && LA739_0<=LeftSquareBracket)||LA739_0==LeftCurlyBracket||LA739_0==Tilde||LA739_0==RULE_IDENTIFIER) ) {
                    alt739=1;
                }
                switch (alt739) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop738:
                        do {
                            int alt738=2;
                            int LA738_0 = input.LA(1);

                            if ( (LA738_0==Comma) ) {
                                alt738=1;
                            }


                            switch (alt738) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop738;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt740=2;
                int LA740_0 = input.LA(1);

                if ( (LA740_0==Colon) ) {
                    alt740=1;
                }
                switch (alt740) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred234_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt748=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt748=1;
            }
            break;
        case Async:
            {
            int LA748_2 = input.LA(2);

            if ( (LA748_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSXParser())) {
                alt748=2;
            }
            else if ( (LA748_2==LeftParenthesis) && (synpred236_InternalN4JSXParser())) {
                alt748=2;
            }
            else if ( (LA748_2==EqualsSignGreaterThanSign) ) {
                alt748=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 748, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt748=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 748, 0, input);

            throw nvae;
        }

        switch (alt748) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt743=2;
                int LA743_0 = input.LA(1);

                if ( ((LA743_0>=Intersection && LA743_0<=Implements)||(LA743_0>=Promisify && LA743_0<=Abstract)||LA743_0==External||(LA743_0>=Private && LA743_0<=Project)||LA743_0==Public||LA743_0==Static||LA743_0==Target||(LA743_0>=Async && LA743_0<=Await)||LA743_0==Union||LA743_0==This||LA743_0==From||LA743_0==This_1||(LA743_0>=Type && LA743_0<=Void)||LA743_0==FullStopFullStopFullStop||(LA743_0>=Get && LA743_0<=Let)||(LA743_0>=Out && LA743_0<=Set)||LA743_0==As||LA743_0==Of||(LA743_0>=CommercialAt && LA743_0<=LeftSquareBracket)||LA743_0==LeftCurlyBracket||LA743_0==Tilde||LA743_0==RULE_IDENTIFIER) ) {
                    alt743=1;
                }
                switch (alt743) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop742:
                        do {
                            int alt742=2;
                            int LA742_0 = input.LA(1);

                            if ( (LA742_0==Comma) ) {
                                alt742=1;
                            }


                            switch (alt742) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop742;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt744=2;
                int LA744_0 = input.LA(1);

                if ( (LA744_0==Colon) ) {
                    alt744=1;
                }
                switch (alt744) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt746=2;
                int LA746_0 = input.LA(1);

                if ( ((LA746_0>=Intersection && LA746_0<=Implements)||(LA746_0>=Promisify && LA746_0<=Abstract)||LA746_0==External||(LA746_0>=Private && LA746_0<=Project)||LA746_0==Public||LA746_0==Static||LA746_0==Target||(LA746_0>=Async && LA746_0<=Await)||LA746_0==Union||LA746_0==This||LA746_0==From||LA746_0==This_1||(LA746_0>=Type && LA746_0<=Void)||LA746_0==FullStopFullStopFullStop||(LA746_0>=Get && LA746_0<=Let)||(LA746_0>=Out && LA746_0<=Set)||LA746_0==As||LA746_0==Of||(LA746_0>=CommercialAt && LA746_0<=LeftSquareBracket)||LA746_0==LeftCurlyBracket||LA746_0==Tilde||LA746_0==RULE_IDENTIFIER) ) {
                    alt746=1;
                }
                switch (alt746) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop745:
                        do {
                            int alt745=2;
                            int LA745_0 = input.LA(1);

                            if ( (LA745_0==Comma) ) {
                                alt745=1;
                            }


                            switch (alt745) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop745;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt747=2;
                int LA747_0 = input.LA(1);

                if ( (LA747_0==Colon) ) {
                    alt747=1;
                }
                switch (alt747) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred238_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred239_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred240_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred241_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred242_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred251_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred255_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred256_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred259_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop757:
        do {
            int alt757=2;
            int LA757_0 = input.LA(1);

            if ( ((LA757_0>=Protected && LA757_0<=Abstract)||LA757_0==External||(LA757_0>=Private && LA757_0<=Project)||LA757_0==Public||LA757_0==Static||LA757_0==Const) ) {
                alt757=1;
            }


            switch (alt757) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop757;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred260_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop758:
        do {
            int alt758=2;
            int LA758_0 = input.LA(1);

            if ( ((LA758_0>=Protected && LA758_0<=Abstract)||LA758_0==External||(LA758_0>=Private && LA758_0<=Project)||LA758_0==Public||LA758_0==Static||LA758_0==Const) ) {
                alt758=1;
            }


            switch (alt758) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop758;
            }
        } while (true);

        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred261_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop759:
        do {
            int alt759=2;
            alt759 = dfa759.predict(input);
            switch (alt759) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop759;
            }
        } while (true);
        int alt760=2;
        int LA760_0 = input.LA(1);

        if ( (LA760_0==LessThanSign) ) {
            alt760=1;
        }
        switch (alt760) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt761=2;
        alt761 = dfa761.predict(input);
        switch (alt761) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt762=2;
        int LA762_0 = input.LA(1);

        if ( (LA762_0==Asterisk) ) {
            alt762=1;
        }
        else if ( ((LA762_0>=Intersection && LA762_0<=With)||(LA762_0>=For && LA762_0<=Var)||(LA762_0>=As && LA762_0<=Of)||LA762_0==LeftSquareBracket||LA762_0==RULE_DOUBLE||LA762_0==RULE_HEX_INT||LA762_0==RULE_OCTAL_INT||LA762_0==RULE_SCIENTIFIC_INT||LA762_0==RULE_IDENTIFIER||LA762_0==RULE_STRING||LA762_0==RULE_INT) ) {
            alt762=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 762, 0, input);

            throw nvae;
        }
        switch (alt762) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred262_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop763:
        do {
            int alt763=2;
            int LA763_0 = input.LA(1);

            if ( ((LA763_0>=Protected && LA763_0<=Abstract)||LA763_0==External||(LA763_0>=Private && LA763_0<=Project)||LA763_0==Public||LA763_0==Static||LA763_0==Const) ) {
                alt763=1;
            }


            switch (alt763) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop763;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred263_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop764:
        do {
            int alt764=2;
            int LA764_0 = input.LA(1);

            if ( ((LA764_0>=Protected && LA764_0<=Abstract)||LA764_0==External||(LA764_0>=Private && LA764_0<=Project)||LA764_0==Public||LA764_0==Static||LA764_0==Const) ) {
                alt764=1;
            }


            switch (alt764) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop764;
            }
        } while (true);

        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred264_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop765:
        do {
            int alt765=2;
            alt765 = dfa765.predict(input);
            switch (alt765) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop765;
            }
        } while (true);
        int alt766=2;
        int LA766_0 = input.LA(1);

        if ( (LA766_0==LessThanSign) ) {
            alt766=1;
        }
        switch (alt766) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt767=2;
        alt767 = dfa767.predict(input);
        switch (alt767) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt768=2;
        int LA768_0 = input.LA(1);

        if ( (LA768_0==Asterisk) ) {
            alt768=1;
        }
        else if ( ((LA768_0>=Intersection && LA768_0<=With)||(LA768_0>=For && LA768_0<=Var)||(LA768_0>=As && LA768_0<=Of)||LA768_0==LeftSquareBracket||LA768_0==RULE_DOUBLE||LA768_0==RULE_HEX_INT||LA768_0==RULE_OCTAL_INT||LA768_0==RULE_SCIENTIFIC_INT||LA768_0==RULE_IDENTIFIER||LA768_0==RULE_STRING||LA768_0==RULE_INT) ) {
            alt768=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 768, 0, input);

            throw nvae;
        }
        switch (alt768) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred265_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop769:
        do {
            int alt769=2;
            int LA769_0 = input.LA(1);

            if ( ((LA769_0>=Protected && LA769_0<=Abstract)||LA769_0==External||(LA769_0>=Private && LA769_0<=Project)||LA769_0==Public||LA769_0==Static||LA769_0==Const) ) {
                alt769=1;
            }


            switch (alt769) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop769;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred266_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred267_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop770:
        do {
            int alt770=2;
            int LA770_0 = input.LA(1);

            if ( ((LA770_0>=Protected && LA770_0<=Abstract)||LA770_0==External||(LA770_0>=Private && LA770_0<=Project)||LA770_0==Public||LA770_0==Static||LA770_0==Const) ) {
                alt770=1;
            }


            switch (alt770) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop770;
            }
        } while (true);

        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred269_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred270_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop771:
        do {
            int alt771=2;
            alt771 = dfa771.predict(input);
            switch (alt771) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop771;
            }
        } while (true);
        int alt772=2;
        int LA772_0 = input.LA(1);

        if ( (LA772_0==LessThanSign) ) {
            alt772=1;
        }
        switch (alt772) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt773=2;
        alt773 = dfa773.predict(input);
        switch (alt773) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt774=2;
        int LA774_0 = input.LA(1);

        if ( (LA774_0==Asterisk) ) {
            alt774=1;
        }
        else if ( ((LA774_0>=Intersection && LA774_0<=With)||(LA774_0>=For && LA774_0<=Var)||(LA774_0>=As && LA774_0<=Of)||LA774_0==LeftSquareBracket||LA774_0==RULE_DOUBLE||LA774_0==RULE_HEX_INT||LA774_0==RULE_OCTAL_INT||LA774_0==RULE_SCIENTIFIC_INT||LA774_0==RULE_IDENTIFIER||LA774_0==RULE_STRING||LA774_0==RULE_INT) ) {
            alt774=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 774, 0, input);

            throw nvae;
        }
        switch (alt774) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred273_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop775:
        do {
            int alt775=2;
            int LA775_0 = input.LA(1);

            if ( ((LA775_0>=Protected && LA775_0<=Abstract)||LA775_0==External||(LA775_0>=Private && LA775_0<=Project)||LA775_0==Public||LA775_0==Static||LA775_0==Const) ) {
                alt775=1;
            }


            switch (alt775) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_153);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop775;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred274_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred275_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop776:
        do {
            int alt776=2;
            int LA776_0 = input.LA(1);

            if ( ((LA776_0>=Protected && LA776_0<=Abstract)||LA776_0==External||(LA776_0>=Private && LA776_0<=Project)||LA776_0==Public||LA776_0==Static||LA776_0==Const) ) {
                alt776=1;
            }


            switch (alt776) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop776;
            }
        } while (true);

        match(input,Set,FOLLOW_189); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred277_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred278_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop777:
        do {
            int alt777=2;
            alt777 = dfa777.predict(input);
            switch (alt777) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop777;
            }
        } while (true);
        int alt778=2;
        int LA778_0 = input.LA(1);

        if ( (LA778_0==LessThanSign) ) {
            alt778=1;
        }
        switch (alt778) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt779=2;
        alt779 = dfa779.predict(input);
        switch (alt779) {
            case 1 :
                {
                pushFollow(FOLLOW_105);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt780=2;
        int LA780_0 = input.LA(1);

        if ( (LA780_0==Asterisk) ) {
            alt780=1;
        }
        else if ( ((LA780_0>=Intersection && LA780_0<=With)||(LA780_0>=For && LA780_0<=Var)||(LA780_0>=As && LA780_0<=Of)||LA780_0==LeftSquareBracket||LA780_0==RULE_DOUBLE||LA780_0==RULE_HEX_INT||LA780_0==RULE_OCTAL_INT||LA780_0==RULE_SCIENTIFIC_INT||LA780_0==RULE_IDENTIFIER||LA780_0==RULE_STRING||LA780_0==RULE_INT) ) {
            alt780=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 780, 0, input);

            throw nvae;
        }
        switch (alt780) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_103); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred287_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred288_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred289_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred290_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred292_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred299_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred302_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred303_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred304_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_93);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred305_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred306_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred307_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred308_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred309_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_166); if (state.failed) return ;
        pushFollow(FOLLOW_76);
        ruleTAnonymousFormalParameterList();

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_62); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred310_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred311_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred314_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred315_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred316_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred317_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred318_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt794=2;
        int LA794_0 = input.LA(1);

        if ( (LA794_0==LessThanSign) ) {
            alt794=1;
        }
        switch (alt794) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_28); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_29);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                loop793:
                do {
                    int alt793=2;
                    int LA793_0 = input.LA(1);

                    if ( (LA793_0==Comma) ) {
                        alt793=1;
                    }


                    switch (alt793) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_28); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_29);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop793;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_64);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred322_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred263_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA208 dfa208 = new DFA208(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA193 dfa193 = new DFA193(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA249 dfa249 = new DFA249(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA250 dfa250 = new DFA250(this);
    protected DFA254 dfa254 = new DFA254(this);
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA274 dfa274 = new DFA274(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA289 dfa289 = new DFA289(this);
    protected DFA293 dfa293 = new DFA293(this);
    protected DFA297 dfa297 = new DFA297(this);
    protected DFA300 dfa300 = new DFA300(this);
    protected DFA302 dfa302 = new DFA302(this);
    protected DFA304 dfa304 = new DFA304(this);
    protected DFA306 dfa306 = new DFA306(this);
    protected DFA326 dfa326 = new DFA326(this);
    protected DFA332 dfa332 = new DFA332(this);
    protected DFA345 dfa345 = new DFA345(this);
    protected DFA346 dfa346 = new DFA346(this);
    protected DFA349 dfa349 = new DFA349(this);
    protected DFA350 dfa350 = new DFA350(this);
    protected DFA351 dfa351 = new DFA351(this);
    protected DFA352 dfa352 = new DFA352(this);
    protected DFA384 dfa384 = new DFA384(this);
    protected DFA383 dfa383 = new DFA383(this);
    protected DFA386 dfa386 = new DFA386(this);
    protected DFA385 dfa385 = new DFA385(this);
    protected DFA388 dfa388 = new DFA388(this);
    protected DFA387 dfa387 = new DFA387(this);
    protected DFA390 dfa390 = new DFA390(this);
    protected DFA389 dfa389 = new DFA389(this);
    protected DFA392 dfa392 = new DFA392(this);
    protected DFA394 dfa394 = new DFA394(this);
    protected DFA425 dfa425 = new DFA425(this);
    protected DFA467 dfa467 = new DFA467(this);
    protected DFA468 dfa468 = new DFA468(this);
    protected DFA481 dfa481 = new DFA481(this);
    protected DFA470 dfa470 = new DFA470(this);
    protected DFA474 dfa474 = new DFA474(this);
    protected DFA476 dfa476 = new DFA476(this);
    protected DFA478 dfa478 = new DFA478(this);
    protected DFA494 dfa494 = new DFA494(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA487 dfa487 = new DFA487(this);
    protected DFA489 dfa489 = new DFA489(this);
    protected DFA491 dfa491 = new DFA491(this);
    protected DFA495 dfa495 = new DFA495(this);
    protected DFA496 dfa496 = new DFA496(this);
    protected DFA500 dfa500 = new DFA500(this);
    protected DFA501 dfa501 = new DFA501(this);
    protected DFA505 dfa505 = new DFA505(this);
    protected DFA507 dfa507 = new DFA507(this);
    protected DFA510 dfa510 = new DFA510(this);
    protected DFA512 dfa512 = new DFA512(this);
    protected DFA520 dfa520 = new DFA520(this);
    protected DFA522 dfa522 = new DFA522(this);
    protected DFA524 dfa524 = new DFA524(this);
    protected DFA527 dfa527 = new DFA527(this);
    protected DFA537 dfa537 = new DFA537(this);
    protected DFA541 dfa541 = new DFA541(this);
    protected DFA551 dfa551 = new DFA551(this);
    protected DFA557 dfa557 = new DFA557(this);
    protected DFA561 dfa561 = new DFA561(this);
    protected DFA562 dfa562 = new DFA562(this);
    protected DFA579 dfa579 = new DFA579(this);
    protected DFA580 dfa580 = new DFA580(this);
    protected DFA582 dfa582 = new DFA582(this);
    protected DFA585 dfa585 = new DFA585(this);
    protected DFA596 dfa596 = new DFA596(this);
    protected DFA603 dfa603 = new DFA603(this);
    protected DFA605 dfa605 = new DFA605(this);
    protected DFA609 dfa609 = new DFA609(this);
    protected DFA693 dfa693 = new DFA693(this);
    protected DFA696 dfa696 = new DFA696(this);
    protected DFA698 dfa698 = new DFA698(this);
    protected DFA701 dfa701 = new DFA701(this);
    protected DFA703 dfa703 = new DFA703(this);
    protected DFA705 dfa705 = new DFA705(this);
    protected DFA707 dfa707 = new DFA707(this);
    protected DFA709 dfa709 = new DFA709(this);
    protected DFA759 dfa759 = new DFA759(this);
    protected DFA761 dfa761 = new DFA761(this);
    protected DFA765 dfa765 = new DFA765(this);
    protected DFA767 dfa767 = new DFA767(this);
    protected DFA771 dfa771 = new DFA771(this);
    protected DFA773 dfa773 = new DFA773(this);
    protected DFA777 dfa777 = new DFA777(this);
    protected DFA779 dfa779 = new DFA779(this);
    static final String dfa_1s = "\41\uffff";
    static final String dfa_2s = "\4\uffff\1\3\34\uffff";
    static final String dfa_3s = "\1\4\3\uffff\1\7\1\4\13\uffff\11\4\1\uffff\2\4\1\10\3\4";
    static final String dfa_4s = "\1\u0095\3\uffff\1\u0099\1\176\13\uffff\11\176\1\uffff\6\176";
    static final String dfa_5s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\15\1\16\2\14\1\5\11\uffff\1\4\6\uffff";
    static final String dfa_6s = "\4\uffff\1\0\34\uffff}>";
    static final String[] dfa_7s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\31\1\27\1\32\1\uffff\1\23\3\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\24\1\uffff\1\32\1\22\7\uffff\1\30\1\uffff\1\32\1\21\3\uffff\1\32\1\uffff\1\20\1\uffff\1\26\1\20\6\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\5\uffff\1\20\16\uffff\1\20\2\uffff\1\20\2\uffff\1\20\14\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\1\34\1\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\35\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\35\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\36\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\37\17\uffff\1\32",
            "",
            "\3\20\1\uffff\4\20\2\uffff\1\20\4\uffff\2\20\3\uffff\1\20\1\uffff\1\20\1\uffff\1\20\1\uffff\2\20\7\uffff\1\20\1\uffff\2\20\3\uffff\1\20\3\uffff\1\20\7\uffff\2\20\1\uffff\2\20\23\uffff\1\20\3\uffff\1\20\17\uffff\1\32\7\uffff\1\32\17\uffff\1\20",
            "\61\32\4\uffff\10\32\21\uffff\5\32\17\uffff\1\32\27\uffff\1\40",
            "\1\20\23\uffff\1\20\2\uffff\1\20\12\uffff\1\20\5\uffff\1\20\2\uffff\1\20\2\uffff\1\32\62\uffff\1\20\24\uffff\1\20",
            "\2\20\2\uffff\1\20\23\uffff\1\20\2\uffff\1\20\7\uffff\1\20\2\uffff\1\20\5\uffff\1\20\1\uffff\2\20\2\uffff\1\32\67\uffff\1\20\2\uffff\1\20\14\uffff\1\20",
            "\2\20\2\uffff\1\20\23\uffff\1\20\2\uffff\1\20\7\uffff\1\20\2\uffff\1\20\5\uffff\1\20\1\uffff\2\20\2\uffff\1\32\67\uffff\1\20\2\uffff\1\20\14\uffff\1\20",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32"
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "92:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | JSXElementParserRuleCall_3= ruleJSXElement | ParameterizedCallExpressionParserRuleCall_4= ruleParameterizedCallExpression | LiteralParserRuleCall_5= ruleLiteral | ArrayLiteralParserRuleCall_6= ruleArrayLiteral | ObjectLiteralParserRuleCall_7= ruleObjectLiteral | ParenExpressionParserRuleCall_8= ruleParenExpression | AnnotatedExpressionParserRuleCall_9= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_10= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_11= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_12= ruleN4ClassExpression | TemplateLiteralParserRuleCall_13= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA3_4==RULE_NO_LINE_TERMINATOR) && (synpred1_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA3_4==Function) && (synpred1_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA3_4==EOF||LA3_4==Instanceof||LA3_4==ExclamationMarkEqualsSignEqualsSign||(LA3_4>=LessThanSignLessThanSignEqualsSign && LA3_4<=EqualsSignEqualsSignEqualsSign)||(LA3_4>=ExclamationMarkEqualsSign && LA3_4<=EqualsSignEqualsSign)||LA3_4==GreaterThanSignEqualsSign||(LA3_4>=CircumflexAccentEqualsSign && LA3_4<=As)||(LA3_4>=In && LA3_4<=VerticalLineVerticalLine)||(LA3_4>=PercentSign && LA3_4<=QuestionMark)||(LA3_4>=LeftSquareBracket && LA3_4<=RightCurlyBracket)||(LA3_4>=RULE_TEMPLATE_HEAD && LA3_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_4==RULE_ML_COMMENT||LA3_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_8s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\31\1\27\1\32\1\uffff\1\23\3\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\24\1\uffff\1\32\1\22\7\uffff\1\30\1\uffff\1\32\1\21\3\uffff\1\32\1\uffff\1\20\1\uffff\1\26\1\20\6\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\5\uffff\1\20\16\uffff\1\20\2\uffff\1\20\2\uffff\1\20\14\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\1\34\1\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\35\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\35\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\36\17\uffff\1\32",
            "\61\32\4\uffff\10\32\21\uffff\5\32\13\uffff\2\32\4\uffff\1\32\5\uffff\1\37\17\uffff\1\32",
            "",
            "\3\20\1\uffff\4\20\2\uffff\1\20\4\uffff\2\20\3\uffff\1\20\1\uffff\1\20\1\uffff\1\20\1\uffff\2\20\7\uffff\1\20\2\uffff\1\20\3\uffff\1\20\3\uffff\1\20\7\uffff\2\20\1\uffff\2\20\23\uffff\1\20\3\uffff\1\20\17\uffff\1\32\7\uffff\1\32\17\uffff\1\20",
            "\61\32\4\uffff\10\32\21\uffff\5\32\17\uffff\1\32\27\uffff\1\40",
            "\1\20\23\uffff\1\20\2\uffff\1\20\12\uffff\1\20\5\uffff\1\20\2\uffff\1\20\2\uffff\1\32\62\uffff\1\20\24\uffff\1\20",
            "\2\20\2\uffff\1\20\23\uffff\1\20\2\uffff\1\20\7\uffff\1\20\2\uffff\1\20\5\uffff\1\20\1\uffff\2\20\2\uffff\1\32\67\uffff\1\20\2\uffff\1\20\14\uffff\1\20",
            "\2\20\2\uffff\1\20\23\uffff\1\20\2\uffff\1\20\7\uffff\1\20\2\uffff\1\20\5\uffff\1\20\1\uffff\2\20\2\uffff\1\32\67\uffff\1\20\2\uffff\1\20\14\uffff\1\20",
            "\61\32\4\uffff\10\32\21\uffff\5\32\4\uffff\1\20\3\uffff\2\20\1\uffff\2\32\2\uffff\1\20\1\uffff\1\33\1\20\4\uffff\1\32\1\20\16\uffff\1\32"
    };
    static final short[][] dfa_8 = unpackEncodedStringArray(dfa_8s);

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_8;
        }
        public String getDescription() {
            return "140:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | JSXElementParserRuleCall_3= ruleJSXElement | ParameterizedCallExpressionParserRuleCall_4= norm1_ParameterizedCallExpression | LiteralParserRuleCall_5= ruleLiteral | ArrayLiteralParserRuleCall_6= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_7= norm1_ObjectLiteral | ParenExpressionParserRuleCall_8= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_9= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_10= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_11= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_12= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_13= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_4==RULE_NO_LINE_TERMINATOR) && (synpred2_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA4_4==Function) && (synpred2_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA4_4==EOF||LA4_4==Instanceof||LA4_4==ExclamationMarkEqualsSignEqualsSign||(LA4_4>=LessThanSignLessThanSignEqualsSign && LA4_4<=EqualsSignEqualsSignEqualsSign)||(LA4_4>=ExclamationMarkEqualsSign && LA4_4<=EqualsSignEqualsSign)||LA4_4==GreaterThanSignEqualsSign||(LA4_4>=CircumflexAccentEqualsSign && LA4_4<=As)||(LA4_4>=In && LA4_4<=VerticalLineVerticalLine)||(LA4_4>=PercentSign && LA4_4<=QuestionMark)||(LA4_4>=LeftSquareBracket && LA4_4<=RightCurlyBracket)||(LA4_4>=RULE_TEMPLATE_HEAD && LA4_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA4_4==RULE_ML_COMMENT||LA4_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_9s = "\123\uffff";
    static final String dfa_10s = "\1\4\13\0\107\uffff";
    static final String dfa_11s = "\1\u0095\13\0\107\uffff";
    static final String dfa_12s = "\14\uffff\1\4\1\5\1\6\1\7\100\uffff\1\1\1\2\1\3";
    static final String dfa_13s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\107\uffff}>";
    static final String[] dfa_14s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_9 = DFA.unpackEncodedString(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final char[] dfa_11 = DFA.unpackEncodedStringToUnsignedChars(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[][] dfa_14 = unpackEncodedStringArray(dfa_14s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_9;
            this.eof = dfa_9;
            this.min = dfa_10;
            this.max = dfa_11;
            this.accept = dfa_12;
            this.special = dfa_13;
            this.transition = dfa_14;
        }
        public String getDescription() {
            return "475:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ImportDeclarationParserRuleCall_4= ruleImportDeclaration | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_0 = input.LA(1);

                         
                        int index13_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA13_0>=9 && LA13_0<=106 && (s=T2S.M_0[LA13_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA13_0==Enum) && (synpred6_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA13_0==Import) ) {s = 13;}

                        else if ( (LA13_0==Export) ) {s = 14;}

                        else if ( ((LA13_0>=Intersection && LA13_0<=Implements)||LA13_0==Promisify||(LA13_0>=Continue && LA13_0<=Debugger)||LA13_0==Function||LA13_0==Delete||LA13_0==Return||(LA13_0>=Switch && LA13_0<=Break)||(LA13_0>=False && LA13_0<=This)||(LA13_0>=From && LA13_0<=With)||(LA13_0>=For && LA13_0<=Var)||LA13_0==PlusSignPlusSign||LA13_0==HyphenMinusHyphenMinus||LA13_0==SolidusEqualsSign||(LA13_0>=As && LA13_0<=If)||LA13_0==Of||LA13_0==ExclamationMark||LA13_0==LeftParenthesis||LA13_0==PlusSign||LA13_0==HyphenMinus||LA13_0==Solidus||(LA13_0>=Semicolon && LA13_0<=LessThanSign)||LA13_0==LeftSquareBracket||LA13_0==LeftCurlyBracket||LA13_0==Tilde||LA13_0==RULE_DOUBLE||(LA13_0>=RULE_HEX_INT && LA13_0<=RULE_LEGACY_OCTAL_INT)||LA13_0==RULE_SCIENTIFIC_INT||LA13_0==RULE_IDENTIFIER||LA13_0==RULE_STRING||(LA13_0>=RULE_TEMPLATE_HEAD && LA13_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA13_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index13_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_1 = input.LA(1);

                         
                        int index13_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_2 = input.LA(1);

                         
                        int index13_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_5 = input.LA(1);

                         
                        int index13_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_6 = input.LA(1);

                         
                        int index13_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_7 = input.LA(1);

                         
                        int index13_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA13_8 = input.LA(1);

                         
                        int index13_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA13_10 = input.LA(1);

                         
                        int index13_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA13_11 = input.LA(1);

                         
                        int index13_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index13_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_15s = "\17\uffff";
    static final String dfa_16s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_17s = "\1\55\2\uffff\10\55\4\uffff";
    static final String dfa_18s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_19s = "\1\10\2\uffff\1\6\1\0\1\2\1\4\1\7\1\1\1\3\1\5\4\uffff}>";
    static final String[] dfa_20s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[][] dfa_20 = unpackEncodedStringArray(dfa_20s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_15;
            this.eof = dfa_15;
            this.min = dfa_16;
            this.max = dfa_17;
            this.accept = dfa_18;
            this.special = dfa_19;
            this.transition = dfa_20;
        }
        public String getDescription() {
            return "588:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_4_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_7= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_4==Enum) ) {s = 14;}

                        else if ( (LA26_4==Private) ) {s = 3;}

                        else if ( (LA26_4==Project) ) {s = 4;}

                        else if ( (LA26_4==Protected) ) {s = 5;}

                        else if ( (LA26_4==Public) ) {s = 6;}

                        else if ( (LA26_4==External) ) {s = 7;}

                        else if ( (LA26_4==Abstract) ) {s = 8;}

                        else if ( (LA26_4==Static) ) {s = 9;}

                        else if ( (LA26_4==Const) ) {s = 10;}

                        else if ( (LA26_4==Interface||LA26_4==Class) ) {s = 13;}

                        else if ( (LA26_4==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_4==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_8==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_8==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_8==Private) ) {s = 3;}

                        else if ( (LA26_8==Project) ) {s = 4;}

                        else if ( (LA26_8==Protected) ) {s = 5;}

                        else if ( (LA26_8==Public) ) {s = 6;}

                        else if ( (LA26_8==External) ) {s = 7;}

                        else if ( (LA26_8==Abstract) ) {s = 8;}

                        else if ( (LA26_8==Static) ) {s = 9;}

                        else if ( (LA26_8==Const) ) {s = 10;}

                        else if ( (LA26_8==Interface||LA26_8==Class) ) {s = 13;}

                        else if ( (LA26_8==Enum) ) {s = 14;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_5==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_5==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_5==Private) ) {s = 3;}

                        else if ( (LA26_5==Project) ) {s = 4;}

                        else if ( (LA26_5==Protected) ) {s = 5;}

                        else if ( (LA26_5==Public) ) {s = 6;}

                        else if ( (LA26_5==External) ) {s = 7;}

                        else if ( (LA26_5==Abstract) ) {s = 8;}

                        else if ( (LA26_5==Static) ) {s = 9;}

                        else if ( (LA26_5==Const) ) {s = 10;}

                        else if ( (LA26_5==Interface||LA26_5==Class) ) {s = 13;}

                        else if ( (LA26_5==Enum) ) {s = 14;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_9==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_9==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_9==Private) ) {s = 3;}

                        else if ( (LA26_9==Project) ) {s = 4;}

                        else if ( (LA26_9==Protected) ) {s = 5;}

                        else if ( (LA26_9==Public) ) {s = 6;}

                        else if ( (LA26_9==External) ) {s = 7;}

                        else if ( (LA26_9==Abstract) ) {s = 8;}

                        else if ( (LA26_9==Static) ) {s = 9;}

                        else if ( (LA26_9==Const) ) {s = 10;}

                        else if ( (LA26_9==Interface||LA26_9==Class) ) {s = 13;}

                        else if ( (LA26_9==Enum) ) {s = 14;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_6==Interface||LA26_6==Class) ) {s = 13;}

                        else if ( (LA26_6==Private) ) {s = 3;}

                        else if ( (LA26_6==Project) ) {s = 4;}

                        else if ( (LA26_6==Protected) ) {s = 5;}

                        else if ( (LA26_6==Public) ) {s = 6;}

                        else if ( (LA26_6==External) ) {s = 7;}

                        else if ( (LA26_6==Abstract) ) {s = 8;}

                        else if ( (LA26_6==Static) ) {s = 9;}

                        else if ( (LA26_6==Const) ) {s = 10;}

                        else if ( (LA26_6==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_6==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_6==Enum) ) {s = 14;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_10==Enum) ) {s = 14;}

                        else if ( (LA26_10==Private) ) {s = 3;}

                        else if ( (LA26_10==Project) ) {s = 4;}

                        else if ( (LA26_10==Protected) ) {s = 5;}

                        else if ( (LA26_10==Public) ) {s = 6;}

                        else if ( (LA26_10==External) ) {s = 7;}

                        else if ( (LA26_10==Abstract) ) {s = 8;}

                        else if ( (LA26_10==Static) ) {s = 9;}

                        else if ( (LA26_10==Const) ) {s = 10;}

                        else if ( (LA26_10==Interface||LA26_10==Class) ) {s = 13;}

                        else if ( (LA26_10==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_10==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_3==Interface||LA26_3==Class) ) {s = 13;}

                        else if ( (LA26_3==Private) ) {s = 3;}

                        else if ( (LA26_3==Project) ) {s = 4;}

                        else if ( (LA26_3==Protected) ) {s = 5;}

                        else if ( (LA26_3==Public) ) {s = 6;}

                        else if ( (LA26_3==External) ) {s = 7;}

                        else if ( (LA26_3==Abstract) ) {s = 8;}

                        else if ( (LA26_3==Static) ) {s = 9;}

                        else if ( (LA26_3==Const) ) {s = 10;}

                        else if ( (LA26_3==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_3==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_3==Enum) ) {s = 14;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_7==Enum) ) {s = 14;}

                        else if ( (LA26_7==Private) ) {s = 3;}

                        else if ( (LA26_7==Project) ) {s = 4;}

                        else if ( (LA26_7==Protected) ) {s = 5;}

                        else if ( (LA26_7==Public) ) {s = 6;}

                        else if ( (LA26_7==External) ) {s = 7;}

                        else if ( (LA26_7==Abstract) ) {s = 8;}

                        else if ( (LA26_7==Static) ) {s = 9;}

                        else if ( (LA26_7==Const) ) {s = 10;}

                        else if ( (LA26_7==Interface||LA26_7==Class) ) {s = 13;}

                        else if ( (LA26_7==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_7==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA26_0>=10 && LA26_0<=35 && (s=T2S.M_1[LA26_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA26_0==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA26_0==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA26_0==Interface||LA26_0==Class) ) {s = 13;}

                        else if ( (LA26_0==Enum) ) {s = 14;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_21s = "\13\uffff";
    static final String dfa_22s = "\11\11\2\uffff";
    static final String dfa_23s = "\11\43\2\uffff";
    static final String dfa_24s = "\11\uffff\1\1\1\2";
    static final String dfa_25s = "\13\uffff}>";
    static final String[] dfa_26s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[][] dfa_26 = unpackEncodedStringArray(dfa_26s);

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "626:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_27s = "\101\uffff";
    static final String dfa_28s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_29s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_30s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_31s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\60\uffff}>";
    static final String[] dfa_32s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final char[] dfa_29 = DFA.unpackEncodedStringToUnsignedChars(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[][] dfa_32 = unpackEncodedStringArray(dfa_32s);

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "847:4: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_0 = input.LA(1);

                         
                        int index29_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_0==CommercialAt) ) {s = 1;}

                        else if ( (LA29_0==Private) ) {s = 2;}

                        else if ( (LA29_0==Project) ) {s = 3;}

                        else if ( (LA29_0==Protected) ) {s = 4;}

                        else if ( (LA29_0==Public) ) {s = 5;}

                        else if ( (LA29_0==External) ) {s = 6;}

                        else if ( (LA29_0==Abstract) ) {s = 7;}

                        else if ( (LA29_0==Static) ) {s = 8;}

                        else if ( (LA29_0==Const) && (synpred11_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA29_0==Class) ) {s = 10;}

                        else if ( (LA29_0==Interface) ) {s = 11;}

                        else if ( (LA29_0==Enum) && (synpred11_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA29_0==Async) ) {s = 13;}

                        else if ( (LA29_0==Function) ) {s = 14;}

                        else if ( (LA29_0==Var) && (synpred11_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA29_0==Let) ) {s = 16;}

                        else if ( ((LA29_0>=Intersection && LA29_0<=Implements)||LA29_0==Promisify||LA29_0==Delete||(LA29_0>=Target && LA29_0<=Typeof)||LA29_0==Await||(LA29_0>=False && LA29_0<=Super)||LA29_0==Union||(LA29_0>=Yield && LA29_0<=This)||(LA29_0>=From && LA29_0<=Void)||LA29_0==Get||(LA29_0>=New && LA29_0<=Set)||LA29_0==PlusSignPlusSign||LA29_0==HyphenMinusHyphenMinus||LA29_0==SolidusEqualsSign||LA29_0==As||LA29_0==Of||LA29_0==ExclamationMark||LA29_0==LeftParenthesis||LA29_0==PlusSign||LA29_0==HyphenMinus||LA29_0==Solidus||LA29_0==LessThanSign||LA29_0==LeftSquareBracket||LA29_0==LeftCurlyBracket||LA29_0==Tilde||LA29_0==RULE_DOUBLE||(LA29_0>=RULE_HEX_INT && LA29_0<=RULE_LEGACY_OCTAL_INT)||LA29_0==RULE_SCIENTIFIC_INT||LA29_0==RULE_IDENTIFIER||LA29_0==RULE_STRING||(LA29_0>=RULE_TEMPLATE_HEAD && LA29_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA29_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index29_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_3 = input.LA(1);

                         
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_4 = input.LA(1);

                         
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_5 = input.LA(1);

                         
                        int index29_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_6 = input.LA(1);

                         
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_7 = input.LA(1);

                         
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_8 = input.LA(1);

                         
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA29_10 = input.LA(1);

                         
                        int index29_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA29_11 = input.LA(1);

                         
                        int index29_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA29_13 = input.LA(1);

                         
                        int index29_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA29_14 = input.LA(1);

                         
                        int index29_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA29_16 = input.LA(1);

                         
                        int index29_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index29_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_33s = "\67\uffff";
    static final String dfa_34s = "\17\uffff\11\16\37\uffff";
    static final String dfa_35s = "\1\11\1\uffff\7\11\1\4\5\uffff\7\11\1\17\1\4\37\uffff";
    static final String dfa_36s = "\1\152\1\uffff\7\100\1\176\5\uffff\11\u0099\37\uffff";
    static final String dfa_37s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\11\uffff\37\3";
    static final String dfa_38s = "\1\13\1\uffff\1\0\1\15\1\5\1\6\1\17\1\3\1\16\1\1\5\uffff\1\14\1\7\1\20\1\11\1\4\1\12\1\2\1\uffff\1\10\37\uffff}>";
    static final String[] dfa_39s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\3\16\1\uffff\1\16\1\27\1\21\1\24\2\uffff\1\23\1\15\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\16\1\uffff\1\26\1\16\2\uffff\1\12\1\11\3\uffff\1\16\1\uffff\2\16\2\uffff\1\14\1\16\3\uffff\1\16\7\uffff\2\16\1\uffff\2\16\1\uffff\1\16\21\uffff\1\16\3\uffff\1\16\23\uffff\2\16\2\uffff\1\16\17\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\15\120\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\40\uffff\1\15\5\uffff\1\16\1\uffff\1\16",
            "\1\51\1\44\1\56\1\uffff\1\53\1\57\1\61\1\40\2\uffff\1\37\2\uffff\1\65\1\uffff\1\60\1\36\3\uffff\1\62\1\uffff\1\41\1\uffff\1\46\1\uffff\1\55\1\54\7\uffff\1\50\1\uffff\1\32\1\52\3\uffff\1\43\3\uffff\1\47\7\uffff\1\33\1\35\1\uffff\1\63\1\34\23\uffff\1\42\3\uffff\1\45\11\uffff\1\16\3\uffff\2\16\1\64\1\16\6\uffff\1\66\1\uffff\1\16\1\30\14\uffff\1\31\30\uffff\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final char[] dfa_36 = DFA.unpackEncodedStringToUnsignedChars(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[] dfa_38 = DFA.unpackEncodedString(dfa_38s);
    static final short[][] dfa_39 = unpackEncodedStringArray(dfa_39s);

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = dfa_33;
            this.eof = dfa_34;
            this.min = dfa_35;
            this.max = dfa_36;
            this.accept = dfa_37;
            this.special = dfa_38;
            this.transition = dfa_39;
        }
        public String getDescription() {
            return "998:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_2==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_2==Private) ) {s = 2;}

                        else if ( (LA35_2==Project) ) {s = 3;}

                        else if ( (LA35_2==Protected) ) {s = 4;}

                        else if ( (LA35_2==Public) ) {s = 5;}

                        else if ( (LA35_2==External) ) {s = 6;}

                        else if ( (LA35_2==Abstract) ) {s = 7;}

                        else if ( (LA35_2==Static) ) {s = 8;}

                        else if ( (LA35_2==Const) ) {s = 9;}

                        else if ( (LA35_2==Let||LA35_2==Var) ) {s = 14;}

                        else if ( (LA35_2==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_2==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_2==Function||LA35_2==Async) ) {s = 13;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_9 = input.LA(1);

                         
                        int index35_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_9==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        
                        else if ((LA35_9>=9 && LA35_9<=35 && (s=T2S.M_2[LA35_9-(9)])>=0)) { /* 12 cases */ }
                        else if ( ((LA35_9>=Intersection && LA35_9<=Implements)||LA35_9==Promisify||LA35_9==Target||LA35_9==Await||LA35_9==Union||(LA35_9>=Yield && LA35_9<=This)||LA35_9==From||LA35_9==Type||(LA35_9>=Get && LA35_9<=Let)||(LA35_9>=Out && LA35_9<=Set)||LA35_9==Var||LA35_9==As||LA35_9==Of||(LA35_9>=CommercialAt && LA35_9<=LeftSquareBracket)||LA35_9==LeftCurlyBracket||LA35_9==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA35_9==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_21 = input.LA(1);

                         
                        int index35_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_21==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_21==Private) ) {s = 2;}

                        else if ( (LA35_21==Project) ) {s = 3;}

                        else if ( (LA35_21==Protected) ) {s = 4;}

                        else if ( (LA35_21==Public) ) {s = 5;}

                        else if ( (LA35_21==External) ) {s = 6;}

                        else if ( (LA35_21==Abstract) ) {s = 7;}

                        else if ( (LA35_21==Static) ) {s = 8;}

                        else if ( (LA35_21==Const) ) {s = 9;}

                        else if ( (LA35_21==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_21==Function||LA35_21==Async) ) {s = 13;}

                        else if ( (LA35_21==EOF||LA35_21==Let||LA35_21==Var||LA35_21==Comma||(LA35_21>=Colon && LA35_21<=Semicolon)||LA35_21==EqualsSign||LA35_21==RightCurlyBracket||LA35_21==RULE_ML_COMMENT||LA35_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_21==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index35_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_7 = input.LA(1);

                         
                        int index35_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_7==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_7==Private) ) {s = 2;}

                        else if ( (LA35_7==Project) ) {s = 3;}

                        else if ( (LA35_7==Protected) ) {s = 4;}

                        else if ( (LA35_7==Public) ) {s = 5;}

                        else if ( (LA35_7==External) ) {s = 6;}

                        else if ( (LA35_7==Abstract) ) {s = 7;}

                        else if ( (LA35_7==Static) ) {s = 8;}

                        else if ( (LA35_7==Const) ) {s = 9;}

                        else if ( (LA35_7==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_7==Function||LA35_7==Async) ) {s = 13;}

                        else if ( (LA35_7==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_7==Let||LA35_7==Var) ) {s = 14;}

                         
                        input.seek(index35_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_19 = input.LA(1);

                         
                        int index35_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_19==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_19==Private) ) {s = 2;}

                        else if ( (LA35_19==Project) ) {s = 3;}

                        else if ( (LA35_19==Protected) ) {s = 4;}

                        else if ( (LA35_19==Public) ) {s = 5;}

                        else if ( (LA35_19==External) ) {s = 6;}

                        else if ( (LA35_19==Abstract) ) {s = 7;}

                        else if ( (LA35_19==Static) ) {s = 8;}

                        else if ( (LA35_19==Const) ) {s = 9;}

                        else if ( (LA35_19==Function||LA35_19==Async) ) {s = 13;}

                        else if ( (LA35_19==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_19==EOF||LA35_19==Let||LA35_19==Var||LA35_19==Comma||(LA35_19>=Colon && LA35_19<=Semicolon)||LA35_19==EqualsSign||LA35_19==RightCurlyBracket||LA35_19==RULE_ML_COMMENT||LA35_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_19==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_4==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_4==Private) ) {s = 2;}

                        else if ( (LA35_4==Project) ) {s = 3;}

                        else if ( (LA35_4==Protected) ) {s = 4;}

                        else if ( (LA35_4==Public) ) {s = 5;}

                        else if ( (LA35_4==External) ) {s = 6;}

                        else if ( (LA35_4==Abstract) ) {s = 7;}

                        else if ( (LA35_4==Static) ) {s = 8;}

                        else if ( (LA35_4==Const) ) {s = 9;}

                        else if ( (LA35_4==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_4==Function||LA35_4==Async) ) {s = 13;}

                        else if ( (LA35_4==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_4==Let||LA35_4==Var) ) {s = 14;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA35_5 = input.LA(1);

                         
                        int index35_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_5==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_5==Private) ) {s = 2;}

                        else if ( (LA35_5==Project) ) {s = 3;}

                        else if ( (LA35_5==Protected) ) {s = 4;}

                        else if ( (LA35_5==Public) ) {s = 5;}

                        else if ( (LA35_5==External) ) {s = 6;}

                        else if ( (LA35_5==Abstract) ) {s = 7;}

                        else if ( (LA35_5==Static) ) {s = 8;}

                        else if ( (LA35_5==Const) ) {s = 9;}

                        else if ( (LA35_5==Let||LA35_5==Var) ) {s = 14;}

                        else if ( (LA35_5==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_5==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_5==Function||LA35_5==Async) ) {s = 13;}

                         
                        input.seek(index35_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA35_16 = input.LA(1);

                         
                        int index35_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_16==EOF||LA35_16==Let||LA35_16==Var||LA35_16==Comma||(LA35_16>=Colon && LA35_16<=Semicolon)||LA35_16==EqualsSign||LA35_16==RightCurlyBracket||LA35_16==RULE_ML_COMMENT||LA35_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_16==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_16==Private) ) {s = 2;}

                        else if ( (LA35_16==Project) ) {s = 3;}

                        else if ( (LA35_16==Protected) ) {s = 4;}

                        else if ( (LA35_16==Public) ) {s = 5;}

                        else if ( (LA35_16==External) ) {s = 6;}

                        else if ( (LA35_16==Abstract) ) {s = 7;}

                        else if ( (LA35_16==Static) ) {s = 8;}

                        else if ( (LA35_16==Const) ) {s = 9;}

                        else if ( (LA35_16==Function||LA35_16==Async) ) {s = 13;}

                        else if ( (LA35_16==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_16==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA35_23 = input.LA(1);

                         
                        int index35_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_23==EOF||LA35_23==Comma||(LA35_23>=Colon && LA35_23<=Semicolon)||LA35_23==EqualsSign||LA35_23==RightCurlyBracket||LA35_23==RULE_ML_COMMENT||LA35_23==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_23==Tilde) && (synpred14_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA35_23==RULE_IDENTIFIER) && (synpred14_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA35_23==Yield) && (synpred14_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA35_23==Get) && (synpred14_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA35_23==Set) && (synpred14_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA35_23==Let) && (synpred14_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA35_23==Project) && (synpred14_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA35_23==External) && (synpred14_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA35_23==Abstract) && (synpred14_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA35_23==Static) && (synpred14_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA35_23==As) && (synpred14_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA35_23==From) && (synpred14_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA35_23==Constructor) && (synpred14_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA35_23==Of) && (synpred14_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA35_23==Target) && (synpred14_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA35_23==Type) && (synpred14_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA35_23==Union) && (synpred14_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA35_23==Intersection) && (synpred14_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA35_23==This) && (synpred14_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA35_23==Promisify) && (synpred14_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA35_23==Await) && (synpred14_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA35_23==Async) && (synpred14_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA35_23==Implements) && (synpred14_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA35_23==Interface) && (synpred14_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA35_23==Private) && (synpred14_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA35_23==Protected) && (synpred14_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA35_23==Public) && (synpred14_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA35_23==Out) && (synpred14_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA35_23==LessThanSign) && (synpred14_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA35_23==Extends) && (synpred14_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA35_23==LeftCurlyBracket) && (synpred14_InternalN4JSXParser())) {s = 54;}

                         
                        input.seek(index35_23);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA35_18 = input.LA(1);

                         
                        int index35_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_18==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_18==Private) ) {s = 2;}

                        else if ( (LA35_18==Project) ) {s = 3;}

                        else if ( (LA35_18==Protected) ) {s = 4;}

                        else if ( (LA35_18==Public) ) {s = 5;}

                        else if ( (LA35_18==External) ) {s = 6;}

                        else if ( (LA35_18==Abstract) ) {s = 7;}

                        else if ( (LA35_18==Static) ) {s = 8;}

                        else if ( (LA35_18==Const) ) {s = 9;}

                        else if ( (LA35_18==EOF||LA35_18==Let||LA35_18==Var||LA35_18==Comma||(LA35_18>=Colon && LA35_18<=Semicolon)||LA35_18==EqualsSign||LA35_18==RightCurlyBracket||LA35_18==RULE_ML_COMMENT||LA35_18==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_18==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_18==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_18==Function||LA35_18==Async) ) {s = 13;}

                         
                        input.seek(index35_18);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA35_20 = input.LA(1);

                         
                        int index35_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_20==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_20==Private) ) {s = 2;}

                        else if ( (LA35_20==Project) ) {s = 3;}

                        else if ( (LA35_20==Protected) ) {s = 4;}

                        else if ( (LA35_20==Public) ) {s = 5;}

                        else if ( (LA35_20==External) ) {s = 6;}

                        else if ( (LA35_20==Abstract) ) {s = 7;}

                        else if ( (LA35_20==Static) ) {s = 8;}

                        else if ( (LA35_20==Const) ) {s = 9;}

                        else if ( (LA35_20==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_20==Function||LA35_20==Async) ) {s = 13;}

                        else if ( (LA35_20==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_20==EOF||LA35_20==Let||LA35_20==Var||LA35_20==Comma||(LA35_20>=Colon && LA35_20<=Semicolon)||LA35_20==EqualsSign||LA35_20==RightCurlyBracket||LA35_20==RULE_ML_COMMENT||LA35_20==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index35_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA35_0 = input.LA(1);

                         
                        int index35_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_0==CommercialAt) && (synpred12_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA35_0==Private) ) {s = 2;}

                        else if ( (LA35_0==Project) ) {s = 3;}

                        else if ( (LA35_0==Protected) ) {s = 4;}

                        else if ( (LA35_0==Public) ) {s = 5;}

                        else if ( (LA35_0==External) ) {s = 6;}

                        else if ( (LA35_0==Abstract) ) {s = 7;}

                        else if ( (LA35_0==Static) ) {s = 8;}

                        else if ( (LA35_0==Const) ) {s = 9;}

                        else if ( (LA35_0==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_0==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_0==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_0==Function||LA35_0==Async) ) {s = 13;}

                        else if ( (LA35_0==Let||LA35_0==Var) ) {s = 14;}

                         
                        input.seek(index35_0);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA35_15 = input.LA(1);

                         
                        int index35_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_15==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_15==Private) ) {s = 2;}

                        else if ( (LA35_15==Project) ) {s = 3;}

                        else if ( (LA35_15==Protected) ) {s = 4;}

                        else if ( (LA35_15==Public) ) {s = 5;}

                        else if ( (LA35_15==External) ) {s = 6;}

                        else if ( (LA35_15==Abstract) ) {s = 7;}

                        else if ( (LA35_15==Static) ) {s = 8;}

                        else if ( (LA35_15==Const) ) {s = 9;}

                        else if ( (LA35_15==EOF||LA35_15==Let||LA35_15==Var||LA35_15==Comma||(LA35_15>=Colon && LA35_15<=Semicolon)||LA35_15==EqualsSign||LA35_15==RightCurlyBracket||LA35_15==RULE_ML_COMMENT||LA35_15==RULE_EOL) ) {s = 14;}

                        else if ( (LA35_15==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_15==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_15==Function||LA35_15==Async) ) {s = 13;}

                         
                        input.seek(index35_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_3==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_3==Private) ) {s = 2;}

                        else if ( (LA35_3==Project) ) {s = 3;}

                        else if ( (LA35_3==Protected) ) {s = 4;}

                        else if ( (LA35_3==Public) ) {s = 5;}

                        else if ( (LA35_3==External) ) {s = 6;}

                        else if ( (LA35_3==Abstract) ) {s = 7;}

                        else if ( (LA35_3==Static) ) {s = 8;}

                        else if ( (LA35_3==Const) ) {s = 9;}

                        else if ( (LA35_3==Function||LA35_3==Async) ) {s = 13;}

                        else if ( (LA35_3==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_3==Let||LA35_3==Var) ) {s = 14;}

                        else if ( (LA35_3==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA35_8 = input.LA(1);

                         
                        int index35_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_8==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_8==Private) ) {s = 2;}

                        else if ( (LA35_8==Project) ) {s = 3;}

                        else if ( (LA35_8==Protected) ) {s = 4;}

                        else if ( (LA35_8==Public) ) {s = 5;}

                        else if ( (LA35_8==External) ) {s = 6;}

                        else if ( (LA35_8==Abstract) ) {s = 7;}

                        else if ( (LA35_8==Static) ) {s = 8;}

                        else if ( (LA35_8==Const) ) {s = 9;}

                        else if ( (LA35_8==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_8==Function||LA35_8==Async) ) {s = 13;}

                        else if ( (LA35_8==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_8==Let||LA35_8==Var) ) {s = 14;}

                         
                        input.seek(index35_8);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_6==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_6==Private) ) {s = 2;}

                        else if ( (LA35_6==Project) ) {s = 3;}

                        else if ( (LA35_6==Protected) ) {s = 4;}

                        else if ( (LA35_6==Public) ) {s = 5;}

                        else if ( (LA35_6==External) ) {s = 6;}

                        else if ( (LA35_6==Abstract) ) {s = 7;}

                        else if ( (LA35_6==Static) ) {s = 8;}

                        else if ( (LA35_6==Const) ) {s = 9;}

                        else if ( (LA35_6==Function||LA35_6==Async) ) {s = 13;}

                        else if ( (LA35_6==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_6==Let||LA35_6==Var) ) {s = 14;}

                        else if ( (LA35_6==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA35_17 = input.LA(1);

                         
                        int index35_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA35_17==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA35_17==Private) ) {s = 2;}

                        else if ( (LA35_17==Project) ) {s = 3;}

                        else if ( (LA35_17==Protected) ) {s = 4;}

                        else if ( (LA35_17==Public) ) {s = 5;}

                        else if ( (LA35_17==External) ) {s = 6;}

                        else if ( (LA35_17==Abstract) ) {s = 7;}

                        else if ( (LA35_17==Static) ) {s = 8;}

                        else if ( (LA35_17==Const) ) {s = 9;}

                        else if ( (LA35_17==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA35_17==Function||LA35_17==Async) ) {s = 13;}

                        else if ( (LA35_17==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA35_17==EOF||LA35_17==Let||LA35_17==Var||LA35_17==Comma||(LA35_17>=Colon && LA35_17<=Semicolon)||LA35_17==EqualsSign||LA35_17==RightCurlyBracket||LA35_17==RULE_ML_COMMENT||LA35_17==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index35_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_40s = "\26\uffff";
    static final String dfa_41s = "\15\uffff\11\12";
    static final String dfa_42s = "\10\11\1\4\4\uffff\1\4\7\11\1\17";
    static final String dfa_43s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_44s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_45s = "\26\uffff}>";
    static final String[] dfa_46s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\15\1\20\1\23\2\uffff\1\22\1\11\3\uffff\1\16\1\17\3\uffff\1\21\1\uffff\1\24\1\uffff\1\12\1\uffff\1\25\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final char[] dfa_43 = DFA.unpackEncodedStringToUnsignedChars(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[][] dfa_46 = unpackEncodedStringArray(dfa_46s);

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = dfa_40;
            this.eof = dfa_41;
            this.min = dfa_42;
            this.max = dfa_43;
            this.accept = dfa_44;
            this.special = dfa_45;
            this.transition = dfa_46;
        }
        public String getDescription() {
            return "1109:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_47s = "\14\uffff";
    static final String dfa_48s = "\4\uffff\10\1";
    static final String dfa_49s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_50s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_51s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_52s = "\14\uffff}>";
    static final String[] dfa_53s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final char[] dfa_50 = DFA.unpackEncodedStringToUnsignedChars(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final short[][] dfa_53 = unpackEncodedStringArray(dfa_53s);

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = dfa_47;
            this.eof = dfa_48;
            this.min = dfa_49;
            this.max = dfa_50;
            this.accept = dfa_51;
            this.special = dfa_52;
            this.transition = dfa_53;
        }
        public String getDescription() {
            return "()* loopback of 1121:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "1155:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_54s = "\36\uffff";
    static final String dfa_55s = "\1\uffff\33\35\2\uffff";
    static final String dfa_56s = "\1\4\33\122\2\uffff";
    static final String dfa_57s = "\1\176\33\160\2\uffff";
    static final String dfa_58s = "\34\uffff\1\2\1\1";
    static final String dfa_59s = "\36\uffff}>";
    static final String[] dfa_60s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final char[] dfa_57 = DFA.unpackEncodedStringToUnsignedChars(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final short[][] dfa_60 = unpackEncodedStringArray(dfa_60s);

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = dfa_54;
            this.eof = dfa_55;
            this.min = dfa_56;
            this.max = dfa_57;
            this.accept = dfa_58;
            this.special = dfa_59;
            this.transition = dfa_60;
        }
        public String getDescription() {
            return "1412:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_61s = "\134\uffff";
    static final String dfa_62s = "\1\2\1\uffff\1\7\4\uffff\1\133\124\uffff";
    static final String dfa_63s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_64s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_65s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\124\1";
    static final String dfa_66s = "\1\4\1\0\1\2\2\uffff\1\1\1\uffff\1\3\124\uffff}>";
    static final String[] dfa_67s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\10\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\117\1\126\1\15\1\30\1\131\2\uffff\1\11\1\12\1\102\1\25\1\24\1\14\1\121\1\17\1\123\1\44\1\104\1\27\1\52\1\120\1\uffff\1\21\1\20\1\72\1\60\1\124\1\46\1\115\1\35\1\50\1\132\1\130\1\23\1\41\1\74\1\57\1\71\1\45\1\103\1\122\4\uffff\1\116\1\36\1\32\1\56\1\54\1\37\1\125\1\31\5\uffff\1\105\1\uffff\1\106\1\uffff\1\76\7\uffff\1\40\1\114\1\113\1\uffff\1\43\2\uffff\1\112\2\uffff\1\55\2\uffff\1\107\1\uffff\1\110\1\uffff\1\75\1\uffff\1\33\1\61\3\uffff\1\10\1\77\2\uffff\1\26\1\uffff\1\127\1\111\3\uffff\1\62\1\uffff\1\67\1\64\1\65\1\66\1\uffff\1\70\1\uffff\1\34\2\uffff\1\73\11\uffff\1\101\1\100\10\uffff\1\63",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final char[] dfa_64 = DFA.unpackEncodedStringToUnsignedChars(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[] dfa_66 = DFA.unpackEncodedString(dfa_66s);
    static final short[][] dfa_67 = unpackEncodedStringArray(dfa_67s);

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = dfa_61;
            this.eof = dfa_62;
            this.min = dfa_63;
            this.max = dfa_64;
            this.accept = dfa_65;
            this.special = dfa_66;
            this.transition = dfa_67;
        }
        public String getDescription() {
            return "1550:2: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_1 = input.LA(1);

                         
                        int index61_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index61_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_5 = input.LA(1);

                         
                        int index61_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index61_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_2 = input.LA(1);

                         
                        int index61_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_2==EOF) ) {s = 7;}

                        
                        else if ((LA61_2>=-1 && LA61_2<=149 && (s=T2S.M_3[LA61_2-(-1)])>=0) && (synpred19_InternalN4JSXParser())) { /* 84 cases */ }
                        input.seek(index61_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_7 = input.LA(1);

                         
                        int index61_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_7==EOF) && (synpred19_InternalN4JSXParser())) {s = 91;}

                         
                        input.seek(index61_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_0 = input.LA(1);

                         
                        int index61_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_0==Semicolon) ) {s = 1;}

                        else if ( (LA61_0==EOF) ) {s = 2;}

                        else if ( (LA61_0==RULE_EOL) && (synpred19_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA61_0==RULE_ML_COMMENT) && (synpred19_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA61_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA61_0>=Intersection && LA61_0<=Implements)||(LA61_0>=Promisify && LA61_0<=Default)||(LA61_0>=Private && LA61_0<=Break)||(LA61_0>=Class && LA61_0<=With)||(LA61_0>=For && LA61_0<=Var)||LA61_0==PlusSignPlusSign||LA61_0==HyphenMinusHyphenMinus||LA61_0==SolidusEqualsSign||(LA61_0>=As && LA61_0<=If)||LA61_0==Of||LA61_0==ExclamationMark||LA61_0==LeftParenthesis||LA61_0==PlusSign||LA61_0==HyphenMinus||LA61_0==Solidus||LA61_0==LessThanSign||(LA61_0>=CommercialAt && LA61_0<=LeftSquareBracket)||LA61_0==LeftCurlyBracket||LA61_0==Tilde||LA61_0==RULE_DOUBLE||(LA61_0>=RULE_HEX_INT && LA61_0<=RULE_LEGACY_OCTAL_INT)||LA61_0==RULE_SCIENTIFIC_INT||LA61_0==RULE_IDENTIFIER||LA61_0==RULE_STRING||(LA61_0>=RULE_TEMPLATE_HEAD && LA61_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA61_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index61_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_68s = "\130\uffff";
    static final String dfa_69s = "\1\2\127\uffff";
    static final String dfa_70s = "\1\4\1\0\126\uffff";
    static final String dfa_71s = "\1\u0099\1\0\126\uffff";
    static final String dfa_72s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_73s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_74s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final char[] dfa_70 = DFA.unpackEncodedStringToUnsignedChars(dfa_70s);
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[][] dfa_74 = unpackEncodedStringArray(dfa_74s);

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = dfa_68;
            this.eof = dfa_69;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_72;
            this.special = dfa_73;
            this.transition = dfa_74;
        }
        public String getDescription() {
            return "1862:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_1 = input.LA(1);

                         
                        int index80_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSXParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index80_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = dfa_68;
            this.eof = dfa_69;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_72;
            this.special = dfa_73;
            this.transition = dfa_74;
        }
        public String getDescription() {
            return "1880:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_1 = input.LA(1);

                         
                        int index81_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalN4JSXParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_75s = "\77\uffff";
    static final String dfa_76s = "\1\4\1\0\75\uffff";
    static final String dfa_77s = "\1\u0095\1\0\75\uffff";
    static final String dfa_78s = "\2\uffff\1\2\73\uffff\1\1";
    static final String dfa_79s = "\1\uffff\1\0\75\uffff}>";
    static final String[] dfa_80s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_75 = DFA.unpackEncodedString(dfa_75s);
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final char[] dfa_77 = DFA.unpackEncodedStringToUnsignedChars(dfa_77s);
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final short[][] dfa_80 = unpackEncodedStringArray(dfa_80s);

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "2315:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_1 = input.LA(1);

                         
                        int index91_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index91_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "2576:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_1 = input.LA(1);

                         
                        int index99_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index99_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "2837:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "3098:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA115_1 = input.LA(1);

                         
                        int index115_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_81s = "\43\uffff";
    static final String dfa_82s = "\1\4\1\0\41\uffff";
    static final String dfa_83s = "\1\176\1\0\41\uffff";
    static final String dfa_84s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_85s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_86s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final char[] dfa_83 = DFA.unpackEncodedStringToUnsignedChars(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[][] dfa_86 = unpackEncodedStringArray(dfa_86s);

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = dfa_81;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "3509:2: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= ruleBindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= ruleBindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_0 = input.LA(1);

                         
                        int index134_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA134_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA134_0==LeftSquareBracket) && (synpred51_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA134_0>=Intersection && LA134_0<=Implements)||(LA134_0>=Promisify && LA134_0<=Abstract)||LA134_0==External||(LA134_0>=Private && LA134_0<=Project)||LA134_0==Public||LA134_0==Static||LA134_0==Target||(LA134_0>=Async && LA134_0<=Await)||LA134_0==Union||(LA134_0>=Yield && LA134_0<=This)||LA134_0==From||LA134_0==This_1||(LA134_0>=Type && LA134_0<=Void)||LA134_0==FullStopFullStopFullStop||(LA134_0>=Get && LA134_0<=Let)||(LA134_0>=Out && LA134_0<=Set)||LA134_0==As||LA134_0==Of||LA134_0==CommercialAt||LA134_0==Tilde||LA134_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index134_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_87s = "\2\uffff\11\13\1\uffff";
    static final String dfa_88s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_89s = "\1\176\1\uffff\5\176\4\156\1\uffff";
    static final String dfa_90s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_91s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final char[] dfa_88 = DFA.unpackEncodedStringToUnsignedChars(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final short[][] dfa_91 = unpackEncodedStringArray(dfa_91s);

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_91;
        }
        public String getDescription() {
            return "3530:4: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_92s = "\42\uffff";
    static final String dfa_93s = "\1\4\1\0\40\uffff";
    static final String dfa_94s = "\1\176\1\0\40\uffff";
    static final String dfa_95s = "\2\uffff\1\1\1\2\36\uffff";
    static final String dfa_96s = "\1\0\1\1\40\uffff}>";
    static final String[] dfa_97s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_92 = DFA.unpackEncodedString(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final char[] dfa_94 = DFA.unpackEncodedStringToUnsignedChars(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final short[][] dfa_97 = unpackEncodedStringArray(dfa_97s);

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = dfa_92;
            this.eof = dfa_92;
            this.min = dfa_93;
            this.max = dfa_94;
            this.accept = dfa_95;
            this.special = dfa_96;
            this.transition = dfa_97;
        }
        public String getDescription() {
            return "3579:2: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= norm1_BindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= norm1_BindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_0 = input.LA(1);

                         
                        int index141_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA141_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA141_0==LeftSquareBracket) && (synpred52_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA141_0>=Intersection && LA141_0<=Implements)||(LA141_0>=Promisify && LA141_0<=Abstract)||LA141_0==External||(LA141_0>=Private && LA141_0<=Project)||LA141_0==Public||LA141_0==Static||LA141_0==Target||(LA141_0>=Async && LA141_0<=Await)||LA141_0==Union||LA141_0==This||LA141_0==From||LA141_0==This_1||(LA141_0>=Type && LA141_0<=Void)||LA141_0==FullStopFullStopFullStop||(LA141_0>=Get && LA141_0<=Let)||(LA141_0>=Out && LA141_0<=Set)||LA141_0==As||LA141_0==Of||LA141_0==CommercialAt||LA141_0==Tilde||LA141_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index141_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_98s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_98 = unpackEncodedStringArray(dfa_98s);

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "3600:4: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_99s = "\120\uffff";
    static final String dfa_100s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_101s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_102s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\37\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_103s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\57\uffff}>";
    static final String[] dfa_104s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\107\1\10\1\111\1\27\1\41\1\12\1\35\1\106\1\uffff\1\41\1\11\2\41\1\112\1\31\1\102\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\110\4\uffff\1\102\1\21\1\15\1\41\1\40\1\22\1\113\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\102\1\101\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final char[] dfa_100 = DFA.unpackEncodedStringToUnsignedChars(dfa_100s);
    static final char[] dfa_101 = DFA.unpackEncodedStringToUnsignedChars(dfa_101s);
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final short[][] dfa_104 = unpackEncodedStringArray(dfa_104s);

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = dfa_99;
            this.eof = dfa_99;
            this.min = dfa_100;
            this.max = dfa_101;
            this.accept = dfa_102;
            this.special = dfa_103;
            this.transition = dfa_104;
        }
        public String getDescription() {
            return "3756:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_0 = input.LA(1);

                         
                        int index146_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA146_0>=10 && LA146_0<=110 && (s=T2S.M_4[LA146_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA146_0==Var) && (synpred57_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA146_0>=4 && LA146_0<=126 && (s=T2S.M_5[LA146_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA146_0==Delete||LA146_0==Typeof||LA146_0==Class||(LA146_0>=False && LA146_0<=Super)||(LA146_0>=Null && LA146_0<=True)||LA146_0==Void||LA146_0==New||LA146_0==PlusSignPlusSign||LA146_0==HyphenMinusHyphenMinus||LA146_0==SolidusEqualsSign||LA146_0==ExclamationMark||LA146_0==LeftParenthesis||LA146_0==PlusSign||LA146_0==HyphenMinus||LA146_0==Solidus||LA146_0==LessThanSign||(LA146_0>=CommercialAt && LA146_0<=LeftSquareBracket)||LA146_0==Tilde||LA146_0==RULE_DOUBLE||(LA146_0>=RULE_HEX_INT && LA146_0<=RULE_LEGACY_OCTAL_INT)||LA146_0==RULE_SCIENTIFIC_INT||LA146_0==RULE_STRING||(LA146_0>=RULE_TEMPLATE_HEAD && LA146_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA146_0==RULE_INT) ) {s = 33;}

                        else if ( (LA146_0==If) ) {s = 65;}

                        else if ( (LA146_0==While||LA146_0==For||LA146_0==Do) ) {s = 66;}

                        else if ( (LA146_0==Continue) ) {s = 69;}

                        else if ( (LA146_0==Break) ) {s = 70;}

                        else if ( (LA146_0==Return) ) {s = 71;}

                        else if ( (LA146_0==With) ) {s = 72;}

                        else if ( (LA146_0==Switch) ) {s = 73;}

                        else if ( (LA146_0==Throw) ) {s = 74;}

                        else if ( (LA146_0==Try) ) {s = 75;}

                        else if ( (LA146_0==Debugger) ) {s = 76;}

                         
                        input.seek(index146_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_5 = input.LA(1);

                         
                        int index146_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_7 = input.LA(1);

                         
                        int index146_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_8 = input.LA(1);

                         
                        int index146_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_9 = input.LA(1);

                         
                        int index146_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred57_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index146_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_10 = input.LA(1);

                         
                        int index146_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_11 = input.LA(1);

                         
                        int index146_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_13 = input.LA(1);

                         
                        int index146_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_15 = input.LA(1);

                         
                        int index146_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA146_16 = input.LA(1);

                         
                        int index146_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA146_17 = input.LA(1);

                         
                        int index146_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA146_18 = input.LA(1);

                         
                        int index146_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA146_19 = input.LA(1);

                         
                        int index146_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA146_20 = input.LA(1);

                         
                        int index146_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA146_21 = input.LA(1);

                         
                        int index146_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA146_22 = input.LA(1);

                         
                        int index146_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA146_23 = input.LA(1);

                         
                        int index146_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA146_24 = input.LA(1);

                         
                        int index146_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA146_25 = input.LA(1);

                         
                        int index146_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA146_26 = input.LA(1);

                         
                        int index146_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA146_27 = input.LA(1);

                         
                        int index146_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA146_28 = input.LA(1);

                         
                        int index146_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA146_29 = input.LA(1);

                         
                        int index146_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA146_30 = input.LA(1);

                         
                        int index146_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA146_31 = input.LA(1);

                         
                        int index146_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA146_32 = input.LA(1);

                         
                        int index146_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index146_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_105s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_106s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_107s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_108s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\60\uffff}>";
    static final String[] dfa_109s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\107\1\10\1\111\1\26\1\40\1\12\1\34\1\106\1\uffff\1\40\1\11\2\40\1\112\1\30\1\102\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\110\4\uffff\1\102\1\20\1\15\1\40\1\37\1\21\1\113\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\102\1\101\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final char[] dfa_106 = DFA.unpackEncodedStringToUnsignedChars(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final short[][] dfa_109 = unpackEncodedStringArray(dfa_109s);

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = dfa_99;
            this.eof = dfa_99;
            this.min = dfa_105;
            this.max = dfa_106;
            this.accept = dfa_107;
            this.special = dfa_108;
            this.transition = dfa_109;
        }
        public String getDescription() {
            return "3835:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_0 = input.LA(1);

                         
                        int index147_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA147_0>=10 && LA147_0<=110 && (s=T2S.M_4[LA147_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA147_0==Var) && (synpred61_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA147_0>=4 && LA147_0<=126 && (s=T2S.M_7[LA147_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA147_0==Delete||LA147_0==Typeof||LA147_0==Class||(LA147_0>=False && LA147_0<=Super)||LA147_0==Yield||(LA147_0>=Null && LA147_0<=True)||LA147_0==Void||LA147_0==New||LA147_0==PlusSignPlusSign||LA147_0==HyphenMinusHyphenMinus||LA147_0==SolidusEqualsSign||LA147_0==ExclamationMark||LA147_0==LeftParenthesis||LA147_0==PlusSign||LA147_0==HyphenMinus||LA147_0==Solidus||LA147_0==LessThanSign||(LA147_0>=CommercialAt && LA147_0<=LeftSquareBracket)||LA147_0==Tilde||LA147_0==RULE_DOUBLE||(LA147_0>=RULE_HEX_INT && LA147_0<=RULE_LEGACY_OCTAL_INT)||LA147_0==RULE_SCIENTIFIC_INT||LA147_0==RULE_STRING||(LA147_0>=RULE_TEMPLATE_HEAD && LA147_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA147_0==RULE_INT) ) {s = 32;}

                        else if ( (LA147_0==If) ) {s = 65;}

                        else if ( (LA147_0==While||LA147_0==For||LA147_0==Do) ) {s = 66;}

                        else if ( (LA147_0==Continue) ) {s = 69;}

                        else if ( (LA147_0==Break) ) {s = 70;}

                        else if ( (LA147_0==Return) ) {s = 71;}

                        else if ( (LA147_0==With) ) {s = 72;}

                        else if ( (LA147_0==Switch) ) {s = 73;}

                        else if ( (LA147_0==Throw) ) {s = 74;}

                        else if ( (LA147_0==Try) ) {s = 75;}

                        else if ( (LA147_0==Debugger) ) {s = 76;}

                         
                        input.seek(index147_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_1 = input.LA(1);

                         
                        int index147_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA147_2 = input.LA(1);

                         
                        int index147_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA147_3 = input.LA(1);

                         
                        int index147_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA147_4 = input.LA(1);

                         
                        int index147_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA147_5 = input.LA(1);

                         
                        int index147_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA147_6 = input.LA(1);

                         
                        int index147_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA147_7 = input.LA(1);

                         
                        int index147_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA147_8 = input.LA(1);

                         
                        int index147_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA147_9 = input.LA(1);

                         
                        int index147_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred61_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index147_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA147_10 = input.LA(1);

                         
                        int index147_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA147_11 = input.LA(1);

                         
                        int index147_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA147_13 = input.LA(1);

                         
                        int index147_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA147_15 = input.LA(1);

                         
                        int index147_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA147_16 = input.LA(1);

                         
                        int index147_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA147_17 = input.LA(1);

                         
                        int index147_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA147_18 = input.LA(1);

                         
                        int index147_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA147_19 = input.LA(1);

                         
                        int index147_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA147_20 = input.LA(1);

                         
                        int index147_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA147_21 = input.LA(1);

                         
                        int index147_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA147_22 = input.LA(1);

                         
                        int index147_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA147_23 = input.LA(1);

                         
                        int index147_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA147_24 = input.LA(1);

                         
                        int index147_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA147_25 = input.LA(1);

                         
                        int index147_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA147_26 = input.LA(1);

                         
                        int index147_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA147_27 = input.LA(1);

                         
                        int index147_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA147_28 = input.LA(1);

                         
                        int index147_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA147_29 = input.LA(1);

                         
                        int index147_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA147_30 = input.LA(1);

                         
                        int index147_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA147_31 = input.LA(1);

                         
                        int index147_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index147_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_110s = "\116\uffff";
    static final String dfa_111s = "\1\4\1\0\114\uffff";
    static final String dfa_112s = "\1\u0095\1\0\114\uffff";
    static final String dfa_113s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_114s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_115s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_110 = DFA.unpackEncodedString(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final short[][] dfa_115 = unpackEncodedStringArray(dfa_115s);

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = dfa_110;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "3919:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = dfa_110;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "3944:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_1 = input.LA(1);

                         
                        int index149_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index149_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_116s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\12\1\7\2\uffff\1\6\4\uffff\1\11\1\5\3\uffff\1\13\1\uffff\1\10\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };
    static final short[][] dfa_116 = unpackEncodedStringArray(dfa_116s);

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = dfa_47;
            this.eof = dfa_48;
            this.min = dfa_49;
            this.max = dfa_50;
            this.accept = dfa_51;
            this.special = dfa_52;
            this.transition = dfa_116;
        }
        public String getDescription() {
            return "()* loopback of 4069:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_117s = "\35\uffff";
    static final String dfa_118s = "\1\4\34\uffff";
    static final String dfa_119s = "\1\176\34\uffff";
    static final String dfa_120s = "\1\uffff\33\2\1\1";
    static final String dfa_121s = "\1\0\34\uffff}>";
    static final String[] dfa_122s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final char[] dfa_118 = DFA.unpackEncodedStringToUnsignedChars(dfa_118s);
    static final char[] dfa_119 = DFA.unpackEncodedStringToUnsignedChars(dfa_119s);
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);
    static final short[] dfa_121 = DFA.unpackEncodedString(dfa_121s);
    static final short[][] dfa_122 = unpackEncodedStringArray(dfa_122s);

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = dfa_117;
            this.eof = dfa_117;
            this.min = dfa_118;
            this.max = dfa_119;
            this.accept = dfa_120;
            this.special = dfa_121;
            this.transition = dfa_122;
        }
        public String getDescription() {
            return "()* loopback of 4551:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_0 = input.LA(1);

                         
                        int index164_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA164_0>=4 && LA164_0<=126 && (s=T2S.M_8[LA164_0-(4)])>=0) && (synpred81_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA164_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index164_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = dfa_117;
            this.eof = dfa_117;
            this.min = dfa_118;
            this.max = dfa_119;
            this.accept = dfa_120;
            this.special = dfa_121;
            this.transition = dfa_122;
        }
        public String getDescription() {
            return "()* loopback of 4597:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_0 = input.LA(1);

                         
                        int index166_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA166_0>=4 && LA166_0<=126 && (s=T2S.M_8[LA166_0-(4)])>=0) && (synpred82_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA166_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index166_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_123s = "\34\uffff";
    static final String dfa_124s = "\1\4\33\uffff";
    static final String dfa_125s = "\1\176\33\uffff";
    static final String dfa_126s = "\1\uffff\32\2\1\1";
    static final String dfa_127s = "\1\0\33\uffff}>";
    static final String[] dfa_128s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final char[] dfa_124 = DFA.unpackEncodedStringToUnsignedChars(dfa_124s);
    static final char[] dfa_125 = DFA.unpackEncodedStringToUnsignedChars(dfa_125s);
    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final short[] dfa_127 = DFA.unpackEncodedString(dfa_127s);
    static final short[][] dfa_128 = unpackEncodedStringArray(dfa_128s);

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = dfa_123;
            this.eof = dfa_123;
            this.min = dfa_124;
            this.max = dfa_125;
            this.accept = dfa_126;
            this.special = dfa_127;
            this.transition = dfa_128;
        }
        public String getDescription() {
            return "()* loopback of 4643:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_0 = input.LA(1);

                         
                        int index168_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA168_0>=4 && LA168_0<=126 && (s=T2S.M_10[LA168_0-(4)])>=0) && (synpred83_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA168_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index168_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = dfa_123;
            this.eof = dfa_123;
            this.min = dfa_124;
            this.max = dfa_125;
            this.accept = dfa_126;
            this.special = dfa_127;
            this.transition = dfa_128;
        }
        public String getDescription() {
            return "()* loopback of 4689:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_0 = input.LA(1);

                         
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA170_0>=4 && LA170_0<=126 && (s=T2S.M_10[LA170_0-(4)])>=0) && (synpred84_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA170_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = dfa_117;
            this.eof = dfa_117;
            this.min = dfa_118;
            this.max = dfa_119;
            this.accept = dfa_120;
            this.special = dfa_121;
            this.transition = dfa_122;
        }
        public String getDescription() {
            return "()* loopback of 4735:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_0 = input.LA(1);

                         
                        int index172_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA172_0>=4 && LA172_0<=126 && (s=T2S.M_8[LA172_0-(4)])>=0) && (synpred85_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA172_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index172_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = dfa_117;
            this.eof = dfa_117;
            this.min = dfa_118;
            this.max = dfa_119;
            this.accept = dfa_120;
            this.special = dfa_121;
            this.transition = dfa_122;
        }
        public String getDescription() {
            return "()* loopback of 4791:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_0 = input.LA(1);

                         
                        int index175_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA175_0>=4 && LA175_0<=126 && (s=T2S.M_8[LA175_0-(4)])>=0) && (synpred86_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA175_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index175_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = dfa_123;
            this.eof = dfa_123;
            this.min = dfa_124;
            this.max = dfa_125;
            this.accept = dfa_126;
            this.special = dfa_127;
            this.transition = dfa_128;
        }
        public String getDescription() {
            return "()* loopback of 4847:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA178_0 = input.LA(1);

                         
                        int index178_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA178_0>=4 && LA178_0<=126 && (s=T2S.M_10[LA178_0-(4)])>=0) && (synpred87_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA178_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index178_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = dfa_123;
            this.eof = dfa_123;
            this.min = dfa_124;
            this.max = dfa_125;
            this.accept = dfa_126;
            this.special = dfa_127;
            this.transition = dfa_128;
        }
        public String getDescription() {
            return "()* loopback of 4903:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_0 = input.LA(1);

                         
                        int index181_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA181_0>=4 && LA181_0<=126 && (s=T2S.M_10[LA181_0-(4)])>=0) && (synpred88_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA181_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index181_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_129s = "\1\1\1\4\1\0\2\uffff\1\3\1\uffff\1\2\124\uffff}>";
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = dfa_61;
            this.eof = dfa_62;
            this.min = dfa_63;
            this.max = dfa_64;
            this.accept = dfa_65;
            this.special = dfa_129;
            this.transition = dfa_67;
        }
        public String getDescription() {
            return "5326:2: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_2 = input.LA(1);

                         
                        int index190_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA190_2==EOF) ) {s = 7;}

                        
                        else if ((LA190_2>=-1 && LA190_2<=149 && (s=T2S.M_3[LA190_2-(-1)])>=0) && (synpred95_InternalN4JSXParser())) { /* 84 cases */ }
                        input.seek(index190_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA190_0 = input.LA(1);

                         
                        int index190_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA190_0==Semicolon) ) {s = 1;}

                        else if ( (LA190_0==EOF) ) {s = 2;}

                        else if ( (LA190_0==RULE_EOL) && (synpred95_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA190_0==RULE_ML_COMMENT) && (synpred95_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA190_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Default)||(LA190_0>=Private && LA190_0<=Break)||(LA190_0>=Class && LA190_0<=With)||(LA190_0>=For && LA190_0<=Var)||LA190_0==PlusSignPlusSign||LA190_0==HyphenMinusHyphenMinus||LA190_0==SolidusEqualsSign||(LA190_0>=As && LA190_0<=If)||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_HEX_INT && LA190_0<=RULE_LEGACY_OCTAL_INT)||LA190_0==RULE_SCIENTIFIC_INT||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_STRING||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index190_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA190_7 = input.LA(1);

                         
                        int index190_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA190_7==EOF) && (synpred95_InternalN4JSXParser())) {s = 91;}

                         
                        input.seek(index190_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA190_5 = input.LA(1);

                         
                        int index190_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSXParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index190_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA190_1 = input.LA(1);

                         
                        int index190_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index190_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_130s = "\102\uffff";
    static final String dfa_131s = "\1\4\1\0\100\uffff";
    static final String dfa_132s = "\1\u0095\1\0\100\uffff";
    static final String dfa_133s = "\2\uffff\1\2\76\uffff\1\1";
    static final String dfa_134s = "\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_135s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final char[] dfa_131 = DFA.unpackEncodedStringToUnsignedChars(dfa_131s);
    static final char[] dfa_132 = DFA.unpackEncodedStringToUnsignedChars(dfa_132s);
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final short[] dfa_134 = DFA.unpackEncodedString(dfa_134s);
    static final short[][] dfa_135 = unpackEncodedStringArray(dfa_135s);

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = dfa_130;
            this.eof = dfa_130;
            this.min = dfa_131;
            this.max = dfa_132;
            this.accept = dfa_133;
            this.special = dfa_134;
            this.transition = dfa_135;
        }
        public String getDescription() {
            return "5470:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA209_1 = input.LA(1);

                         
                        int index209_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index209_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_136s = "\1\4\2\uffff\1\0\75\uffff";
    static final String dfa_137s = "\1\u0095\2\uffff\1\0\75\uffff";
    static final String dfa_138s = "\1\uffff\2\1\1\uffff\1\2\73\uffff\1\3";
    static final String dfa_139s = "\1\0\2\uffff\1\1\75\uffff}>";
    static final String[] dfa_140s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\100\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_136 = DFA.unpackEncodedStringToUnsignedChars(dfa_136s);
    static final char[] dfa_137 = DFA.unpackEncodedStringToUnsignedChars(dfa_137s);
    static final short[] dfa_138 = DFA.unpackEncodedString(dfa_138s);
    static final short[] dfa_139 = DFA.unpackEncodedString(dfa_139s);
    static final short[][] dfa_140 = unpackEncodedStringArray(dfa_140s);

    class DFA208 extends DFA {

        public DFA208(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 208;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_136;
            this.max = dfa_137;
            this.accept = dfa_138;
            this.special = dfa_139;
            this.transition = dfa_140;
        }
        public String getDescription() {
            return "5522:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA208_0 = input.LA(1);

                         
                        int index208_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA208_0==Var) && (synpred98_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA208_0==Const) && (synpred98_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA208_0==Let) ) {s = 3;}

                        else if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||(LA208_0>=External && LA208_0<=Function)||(LA208_0>=Private && LA208_0<=Delete)||LA208_0==Public||LA208_0==Static||(LA208_0>=Target && LA208_0<=Await)||LA208_0==Class||(LA208_0>=False && LA208_0<=Super)||LA208_0==Union||(LA208_0>=Yield && LA208_0<=This)||(LA208_0>=From && LA208_0<=Void)||LA208_0==Get||(LA208_0>=New && LA208_0<=Set)||LA208_0==PlusSignPlusSign||LA208_0==HyphenMinusHyphenMinus||LA208_0==SolidusEqualsSign||LA208_0==As||LA208_0==Of||LA208_0==ExclamationMark||LA208_0==LeftParenthesis||LA208_0==PlusSign||LA208_0==HyphenMinus||LA208_0==Solidus||LA208_0==LessThanSign||(LA208_0>=CommercialAt && LA208_0<=LeftSquareBracket)||LA208_0==LeftCurlyBracket||LA208_0==Tilde||LA208_0==RULE_DOUBLE||(LA208_0>=RULE_HEX_INT && LA208_0<=RULE_LEGACY_OCTAL_INT)||LA208_0==RULE_SCIENTIFIC_INT||LA208_0==RULE_IDENTIFIER||LA208_0==RULE_STRING||(LA208_0>=RULE_TEMPLATE_HEAD && LA208_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA208_0==RULE_INT) ) {s = 4;}

                        else if ( (LA208_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index208_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA208_3 = input.LA(1);

                         
                        int index208_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index208_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 208, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_141s = "\40\uffff";
    static final String dfa_142s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_143s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_144s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_145s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_146s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final char[] dfa_142 = DFA.unpackEncodedStringToUnsignedChars(dfa_142s);
    static final char[] dfa_143 = DFA.unpackEncodedStringToUnsignedChars(dfa_143s);
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final short[] dfa_145 = DFA.unpackEncodedString(dfa_145s);
    static final short[][] dfa_146 = unpackEncodedStringArray(dfa_146s);

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = dfa_141;
            this.eof = dfa_141;
            this.min = dfa_142;
            this.max = dfa_143;
            this.accept = dfa_144;
            this.special = dfa_145;
            this.transition = dfa_146;
        }
        public String getDescription() {
            return "5533:6: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_30 = input.LA(1);

                         
                        int index200_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index200_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA200_29 = input.LA(1);

                         
                        int index200_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index200_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_147s = "\1\4\76\uffff";
    static final String dfa_148s = "\1\u0095\76\uffff";
    static final String dfa_149s = "\1\uffff\75\1\1\2";
    static final String dfa_150s = "\1\0\76\uffff}>";
    static final String[] dfa_151s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\61\3\uffff\1\32\1\12\1\65\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\54\1\37\1\51\1\23\1\66\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\16\3\uffff\1\21\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_147 = DFA.unpackEncodedStringToUnsignedChars(dfa_147s);
    static final char[] dfa_148 = DFA.unpackEncodedStringToUnsignedChars(dfa_148s);
    static final short[] dfa_149 = DFA.unpackEncodedString(dfa_149s);
    static final short[] dfa_150 = DFA.unpackEncodedString(dfa_150s);
    static final short[][] dfa_151 = unpackEncodedStringArray(dfa_151s);

    class DFA193 extends DFA {

        public DFA193(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 193;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_147;
            this.max = dfa_148;
            this.accept = dfa_149;
            this.special = dfa_150;
            this.transition = dfa_151;
        }
        public String getDescription() {
            return "5706:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA193_0 = input.LA(1);

                         
                        int index193_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA193_0>=4 && LA193_0<=149 && (s=T2S.M_17[LA193_0-(4)])>=0) && (synpred100_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA193_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index193_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 193, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = dfa_130;
            this.eof = dfa_130;
            this.min = dfa_131;
            this.max = dfa_132;
            this.accept = dfa_133;
            this.special = dfa_134;
            this.transition = dfa_135;
        }
        public String getDescription() {
            return "5981:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA227_1 = input.LA(1);

                         
                        int index227_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index227_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 227, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_136;
            this.max = dfa_137;
            this.accept = dfa_138;
            this.special = dfa_139;
            this.transition = dfa_140;
        }
        public String getDescription() {
            return "6033:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA226_0 = input.LA(1);

                         
                        int index226_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA226_0==Var) && (synpred102_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA226_0==Const) && (synpred102_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA226_0==Let) ) {s = 3;}

                        else if ( ((LA226_0>=Intersection && LA226_0<=Implements)||(LA226_0>=Promisify && LA226_0<=Abstract)||(LA226_0>=External && LA226_0<=Function)||(LA226_0>=Private && LA226_0<=Delete)||LA226_0==Public||LA226_0==Static||(LA226_0>=Target && LA226_0<=Await)||LA226_0==Class||(LA226_0>=False && LA226_0<=Super)||LA226_0==Union||(LA226_0>=Yield && LA226_0<=This)||(LA226_0>=From && LA226_0<=Void)||LA226_0==Get||(LA226_0>=New && LA226_0<=Set)||LA226_0==PlusSignPlusSign||LA226_0==HyphenMinusHyphenMinus||LA226_0==SolidusEqualsSign||LA226_0==As||LA226_0==Of||LA226_0==ExclamationMark||LA226_0==LeftParenthesis||LA226_0==PlusSign||LA226_0==HyphenMinus||LA226_0==Solidus||LA226_0==LessThanSign||(LA226_0>=CommercialAt && LA226_0<=LeftSquareBracket)||LA226_0==LeftCurlyBracket||LA226_0==Tilde||LA226_0==RULE_DOUBLE||(LA226_0>=RULE_HEX_INT && LA226_0<=RULE_LEGACY_OCTAL_INT)||LA226_0==RULE_SCIENTIFIC_INT||LA226_0==RULE_IDENTIFIER||LA226_0==RULE_STRING||(LA226_0>=RULE_TEMPLATE_HEAD && LA226_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA226_0==RULE_INT) ) {s = 4;}

                        else if ( (LA226_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index226_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA226_3 = input.LA(1);

                         
                        int index226_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index226_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 226, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_152s = "\37\uffff";
    static final String dfa_153s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_154s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_155s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_156s = "\34\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_157s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_152 = DFA.unpackEncodedString(dfa_152s);
    static final char[] dfa_153 = DFA.unpackEncodedStringToUnsignedChars(dfa_153s);
    static final char[] dfa_154 = DFA.unpackEncodedStringToUnsignedChars(dfa_154s);
    static final short[] dfa_155 = DFA.unpackEncodedString(dfa_155s);
    static final short[] dfa_156 = DFA.unpackEncodedString(dfa_156s);
    static final short[][] dfa_157 = unpackEncodedStringArray(dfa_157s);

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = dfa_152;
            this.eof = dfa_152;
            this.min = dfa_153;
            this.max = dfa_154;
            this.accept = dfa_155;
            this.special = dfa_156;
            this.transition = dfa_157;
        }
        public String getDescription() {
            return "6044:6: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA218_28 = input.LA(1);

                         
                        int index218_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index218_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA218_29 = input.LA(1);

                         
                        int index218_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index218_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 218, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_158s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\15\3\uffff\1\20\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_158 = unpackEncodedStringArray(dfa_158s);

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_147;
            this.max = dfa_148;
            this.accept = dfa_149;
            this.special = dfa_150;
            this.transition = dfa_158;
        }
        public String getDescription() {
            return "6217:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA211_0 = input.LA(1);

                         
                        int index211_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA211_0>=4 && LA211_0<=149 && (s=T2S.M_18[LA211_0-(4)])>=0) && (synpred104_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA211_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index211_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 211, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_159s = "\1\4\1\0\1\uffff\33\0\4\uffff";
    static final String dfa_160s = "\1\176\1\0\1\uffff\33\0\4\uffff";
    static final String dfa_161s = "\2\uffff\1\1\33\uffff\1\3\2\uffff\1\2";
    static final String dfa_162s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\4\uffff}>";
    static final String[] dfa_163s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_159 = DFA.unpackEncodedStringToUnsignedChars(dfa_159s);
    static final char[] dfa_160 = DFA.unpackEncodedStringToUnsignedChars(dfa_160s);
    static final short[] dfa_161 = DFA.unpackEncodedString(dfa_161s);
    static final short[] dfa_162 = DFA.unpackEncodedString(dfa_162s);
    static final short[][] dfa_163 = unpackEncodedStringArray(dfa_163s);

    class DFA249 extends DFA {

        public DFA249(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 249;
            this.eot = dfa_92;
            this.eof = dfa_92;
            this.min = dfa_159;
            this.max = dfa_160;
            this.accept = dfa_161;
            this.special = dfa_162;
            this.transition = dfa_163;
        }
        public String getDescription() {
            return "7343:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA249_0 = input.LA(1);

                         
                        int index249_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA249_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA249_0==LeftSquareBracket) && (synpred111_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA249_0>=4 && LA249_0<=126 && (s=T2S.M_19[LA249_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA249_0==This_1||LA249_0==Void||LA249_0==Tilde) ) {s = 30;}

                         
                        input.seek(index249_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA249_1 = input.LA(1);

                         
                        int index249_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA249_3 = input.LA(1);

                         
                        int index249_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA249_4 = input.LA(1);

                         
                        int index249_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA249_5 = input.LA(1);

                         
                        int index249_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA249_6 = input.LA(1);

                         
                        int index249_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA249_7 = input.LA(1);

                         
                        int index249_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA249_8 = input.LA(1);

                         
                        int index249_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA249_9 = input.LA(1);

                         
                        int index249_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA249_10 = input.LA(1);

                         
                        int index249_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA249_11 = input.LA(1);

                         
                        int index249_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA249_12 = input.LA(1);

                         
                        int index249_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA249_13 = input.LA(1);

                         
                        int index249_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA249_14 = input.LA(1);

                         
                        int index249_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA249_15 = input.LA(1);

                         
                        int index249_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA249_16 = input.LA(1);

                         
                        int index249_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA249_17 = input.LA(1);

                         
                        int index249_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA249_18 = input.LA(1);

                         
                        int index249_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA249_19 = input.LA(1);

                         
                        int index249_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA249_20 = input.LA(1);

                         
                        int index249_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA249_21 = input.LA(1);

                         
                        int index249_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA249_22 = input.LA(1);

                         
                        int index249_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA249_23 = input.LA(1);

                         
                        int index249_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA249_24 = input.LA(1);

                         
                        int index249_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA249_25 = input.LA(1);

                         
                        int index249_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA249_26 = input.LA(1);

                         
                        int index249_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA249_27 = input.LA(1);

                         
                        int index249_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA249_28 = input.LA(1);

                         
                        int index249_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA249_29 = input.LA(1);

                         
                        int index249_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index249_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 249, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_164s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_164 = unpackEncodedStringArray(dfa_164s);

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_164;
        }
        public String getDescription() {
            return "7383:3: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_165s = "\1\4\1\0\1\uffff\32\0\4\uffff";
    static final String dfa_166s = "\1\176\1\0\1\uffff\32\0\4\uffff";
    static final String dfa_167s = "\2\uffff\1\1\32\uffff\1\3\2\uffff\1\2";
    static final String dfa_168s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\4\uffff}>";
    static final String[] dfa_169s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_165 = DFA.unpackEncodedStringToUnsignedChars(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[][] dfa_169 = unpackEncodedStringArray(dfa_169s);

    class DFA251 extends DFA {

        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_169;
        }
        public String getDescription() {
            return "7402:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA251_0 = input.LA(1);

                         
                        int index251_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA251_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA251_0==LeftSquareBracket) && (synpred114_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA251_0>=4 && LA251_0<=126 && (s=T2S.M_20[LA251_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA251_0==This_1||LA251_0==Void||LA251_0==Tilde) ) {s = 29;}

                         
                        input.seek(index251_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA251_1 = input.LA(1);

                         
                        int index251_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA251_3 = input.LA(1);

                         
                        int index251_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA251_4 = input.LA(1);

                         
                        int index251_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA251_5 = input.LA(1);

                         
                        int index251_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA251_6 = input.LA(1);

                         
                        int index251_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA251_7 = input.LA(1);

                         
                        int index251_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA251_8 = input.LA(1);

                         
                        int index251_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA251_9 = input.LA(1);

                         
                        int index251_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA251_10 = input.LA(1);

                         
                        int index251_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA251_11 = input.LA(1);

                         
                        int index251_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA251_12 = input.LA(1);

                         
                        int index251_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA251_13 = input.LA(1);

                         
                        int index251_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA251_14 = input.LA(1);

                         
                        int index251_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA251_15 = input.LA(1);

                         
                        int index251_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA251_16 = input.LA(1);

                         
                        int index251_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA251_17 = input.LA(1);

                         
                        int index251_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA251_18 = input.LA(1);

                         
                        int index251_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA251_19 = input.LA(1);

                         
                        int index251_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA251_20 = input.LA(1);

                         
                        int index251_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA251_21 = input.LA(1);

                         
                        int index251_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA251_22 = input.LA(1);

                         
                        int index251_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA251_23 = input.LA(1);

                         
                        int index251_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA251_24 = input.LA(1);

                         
                        int index251_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA251_25 = input.LA(1);

                         
                        int index251_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA251_26 = input.LA(1);

                         
                        int index251_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA251_27 = input.LA(1);

                         
                        int index251_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA251_28 = input.LA(1);

                         
                        int index251_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 32;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index251_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 251, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_170s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA250 extends DFA {

        public DFA250(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 250;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "7442:3: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_171s = "\5\uffff";
    static final String dfa_172s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_173s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_174s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_175s = "\5\uffff}>";
    static final String[] dfa_176s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA254 extends DFA {

        public DFA254(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 254;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 7680:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA260 extends DFA {

        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 7750:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_177s = "\114\uffff";
    static final String dfa_178s = "\1\4\1\uffff\104\0\6\uffff";
    static final String dfa_179s = "\1\u0095\1\uffff\104\0\6\uffff";
    static final String dfa_180s = "\1\uffff\1\1\104\uffff\2\5\1\6\1\2\1\3\1\4";
    static final String dfa_181s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\6\uffff}>";
    static final String[] dfa_182s = {
            "\1\16\1\13\1\75\1\42\1\5\1\76\1\100\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\6\1\51\1\74\1\4\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\15\1\53\1\55\1\3\1\20\1\31\1\61\1\72\1\56\1\11\1\57\1\12\1\2\1\54\4\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\3\uffff\1\1\1\105\2\uffff\1\14\2\uffff\1\10\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\7\2\uffff\1\103\23\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[][] dfa_182 = unpackEncodedStringArray(dfa_182s);

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "7971:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA272_0 = input.LA(1);

                         
                        int index272_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA272_0>=4 && LA272_0<=129 && (s=T2S.M_21[LA272_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA272_0==RULE_DOUBLE||LA272_0==RULE_HEX_INT||LA272_0==RULE_OCTAL_INT||LA272_0==RULE_SCIENTIFIC_INT||LA272_0==RULE_INT) ) {s = 68;}

                        else if ( (LA272_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA272_0==LessThanSign) && (synpred122_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA272_0==Asterisk) && (synpred122_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA272_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index272_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA272_2 = input.LA(1);

                         
                        int index272_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA272_3 = input.LA(1);

                         
                        int index272_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA272_4 = input.LA(1);

                         
                        int index272_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA272_5 = input.LA(1);

                         
                        int index272_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA272_6 = input.LA(1);

                         
                        int index272_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA272_7 = input.LA(1);

                         
                        int index272_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA272_8 = input.LA(1);

                         
                        int index272_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA272_9 = input.LA(1);

                         
                        int index272_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA272_10 = input.LA(1);

                         
                        int index272_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA272_11 = input.LA(1);

                         
                        int index272_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA272_12 = input.LA(1);

                         
                        int index272_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA272_13 = input.LA(1);

                         
                        int index272_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA272_14 = input.LA(1);

                         
                        int index272_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA272_15 = input.LA(1);

                         
                        int index272_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA272_16 = input.LA(1);

                         
                        int index272_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA272_17 = input.LA(1);

                         
                        int index272_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA272_18 = input.LA(1);

                         
                        int index272_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA272_19 = input.LA(1);

                         
                        int index272_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA272_20 = input.LA(1);

                         
                        int index272_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA272_21 = input.LA(1);

                         
                        int index272_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA272_22 = input.LA(1);

                         
                        int index272_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA272_23 = input.LA(1);

                         
                        int index272_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA272_24 = input.LA(1);

                         
                        int index272_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA272_25 = input.LA(1);

                         
                        int index272_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA272_26 = input.LA(1);

                         
                        int index272_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA272_27 = input.LA(1);

                         
                        int index272_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA272_28 = input.LA(1);

                         
                        int index272_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA272_29 = input.LA(1);

                         
                        int index272_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA272_30 = input.LA(1);

                         
                        int index272_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA272_31 = input.LA(1);

                         
                        int index272_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA272_32 = input.LA(1);

                         
                        int index272_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA272_33 = input.LA(1);

                         
                        int index272_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA272_34 = input.LA(1);

                         
                        int index272_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA272_35 = input.LA(1);

                         
                        int index272_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA272_36 = input.LA(1);

                         
                        int index272_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA272_37 = input.LA(1);

                         
                        int index272_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA272_38 = input.LA(1);

                         
                        int index272_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA272_39 = input.LA(1);

                         
                        int index272_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA272_40 = input.LA(1);

                         
                        int index272_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA272_41 = input.LA(1);

                         
                        int index272_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA272_42 = input.LA(1);

                         
                        int index272_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA272_43 = input.LA(1);

                         
                        int index272_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA272_44 = input.LA(1);

                         
                        int index272_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA272_45 = input.LA(1);

                         
                        int index272_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA272_46 = input.LA(1);

                         
                        int index272_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA272_47 = input.LA(1);

                         
                        int index272_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA272_48 = input.LA(1);

                         
                        int index272_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA272_49 = input.LA(1);

                         
                        int index272_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA272_50 = input.LA(1);

                         
                        int index272_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA272_51 = input.LA(1);

                         
                        int index272_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA272_52 = input.LA(1);

                         
                        int index272_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA272_53 = input.LA(1);

                         
                        int index272_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA272_54 = input.LA(1);

                         
                        int index272_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA272_55 = input.LA(1);

                         
                        int index272_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA272_56 = input.LA(1);

                         
                        int index272_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA272_57 = input.LA(1);

                         
                        int index272_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA272_58 = input.LA(1);

                         
                        int index272_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA272_59 = input.LA(1);

                         
                        int index272_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA272_60 = input.LA(1);

                         
                        int index272_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA272_61 = input.LA(1);

                         
                        int index272_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA272_62 = input.LA(1);

                         
                        int index272_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA272_63 = input.LA(1);

                         
                        int index272_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA272_64 = input.LA(1);

                         
                        int index272_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA272_65 = input.LA(1);

                         
                        int index272_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA272_66 = input.LA(1);

                         
                        int index272_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA272_67 = input.LA(1);

                         
                        int index272_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA272_68 = input.LA(1);

                         
                        int index272_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index272_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA272_69 = input.LA(1);

                         
                        int index272_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 272, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA273 extends DFA {

        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "8202:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA273_0 = input.LA(1);

                         
                        int index273_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA273_0>=4 && LA273_0<=129 && (s=T2S.M_21[LA273_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA273_0==RULE_DOUBLE||LA273_0==RULE_HEX_INT||LA273_0==RULE_OCTAL_INT||LA273_0==RULE_SCIENTIFIC_INT||LA273_0==RULE_INT) ) {s = 68;}

                        else if ( (LA273_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA273_0==LessThanSign) && (synpred126_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA273_0==Asterisk) && (synpred126_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA273_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index273_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA273_2 = input.LA(1);

                         
                        int index273_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA273_3 = input.LA(1);

                         
                        int index273_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA273_4 = input.LA(1);

                         
                        int index273_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA273_5 = input.LA(1);

                         
                        int index273_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA273_6 = input.LA(1);

                         
                        int index273_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA273_7 = input.LA(1);

                         
                        int index273_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA273_8 = input.LA(1);

                         
                        int index273_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA273_9 = input.LA(1);

                         
                        int index273_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA273_10 = input.LA(1);

                         
                        int index273_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA273_11 = input.LA(1);

                         
                        int index273_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA273_12 = input.LA(1);

                         
                        int index273_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA273_13 = input.LA(1);

                         
                        int index273_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA273_14 = input.LA(1);

                         
                        int index273_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA273_15 = input.LA(1);

                         
                        int index273_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA273_16 = input.LA(1);

                         
                        int index273_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA273_17 = input.LA(1);

                         
                        int index273_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA273_18 = input.LA(1);

                         
                        int index273_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA273_19 = input.LA(1);

                         
                        int index273_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA273_20 = input.LA(1);

                         
                        int index273_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA273_21 = input.LA(1);

                         
                        int index273_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA273_22 = input.LA(1);

                         
                        int index273_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA273_23 = input.LA(1);

                         
                        int index273_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA273_24 = input.LA(1);

                         
                        int index273_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA273_25 = input.LA(1);

                         
                        int index273_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA273_26 = input.LA(1);

                         
                        int index273_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA273_27 = input.LA(1);

                         
                        int index273_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA273_28 = input.LA(1);

                         
                        int index273_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA273_29 = input.LA(1);

                         
                        int index273_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA273_30 = input.LA(1);

                         
                        int index273_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA273_31 = input.LA(1);

                         
                        int index273_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA273_32 = input.LA(1);

                         
                        int index273_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA273_33 = input.LA(1);

                         
                        int index273_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA273_34 = input.LA(1);

                         
                        int index273_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA273_35 = input.LA(1);

                         
                        int index273_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA273_36 = input.LA(1);

                         
                        int index273_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA273_37 = input.LA(1);

                         
                        int index273_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA273_38 = input.LA(1);

                         
                        int index273_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA273_39 = input.LA(1);

                         
                        int index273_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA273_40 = input.LA(1);

                         
                        int index273_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA273_41 = input.LA(1);

                         
                        int index273_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA273_42 = input.LA(1);

                         
                        int index273_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA273_43 = input.LA(1);

                         
                        int index273_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA273_44 = input.LA(1);

                         
                        int index273_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA273_45 = input.LA(1);

                         
                        int index273_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA273_46 = input.LA(1);

                         
                        int index273_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA273_47 = input.LA(1);

                         
                        int index273_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA273_48 = input.LA(1);

                         
                        int index273_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA273_49 = input.LA(1);

                         
                        int index273_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA273_50 = input.LA(1);

                         
                        int index273_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA273_51 = input.LA(1);

                         
                        int index273_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA273_52 = input.LA(1);

                         
                        int index273_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA273_53 = input.LA(1);

                         
                        int index273_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA273_54 = input.LA(1);

                         
                        int index273_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA273_55 = input.LA(1);

                         
                        int index273_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA273_56 = input.LA(1);

                         
                        int index273_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA273_57 = input.LA(1);

                         
                        int index273_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA273_58 = input.LA(1);

                         
                        int index273_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA273_59 = input.LA(1);

                         
                        int index273_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA273_60 = input.LA(1);

                         
                        int index273_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA273_61 = input.LA(1);

                         
                        int index273_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA273_62 = input.LA(1);

                         
                        int index273_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA273_63 = input.LA(1);

                         
                        int index273_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA273_64 = input.LA(1);

                         
                        int index273_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA273_65 = input.LA(1);

                         
                        int index273_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA273_66 = input.LA(1);

                         
                        int index273_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA273_67 = input.LA(1);

                         
                        int index273_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA273_68 = input.LA(1);

                         
                        int index273_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index273_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA273_69 = input.LA(1);

                         
                        int index273_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index273_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 273, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_183s = "\113\uffff";
    static final String dfa_184s = "\1\4\104\0\6\uffff";
    static final String dfa_185s = "\1\u0095\104\0\6\uffff";
    static final String dfa_186s = "\105\uffff\2\4\1\5\1\1\1\2\1\3";
    static final String dfa_187s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\6\uffff}>";
    static final String[] dfa_188s = {
            "\1\15\1\12\1\74\1\41\1\4\1\75\1\77\1\66\1\23\1\24\1\65\1\35\1\25\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\5\1\50\1\73\1\3\1\16\1\20\1\21\1\22\1\57\1\44\1\46\1\14\1\52\1\54\1\2\1\17\1\30\1\60\1\71\1\55\1\10\1\56\1\11\1\1\1\53\4\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\21\uffff\1\70\1\27\1\36\1\40\1\72\5\uffff\1\107\1\uffff\1\106\7\uffff\1\105\4\uffff\1\104\2\uffff\1\13\2\uffff\1\7\3\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\6\2\uffff\1\102\23\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA282 extends DFA {

        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "8440:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_2_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_2_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_3_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_5_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA282_0 = input.LA(1);

                         
                        int index282_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA282_0>=4 && LA282_0<=129 && (s=T2S.M_23[LA282_0-(4)])>=0)) { /* 66 cases */ }
                        else if ( (LA282_0==RULE_DOUBLE||LA282_0==RULE_HEX_INT||LA282_0==RULE_OCTAL_INT||LA282_0==RULE_SCIENTIFIC_INT||LA282_0==RULE_INT) ) {s = 67;}

                        else if ( (LA282_0==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA282_0==LessThanSign) && (synpred133_InternalN4JSXParser())) {s = 69;}

                        else if ( (LA282_0==Asterisk) && (synpred133_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA282_0==LeftParenthesis) ) {s = 71;}

                         
                        input.seek(index282_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA282_1 = input.LA(1);

                         
                        int index282_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA282_2 = input.LA(1);

                         
                        int index282_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA282_3 = input.LA(1);

                         
                        int index282_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA282_4 = input.LA(1);

                         
                        int index282_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA282_5 = input.LA(1);

                         
                        int index282_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA282_6 = input.LA(1);

                         
                        int index282_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA282_7 = input.LA(1);

                         
                        int index282_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA282_8 = input.LA(1);

                         
                        int index282_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA282_9 = input.LA(1);

                         
                        int index282_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA282_10 = input.LA(1);

                         
                        int index282_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA282_11 = input.LA(1);

                         
                        int index282_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA282_12 = input.LA(1);

                         
                        int index282_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA282_13 = input.LA(1);

                         
                        int index282_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA282_14 = input.LA(1);

                         
                        int index282_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA282_15 = input.LA(1);

                         
                        int index282_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA282_16 = input.LA(1);

                         
                        int index282_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA282_17 = input.LA(1);

                         
                        int index282_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA282_18 = input.LA(1);

                         
                        int index282_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA282_19 = input.LA(1);

                         
                        int index282_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA282_20 = input.LA(1);

                         
                        int index282_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA282_21 = input.LA(1);

                         
                        int index282_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA282_22 = input.LA(1);

                         
                        int index282_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA282_23 = input.LA(1);

                         
                        int index282_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA282_24 = input.LA(1);

                         
                        int index282_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA282_25 = input.LA(1);

                         
                        int index282_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA282_26 = input.LA(1);

                         
                        int index282_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA282_27 = input.LA(1);

                         
                        int index282_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA282_28 = input.LA(1);

                         
                        int index282_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA282_29 = input.LA(1);

                         
                        int index282_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA282_30 = input.LA(1);

                         
                        int index282_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA282_31 = input.LA(1);

                         
                        int index282_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA282_32 = input.LA(1);

                         
                        int index282_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA282_33 = input.LA(1);

                         
                        int index282_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA282_34 = input.LA(1);

                         
                        int index282_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA282_35 = input.LA(1);

                         
                        int index282_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA282_36 = input.LA(1);

                         
                        int index282_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA282_37 = input.LA(1);

                         
                        int index282_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA282_38 = input.LA(1);

                         
                        int index282_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA282_39 = input.LA(1);

                         
                        int index282_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA282_40 = input.LA(1);

                         
                        int index282_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA282_41 = input.LA(1);

                         
                        int index282_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA282_42 = input.LA(1);

                         
                        int index282_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA282_43 = input.LA(1);

                         
                        int index282_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA282_44 = input.LA(1);

                         
                        int index282_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA282_45 = input.LA(1);

                         
                        int index282_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA282_46 = input.LA(1);

                         
                        int index282_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA282_47 = input.LA(1);

                         
                        int index282_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA282_48 = input.LA(1);

                         
                        int index282_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA282_49 = input.LA(1);

                         
                        int index282_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA282_50 = input.LA(1);

                         
                        int index282_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred130_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA282_51 = input.LA(1);

                         
                        int index282_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA282_52 = input.LA(1);

                         
                        int index282_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA282_53 = input.LA(1);

                         
                        int index282_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA282_54 = input.LA(1);

                         
                        int index282_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA282_55 = input.LA(1);

                         
                        int index282_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA282_56 = input.LA(1);

                         
                        int index282_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA282_57 = input.LA(1);

                         
                        int index282_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA282_58 = input.LA(1);

                         
                        int index282_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA282_59 = input.LA(1);

                         
                        int index282_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA282_60 = input.LA(1);

                         
                        int index282_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA282_61 = input.LA(1);

                         
                        int index282_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA282_62 = input.LA(1);

                         
                        int index282_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA282_63 = input.LA(1);

                         
                        int index282_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA282_64 = input.LA(1);

                         
                        int index282_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA282_65 = input.LA(1);

                         
                        int index282_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA282_66 = input.LA(1);

                         
                        int index282_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA282_67 = input.LA(1);

                         
                        int index282_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index282_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA282_68 = input.LA(1);

                         
                        int index282_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index282_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 282, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_189s = "\16\uffff";
    static final String dfa_190s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_191s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_192s = "\7\uffff\1\1\5\uffff\1\2";
    static final String dfa_193s = "\16\uffff}>";
    static final String[] dfa_194s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\24\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };

    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final char[] dfa_190 = DFA.unpackEncodedStringToUnsignedChars(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[][] dfa_194 = unpackEncodedStringArray(dfa_194s);

    class DFA274 extends DFA {

        public DFA274(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 274;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8458:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_195s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_196s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\7\uffff\1\15\14\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_195 = DFA.unpackEncodedStringToUnsignedChars(dfa_195s);
    static final short[][] dfa_196 = unpackEncodedStringArray(dfa_196s);

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8812:6: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_197s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_198s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String[] dfa_199s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\16\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);

    class DFA280 extends DFA {

        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "8869:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA291 extends DFA {

        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "8908:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_2_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_2_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_3_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_5_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA291_0 = input.LA(1);

                         
                        int index291_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA291_0>=4 && LA291_0<=129 && (s=T2S.M_23[LA291_0-(4)])>=0)) { /* 66 cases */ }
                        else if ( (LA291_0==RULE_DOUBLE||LA291_0==RULE_HEX_INT||LA291_0==RULE_OCTAL_INT||LA291_0==RULE_SCIENTIFIC_INT||LA291_0==RULE_INT) ) {s = 67;}

                        else if ( (LA291_0==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA291_0==LessThanSign) && (synpred142_InternalN4JSXParser())) {s = 69;}

                        else if ( (LA291_0==Asterisk) && (synpred142_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA291_0==LeftParenthesis) ) {s = 71;}

                         
                        input.seek(index291_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA291_1 = input.LA(1);

                         
                        int index291_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA291_2 = input.LA(1);

                         
                        int index291_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA291_3 = input.LA(1);

                         
                        int index291_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA291_4 = input.LA(1);

                         
                        int index291_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA291_5 = input.LA(1);

                         
                        int index291_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA291_6 = input.LA(1);

                         
                        int index291_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA291_7 = input.LA(1);

                         
                        int index291_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA291_8 = input.LA(1);

                         
                        int index291_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA291_9 = input.LA(1);

                         
                        int index291_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA291_10 = input.LA(1);

                         
                        int index291_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA291_11 = input.LA(1);

                         
                        int index291_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA291_12 = input.LA(1);

                         
                        int index291_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA291_13 = input.LA(1);

                         
                        int index291_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA291_14 = input.LA(1);

                         
                        int index291_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA291_15 = input.LA(1);

                         
                        int index291_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA291_16 = input.LA(1);

                         
                        int index291_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA291_17 = input.LA(1);

                         
                        int index291_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA291_18 = input.LA(1);

                         
                        int index291_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA291_19 = input.LA(1);

                         
                        int index291_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA291_20 = input.LA(1);

                         
                        int index291_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA291_21 = input.LA(1);

                         
                        int index291_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA291_22 = input.LA(1);

                         
                        int index291_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA291_23 = input.LA(1);

                         
                        int index291_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA291_24 = input.LA(1);

                         
                        int index291_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA291_25 = input.LA(1);

                         
                        int index291_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA291_26 = input.LA(1);

                         
                        int index291_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA291_27 = input.LA(1);

                         
                        int index291_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA291_28 = input.LA(1);

                         
                        int index291_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA291_29 = input.LA(1);

                         
                        int index291_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA291_30 = input.LA(1);

                         
                        int index291_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA291_31 = input.LA(1);

                         
                        int index291_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA291_32 = input.LA(1);

                         
                        int index291_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA291_33 = input.LA(1);

                         
                        int index291_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA291_34 = input.LA(1);

                         
                        int index291_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA291_35 = input.LA(1);

                         
                        int index291_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA291_36 = input.LA(1);

                         
                        int index291_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA291_37 = input.LA(1);

                         
                        int index291_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA291_38 = input.LA(1);

                         
                        int index291_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA291_39 = input.LA(1);

                         
                        int index291_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA291_40 = input.LA(1);

                         
                        int index291_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA291_41 = input.LA(1);

                         
                        int index291_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA291_42 = input.LA(1);

                         
                        int index291_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA291_43 = input.LA(1);

                         
                        int index291_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA291_44 = input.LA(1);

                         
                        int index291_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA291_45 = input.LA(1);

                         
                        int index291_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA291_46 = input.LA(1);

                         
                        int index291_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA291_47 = input.LA(1);

                         
                        int index291_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA291_48 = input.LA(1);

                         
                        int index291_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA291_49 = input.LA(1);

                         
                        int index291_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA291_50 = input.LA(1);

                         
                        int index291_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred139_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA291_51 = input.LA(1);

                         
                        int index291_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA291_52 = input.LA(1);

                         
                        int index291_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA291_53 = input.LA(1);

                         
                        int index291_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA291_54 = input.LA(1);

                         
                        int index291_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA291_55 = input.LA(1);

                         
                        int index291_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA291_56 = input.LA(1);

                         
                        int index291_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA291_57 = input.LA(1);

                         
                        int index291_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA291_58 = input.LA(1);

                         
                        int index291_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA291_59 = input.LA(1);

                         
                        int index291_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA291_60 = input.LA(1);

                         
                        int index291_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA291_61 = input.LA(1);

                         
                        int index291_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA291_62 = input.LA(1);

                         
                        int index291_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA291_63 = input.LA(1);

                         
                        int index291_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA291_64 = input.LA(1);

                         
                        int index291_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA291_65 = input.LA(1);

                         
                        int index291_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA291_66 = input.LA(1);

                         
                        int index291_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA291_67 = input.LA(1);

                         
                        int index291_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                         
                        input.seek(index291_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA291_68 = input.LA(1);

                         
                        int index291_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 70;}

                        else if ( (true) ) {s = 71;}

                         
                        input.seek(index291_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 291, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA283 extends DFA {

        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8926:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA286 extends DFA {

        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "9280:6: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_200s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\16\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_200 = unpackEncodedStringArray(dfa_200s);

    class DFA289 extends DFA {

        public DFA289(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 289;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "9337:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA293 extends DFA {

        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "9420:4: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA297 extends DFA {

        public DFA297(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "9523:4: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_201s = "\7\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_202s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff\1\u0095";
    static final String dfa_203s = "\7\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_204s = "\17\uffff}>";
    static final String[] dfa_205s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\24\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\16\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "\1\15\4\uffff\1\15\4\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\15\uffff\1\15\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7"
    };
    static final char[] dfa_201 = DFA.unpackEncodedStringToUnsignedChars(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final short[] dfa_203 = DFA.unpackEncodedString(dfa_203s);
    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final short[][] dfa_205 = unpackEncodedStringArray(dfa_205s);

    class DFA300 extends DFA {

        public DFA300(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 300;
            this.eot = dfa_15;
            this.eof = dfa_15;
            this.min = dfa_201;
            this.max = dfa_202;
            this.accept = dfa_203;
            this.special = dfa_204;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "9612:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA302 extends DFA {

        public DFA302(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 302;
            this.eot = dfa_15;
            this.eof = dfa_15;
            this.min = dfa_201;
            this.max = dfa_202;
            this.accept = dfa_203;
            this.special = dfa_204;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "9677:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA304 extends DFA {

        public DFA304(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 304;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "9726:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA306 extends DFA {

        public DFA306(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 306;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "9762:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_206s = "\70\uffff";
    static final String dfa_207s = "\2\4\66\uffff";
    static final String dfa_208s = "\2\u0095\66\uffff";
    static final String dfa_209s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_210s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_211s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\64\3\uffff\1\36\1\14\3\uffff\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\55\1\5\1\52\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\13\uffff\1\57\7\uffff\1\20\3\uffff\1\23\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\42\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_206 = DFA.unpackEncodedString(dfa_206s);
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[][] dfa_211 = unpackEncodedStringArray(dfa_211s);

    class DFA326 extends DFA {

        public DFA326(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 326;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "10716:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA326_1 = input.LA(1);

                         
                        int index326_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA326_1==FullStop) && (synpred165_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA326_1>=4 && LA326_1<=149 && (s=T2S.M_25[LA326_1-(4)])>=0) && (synpred166_InternalN4JSXParser())) { /* 53 cases */ }
                        input.seek(index326_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 326, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_212s = "\2\4\65\uffff";
    static final String dfa_213s = "\2\u0095\65\uffff";
    static final String dfa_214s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_215s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_216s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_212 = DFA.unpackEncodedStringToUnsignedChars(dfa_212s);
    static final char[] dfa_213 = DFA.unpackEncodedStringToUnsignedChars(dfa_213s);
    static final short[] dfa_214 = DFA.unpackEncodedString(dfa_214s);
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final short[][] dfa_216 = unpackEncodedStringArray(dfa_216s);

    class DFA332 extends DFA {

        public DFA332(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 332;
            this.eot = dfa_33;
            this.eof = dfa_33;
            this.min = dfa_212;
            this.max = dfa_213;
            this.accept = dfa_214;
            this.special = dfa_215;
            this.transition = dfa_216;
        }
        public String getDescription() {
            return "10838:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA332_1 = input.LA(1);

                         
                        int index332_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA332_1==FullStop) && (synpred169_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA332_1>=4 && LA332_1<=149 && (s=T2S.M_26[LA332_1-(4)])>=0) && (synpred170_InternalN4JSXParser())) { /* 52 cases */ }
                        input.seek(index332_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 332, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_217s = "\103\uffff";
    static final String dfa_218s = "\1\1\102\uffff";
    static final String dfa_219s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_220s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_221s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_222s = "\1\1\3\uffff\1\0\76\uffff}>";
    static final String[] dfa_223s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final char[] dfa_219 = DFA.unpackEncodedStringToUnsignedChars(dfa_219s);
    static final char[] dfa_220 = DFA.unpackEncodedStringToUnsignedChars(dfa_220s);
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[][] dfa_223 = unpackEncodedStringArray(dfa_223s);

    class DFA345 extends DFA {

        public DFA345(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 345;
            this.eot = dfa_217;
            this.eof = dfa_218;
            this.min = dfa_219;
            this.max = dfa_220;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_223;
        }
        public String getDescription() {
            return "()* loopback of 11408:2: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA345_4 = input.LA(1);

                         
                        int index345_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA345_4>=4 && LA345_4<=149 && (s=T2S.M_27[LA345_4-(4)])>=0) && (synpred181_InternalN4JSXParser())) { /* 63 cases */ }
                        input.seek(index345_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA345_0 = input.LA(1);

                         
                        int index345_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_0==EOF||LA345_0==Instanceof||LA345_0==ExclamationMarkEqualsSignEqualsSign||(LA345_0>=LessThanSignLessThanSignEqualsSign && LA345_0<=EqualsSignEqualsSignEqualsSign)||(LA345_0>=ExclamationMarkEqualsSign && LA345_0<=AsteriskEqualsSign)||LA345_0==PlusSignEqualsSign||(LA345_0>=HyphenMinusEqualsSign && LA345_0<=SolidusEqualsSign)||(LA345_0>=LessThanSignEqualsSign && LA345_0<=EqualsSignEqualsSign)||LA345_0==GreaterThanSignEqualsSign||LA345_0==CircumflexAccentEqualsSign||(LA345_0>=In && LA345_0<=VerticalLineVerticalLine)||LA345_0==Ampersand||LA345_0==RightParenthesis||LA345_0==Comma||(LA345_0>=Colon && LA345_0<=EqualsSign)||LA345_0==QuestionMark||(LA345_0>=RightSquareBracket && LA345_0<=CircumflexAccent)||(LA345_0>=VerticalLine && LA345_0<=RightCurlyBracket)||LA345_0==RULE_ML_COMMENT||LA345_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA345_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA345_0==LessThanSignLessThanSign) && (synpred181_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index345_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 345, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_224s = "\1\1\101\uffff";
    static final String dfa_225s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_226s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_227s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_228s = "\1\0\3\uffff\1\1\75\uffff}>";
    static final String[] dfa_229s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\65\3\uffff\1\37\1\15\1\71\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\73\1\34\1\33\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final char[] dfa_225 = DFA.unpackEncodedStringToUnsignedChars(dfa_225s);
    static final char[] dfa_226 = DFA.unpackEncodedStringToUnsignedChars(dfa_226s);
    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final short[] dfa_228 = DFA.unpackEncodedString(dfa_228s);
    static final short[][] dfa_229 = unpackEncodedStringArray(dfa_229s);

    class DFA346 extends DFA {

        public DFA346(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 346;
            this.eot = dfa_130;
            this.eof = dfa_224;
            this.min = dfa_225;
            this.max = dfa_226;
            this.accept = dfa_227;
            this.special = dfa_228;
            this.transition = dfa_229;
        }
        public String getDescription() {
            return "()* loopback of 11449:2: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA346_0 = input.LA(1);

                         
                        int index346_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA346_0==EOF||LA346_0==Instanceof||LA346_0==ExclamationMarkEqualsSignEqualsSign||(LA346_0>=LessThanSignLessThanSignEqualsSign && LA346_0<=EqualsSignEqualsSignEqualsSign)||(LA346_0>=ExclamationMarkEqualsSign && LA346_0<=AsteriskEqualsSign)||LA346_0==PlusSignEqualsSign||(LA346_0>=HyphenMinusEqualsSign && LA346_0<=SolidusEqualsSign)||(LA346_0>=LessThanSignEqualsSign && LA346_0<=EqualsSignEqualsSign)||LA346_0==GreaterThanSignEqualsSign||LA346_0==CircumflexAccentEqualsSign||(LA346_0>=In && LA346_0<=VerticalLineVerticalLine)||LA346_0==Ampersand||LA346_0==RightParenthesis||LA346_0==Comma||(LA346_0>=Colon && LA346_0<=EqualsSign)||LA346_0==QuestionMark||(LA346_0>=RightSquareBracket && LA346_0<=CircumflexAccent)||(LA346_0>=VerticalLine && LA346_0<=RightCurlyBracket)||LA346_0==RULE_ML_COMMENT||LA346_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA346_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA346_0==LessThanSignLessThanSign) && (synpred182_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index346_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA346_4 = input.LA(1);

                         
                        int index346_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA346_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA346_4>=4 && LA346_4<=149 && (s=T2S.M_28[LA346_4-(4)])>=0) && (synpred182_InternalN4JSXParser())) { /* 62 cases */ }
                        input.seek(index346_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 346, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_230s = "\104\uffff";
    static final String dfa_231s = "\1\1\103\uffff";
    static final String dfa_232s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_233s = "\1\160\1\uffff\1\u0095\101\uffff";
    static final String dfa_234s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_235s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_236s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final char[] dfa_232 = DFA.unpackEncodedStringToUnsignedChars(dfa_232s);
    static final char[] dfa_233 = DFA.unpackEncodedStringToUnsignedChars(dfa_233s);
    static final short[] dfa_234 = DFA.unpackEncodedString(dfa_234s);
    static final short[] dfa_235 = DFA.unpackEncodedString(dfa_235s);
    static final short[][] dfa_236 = unpackEncodedStringArray(dfa_236s);

    class DFA349 extends DFA {

        public DFA349(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 349;
            this.eot = dfa_230;
            this.eof = dfa_231;
            this.min = dfa_232;
            this.max = dfa_233;
            this.accept = dfa_234;
            this.special = dfa_235;
            this.transition = dfa_236;
        }
        public String getDescription() {
            return "()* loopback of 11527:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA349_0 = input.LA(1);

                         
                        int index349_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_0==EOF||LA349_0==ExclamationMarkEqualsSignEqualsSign||(LA349_0>=LessThanSignLessThanSignEqualsSign && LA349_0<=EqualsSignEqualsSignEqualsSign)||(LA349_0>=ExclamationMarkEqualsSign && LA349_0<=AsteriskEqualsSign)||LA349_0==PlusSignEqualsSign||(LA349_0>=HyphenMinusEqualsSign && LA349_0<=SolidusEqualsSign)||LA349_0==EqualsSignEqualsSign||LA349_0==CircumflexAccentEqualsSign||(LA349_0>=In && LA349_0<=VerticalLineVerticalLine)||LA349_0==Ampersand||LA349_0==Comma||LA349_0==Semicolon||LA349_0==EqualsSign||LA349_0==QuestionMark||LA349_0==CircumflexAccent||(LA349_0>=VerticalLine && LA349_0<=RightCurlyBracket)) ) {s = 1;}

                        else if ( (LA349_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA349_0==LessThanSign) && (synpred183_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA349_0==LessThanSignEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA349_0==GreaterThanSignEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA349_0==Instanceof) && (synpred183_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index349_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA349_2 = input.LA(1);

                         
                        int index349_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_2==GreaterThanSignEqualsSign||LA349_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA349_2==New) && (synpred183_InternalN4JSXParser())) {s = 7;}

                        else if ( (LA349_2==This_1) && (synpred183_InternalN4JSXParser())) {s = 8;}

                        else if ( (LA349_2==Super) && (synpred183_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA349_2==RULE_IDENTIFIER) && (synpred183_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA349_2==Yield) && (synpred183_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA349_2==Get) && (synpred183_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA349_2==Set) && (synpred183_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA349_2==Let) && (synpred183_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA349_2==Project) && (synpred183_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA349_2==External) && (synpred183_InternalN4JSXParser())) {s = 16;}

                        else if ( (LA349_2==Abstract) && (synpred183_InternalN4JSXParser())) {s = 17;}

                        else if ( (LA349_2==Static) && (synpred183_InternalN4JSXParser())) {s = 18;}

                        else if ( (LA349_2==As) && (synpred183_InternalN4JSXParser())) {s = 19;}

                        else if ( (LA349_2==From) && (synpred183_InternalN4JSXParser())) {s = 20;}

                        else if ( (LA349_2==Constructor) && (synpred183_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA349_2==Of) && (synpred183_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA349_2==Target) && (synpred183_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA349_2==Type) && (synpred183_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA349_2==Union) && (synpred183_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA349_2==Intersection) && (synpred183_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA349_2==This) && (synpred183_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA349_2==Promisify) && (synpred183_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA349_2==Await) && (synpred183_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA349_2==Async) && (synpred183_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA349_2==Implements) && (synpred183_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA349_2==Interface) && (synpred183_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA349_2==Private) && (synpred183_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA349_2==Protected) && (synpred183_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA349_2==Public) && (synpred183_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA349_2==Out) && (synpred183_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA349_2==LessThanSign) && (synpred183_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA349_2==RULE_DOUBLE) && (synpred183_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA349_2==RULE_INT) && (synpred183_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA349_2==RULE_BINARY_INT) && (synpred183_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA349_2==RULE_OCTAL_INT) && (synpred183_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA349_2==RULE_LEGACY_OCTAL_INT) && (synpred183_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA349_2==RULE_HEX_INT) && (synpred183_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA349_2==RULE_SCIENTIFIC_INT) && (synpred183_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA349_2==True) && (synpred183_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA349_2==False) && (synpred183_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA349_2==RULE_STRING) && (synpred183_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA349_2==Null) && (synpred183_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA349_2==Solidus) && (synpred183_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA349_2==SolidusEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA349_2==LeftSquareBracket) && (synpred183_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA349_2==LeftCurlyBracket) && (synpred183_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA349_2==LeftParenthesis) && (synpred183_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA349_2==CommercialAt) && (synpred183_InternalN4JSXParser())) {s = 54;}

                        else if ( (LA349_2==Function) && (synpred183_InternalN4JSXParser())) {s = 55;}

                        else if ( (LA349_2==Class) && (synpred183_InternalN4JSXParser())) {s = 56;}

                        else if ( (LA349_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred183_InternalN4JSXParser())) {s = 57;}

                        else if ( (LA349_2==RULE_TEMPLATE_HEAD) && (synpred183_InternalN4JSXParser())) {s = 58;}

                        else if ( (LA349_2==Delete) && (synpred183_InternalN4JSXParser())) {s = 59;}

                        else if ( (LA349_2==Void) && (synpred183_InternalN4JSXParser())) {s = 60;}

                        else if ( (LA349_2==Typeof) && (synpred183_InternalN4JSXParser())) {s = 61;}

                        else if ( (LA349_2==PlusSignPlusSign) && (synpred183_InternalN4JSXParser())) {s = 62;}

                        else if ( (LA349_2==HyphenMinusHyphenMinus) && (synpred183_InternalN4JSXParser())) {s = 63;}

                        else if ( (LA349_2==PlusSign) && (synpred183_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA349_2==HyphenMinus) && (synpred183_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA349_2==Tilde) && (synpred183_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA349_2==ExclamationMark) && (synpred183_InternalN4JSXParser())) {s = 67;}

                         
                        input.seek(index349_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 349, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_237s = "\105\uffff";
    static final String dfa_238s = "\1\1\104\uffff";
    static final String dfa_239s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_240s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_241s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_242s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_243s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\70\3\uffff\1\42\1\20\1\74\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\76\1\37\1\36\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final short[] dfa_238 = DFA.unpackEncodedString(dfa_238s);
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final char[] dfa_240 = DFA.unpackEncodedStringToUnsignedChars(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final short[][] dfa_243 = unpackEncodedStringArray(dfa_243s);

    class DFA350 extends DFA {

        public DFA350(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 350;
            this.eot = dfa_237;
            this.eof = dfa_238;
            this.min = dfa_239;
            this.max = dfa_240;
            this.accept = dfa_241;
            this.special = dfa_242;
            this.transition = dfa_243;
        }
        public String getDescription() {
            return "()* loopback of 11737:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA350_0 = input.LA(1);

                         
                        int index350_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_0==EOF||LA350_0==ExclamationMarkEqualsSignEqualsSign||(LA350_0>=LessThanSignLessThanSignEqualsSign && LA350_0<=EqualsSignEqualsSignEqualsSign)||(LA350_0>=ExclamationMarkEqualsSign && LA350_0<=AsteriskEqualsSign)||LA350_0==PlusSignEqualsSign||(LA350_0>=HyphenMinusEqualsSign && LA350_0<=SolidusEqualsSign)||LA350_0==EqualsSignEqualsSign||LA350_0==CircumflexAccentEqualsSign||(LA350_0>=VerticalLineEqualsSign && LA350_0<=VerticalLineVerticalLine)||LA350_0==Ampersand||LA350_0==RightParenthesis||LA350_0==Comma||(LA350_0>=Colon && LA350_0<=Semicolon)||LA350_0==EqualsSign||LA350_0==QuestionMark||(LA350_0>=RightSquareBracket && LA350_0<=CircumflexAccent)||(LA350_0>=VerticalLine && LA350_0<=RightCurlyBracket)||LA350_0==RULE_ML_COMMENT||LA350_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA350_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA350_0==LessThanSign) && (synpred185_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA350_0==LessThanSignEqualsSign) && (synpred185_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA350_0==GreaterThanSignEqualsSign) && (synpred185_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA350_0==Instanceof) && (synpred185_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA350_0==In) && (synpred185_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index350_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA350_2 = input.LA(1);

                         
                        int index350_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA350_2>=4 && LA350_2<=149 && (s=T2S.M_29[LA350_2-(4)])>=0) && (synpred185_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA350_2==GreaterThanSignEqualsSign||LA350_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index350_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 350, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_244s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_245s = "\1\157\1\uffff\1\u0095\100\uffff";
    static final String dfa_246s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_247s = "\1\1\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_248s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_244 = DFA.unpackEncodedStringToUnsignedChars(dfa_244s);
    static final char[] dfa_245 = DFA.unpackEncodedStringToUnsignedChars(dfa_245s);
    static final short[] dfa_246 = DFA.unpackEncodedString(dfa_246s);
    static final short[] dfa_247 = DFA.unpackEncodedString(dfa_247s);
    static final short[][] dfa_248 = unpackEncodedStringArray(dfa_248s);

    class DFA351 extends DFA {

        public DFA351(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 351;
            this.eot = dfa_217;
            this.eof = dfa_218;
            this.min = dfa_244;
            this.max = dfa_245;
            this.accept = dfa_246;
            this.special = dfa_247;
            this.transition = dfa_248;
        }
        public String getDescription() {
            return "()* loopback of 11947:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA351_2 = input.LA(1);

                         
                        int index351_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_2==GreaterThanSignEqualsSign||LA351_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA351_2==New) && (synpred187_InternalN4JSXParser())) {s = 7;}

                        else if ( (LA351_2==This_1) && (synpred187_InternalN4JSXParser())) {s = 8;}

                        else if ( (LA351_2==Super) && (synpred187_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA351_2==RULE_IDENTIFIER) && (synpred187_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA351_2==Get) && (synpred187_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA351_2==Set) && (synpred187_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA351_2==Let) && (synpred187_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA351_2==Project) && (synpred187_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA351_2==External) && (synpred187_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA351_2==Abstract) && (synpred187_InternalN4JSXParser())) {s = 16;}

                        else if ( (LA351_2==Static) && (synpred187_InternalN4JSXParser())) {s = 17;}

                        else if ( (LA351_2==As) && (synpred187_InternalN4JSXParser())) {s = 18;}

                        else if ( (LA351_2==From) && (synpred187_InternalN4JSXParser())) {s = 19;}

                        else if ( (LA351_2==Constructor) && (synpred187_InternalN4JSXParser())) {s = 20;}

                        else if ( (LA351_2==Of) && (synpred187_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA351_2==Target) && (synpred187_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA351_2==Type) && (synpred187_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA351_2==Union) && (synpred187_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA351_2==Intersection) && (synpred187_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA351_2==This) && (synpred187_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA351_2==Promisify) && (synpred187_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA351_2==Await) && (synpred187_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA351_2==Async) && (synpred187_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA351_2==Implements) && (synpred187_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA351_2==Interface) && (synpred187_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA351_2==Private) && (synpred187_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA351_2==Protected) && (synpred187_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA351_2==Public) && (synpred187_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA351_2==Out) && (synpred187_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA351_2==LessThanSign) && (synpred187_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA351_2==RULE_DOUBLE) && (synpred187_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA351_2==RULE_INT) && (synpred187_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA351_2==RULE_BINARY_INT) && (synpred187_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA351_2==RULE_OCTAL_INT) && (synpred187_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA351_2==RULE_LEGACY_OCTAL_INT) && (synpred187_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA351_2==RULE_HEX_INT) && (synpred187_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA351_2==RULE_SCIENTIFIC_INT) && (synpred187_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA351_2==True) && (synpred187_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA351_2==False) && (synpred187_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA351_2==RULE_STRING) && (synpred187_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA351_2==Null) && (synpred187_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA351_2==Solidus) && (synpred187_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA351_2==SolidusEqualsSign) && (synpred187_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA351_2==LeftSquareBracket) && (synpred187_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA351_2==LeftCurlyBracket) && (synpred187_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA351_2==LeftParenthesis) && (synpred187_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA351_2==CommercialAt) && (synpred187_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA351_2==Function) && (synpred187_InternalN4JSXParser())) {s = 54;}

                        else if ( (LA351_2==Class) && (synpred187_InternalN4JSXParser())) {s = 55;}

                        else if ( (LA351_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred187_InternalN4JSXParser())) {s = 56;}

                        else if ( (LA351_2==RULE_TEMPLATE_HEAD) && (synpred187_InternalN4JSXParser())) {s = 57;}

                        else if ( (LA351_2==Delete) && (synpred187_InternalN4JSXParser())) {s = 58;}

                        else if ( (LA351_2==Void) && (synpred187_InternalN4JSXParser())) {s = 59;}

                        else if ( (LA351_2==Typeof) && (synpred187_InternalN4JSXParser())) {s = 60;}

                        else if ( (LA351_2==PlusSignPlusSign) && (synpred187_InternalN4JSXParser())) {s = 61;}

                        else if ( (LA351_2==HyphenMinusHyphenMinus) && (synpred187_InternalN4JSXParser())) {s = 62;}

                        else if ( (LA351_2==PlusSign) && (synpred187_InternalN4JSXParser())) {s = 63;}

                        else if ( (LA351_2==HyphenMinus) && (synpred187_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA351_2==Tilde) && (synpred187_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA351_2==ExclamationMark) && (synpred187_InternalN4JSXParser())) {s = 66;}

                         
                        input.seek(index351_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA351_0 = input.LA(1);

                         
                        int index351_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_0==EOF||LA351_0==ExclamationMarkEqualsSignEqualsSign||(LA351_0>=LessThanSignLessThanSignEqualsSign && LA351_0<=EqualsSignEqualsSignEqualsSign)||(LA351_0>=ExclamationMarkEqualsSign && LA351_0<=AsteriskEqualsSign)||LA351_0==PlusSignEqualsSign||(LA351_0>=HyphenMinusEqualsSign && LA351_0<=SolidusEqualsSign)||LA351_0==EqualsSignEqualsSign||LA351_0==CircumflexAccentEqualsSign||(LA351_0>=In && LA351_0<=VerticalLineVerticalLine)||LA351_0==Ampersand||LA351_0==Comma||LA351_0==Semicolon||LA351_0==EqualsSign||LA351_0==QuestionMark||LA351_0==CircumflexAccent||LA351_0==VerticalLine) ) {s = 1;}

                        else if ( (LA351_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA351_0==LessThanSign) && (synpred187_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA351_0==LessThanSignEqualsSign) && (synpred187_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA351_0==GreaterThanSignEqualsSign) && (synpred187_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA351_0==Instanceof) && (synpred187_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index351_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 351, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_249s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String dfa_250s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_251s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_249 = DFA.unpackEncodedStringToUnsignedChars(dfa_249s);
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final short[][] dfa_251 = unpackEncodedStringArray(dfa_251s);

    class DFA352 extends DFA {

        public DFA352(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 352;
            this.eot = dfa_230;
            this.eof = dfa_231;
            this.min = dfa_232;
            this.max = dfa_249;
            this.accept = dfa_234;
            this.special = dfa_250;
            this.transition = dfa_251;
        }
        public String getDescription() {
            return "()* loopback of 12154:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA352_2 = input.LA(1);

                         
                        int index352_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA352_2>=4 && LA352_2<=149 && (s=T2S.M_30[LA352_2-(4)])>=0) && (synpred189_InternalN4JSXParser())) { /* 60 cases */ }
                        else if ( (LA352_2==GreaterThanSignEqualsSign||LA352_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index352_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA352_0 = input.LA(1);

                         
                        int index352_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA352_0==EOF||LA352_0==ExclamationMarkEqualsSignEqualsSign||(LA352_0>=LessThanSignLessThanSignEqualsSign && LA352_0<=EqualsSignEqualsSignEqualsSign)||(LA352_0>=ExclamationMarkEqualsSign && LA352_0<=AsteriskEqualsSign)||LA352_0==PlusSignEqualsSign||(LA352_0>=HyphenMinusEqualsSign && LA352_0<=SolidusEqualsSign)||LA352_0==EqualsSignEqualsSign||LA352_0==CircumflexAccentEqualsSign||(LA352_0>=VerticalLineEqualsSign && LA352_0<=VerticalLineVerticalLine)||LA352_0==Ampersand||LA352_0==RightParenthesis||LA352_0==Comma||(LA352_0>=Colon && LA352_0<=Semicolon)||LA352_0==EqualsSign||LA352_0==QuestionMark||(LA352_0>=RightSquareBracket && LA352_0<=CircumflexAccent)||(LA352_0>=VerticalLine && LA352_0<=RightCurlyBracket)||LA352_0==RULE_ML_COMMENT||LA352_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA352_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA352_0==LessThanSign) && (synpred189_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA352_0==LessThanSignEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA352_0==GreaterThanSignEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA352_0==Instanceof) && (synpred189_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA352_0==In) && (synpred189_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index352_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 352, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_252s = "\1\4\35\0\43\uffff";
    static final String dfa_253s = "\1\u0095\35\0\43\uffff";
    static final String dfa_254s = "\36\uffff\1\4\37\uffff\1\1\1\3\1\2";
    static final String dfa_255s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_256s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_252 = DFA.unpackEncodedStringToUnsignedChars(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[][] dfa_256 = unpackEncodedStringArray(dfa_256s);

    class DFA384 extends DFA {

        public DFA384(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 384;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_252;
            this.max = dfa_253;
            this.accept = dfa_254;
            this.special = dfa_255;
            this.transition = dfa_256;
        }
        public String getDescription() {
            return "13618:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA384_1 = input.LA(1);

                         
                        int index384_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA384_2 = input.LA(1);

                         
                        int index384_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA384_3 = input.LA(1);

                         
                        int index384_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA384_4 = input.LA(1);

                         
                        int index384_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA384_5 = input.LA(1);

                         
                        int index384_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA384_6 = input.LA(1);

                         
                        int index384_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA384_7 = input.LA(1);

                         
                        int index384_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA384_8 = input.LA(1);

                         
                        int index384_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA384_9 = input.LA(1);

                         
                        int index384_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA384_10 = input.LA(1);

                         
                        int index384_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA384_11 = input.LA(1);

                         
                        int index384_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA384_12 = input.LA(1);

                         
                        int index384_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA384_13 = input.LA(1);

                         
                        int index384_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA384_14 = input.LA(1);

                         
                        int index384_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA384_15 = input.LA(1);

                         
                        int index384_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA384_16 = input.LA(1);

                         
                        int index384_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA384_17 = input.LA(1);

                         
                        int index384_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA384_18 = input.LA(1);

                         
                        int index384_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA384_19 = input.LA(1);

                         
                        int index384_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA384_20 = input.LA(1);

                         
                        int index384_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA384_21 = input.LA(1);

                         
                        int index384_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA384_22 = input.LA(1);

                         
                        int index384_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA384_23 = input.LA(1);

                         
                        int index384_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA384_24 = input.LA(1);

                         
                        int index384_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA384_25 = input.LA(1);

                         
                        int index384_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA384_26 = input.LA(1);

                         
                        int index384_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA384_27 = input.LA(1);

                         
                        int index384_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA384_28 = input.LA(1);

                         
                        int index384_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA384_29 = input.LA(1);

                         
                        int index384_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index384_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 384, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_257s = "\1\14\15\uffff";
    static final String dfa_258s = "\1\67\13\0\2\uffff";
    static final String dfa_259s = "\1\160\13\0\2\uffff";
    static final String dfa_260s = "\14\uffff\1\2\1\1";
    static final String dfa_261s = "\1\uffff\1\0\1\10\1\5\1\3\1\1\1\11\1\6\1\7\1\4\1\2\1\12\2\uffff}>";
    static final String[] dfa_262s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_257 = DFA.unpackEncodedString(dfa_257s);
    static final char[] dfa_258 = DFA.unpackEncodedStringToUnsignedChars(dfa_258s);
    static final char[] dfa_259 = DFA.unpackEncodedStringToUnsignedChars(dfa_259s);
    static final short[] dfa_260 = DFA.unpackEncodedString(dfa_260s);
    static final short[] dfa_261 = DFA.unpackEncodedString(dfa_261s);
    static final short[][] dfa_262 = unpackEncodedStringArray(dfa_262s);

    class DFA383 extends DFA {

        public DFA383(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 383;
            this.eot = dfa_189;
            this.eof = dfa_257;
            this.min = dfa_258;
            this.max = dfa_259;
            this.accept = dfa_260;
            this.special = dfa_261;
            this.transition = dfa_262;
        }
        public String getDescription() {
            return "13729:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA383_1 = input.LA(1);

                         
                        int index383_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA383_5 = input.LA(1);

                         
                        int index383_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA383_10 = input.LA(1);

                         
                        int index383_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA383_4 = input.LA(1);

                         
                        int index383_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA383_9 = input.LA(1);

                         
                        int index383_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA383_3 = input.LA(1);

                         
                        int index383_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA383_7 = input.LA(1);

                         
                        int index383_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA383_8 = input.LA(1);

                         
                        int index383_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA383_2 = input.LA(1);

                         
                        int index383_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_2);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA383_6 = input.LA(1);

                         
                        int index383_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA383_11 = input.LA(1);

                         
                        int index383_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index383_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 383, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA386 extends DFA {

        public DFA386(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 386;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_252;
            this.max = dfa_253;
            this.accept = dfa_254;
            this.special = dfa_255;
            this.transition = dfa_256;
        }
        public String getDescription() {
            return "13766:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA386_1 = input.LA(1);

                         
                        int index386_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA386_2 = input.LA(1);

                         
                        int index386_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA386_3 = input.LA(1);

                         
                        int index386_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA386_4 = input.LA(1);

                         
                        int index386_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA386_5 = input.LA(1);

                         
                        int index386_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA386_6 = input.LA(1);

                         
                        int index386_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA386_7 = input.LA(1);

                         
                        int index386_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA386_8 = input.LA(1);

                         
                        int index386_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA386_9 = input.LA(1);

                         
                        int index386_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA386_10 = input.LA(1);

                         
                        int index386_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA386_11 = input.LA(1);

                         
                        int index386_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA386_12 = input.LA(1);

                         
                        int index386_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA386_13 = input.LA(1);

                         
                        int index386_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA386_14 = input.LA(1);

                         
                        int index386_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA386_15 = input.LA(1);

                         
                        int index386_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA386_16 = input.LA(1);

                         
                        int index386_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA386_17 = input.LA(1);

                         
                        int index386_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA386_18 = input.LA(1);

                         
                        int index386_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA386_19 = input.LA(1);

                         
                        int index386_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA386_20 = input.LA(1);

                         
                        int index386_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA386_21 = input.LA(1);

                         
                        int index386_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA386_22 = input.LA(1);

                         
                        int index386_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA386_23 = input.LA(1);

                         
                        int index386_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA386_24 = input.LA(1);

                         
                        int index386_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA386_25 = input.LA(1);

                         
                        int index386_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA386_26 = input.LA(1);

                         
                        int index386_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA386_27 = input.LA(1);

                         
                        int index386_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA386_28 = input.LA(1);

                         
                        int index386_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA386_29 = input.LA(1);

                         
                        int index386_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index386_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 386, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_263s = "\1\u0099\13\0\2\uffff";
    static final String dfa_264s = "\1\uffff\1\7\1\4\1\2\1\0\1\10\1\5\1\3\1\12\1\1\1\11\1\6\2\uffff}>";
    static final String[] dfa_265s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_263 = DFA.unpackEncodedStringToUnsignedChars(dfa_263s);
    static final short[] dfa_264 = DFA.unpackEncodedString(dfa_264s);
    static final short[][] dfa_265 = unpackEncodedStringArray(dfa_265s);

    class DFA385 extends DFA {

        public DFA385(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 385;
            this.eot = dfa_189;
            this.eof = dfa_257;
            this.min = dfa_258;
            this.max = dfa_263;
            this.accept = dfa_260;
            this.special = dfa_264;
            this.transition = dfa_265;
        }
        public String getDescription() {
            return "13877:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA385_4 = input.LA(1);

                         
                        int index385_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA385_9 = input.LA(1);

                         
                        int index385_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA385_3 = input.LA(1);

                         
                        int index385_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA385_7 = input.LA(1);

                         
                        int index385_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA385_2 = input.LA(1);

                         
                        int index385_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA385_6 = input.LA(1);

                         
                        int index385_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA385_11 = input.LA(1);

                         
                        int index385_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA385_1 = input.LA(1);

                         
                        int index385_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_1);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA385_5 = input.LA(1);

                         
                        int index385_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA385_10 = input.LA(1);

                         
                        int index385_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA385_8 = input.LA(1);

                         
                        int index385_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index385_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 385, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_266s = "\1\4\34\0\44\uffff";
    static final String dfa_267s = "\1\u0095\34\0\44\uffff";
    static final String dfa_268s = "\35\uffff\1\4\1\5\37\uffff\1\1\1\3\1\2";
    static final String dfa_269s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\44\uffff}>";
    static final String[] dfa_270s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_266 = DFA.unpackEncodedStringToUnsignedChars(dfa_266s);
    static final char[] dfa_267 = DFA.unpackEncodedStringToUnsignedChars(dfa_267s);
    static final short[] dfa_268 = DFA.unpackEncodedString(dfa_268s);
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);
    static final short[][] dfa_270 = unpackEncodedStringArray(dfa_270s);

    class DFA388 extends DFA {

        public DFA388(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 388;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_266;
            this.max = dfa_267;
            this.accept = dfa_268;
            this.special = dfa_269;
            this.transition = dfa_270;
        }
        public String getDescription() {
            return "13914:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA388_1 = input.LA(1);

                         
                        int index388_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA388_2 = input.LA(1);

                         
                        int index388_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA388_3 = input.LA(1);

                         
                        int index388_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA388_4 = input.LA(1);

                         
                        int index388_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA388_5 = input.LA(1);

                         
                        int index388_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA388_6 = input.LA(1);

                         
                        int index388_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA388_7 = input.LA(1);

                         
                        int index388_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA388_8 = input.LA(1);

                         
                        int index388_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA388_9 = input.LA(1);

                         
                        int index388_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA388_10 = input.LA(1);

                         
                        int index388_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA388_11 = input.LA(1);

                         
                        int index388_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA388_12 = input.LA(1);

                         
                        int index388_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA388_13 = input.LA(1);

                         
                        int index388_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA388_14 = input.LA(1);

                         
                        int index388_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA388_15 = input.LA(1);

                         
                        int index388_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA388_16 = input.LA(1);

                         
                        int index388_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA388_17 = input.LA(1);

                         
                        int index388_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA388_18 = input.LA(1);

                         
                        int index388_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA388_19 = input.LA(1);

                         
                        int index388_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA388_20 = input.LA(1);

                         
                        int index388_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA388_21 = input.LA(1);

                         
                        int index388_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA388_22 = input.LA(1);

                         
                        int index388_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA388_23 = input.LA(1);

                         
                        int index388_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA388_24 = input.LA(1);

                         
                        int index388_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA388_25 = input.LA(1);

                         
                        int index388_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA388_26 = input.LA(1);

                         
                        int index388_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA388_27 = input.LA(1);

                         
                        int index388_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA388_28 = input.LA(1);

                         
                        int index388_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index388_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 388, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_271s = "\1\150\13\0\2\uffff";
    static final String dfa_272s = "\1\uffff\1\6\1\1\1\7\1\2\1\10\1\3\1\11\1\0\1\4\1\12\1\5\2\uffff}>";
    static final String[] dfa_273s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_271 = DFA.unpackEncodedStringToUnsignedChars(dfa_271s);
    static final short[] dfa_272 = DFA.unpackEncodedString(dfa_272s);
    static final short[][] dfa_273 = unpackEncodedStringArray(dfa_273s);

    class DFA387 extends DFA {

        public DFA387(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 387;
            this.eot = dfa_189;
            this.eof = dfa_257;
            this.min = dfa_258;
            this.max = dfa_271;
            this.accept = dfa_260;
            this.special = dfa_272;
            this.transition = dfa_273;
        }
        public String getDescription() {
            return "14027:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA387_8 = input.LA(1);

                         
                        int index387_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA387_2 = input.LA(1);

                         
                        int index387_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA387_4 = input.LA(1);

                         
                        int index387_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA387_6 = input.LA(1);

                         
                        int index387_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA387_9 = input.LA(1);

                         
                        int index387_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA387_11 = input.LA(1);

                         
                        int index387_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA387_1 = input.LA(1);

                         
                        int index387_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA387_3 = input.LA(1);

                         
                        int index387_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA387_5 = input.LA(1);

                         
                        int index387_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA387_7 = input.LA(1);

                         
                        int index387_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA387_10 = input.LA(1);

                         
                        int index387_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index387_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 387, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA390 extends DFA {

        public DFA390(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 390;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_266;
            this.max = dfa_267;
            this.accept = dfa_268;
            this.special = dfa_269;
            this.transition = dfa_270;
        }
        public String getDescription() {
            return "14064:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA390_1 = input.LA(1);

                         
                        int index390_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA390_2 = input.LA(1);

                         
                        int index390_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA390_3 = input.LA(1);

                         
                        int index390_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA390_4 = input.LA(1);

                         
                        int index390_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA390_5 = input.LA(1);

                         
                        int index390_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA390_6 = input.LA(1);

                         
                        int index390_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA390_7 = input.LA(1);

                         
                        int index390_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA390_8 = input.LA(1);

                         
                        int index390_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA390_9 = input.LA(1);

                         
                        int index390_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA390_10 = input.LA(1);

                         
                        int index390_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA390_11 = input.LA(1);

                         
                        int index390_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA390_12 = input.LA(1);

                         
                        int index390_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA390_13 = input.LA(1);

                         
                        int index390_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA390_14 = input.LA(1);

                         
                        int index390_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA390_15 = input.LA(1);

                         
                        int index390_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA390_16 = input.LA(1);

                         
                        int index390_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA390_17 = input.LA(1);

                         
                        int index390_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA390_18 = input.LA(1);

                         
                        int index390_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA390_19 = input.LA(1);

                         
                        int index390_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA390_20 = input.LA(1);

                         
                        int index390_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA390_21 = input.LA(1);

                         
                        int index390_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA390_22 = input.LA(1);

                         
                        int index390_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA390_23 = input.LA(1);

                         
                        int index390_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA390_24 = input.LA(1);

                         
                        int index390_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA390_25 = input.LA(1);

                         
                        int index390_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA390_26 = input.LA(1);

                         
                        int index390_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA390_27 = input.LA(1);

                         
                        int index390_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA390_28 = input.LA(1);

                         
                        int index390_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index390_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 390, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA389 extends DFA {

        public DFA389(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 389;
            this.eot = dfa_189;
            this.eof = dfa_257;
            this.min = dfa_258;
            this.max = dfa_263;
            this.accept = dfa_260;
            this.special = dfa_272;
            this.transition = dfa_265;
        }
        public String getDescription() {
            return "14177:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA389_8 = input.LA(1);

                         
                        int index389_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA389_2 = input.LA(1);

                         
                        int index389_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA389_4 = input.LA(1);

                         
                        int index389_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA389_6 = input.LA(1);

                         
                        int index389_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA389_9 = input.LA(1);

                         
                        int index389_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA389_11 = input.LA(1);

                         
                        int index389_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA389_1 = input.LA(1);

                         
                        int index389_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA389_3 = input.LA(1);

                         
                        int index389_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA389_5 = input.LA(1);

                         
                        int index389_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA389_7 = input.LA(1);

                         
                        int index389_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA389_10 = input.LA(1);

                         
                        int index389_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index389_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 389, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_274s = "\1\76\113\uffff";
    static final String dfa_275s = "\1\4\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_276s = "\1\u0095\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_277s = "\1\uffff\17\1\1\uffff\35\1\1\uffff\17\1\1\2\15\uffff";
    static final String dfa_278s = "\1\0\17\uffff\1\1\35\uffff\1\2\35\uffff}>";
    static final String[] dfa_279s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\2\uffff\1\76\1\20\1\76\1\uffff\1\75\2\uffff\1\3\2\uffff\1\72\1\76\1\73\1\uffff\1\55\1\uffff\1\76\1\41\2\76\1\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final char[] dfa_275 = DFA.unpackEncodedStringToUnsignedChars(dfa_275s);
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[][] dfa_279 = unpackEncodedStringArray(dfa_279s);

    class DFA392 extends DFA {

        public DFA392(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 392;
            this.eot = dfa_177;
            this.eof = dfa_274;
            this.min = dfa_275;
            this.max = dfa_276;
            this.accept = dfa_277;
            this.special = dfa_278;
            this.transition = dfa_279;
        }
        public String getDescription() {
            return "14236:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA392_0 = input.LA(1);

                         
                        int index392_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA392_0>=5 && LA392_0<=126 && (s=T2S.M_31[LA392_0-(5)])>=0) && (synpred240_InternalN4JSXParser())) { /* 15 cases */ }
                        else if ( (LA392_0==Of) ) {s = 16;}

                        
                        else if ((LA392_0>=4 && LA392_0<=149 && (s=T2S.M_32[LA392_0-(4)])>=0) && (synpred240_InternalN4JSXParser())) { /* 30 cases */ }
                        else if ( (LA392_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA392_0>=15 && LA392_0<=140 && (s=T2S.M_33[LA392_0-(15)])>=0) && (synpred240_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA392_0==EOF||LA392_0==LessThanSignLessThanSignEqualsSign||LA392_0==PercentSignEqualsSign||(LA392_0>=AmpersandEqualsSign && LA392_0<=AsteriskEqualsSign)||LA392_0==PlusSignEqualsSign||LA392_0==HyphenMinusEqualsSign||LA392_0==CircumflexAccentEqualsSign||LA392_0==In||LA392_0==VerticalLineEqualsSign||LA392_0==Comma||LA392_0==Semicolon||(LA392_0>=EqualsSign && LA392_0<=GreaterThanSign)) ) {s = 62;}

                         
                        input.seek(index392_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA392_16 = input.LA(1);

                         
                        int index392_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index392_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA392_46 = input.LA(1);

                         
                        int index392_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index392_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 392, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_280s = "\121\uffff";
    static final String dfa_281s = "\1\76\120\uffff";
    static final String dfa_282s = "\1\4\55\uffff\1\0\42\uffff";
    static final String dfa_283s = "\1\u0099\55\uffff\1\0\42\uffff";
    static final String dfa_284s = "\1\uffff\55\1\1\uffff\17\1\1\2\22\uffff";
    static final String dfa_285s = "\1\0\55\uffff\1\1\42\uffff}>";
    static final String[] dfa_286s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\3\uffff\1\20\1\76\1\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\76\1\73\1\uffff\1\55\2\76\1\41\2\76\1\uffff\1\2\1\57\1\76\1\uffff\1\60\1\uffff\1\76\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43\1\uffff\1\76\1\uffff\1\76",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final char[] dfa_282 = DFA.unpackEncodedStringToUnsignedChars(dfa_282s);
    static final char[] dfa_283 = DFA.unpackEncodedStringToUnsignedChars(dfa_283s);
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final short[][] dfa_286 = unpackEncodedStringArray(dfa_286s);

    class DFA394 extends DFA {

        public DFA394(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 394;
            this.eot = dfa_280;
            this.eof = dfa_281;
            this.min = dfa_282;
            this.max = dfa_283;
            this.accept = dfa_284;
            this.special = dfa_285;
            this.transition = dfa_286;
        }
        public String getDescription() {
            return "14319:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA394_0 = input.LA(1);

                         
                        int index394_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA394_0>=4 && LA394_0<=149 && (s=T2S.M_34[LA394_0-(4)])>=0) && (synpred242_InternalN4JSXParser())) { /* 45 cases */ }
                        else if ( (LA394_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA394_0>=15 && LA394_0<=140 && (s=T2S.M_33[LA394_0-(15)])>=0) && (synpred242_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA394_0==EOF||LA394_0==LessThanSignLessThanSignEqualsSign||LA394_0==PercentSignEqualsSign||(LA394_0>=AmpersandEqualsSign && LA394_0<=AsteriskEqualsSign)||LA394_0==PlusSignEqualsSign||LA394_0==HyphenMinusEqualsSign||LA394_0==CircumflexAccentEqualsSign||LA394_0==VerticalLineEqualsSign||LA394_0==RightParenthesis||LA394_0==Comma||(LA394_0>=Colon && LA394_0<=Semicolon)||(LA394_0>=EqualsSign && LA394_0<=GreaterThanSign)||LA394_0==RightSquareBracket||LA394_0==RightCurlyBracket||LA394_0==RULE_ML_COMMENT||LA394_0==RULE_EOL) ) {s = 62;}

                         
                        input.seek(index394_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA394_46 = input.LA(1);

                         
                        int index394_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index394_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 394, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_287s = "\135\uffff";
    static final String dfa_288s = "\1\2\134\uffff";
    static final String dfa_289s = "\1\4\1\0\133\uffff";
    static final String dfa_290s = "\1\u0095\1\0\133\uffff";
    static final String dfa_291s = "\2\uffff\1\2\131\uffff\1\1";
    static final String dfa_292s = "\1\uffff\1\0\133\uffff}>";
    static final String[] dfa_293s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_287 = DFA.unpackEncodedString(dfa_287s);
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final char[] dfa_289 = DFA.unpackEncodedStringToUnsignedChars(dfa_289s);
    static final char[] dfa_290 = DFA.unpackEncodedStringToUnsignedChars(dfa_290s);
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[][] dfa_293 = unpackEncodedStringArray(dfa_293s);

    class DFA425 extends DFA {

        public DFA425(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 425;
            this.eot = dfa_287;
            this.eof = dfa_288;
            this.min = dfa_289;
            this.max = dfa_290;
            this.accept = dfa_291;
            this.special = dfa_292;
            this.transition = dfa_293;
        }
        public String getDescription() {
            return "15569:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA425_1 = input.LA(1);

                         
                        int index425_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSXParser()) ) {s = 92;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index425_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 425, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_294s = "\1\4\1\uffff\27\0\2\uffff\55\0\4\uffff";
    static final String dfa_295s = "\1\u0095\1\uffff\27\0\2\uffff\55\0\4\uffff";
    static final String dfa_296s = "\1\uffff\1\1\27\uffff\2\4\55\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_297s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\4\uffff}>";
    static final String[] dfa_298s = {
            "\1\26\1\23\1\102\1\56\1\15\1\103\1\4\1\7\1\40\1\41\1\6\1\52\1\42\1\47\1\50\1\2\1\3\1\43\1\46\1\54\1\5\1\60\1\10\1\62\1\16\1\65\1\33\1\14\1\34\1\36\1\37\1\11\1\74\1\61\1\63\1\25\1\67\1\71\1\13\1\35\1\45\1\75\1\100\1\72\1\21\1\73\1\22\1\12\1\70\4\uffff\1\51\1\27\1\76\1\57\1\104\1\30\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\5\uffff\1\110\1\uffff\1\32\7\uffff\1\31\3\uffff\1\1\1\107\2\uffff\1\24\2\uffff\1\20\3\uffff\1\106\1\uffff\1\106\1\uffff\1\106\2\uffff\1\106\1\uffff\1\17\2\uffff\1\105\23\uffff\1\106",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_294 = DFA.unpackEncodedStringToUnsignedChars(dfa_294s);
    static final char[] dfa_295 = DFA.unpackEncodedStringToUnsignedChars(dfa_295s);
    static final short[] dfa_296 = DFA.unpackEncodedString(dfa_296s);
    static final short[] dfa_297 = DFA.unpackEncodedString(dfa_297s);
    static final short[][] dfa_298 = unpackEncodedStringArray(dfa_298s);

    class DFA467 extends DFA {

        public DFA467(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 467;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_294;
            this.max = dfa_295;
            this.accept = dfa_296;
            this.special = dfa_297;
            this.transition = dfa_298;
        }
        public String getDescription() {
            return "16404:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA467_0 = input.LA(1);

                         
                        int index467_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA467_0>=4 && LA467_0<=126 && (s=T2S.M_36[LA467_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA467_0==LessThanSign) && (synpred261_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA467_0==Asterisk) && (synpred261_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA467_0>=6 && LA467_0<=129 && (s=T2S.M_37[LA467_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA467_0==RULE_DOUBLE||LA467_0==RULE_HEX_INT||LA467_0==RULE_OCTAL_INT||LA467_0==RULE_SCIENTIFIC_INT||LA467_0==RULE_INT) ) {s = 70;}

                        else if ( (LA467_0==LeftSquareBracket) ) {s = 71;}

                        else if ( (LA467_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index467_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA467_2 = input.LA(1);

                         
                        int index467_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA467_3 = input.LA(1);

                         
                        int index467_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA467_4 = input.LA(1);

                         
                        int index467_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA467_5 = input.LA(1);

                         
                        int index467_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA467_6 = input.LA(1);

                         
                        int index467_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA467_7 = input.LA(1);

                         
                        int index467_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA467_8 = input.LA(1);

                         
                        int index467_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA467_9 = input.LA(1);

                         
                        int index467_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA467_10 = input.LA(1);

                         
                        int index467_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA467_11 = input.LA(1);

                         
                        int index467_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA467_12 = input.LA(1);

                         
                        int index467_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA467_13 = input.LA(1);

                         
                        int index467_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA467_14 = input.LA(1);

                         
                        int index467_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA467_15 = input.LA(1);

                         
                        int index467_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA467_16 = input.LA(1);

                         
                        int index467_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA467_17 = input.LA(1);

                         
                        int index467_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA467_18 = input.LA(1);

                         
                        int index467_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA467_19 = input.LA(1);

                         
                        int index467_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA467_20 = input.LA(1);

                         
                        int index467_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA467_21 = input.LA(1);

                         
                        int index467_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA467_22 = input.LA(1);

                         
                        int index467_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA467_23 = input.LA(1);

                         
                        int index467_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA467_24 = input.LA(1);

                         
                        int index467_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA467_27 = input.LA(1);

                         
                        int index467_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA467_28 = input.LA(1);

                         
                        int index467_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA467_29 = input.LA(1);

                         
                        int index467_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA467_30 = input.LA(1);

                         
                        int index467_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA467_31 = input.LA(1);

                         
                        int index467_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA467_32 = input.LA(1);

                         
                        int index467_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA467_33 = input.LA(1);

                         
                        int index467_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA467_34 = input.LA(1);

                         
                        int index467_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA467_35 = input.LA(1);

                         
                        int index467_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA467_36 = input.LA(1);

                         
                        int index467_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA467_37 = input.LA(1);

                         
                        int index467_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA467_38 = input.LA(1);

                         
                        int index467_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA467_39 = input.LA(1);

                         
                        int index467_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA467_40 = input.LA(1);

                         
                        int index467_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA467_41 = input.LA(1);

                         
                        int index467_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA467_42 = input.LA(1);

                         
                        int index467_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA467_43 = input.LA(1);

                         
                        int index467_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA467_44 = input.LA(1);

                         
                        int index467_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA467_45 = input.LA(1);

                         
                        int index467_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA467_46 = input.LA(1);

                         
                        int index467_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA467_47 = input.LA(1);

                         
                        int index467_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA467_48 = input.LA(1);

                         
                        int index467_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA467_49 = input.LA(1);

                         
                        int index467_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA467_50 = input.LA(1);

                         
                        int index467_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA467_51 = input.LA(1);

                         
                        int index467_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA467_52 = input.LA(1);

                         
                        int index467_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA467_53 = input.LA(1);

                         
                        int index467_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA467_54 = input.LA(1);

                         
                        int index467_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA467_55 = input.LA(1);

                         
                        int index467_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA467_56 = input.LA(1);

                         
                        int index467_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA467_57 = input.LA(1);

                         
                        int index467_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA467_58 = input.LA(1);

                         
                        int index467_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA467_59 = input.LA(1);

                         
                        int index467_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA467_60 = input.LA(1);

                         
                        int index467_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA467_61 = input.LA(1);

                         
                        int index467_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA467_62 = input.LA(1);

                         
                        int index467_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA467_63 = input.LA(1);

                         
                        int index467_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA467_64 = input.LA(1);

                         
                        int index467_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA467_65 = input.LA(1);

                         
                        int index467_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA467_66 = input.LA(1);

                         
                        int index467_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA467_67 = input.LA(1);

                         
                        int index467_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA467_68 = input.LA(1);

                         
                        int index467_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA467_69 = input.LA(1);

                         
                        int index467_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA467_70 = input.LA(1);

                         
                        int index467_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA467_71 = input.LA(1);

                         
                        int index467_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index467_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 467, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA468 extends DFA {

        public DFA468(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 468;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_294;
            this.max = dfa_295;
            this.accept = dfa_296;
            this.special = dfa_297;
            this.transition = dfa_298;
        }
        public String getDescription() {
            return "16628:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA468_0 = input.LA(1);

                         
                        int index468_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA468_0>=4 && LA468_0<=126 && (s=T2S.M_36[LA468_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA468_0==LessThanSign) && (synpred264_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA468_0==Asterisk) && (synpred264_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA468_0>=6 && LA468_0<=129 && (s=T2S.M_37[LA468_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA468_0==RULE_DOUBLE||LA468_0==RULE_HEX_INT||LA468_0==RULE_OCTAL_INT||LA468_0==RULE_SCIENTIFIC_INT||LA468_0==RULE_INT) ) {s = 70;}

                        else if ( (LA468_0==LeftSquareBracket) ) {s = 71;}

                        else if ( (LA468_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index468_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA468_2 = input.LA(1);

                         
                        int index468_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA468_3 = input.LA(1);

                         
                        int index468_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA468_4 = input.LA(1);

                         
                        int index468_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA468_5 = input.LA(1);

                         
                        int index468_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA468_6 = input.LA(1);

                         
                        int index468_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA468_7 = input.LA(1);

                         
                        int index468_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA468_8 = input.LA(1);

                         
                        int index468_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA468_9 = input.LA(1);

                         
                        int index468_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA468_10 = input.LA(1);

                         
                        int index468_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA468_11 = input.LA(1);

                         
                        int index468_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA468_12 = input.LA(1);

                         
                        int index468_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA468_13 = input.LA(1);

                         
                        int index468_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA468_14 = input.LA(1);

                         
                        int index468_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA468_15 = input.LA(1);

                         
                        int index468_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA468_16 = input.LA(1);

                         
                        int index468_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA468_17 = input.LA(1);

                         
                        int index468_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA468_18 = input.LA(1);

                         
                        int index468_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA468_19 = input.LA(1);

                         
                        int index468_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA468_20 = input.LA(1);

                         
                        int index468_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA468_21 = input.LA(1);

                         
                        int index468_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA468_22 = input.LA(1);

                         
                        int index468_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA468_23 = input.LA(1);

                         
                        int index468_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA468_24 = input.LA(1);

                         
                        int index468_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA468_27 = input.LA(1);

                         
                        int index468_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA468_28 = input.LA(1);

                         
                        int index468_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA468_29 = input.LA(1);

                         
                        int index468_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA468_30 = input.LA(1);

                         
                        int index468_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA468_31 = input.LA(1);

                         
                        int index468_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA468_32 = input.LA(1);

                         
                        int index468_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA468_33 = input.LA(1);

                         
                        int index468_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA468_34 = input.LA(1);

                         
                        int index468_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA468_35 = input.LA(1);

                         
                        int index468_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA468_36 = input.LA(1);

                         
                        int index468_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA468_37 = input.LA(1);

                         
                        int index468_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA468_38 = input.LA(1);

                         
                        int index468_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA468_39 = input.LA(1);

                         
                        int index468_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA468_40 = input.LA(1);

                         
                        int index468_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA468_41 = input.LA(1);

                         
                        int index468_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA468_42 = input.LA(1);

                         
                        int index468_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA468_43 = input.LA(1);

                         
                        int index468_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA468_44 = input.LA(1);

                         
                        int index468_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA468_45 = input.LA(1);

                         
                        int index468_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA468_46 = input.LA(1);

                         
                        int index468_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA468_47 = input.LA(1);

                         
                        int index468_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA468_48 = input.LA(1);

                         
                        int index468_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA468_49 = input.LA(1);

                         
                        int index468_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA468_50 = input.LA(1);

                         
                        int index468_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA468_51 = input.LA(1);

                         
                        int index468_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA468_52 = input.LA(1);

                         
                        int index468_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA468_53 = input.LA(1);

                         
                        int index468_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA468_54 = input.LA(1);

                         
                        int index468_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA468_55 = input.LA(1);

                         
                        int index468_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA468_56 = input.LA(1);

                         
                        int index468_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA468_57 = input.LA(1);

                         
                        int index468_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA468_58 = input.LA(1);

                         
                        int index468_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA468_59 = input.LA(1);

                         
                        int index468_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA468_60 = input.LA(1);

                         
                        int index468_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA468_61 = input.LA(1);

                         
                        int index468_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA468_62 = input.LA(1);

                         
                        int index468_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA468_63 = input.LA(1);

                         
                        int index468_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA468_64 = input.LA(1);

                         
                        int index468_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA468_65 = input.LA(1);

                         
                        int index468_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA468_66 = input.LA(1);

                         
                        int index468_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA468_67 = input.LA(1);

                         
                        int index468_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA468_68 = input.LA(1);

                         
                        int index468_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA468_69 = input.LA(1);

                         
                        int index468_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA468_70 = input.LA(1);

                         
                        int index468_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA468_71 = input.LA(1);

                         
                        int index468_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index468_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 468, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_299s = "\112\uffff";
    static final String dfa_300s = "\1\4\27\0\2\uffff\55\0\3\uffff";
    static final String dfa_301s = "\1\u0095\27\0\2\uffff\55\0\3\uffff";
    static final String dfa_302s = "\30\uffff\2\3\55\uffff\1\1\1\2\1\4";
    static final String dfa_303s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\3\uffff}>";
    static final String[] dfa_304s = {
            "\1\25\1\22\1\101\1\55\1\14\1\102\1\3\1\6\1\37\1\40\1\5\1\51\1\41\1\46\1\47\1\1\1\2\1\42\1\45\1\53\1\4\1\57\1\7\1\61\1\15\1\64\1\32\1\13\1\33\1\35\1\36\1\10\1\73\1\60\1\62\1\24\1\66\1\70\1\12\1\34\1\44\1\74\1\77\1\71\1\20\1\72\1\21\1\11\1\67\4\uffff\1\50\1\26\1\75\1\56\1\103\1\27\1\63\1\65\21\uffff\1\76\1\43\1\52\1\54\1\100\7\uffff\1\31\7\uffff\1\30\4\uffff\1\106\2\uffff\1\23\2\uffff\1\17\3\uffff\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1\16\2\uffff\1\104\23\uffff\1\105",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final char[] dfa_300 = DFA.unpackEncodedStringToUnsignedChars(dfa_300s);
    static final char[] dfa_301 = DFA.unpackEncodedStringToUnsignedChars(dfa_301s);
    static final short[] dfa_302 = DFA.unpackEncodedString(dfa_302s);
    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[][] dfa_304 = unpackEncodedStringArray(dfa_304s);

    class DFA481 extends DFA {

        public DFA481(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 481;
            this.eot = dfa_299;
            this.eof = dfa_299;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_303;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "16859:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_1_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_1_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_3_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= ruleBlock ) )? (SemicolonKeyword_1_1_6= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA481_0 = input.LA(1);

                         
                        int index481_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA481_0>=4 && LA481_0<=126 && (s=T2S.M_40[LA481_0-(4)])>=0)) { /* 23 cases */ }
                        else if ( (LA481_0==LessThanSign) && (synpred270_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA481_0==Asterisk) && (synpred270_InternalN4JSXParser())) {s = 25;}

                        
                        else if ((LA481_0>=6 && LA481_0<=129 && (s=T2S.M_41[LA481_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA481_0==RULE_DOUBLE||LA481_0==RULE_HEX_INT||LA481_0==RULE_OCTAL_INT||LA481_0==RULE_SCIENTIFIC_INT||LA481_0==RULE_INT) ) {s = 69;}

                        else if ( (LA481_0==LeftSquareBracket) ) {s = 70;}

                         
                        input.seek(index481_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA481_1 = input.LA(1);

                         
                        int index481_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA481_2 = input.LA(1);

                         
                        int index481_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA481_3 = input.LA(1);

                         
                        int index481_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA481_4 = input.LA(1);

                         
                        int index481_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA481_5 = input.LA(1);

                         
                        int index481_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA481_6 = input.LA(1);

                         
                        int index481_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA481_7 = input.LA(1);

                         
                        int index481_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA481_8 = input.LA(1);

                         
                        int index481_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA481_9 = input.LA(1);

                         
                        int index481_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA481_10 = input.LA(1);

                         
                        int index481_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA481_11 = input.LA(1);

                         
                        int index481_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA481_12 = input.LA(1);

                         
                        int index481_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA481_13 = input.LA(1);

                         
                        int index481_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA481_14 = input.LA(1);

                         
                        int index481_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA481_15 = input.LA(1);

                         
                        int index481_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA481_16 = input.LA(1);

                         
                        int index481_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA481_17 = input.LA(1);

                         
                        int index481_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA481_18 = input.LA(1);

                         
                        int index481_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA481_19 = input.LA(1);

                         
                        int index481_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA481_20 = input.LA(1);

                         
                        int index481_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA481_21 = input.LA(1);

                         
                        int index481_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA481_22 = input.LA(1);

                         
                        int index481_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA481_23 = input.LA(1);

                         
                        int index481_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA481_26 = input.LA(1);

                         
                        int index481_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA481_27 = input.LA(1);

                         
                        int index481_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA481_28 = input.LA(1);

                         
                        int index481_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA481_29 = input.LA(1);

                         
                        int index481_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA481_30 = input.LA(1);

                         
                        int index481_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA481_31 = input.LA(1);

                         
                        int index481_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA481_32 = input.LA(1);

                         
                        int index481_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA481_33 = input.LA(1);

                         
                        int index481_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA481_34 = input.LA(1);

                         
                        int index481_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA481_35 = input.LA(1);

                         
                        int index481_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA481_36 = input.LA(1);

                         
                        int index481_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA481_37 = input.LA(1);

                         
                        int index481_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA481_38 = input.LA(1);

                         
                        int index481_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA481_39 = input.LA(1);

                         
                        int index481_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA481_40 = input.LA(1);

                         
                        int index481_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA481_41 = input.LA(1);

                         
                        int index481_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA481_42 = input.LA(1);

                         
                        int index481_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA481_43 = input.LA(1);

                         
                        int index481_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA481_44 = input.LA(1);

                         
                        int index481_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA481_45 = input.LA(1);

                         
                        int index481_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA481_46 = input.LA(1);

                         
                        int index481_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA481_47 = input.LA(1);

                         
                        int index481_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA481_48 = input.LA(1);

                         
                        int index481_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA481_49 = input.LA(1);

                         
                        int index481_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA481_50 = input.LA(1);

                         
                        int index481_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA481_51 = input.LA(1);

                         
                        int index481_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA481_52 = input.LA(1);

                         
                        int index481_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA481_53 = input.LA(1);

                         
                        int index481_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA481_54 = input.LA(1);

                         
                        int index481_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA481_55 = input.LA(1);

                         
                        int index481_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA481_56 = input.LA(1);

                         
                        int index481_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA481_57 = input.LA(1);

                         
                        int index481_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA481_58 = input.LA(1);

                         
                        int index481_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA481_59 = input.LA(1);

                         
                        int index481_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA481_60 = input.LA(1);

                         
                        int index481_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA481_61 = input.LA(1);

                         
                        int index481_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA481_62 = input.LA(1);

                         
                        int index481_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA481_63 = input.LA(1);

                         
                        int index481_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA481_64 = input.LA(1);

                         
                        int index481_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA481_65 = input.LA(1);

                         
                        int index481_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA481_66 = input.LA(1);

                         
                        int index481_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA481_67 = input.LA(1);

                         
                        int index481_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA481_68 = input.LA(1);

                         
                        int index481_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA481_69 = input.LA(1);

                         
                        int index481_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA481_70 = input.LA(1);

                         
                        int index481_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index481_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 481, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_305s = "\115\uffff";
    static final String dfa_306s = "\1\2\114\uffff";
    static final String dfa_307s = "\1\4\1\0\113\uffff";
    static final String dfa_308s = "\1\u0095\1\0\113\uffff";
    static final String dfa_309s = "\2\uffff\1\2\111\uffff\1\1";
    static final String dfa_310s = "\1\uffff\1\0\113\uffff}>";
    static final String[] dfa_311s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final short[] dfa_306 = DFA.unpackEncodedString(dfa_306s);
    static final char[] dfa_307 = DFA.unpackEncodedStringToUnsignedChars(dfa_307s);
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[][] dfa_311 = unpackEncodedStringArray(dfa_311s);

    class DFA470 extends DFA {

        public DFA470(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 470;
            this.eot = dfa_305;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "16880:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA470_1 = input.LA(1);

                         
                        int index470_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index470_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 470, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA474 extends DFA {

        public DFA474(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 474;
            this.eot = dfa_305;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "17157:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA474_1 = input.LA(1);

                         
                        int index474_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index474_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 474, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_312s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_313s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_314s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_315s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_312 = DFA.unpackEncodedStringToUnsignedChars(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[] dfa_314 = DFA.unpackEncodedString(dfa_314s);
    static final short[][] dfa_315 = unpackEncodedStringArray(dfa_315s);

    class DFA476 extends DFA {

        public DFA476(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 476;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 17218:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA478 extends DFA {

        public DFA478(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 478;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17226:6: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA494 extends DFA {

        public DFA494(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 494;
            this.eot = dfa_299;
            this.eof = dfa_299;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_303;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "17293:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_1_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_1_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_3_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= norm1_Block ) )? (SemicolonKeyword_1_1_6= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA494_0 = input.LA(1);

                         
                        int index494_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA494_0>=4 && LA494_0<=126 && (s=T2S.M_40[LA494_0-(4)])>=0)) { /* 23 cases */ }
                        else if ( (LA494_0==LessThanSign) && (synpred278_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA494_0==Asterisk) && (synpred278_InternalN4JSXParser())) {s = 25;}

                        
                        else if ((LA494_0>=6 && LA494_0<=129 && (s=T2S.M_41[LA494_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA494_0==RULE_DOUBLE||LA494_0==RULE_HEX_INT||LA494_0==RULE_OCTAL_INT||LA494_0==RULE_SCIENTIFIC_INT||LA494_0==RULE_INT) ) {s = 69;}

                        else if ( (LA494_0==LeftSquareBracket) ) {s = 70;}

                         
                        input.seek(index494_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA494_1 = input.LA(1);

                         
                        int index494_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA494_2 = input.LA(1);

                         
                        int index494_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA494_3 = input.LA(1);

                         
                        int index494_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA494_4 = input.LA(1);

                         
                        int index494_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA494_5 = input.LA(1);

                         
                        int index494_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA494_6 = input.LA(1);

                         
                        int index494_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA494_7 = input.LA(1);

                         
                        int index494_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA494_8 = input.LA(1);

                         
                        int index494_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA494_9 = input.LA(1);

                         
                        int index494_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA494_10 = input.LA(1);

                         
                        int index494_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA494_11 = input.LA(1);

                         
                        int index494_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA494_12 = input.LA(1);

                         
                        int index494_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA494_13 = input.LA(1);

                         
                        int index494_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA494_14 = input.LA(1);

                         
                        int index494_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA494_15 = input.LA(1);

                         
                        int index494_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA494_16 = input.LA(1);

                         
                        int index494_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA494_17 = input.LA(1);

                         
                        int index494_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA494_18 = input.LA(1);

                         
                        int index494_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA494_19 = input.LA(1);

                         
                        int index494_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA494_20 = input.LA(1);

                         
                        int index494_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA494_21 = input.LA(1);

                         
                        int index494_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA494_22 = input.LA(1);

                         
                        int index494_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA494_23 = input.LA(1);

                         
                        int index494_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA494_26 = input.LA(1);

                         
                        int index494_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA494_27 = input.LA(1);

                         
                        int index494_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA494_28 = input.LA(1);

                         
                        int index494_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA494_29 = input.LA(1);

                         
                        int index494_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA494_30 = input.LA(1);

                         
                        int index494_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA494_31 = input.LA(1);

                         
                        int index494_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA494_32 = input.LA(1);

                         
                        int index494_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA494_33 = input.LA(1);

                         
                        int index494_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA494_34 = input.LA(1);

                         
                        int index494_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA494_35 = input.LA(1);

                         
                        int index494_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA494_36 = input.LA(1);

                         
                        int index494_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA494_37 = input.LA(1);

                         
                        int index494_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA494_38 = input.LA(1);

                         
                        int index494_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA494_39 = input.LA(1);

                         
                        int index494_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA494_40 = input.LA(1);

                         
                        int index494_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA494_41 = input.LA(1);

                         
                        int index494_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA494_42 = input.LA(1);

                         
                        int index494_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA494_43 = input.LA(1);

                         
                        int index494_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA494_44 = input.LA(1);

                         
                        int index494_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA494_45 = input.LA(1);

                         
                        int index494_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA494_46 = input.LA(1);

                         
                        int index494_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA494_47 = input.LA(1);

                         
                        int index494_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA494_48 = input.LA(1);

                         
                        int index494_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA494_49 = input.LA(1);

                         
                        int index494_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA494_50 = input.LA(1);

                         
                        int index494_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA494_51 = input.LA(1);

                         
                        int index494_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA494_52 = input.LA(1);

                         
                        int index494_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA494_53 = input.LA(1);

                         
                        int index494_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA494_54 = input.LA(1);

                         
                        int index494_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA494_55 = input.LA(1);

                         
                        int index494_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA494_56 = input.LA(1);

                         
                        int index494_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA494_57 = input.LA(1);

                         
                        int index494_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA494_58 = input.LA(1);

                         
                        int index494_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA494_59 = input.LA(1);

                         
                        int index494_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA494_60 = input.LA(1);

                         
                        int index494_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA494_61 = input.LA(1);

                         
                        int index494_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA494_62 = input.LA(1);

                         
                        int index494_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA494_63 = input.LA(1);

                         
                        int index494_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA494_64 = input.LA(1);

                         
                        int index494_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA494_65 = input.LA(1);

                         
                        int index494_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA494_66 = input.LA(1);

                         
                        int index494_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA494_67 = input.LA(1);

                         
                        int index494_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA494_68 = input.LA(1);

                         
                        int index494_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA494_69 = input.LA(1);

                         
                        int index494_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA494_70 = input.LA(1);

                         
                        int index494_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 25;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index494_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 494, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_316s = "\1\4\1\0\112\uffff";
    static final String dfa_317s = "\1\u0095\1\0\112\uffff";
    static final String dfa_318s = "\2\uffff\1\2\110\uffff\1\1";
    static final String dfa_319s = "\1\uffff\1\0\112\uffff}>";
    static final String[] dfa_320s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_316 = DFA.unpackEncodedStringToUnsignedChars(dfa_316s);
    static final char[] dfa_317 = DFA.unpackEncodedStringToUnsignedChars(dfa_317s);
    static final short[] dfa_318 = DFA.unpackEncodedString(dfa_318s);
    static final short[] dfa_319 = DFA.unpackEncodedString(dfa_319s);
    static final short[][] dfa_320 = unpackEncodedStringArray(dfa_320s);

    class DFA483 extends DFA {

        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_316;
            this.max = dfa_317;
            this.accept = dfa_318;
            this.special = dfa_319;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "17314:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA483_1 = input.LA(1);

                         
                        int index483_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index483_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 483, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA487 extends DFA {

        public DFA487(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 487;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_316;
            this.max = dfa_317;
            this.accept = dfa_318;
            this.special = dfa_319;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "17591:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA487_1 = input.LA(1);

                         
                        int index487_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index487_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 487, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA489 extends DFA {

        public DFA489(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 489;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 17652:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA491 extends DFA {

        public DFA491(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 491;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17660:6: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_321s = "\2\uffff\10\1\1\uffff";
    static final String dfa_322s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_323s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\24\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final char[] dfa_322 = DFA.unpackEncodedStringToUnsignedChars(dfa_322s);
    static final short[][] dfa_323 = unpackEncodedStringArray(dfa_323s);

    class DFA495 extends DFA {

        public DFA495(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 495;
            this.eot = dfa_21;
            this.eof = dfa_321;
            this.min = dfa_312;
            this.max = dfa_322;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_323;
        }
        public String getDescription() {
            return "()* loopback of 17726:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_324s = "\1\uffff\6\15\1\uffff\5\15\1\uffff\1\15";
    static final String dfa_325s = "\1\u0095\6\u0099\1\uffff\5\u0099\1\uffff\1\u0099";
    static final String[] dfa_326s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\24\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\2\15\1\7\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\uffff\1\15\1\uffff\1\16\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\1\uffff\1\15\4\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\15\uffff\2\15\1\uffff\1\15\3\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15"
    };
    static final short[] dfa_324 = DFA.unpackEncodedString(dfa_324s);
    static final char[] dfa_325 = DFA.unpackEncodedStringToUnsignedChars(dfa_325s);
    static final short[][] dfa_326 = unpackEncodedStringArray(dfa_326s);

    class DFA496 extends DFA {

        public DFA496(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 496;
            this.eot = dfa_15;
            this.eof = dfa_324;
            this.min = dfa_201;
            this.max = dfa_325;
            this.accept = dfa_203;
            this.special = dfa_204;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "17731:2: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA500 extends DFA {

        public DFA500(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 500;
            this.eot = dfa_21;
            this.eof = dfa_321;
            this.min = dfa_312;
            this.max = dfa_322;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_323;
        }
        public String getDescription() {
            return "()* loopback of 17775:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA501 extends DFA {

        public DFA501(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 501;
            this.eot = dfa_15;
            this.eof = dfa_324;
            this.min = dfa_201;
            this.max = dfa_325;
            this.accept = dfa_203;
            this.special = dfa_204;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "17780:2: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA505 extends DFA {

        public DFA505(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 505;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 17895:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA507 extends DFA {

        public DFA507(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 507;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17903:4: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA510 extends DFA {

        public DFA510(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 510;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 18004:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA512 extends DFA {

        public DFA512(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 512;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "18012:4: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA520 extends DFA {

        public DFA520(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 520;
            this.eot = dfa_305;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "18165:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA520_1 = input.LA(1);

                         
                        int index520_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index520_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 520, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA522 extends DFA {

        public DFA522(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 522;
            this.eot = dfa_305;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "18199:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA522_1 = input.LA(1);

                         
                        int index522_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index522_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 522, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA524 extends DFA {

        public DFA524(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 524;
            this.eot = dfa_305;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "18243:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA524_1 = input.LA(1);

                         
                        int index524_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index524_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 524, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA527 extends DFA {

        public DFA527(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 527;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_316;
            this.max = dfa_317;
            this.accept = dfa_318;
            this.special = dfa_319;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "18288:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA527_1 = input.LA(1);

                         
                        int index527_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index527_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 527, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA537 extends DFA {

        public DFA537(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 537;
            this.eot = dfa_305;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "18788:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_5_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA537_1 = input.LA(1);

                         
                        int index537_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index537_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 537, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA541 extends DFA {

        public DFA541(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 541;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_316;
            this.max = dfa_317;
            this.accept = dfa_318;
            this.special = dfa_319;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "19071:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_5_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA541_1 = input.LA(1);

                         
                        int index541_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index541_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 541, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_327s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_328s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_327 = DFA.unpackEncodedStringToUnsignedChars(dfa_327s);
    static final short[][] dfa_328 = unpackEncodedStringArray(dfa_328s);

    class DFA551 extends DFA {

        public DFA551(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 551;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_327;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_328;
        }
        public String getDescription() {
            return "()* loopback of 19233:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_329s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_329 = unpackEncodedStringArray(dfa_329s);

    class DFA557 extends DFA {

        public DFA557(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 557;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_327;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "()* loopback of 19299:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_330s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_331s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_332s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_333s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_334s = "\1\20\1\27\40\uffff\1\30\4\uffff\1\6\1\12\1\15\1\21\1\24\1\31\1\0\1\3\1\7\1\13\1\16\1\22\1\25\1\32\1\1\1\4\1\10\1\14\1\17\1\23\1\26\1\33\1\2\1\5\1\11\5\uffff}>";
    static final String[] dfa_335s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_330 = DFA.unpackEncodedString(dfa_330s);
    static final char[] dfa_331 = DFA.unpackEncodedStringToUnsignedChars(dfa_331s);
    static final char[] dfa_332 = DFA.unpackEncodedStringToUnsignedChars(dfa_332s);
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final short[] dfa_334 = DFA.unpackEncodedString(dfa_334s);
    static final short[][] dfa_335 = unpackEncodedStringArray(dfa_335s);

    class DFA561 extends DFA {

        public DFA561(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 561;
            this.eot = dfa_237;
            this.eof = dfa_330;
            this.min = dfa_331;
            this.max = dfa_332;
            this.accept = dfa_333;
            this.special = dfa_334;
            this.transition = dfa_335;
        }
        public String getDescription() {
            return "19350:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA561_45 = input.LA(1);

                         
                        int index561_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_45==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_45==EOF||LA561_45==Comma||LA561_45==EqualsSign||LA561_45==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_45);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA561_53 = input.LA(1);

                         
                        int index561_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_53==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_53==EOF||LA561_53==Comma||LA561_53==EqualsSign||LA561_53==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_53);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA561_61 = input.LA(1);

                         
                        int index561_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_61==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_61==EOF||LA561_61==Comma||LA561_61==EqualsSign||LA561_61==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA561_46 = input.LA(1);

                         
                        int index561_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_46==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_46==EOF||LA561_46==Comma||LA561_46==EqualsSign||LA561_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_46);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA561_54 = input.LA(1);

                         
                        int index561_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_54==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_54==EOF||LA561_54==Comma||LA561_54==EqualsSign||LA561_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_54);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA561_62 = input.LA(1);

                         
                        int index561_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_62==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_62==EOF||LA561_62==Comma||LA561_62==EqualsSign||LA561_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_62);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA561_39 = input.LA(1);

                         
                        int index561_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_39==EOF||LA561_39==Comma||LA561_39==EqualsSign||LA561_39==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA561_39==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index561_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA561_47 = input.LA(1);

                         
                        int index561_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_47==EOF||LA561_47==Comma||LA561_47==EqualsSign||LA561_47==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA561_47==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index561_47);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA561_55 = input.LA(1);

                         
                        int index561_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_55==EOF||LA561_55==Comma||LA561_55==EqualsSign||LA561_55==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA561_55==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index561_55);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA561_63 = input.LA(1);

                         
                        int index561_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_63==EOF||LA561_63==Comma||LA561_63==EqualsSign||LA561_63==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA561_63==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index561_63);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA561_40 = input.LA(1);

                         
                        int index561_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_40==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_40==EOF||LA561_40==Comma||LA561_40==EqualsSign||LA561_40==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_40);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA561_48 = input.LA(1);

                         
                        int index561_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_48==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_48==EOF||LA561_48==Comma||LA561_48==EqualsSign||LA561_48==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_48);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA561_56 = input.LA(1);

                         
                        int index561_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_56==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_56==EOF||LA561_56==Comma||LA561_56==EqualsSign||LA561_56==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_56);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA561_41 = input.LA(1);

                         
                        int index561_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_41==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_41==EOF||LA561_41==Comma||LA561_41==EqualsSign||LA561_41==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_41);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA561_49 = input.LA(1);

                         
                        int index561_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_49==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_49==EOF||LA561_49==Comma||LA561_49==EqualsSign||LA561_49==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_49);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA561_57 = input.LA(1);

                         
                        int index561_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_57==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_57==EOF||LA561_57==Comma||LA561_57==EqualsSign||LA561_57==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_57);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA561_0 = input.LA(1);

                         
                        int index561_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA561_0>=7 && LA561_0<=126 && (s=T2S.M_44[LA561_0-(7)])>=0) && (synpred303_InternalN4JSXParser())) { /* 33 cases */ }
                        else if ( (LA561_0==Yield) ) {s = 34;}

                        else if ( (LA561_0==Null) && (synpred303_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA561_0==True) && (synpred303_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA561_0==False) && (synpred303_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA561_0==Enum) && (synpred303_InternalN4JSXParser())) {s = 38;}

                        
                        else if ((LA561_0>=4 && LA561_0<=86 && (s=T2S.M_45[LA561_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA561_0==RULE_STRING) && (synpred303_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA561_0==RULE_DOUBLE||LA561_0==RULE_HEX_INT||LA561_0==RULE_OCTAL_INT||LA561_0==RULE_SCIENTIFIC_INT||LA561_0==RULE_INT) && (synpred303_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA561_0==LeftSquareBracket) && (synpred303_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA561_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index561_0);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA561_42 = input.LA(1);

                         
                        int index561_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_42==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_42==EOF||LA561_42==Comma||LA561_42==EqualsSign||LA561_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_42);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA561_50 = input.LA(1);

                         
                        int index561_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_50==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_50==EOF||LA561_50==Comma||LA561_50==EqualsSign||LA561_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_50);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA561_58 = input.LA(1);

                         
                        int index561_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_58==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_58==EOF||LA561_58==Comma||LA561_58==EqualsSign||LA561_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA561_43 = input.LA(1);

                         
                        int index561_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_43==EOF||LA561_43==Comma||LA561_43==EqualsSign||LA561_43==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA561_43==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index561_43);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA561_51 = input.LA(1);

                         
                        int index561_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_51==EOF||LA561_51==Comma||LA561_51==EqualsSign||LA561_51==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA561_51==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index561_51);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA561_59 = input.LA(1);

                         
                        int index561_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_59==EOF||LA561_59==Comma||LA561_59==EqualsSign||LA561_59==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA561_59==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index561_59);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA561_1 = input.LA(1);

                         
                        int index561_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_1==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_1==EOF||LA561_1==Comma||LA561_1==EqualsSign||LA561_1==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_1);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA561_34 = input.LA(1);

                         
                        int index561_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_34==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_34==EOF||LA561_34==Comma||LA561_34==EqualsSign||LA561_34==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_34);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA561_44 = input.LA(1);

                         
                        int index561_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_44==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_44==EOF||LA561_44==Comma||LA561_44==EqualsSign||LA561_44==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_44);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA561_52 = input.LA(1);

                         
                        int index561_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_52==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_52==EOF||LA561_52==Comma||LA561_52==EqualsSign||LA561_52==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_52);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA561_60 = input.LA(1);

                         
                        int index561_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA561_60==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA561_60==EOF||LA561_60==Comma||LA561_60==EqualsSign||LA561_60==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index561_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 561, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_336s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_337s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_338s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_339s = "\1\32\1\23\45\uffff\1\3\1\7\1\12\1\15\1\20\1\24\1\27\1\0\1\4\1\10\1\13\1\16\1\21\1\25\1\30\1\1\1\5\1\11\1\14\1\17\1\22\1\26\1\31\1\2\1\6\5\uffff}>";
    static final String[] dfa_340s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_336 = DFA.unpackEncodedStringToUnsignedChars(dfa_336s);
    static final char[] dfa_337 = DFA.unpackEncodedStringToUnsignedChars(dfa_337s);
    static final short[] dfa_338 = DFA.unpackEncodedString(dfa_338s);
    static final short[] dfa_339 = DFA.unpackEncodedString(dfa_339s);
    static final short[][] dfa_340 = unpackEncodedStringArray(dfa_340s);

    class DFA562 extends DFA {

        public DFA562(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 562;
            this.eot = dfa_237;
            this.eof = dfa_237;
            this.min = dfa_336;
            this.max = dfa_337;
            this.accept = dfa_338;
            this.special = dfa_339;
            this.transition = dfa_340;
        }
        public String getDescription() {
            return "19400:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA562_46 = input.LA(1);

                         
                        int index562_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_46==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA562_46==Comma||LA562_46==EqualsSign||LA562_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index562_46);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA562_54 = input.LA(1);

                         
                        int index562_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_54==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA562_54==Comma||LA562_54==EqualsSign||LA562_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index562_54);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA562_62 = input.LA(1);

                         
                        int index562_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_62==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA562_62==Comma||LA562_62==EqualsSign||LA562_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index562_62);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA562_39 = input.LA(1);

                         
                        int index562_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_39==Comma||LA562_39==EqualsSign||LA562_39==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_39==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_39);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA562_47 = input.LA(1);

                         
                        int index562_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_47==Comma||LA562_47==EqualsSign||LA562_47==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_47==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA562_55 = input.LA(1);

                         
                        int index562_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_55==Comma||LA562_55==EqualsSign||LA562_55==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_55==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_55);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA562_63 = input.LA(1);

                         
                        int index562_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_63==Comma||LA562_63==EqualsSign||LA562_63==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_63==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_63);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA562_40 = input.LA(1);

                         
                        int index562_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_40==Comma||LA562_40==EqualsSign||LA562_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_40==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA562_48 = input.LA(1);

                         
                        int index562_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_48==Comma||LA562_48==EqualsSign||LA562_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_48==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA562_56 = input.LA(1);

                         
                        int index562_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_56==Comma||LA562_56==EqualsSign||LA562_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_56==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_56);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA562_41 = input.LA(1);

                         
                        int index562_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_41==Comma||LA562_41==EqualsSign||LA562_41==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_41==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_41);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA562_49 = input.LA(1);

                         
                        int index562_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_49==Comma||LA562_49==EqualsSign||LA562_49==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_49==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA562_57 = input.LA(1);

                         
                        int index562_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_57==Comma||LA562_57==EqualsSign||LA562_57==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_57==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_57);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA562_42 = input.LA(1);

                         
                        int index562_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_42==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA562_42==Comma||LA562_42==EqualsSign||LA562_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index562_42);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA562_50 = input.LA(1);

                         
                        int index562_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_50==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA562_50==Comma||LA562_50==EqualsSign||LA562_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index562_50);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA562_58 = input.LA(1);

                         
                        int index562_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_58==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA562_58==Comma||LA562_58==EqualsSign||LA562_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index562_58);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA562_43 = input.LA(1);

                         
                        int index562_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_43==Comma||LA562_43==EqualsSign||LA562_43==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_43==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_43);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA562_51 = input.LA(1);

                         
                        int index562_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_51==Comma||LA562_51==EqualsSign||LA562_51==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_51==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_51);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA562_59 = input.LA(1);

                         
                        int index562_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_59==Comma||LA562_59==EqualsSign||LA562_59==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_59==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_59);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA562_1 = input.LA(1);

                         
                        int index562_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_1==Comma||LA562_1==EqualsSign||LA562_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_1==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_1);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA562_44 = input.LA(1);

                         
                        int index562_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_44==Comma||LA562_44==EqualsSign||LA562_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_44==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_44);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA562_52 = input.LA(1);

                         
                        int index562_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_52==Comma||LA562_52==EqualsSign||LA562_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_52==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_52);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA562_60 = input.LA(1);

                         
                        int index562_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_60==Comma||LA562_60==EqualsSign||LA562_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_60==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA562_45 = input.LA(1);

                         
                        int index562_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_45==Comma||LA562_45==EqualsSign||LA562_45==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_45==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_45);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA562_53 = input.LA(1);

                         
                        int index562_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_53==Comma||LA562_53==EqualsSign||LA562_53==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_53==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_53);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA562_61 = input.LA(1);

                         
                        int index562_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_61==Comma||LA562_61==EqualsSign||LA562_61==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA562_61==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index562_61);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA562_0 = input.LA(1);

                         
                        int index562_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA562_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA562_0>=7 && LA562_0<=126 && (s=T2S.M_46[LA562_0-(7)])>=0) && (synpred304_InternalN4JSXParser())) { /* 38 cases */ }
                        
                        else if ((LA562_0>=4 && LA562_0<=86 && (s=T2S.M_45[LA562_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA562_0==RULE_STRING) && (synpred304_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA562_0==RULE_DOUBLE||LA562_0==RULE_HEX_INT||LA562_0==RULE_OCTAL_INT||LA562_0==RULE_SCIENTIFIC_INT||LA562_0==RULE_INT) && (synpred304_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA562_0==LeftSquareBracket) && (synpred304_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA562_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index562_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 562, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_341s = "\22\uffff";
    static final String dfa_342s = "\1\4\1\0\20\uffff";
    static final String dfa_343s = "\1\176\1\0\20\uffff";
    static final String dfa_344s = "\2\uffff\1\2\1\3\14\uffff\1\1\1\4";
    static final String dfa_345s = "\1\uffff\1\0\20\uffff}>";
    static final String[] dfa_346s = {
            "\2\3\2\uffff\1\3\23\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\16\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_341 = DFA.unpackEncodedString(dfa_341s);
    static final char[] dfa_342 = DFA.unpackEncodedStringToUnsignedChars(dfa_342s);
    static final char[] dfa_343 = DFA.unpackEncodedStringToUnsignedChars(dfa_343s);
    static final short[] dfa_344 = DFA.unpackEncodedString(dfa_344s);
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final short[][] dfa_346 = unpackEncodedStringArray(dfa_346s);

    class DFA579 extends DFA {

        public DFA579(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 579;
            this.eot = dfa_341;
            this.eof = dfa_341;
            this.min = dfa_342;
            this.max = dfa_343;
            this.accept = dfa_344;
            this.special = dfa_345;
            this.transition = dfa_346;
        }
        public String getDescription() {
            return "19930:1: ( ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=> (LeftParenthesisKeyword_0_0_0_1= LeftParenthesis TAnonymousFormalParameterListParserRuleCall_0_0_0_2= ruleTAnonymousFormalParameterList RightParenthesisKeyword_0_0_0_3= RightParenthesis EqualsSignGreaterThanSignKeyword_0_0_0_4= EqualsSignGreaterThanSign ) ) ( (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0= rulePrimaryTypeExpression ) ) ) | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA579_1 = input.LA(1);

                         
                        int index579_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSXParser()) ) {s = 16;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index579_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 579, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_347s = "\174\uffff";
    static final String dfa_348s = "\1\2\173\uffff";
    static final String dfa_349s = "\1\4\1\0\172\uffff";
    static final String dfa_350s = "\1\u0099\1\0\172\uffff";
    static final String dfa_351s = "\2\uffff\1\2\170\uffff\1\1";
    static final String dfa_352s = "\1\uffff\1\0\172\uffff}>";
    static final String[] dfa_353s = {
            "\114\2\1\uffff\21\2\1\uffff\6\2\1\1\10\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_347 = DFA.unpackEncodedString(dfa_347s);
    static final short[] dfa_348 = DFA.unpackEncodedString(dfa_348s);
    static final char[] dfa_349 = DFA.unpackEncodedStringToUnsignedChars(dfa_349s);
    static final char[] dfa_350 = DFA.unpackEncodedStringToUnsignedChars(dfa_350s);
    static final short[] dfa_351 = DFA.unpackEncodedString(dfa_351s);
    static final short[] dfa_352 = DFA.unpackEncodedString(dfa_352s);
    static final short[][] dfa_353 = unpackEncodedStringArray(dfa_353s);

    class DFA580 extends DFA {

        public DFA580(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 580;
            this.eot = dfa_347;
            this.eof = dfa_348;
            this.min = dfa_349;
            this.max = dfa_350;
            this.accept = dfa_351;
            this.special = dfa_352;
            this.transition = dfa_353;
        }
        public String getDescription() {
            return "20008:2: ( ( ( QuestionMark ) )=> (FollowedByQuestionMarkQuestionMarkKeyword_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA580_1 = input.LA(1);

                         
                        int index580_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index580_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 580, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_354s = {
            "\114\2\1\uffff\16\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_354 = unpackEncodedStringArray(dfa_354s);

    class DFA582 extends DFA {

        public DFA582(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 582;
            this.eot = dfa_347;
            this.eof = dfa_348;
            this.min = dfa_349;
            this.max = dfa_350;
            this.accept = dfa_351;
            this.special = dfa_352;
            this.transition = dfa_354;
        }
        public String getDescription() {
            return "20040:3: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA582_1 = input.LA(1);

                         
                        int index582_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index582_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 582, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_355s = "\1\4\1\uffff\1\10\7\uffff\2\10";
    static final String dfa_356s = "\1\176\1\uffff\1\u0093\7\uffff\2\176";
    static final String dfa_357s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff";
    static final String[] dfa_358s = {
            "\1\11\1\5\2\uffff\1\1\23\uffff\1\1\2\uffff\1\1\7\uffff\1\10\2\uffff\1\1\5\uffff\1\4\1\uffff\1\5\1\1\50\uffff\1\7\16\uffff\1\3\2\uffff\1\6\2\uffff\1\2\14\uffff\1\1",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\75\uffff\1\12\14\uffff\1\1\24\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1"
    };
    static final char[] dfa_355 = DFA.unpackEncodedStringToUnsignedChars(dfa_355s);
    static final char[] dfa_356 = DFA.unpackEncodedStringToUnsignedChars(dfa_356s);
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[][] dfa_358 = unpackEncodedStringArray(dfa_358s);

    class DFA585 extends DFA {

        public DFA585(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 585;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_355;
            this.max = dfa_356;
            this.accept = dfa_357;
            this.special = dfa_52;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "20097:1: (ParameterizedTypeRefParserRuleCall_0= ruleParameterizedTypeRef | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | ThisTypeRefParserRuleCall_2= ruleThisTypeRef | TypeTypeRefParserRuleCall_3= ruleTypeTypeRef | FunctionTypeExpressionOLDParserRuleCall_4= ruleFunctionTypeExpressionOLD | ArrowFunctionTypeExpressionParserRuleCall_5= ruleArrowFunctionTypeExpression | UnionTypeExpressionOLDParserRuleCall_6= ruleUnionTypeExpressionOLD | IntersectionTypeExpressionOLDParserRuleCall_7= ruleIntersectionTypeExpressionOLD )";
        }
    }
    static final String dfa_359s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_360s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_361s = "\1\176\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\11\uffff";
    static final String dfa_362s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_363s = "\1\3\1\7\12\uffff\1\2\1\uffff\1\6\1\5\1\11\1\4\1\10\1\0\1\1\11\uffff}>";
    static final String[] dfa_364s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\16\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\2\34\1\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_359 = DFA.unpackEncodedString(dfa_359s);
    static final char[] dfa_360 = DFA.unpackEncodedStringToUnsignedChars(dfa_360s);
    static final char[] dfa_361 = DFA.unpackEncodedStringToUnsignedChars(dfa_361s);
    static final short[] dfa_362 = DFA.unpackEncodedString(dfa_362s);
    static final short[] dfa_363 = DFA.unpackEncodedString(dfa_363s);
    static final short[][] dfa_364 = unpackEncodedStringArray(dfa_364s);

    class DFA596 extends DFA {

        public DFA596(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 596;
            this.eot = dfa_54;
            this.eof = dfa_359;
            this.min = dfa_360;
            this.max = dfa_361;
            this.accept = dfa_362;
            this.special = dfa_363;
            this.transition = dfa_364;
        }
        public String getDescription() {
            return "20393:2: ( ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_0_0= ruleBindingIdentifier ) ) ColonKeyword_1_1= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA596_19 = input.LA(1);

                         
                        int index596_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_19==EOF||LA596_19==Ampersand||LA596_19==RightParenthesis||(LA596_19>=PlusSign && LA596_19<=Comma)||(LA596_19>=LessThanSign && LA596_19<=EqualsSign)||LA596_19==QuestionMark||LA596_19==VerticalLine) ) {s = 28;}

                        else if ( (LA596_19==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index596_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA596_20 = input.LA(1);

                         
                        int index596_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_20==EOF||LA596_20==Ampersand||LA596_20==RightParenthesis||(LA596_20>=PlusSign && LA596_20<=Comma)||(LA596_20>=LessThanSign && LA596_20<=EqualsSign)||LA596_20==QuestionMark||LA596_20==VerticalLine) ) {s = 28;}

                        else if ( (LA596_20==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index596_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA596_12 = input.LA(1);

                         
                        int index596_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA596_12==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index596_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA596_0 = input.LA(1);

                         
                        int index596_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA596_0>=11 && LA596_0<=126 && (s=T2S.M_48[LA596_0-(11)])>=0) && (synpred313_InternalN4JSXParser())) { /* 11 cases */ }
                        else if ( (LA596_0==Constructor) ) {s = 12;}

                        else if ( (LA596_0==Of) && (synpred313_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA596_0==Target) ) {s = 14;}

                        else if ( (LA596_0==Type) ) {s = 15;}

                        else if ( (LA596_0==Union) ) {s = 16;}

                        else if ( (LA596_0==Intersection) ) {s = 17;}

                        else if ( (LA596_0==This) ) {s = 18;}

                        else if ( (LA596_0==Promisify) ) {s = 19;}

                        else if ( (LA596_0==Await) ) {s = 20;}

                        else if ( (LA596_0==Async) && (synpred313_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA596_0==Implements) && (synpred313_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA596_0==Interface) && (synpred313_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA596_0==Private) && (synpred313_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA596_0==Protected) && (synpred313_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA596_0==Public) && (synpred313_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA596_0==Out) && (synpred313_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA596_0==This_1||LA596_0==Void||LA596_0==LeftParenthesis||LA596_0==LeftSquareBracket||LA596_0==LeftCurlyBracket||LA596_0==Tilde) ) {s = 28;}

                         
                        input.seek(index596_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA596_17 = input.LA(1);

                         
                        int index596_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_17==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA596_17==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index596_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA596_15 = input.LA(1);

                         
                        int index596_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_15==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA596_15==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index596_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA596_14 = input.LA(1);

                         
                        int index596_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_14==EOF||LA596_14==Ampersand||LA596_14==RightParenthesis||(LA596_14>=PlusSign && LA596_14<=Comma)||(LA596_14>=LessThanSign && LA596_14<=EqualsSign)||LA596_14==QuestionMark||LA596_14==VerticalLine) ) {s = 28;}

                        else if ( (LA596_14==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index596_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA596_1 = input.LA(1);

                         
                        int index596_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_1==EOF||LA596_1==Ampersand||LA596_1==RightParenthesis||(LA596_1>=PlusSign && LA596_1<=Comma)||LA596_1==FullStop||(LA596_1>=LessThanSign && LA596_1<=EqualsSign)||LA596_1==QuestionMark||LA596_1==VerticalLine) ) {s = 28;}

                        else if ( (LA596_1==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index596_1);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA596_18 = input.LA(1);

                         
                        int index596_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_18==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA596_18==EOF||LA596_18==Ampersand||LA596_18==RightParenthesis||(LA596_18>=PlusSign && LA596_18<=Comma)||(LA596_18>=LessThanSign && LA596_18<=EqualsSign)||LA596_18==QuestionMark||LA596_18==VerticalLine) ) {s = 28;}

                         
                        input.seek(index596_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA596_16 = input.LA(1);

                         
                        int index596_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA596_16==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA596_16==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index596_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 596, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_365s = {
            "\114\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_365 = unpackEncodedStringArray(dfa_365s);

    class DFA603 extends DFA {

        public DFA603(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 603;
            this.eot = dfa_347;
            this.eof = dfa_348;
            this.min = dfa_349;
            this.max = dfa_350;
            this.accept = dfa_351;
            this.special = dfa_352;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "20572:2: ( ( ( LessThanSign )=>LessThanSignKeyword_1_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_1_1_0= ruleTypeArgument ) ) (CommaKeyword_1_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_1_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_1_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA603_1 = input.LA(1);

                         
                        int index603_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index603_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 603, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA605 extends DFA {

        public DFA605(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 605;
            this.eot = dfa_347;
            this.eof = dfa_348;
            this.min = dfa_349;
            this.max = dfa_350;
            this.accept = dfa_351;
            this.special = dfa_352;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "20667:2: ( ( ( LessThanSign )=>LessThanSignKeyword_2_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_2_1_0= ruleTypeArgument ) ) (CommaKeyword_2_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_2_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_2_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA605_1 = input.LA(1);

                         
                        int index605_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index605_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 605, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_366s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_367s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_368s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_369s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_370s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_366 = DFA.unpackEncodedStringToUnsignedChars(dfa_366s);
    static final char[] dfa_367 = DFA.unpackEncodedStringToUnsignedChars(dfa_367s);
    static final short[] dfa_368 = DFA.unpackEncodedString(dfa_368s);
    static final short[] dfa_369 = DFA.unpackEncodedString(dfa_369s);
    static final short[][] dfa_370 = unpackEncodedStringArray(dfa_370s);

    class DFA609 extends DFA {

        public DFA609(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 609;
            this.eot = dfa_230;
            this.eof = dfa_230;
            this.min = dfa_366;
            this.max = dfa_367;
            this.accept = dfa_368;
            this.special = dfa_369;
            this.transition = dfa_370;
        }
        public String getDescription() {
            return "20758:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA609_0 = input.LA(1);

                         
                        int index609_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA609_0==Get) ) {s = 1;}

                        else if ( (LA609_0==Set) ) {s = 2;}

                        else if ( (LA609_0==LessThanSign) && (synpred318_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA609_0>=4 && LA609_0<=126 && (s=T2S.M_49[LA609_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index609_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA609_1 = input.LA(1);

                         
                        int index609_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA609_2 = input.LA(1);

                         
                        int index609_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSXParser()) ) {s = 67;}

                        else if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA609_4 = input.LA(1);

                         
                        int index609_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA609_5 = input.LA(1);

                         
                        int index609_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA609_6 = input.LA(1);

                         
                        int index609_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA609_7 = input.LA(1);

                         
                        int index609_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA609_8 = input.LA(1);

                         
                        int index609_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA609_9 = input.LA(1);

                         
                        int index609_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA609_10 = input.LA(1);

                         
                        int index609_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA609_11 = input.LA(1);

                         
                        int index609_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA609_12 = input.LA(1);

                         
                        int index609_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA609_13 = input.LA(1);

                         
                        int index609_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA609_14 = input.LA(1);

                         
                        int index609_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA609_15 = input.LA(1);

                         
                        int index609_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA609_16 = input.LA(1);

                         
                        int index609_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA609_17 = input.LA(1);

                         
                        int index609_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA609_18 = input.LA(1);

                         
                        int index609_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA609_19 = input.LA(1);

                         
                        int index609_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA609_20 = input.LA(1);

                         
                        int index609_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA609_21 = input.LA(1);

                         
                        int index609_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA609_22 = input.LA(1);

                         
                        int index609_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA609_23 = input.LA(1);

                         
                        int index609_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA609_24 = input.LA(1);

                         
                        int index609_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA609_25 = input.LA(1);

                         
                        int index609_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA609_26 = input.LA(1);

                         
                        int index609_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA609_27 = input.LA(1);

                         
                        int index609_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA609_28 = input.LA(1);

                         
                        int index609_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA609_29 = input.LA(1);

                         
                        int index609_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA609_30 = input.LA(1);

                         
                        int index609_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA609_31 = input.LA(1);

                         
                        int index609_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA609_32 = input.LA(1);

                         
                        int index609_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA609_33 = input.LA(1);

                         
                        int index609_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA609_34 = input.LA(1);

                         
                        int index609_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA609_35 = input.LA(1);

                         
                        int index609_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA609_36 = input.LA(1);

                         
                        int index609_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA609_37 = input.LA(1);

                         
                        int index609_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA609_38 = input.LA(1);

                         
                        int index609_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA609_39 = input.LA(1);

                         
                        int index609_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA609_40 = input.LA(1);

                         
                        int index609_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA609_41 = input.LA(1);

                         
                        int index609_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA609_42 = input.LA(1);

                         
                        int index609_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA609_43 = input.LA(1);

                         
                        int index609_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA609_44 = input.LA(1);

                         
                        int index609_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA609_45 = input.LA(1);

                         
                        int index609_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA609_46 = input.LA(1);

                         
                        int index609_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA609_47 = input.LA(1);

                         
                        int index609_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA609_48 = input.LA(1);

                         
                        int index609_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA609_49 = input.LA(1);

                         
                        int index609_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA609_50 = input.LA(1);

                         
                        int index609_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA609_51 = input.LA(1);

                         
                        int index609_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA609_52 = input.LA(1);

                         
                        int index609_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA609_53 = input.LA(1);

                         
                        int index609_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA609_54 = input.LA(1);

                         
                        int index609_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA609_55 = input.LA(1);

                         
                        int index609_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA609_56 = input.LA(1);

                         
                        int index609_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA609_57 = input.LA(1);

                         
                        int index609_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA609_58 = input.LA(1);

                         
                        int index609_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA609_59 = input.LA(1);

                         
                        int index609_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA609_60 = input.LA(1);

                         
                        int index609_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA609_61 = input.LA(1);

                         
                        int index609_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA609_62 = input.LA(1);

                         
                        int index609_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA609_63 = input.LA(1);

                         
                        int index609_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA609_64 = input.LA(1);

                         
                        int index609_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index609_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 609, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA693 extends DFA {

        public DFA693(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 693;
            this.eot = dfa_15;
            this.eof = dfa_15;
            this.min = dfa_201;
            this.max = dfa_202;
            this.accept = dfa_203;
            this.special = dfa_204;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "7976:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA696 extends DFA {

        public DFA696(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 696;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8159:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA698 extends DFA {

        public DFA698(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 698;
            this.eot = dfa_15;
            this.eof = dfa_15;
            this.min = dfa_201;
            this.max = dfa_202;
            this.accept = dfa_203;
            this.special = dfa_204;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "8207:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA701 extends DFA {

        public DFA701(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 701;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8390:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA703 extends DFA {

        public DFA703(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 703;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8444:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA705 extends DFA {

        public DFA705(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 705;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8777:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA707 extends DFA {

        public DFA707(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 707;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8912:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA709 extends DFA {

        public DFA709(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 709;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "9245:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA759 extends DFA {

        public DFA759(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 759;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 16576:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA761 extends DFA {

        public DFA761(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 761;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "16584:4: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA765 extends DFA {

        public DFA765(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 765;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 16800:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA767 extends DFA {

        public DFA767(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 767;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "16808:4: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA771 extends DFA {

        public DFA771(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 771;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 17179:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA773 extends DFA {

        public DFA773(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 773;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17187:6: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA777 extends DFA {

        public DFA777(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 777;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_25;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "()* loopback of 17613:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA779 extends DFA {

        public DFA779(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 779;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17621:6: ( ruleBogusTypeRefFragment )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004108007C0001L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF2L,0x40004000007C0001L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x7C0FE6BCF538CF70L,0x57A24C4A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004000007C0001L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014000007C0001L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x000D048090000130L,0x4002480010000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024C0020440000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024C0000440000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002440000440000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_32;
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x7C0FC6BCF538CF70L,0x57A24C6A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C6A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C6A92440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x4002480000440000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A25C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24840507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24800407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x7C07C6B4D518CF72L,0x57A04C4C10440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x7C07C6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004040007C0001L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0120000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0080000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x000F849090000130L,0x57A2480830000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x000F849090000130L,0x57A2480810000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x7C0FC6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0008040090000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000040010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24840407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x040D048895184D30L,0x4002400000000000L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002480030440000L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x000D048090000130L,0x4002480000000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002480010440000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x4002480010440000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x0008040090000102L,0x4000000000000000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x000D048090000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x200D048090000130L,0x40024A0010200000L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014040007C0001L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014061007C0001L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x0009040090000100L,0x4000020000000000L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_188 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_189 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_190 = new BitSet(new long[]{0x7C0FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 23, 17, 20, -1, -1, 19, 13, -1, -1, -1, 15, 16, -1, -1, -1, 18, -1, 21, -1, -1, -1, 22, -1, -1, -1, 10, 9};
	final static int[] M_3 = { 7, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 79, 86, 13, 24, 89, -1, -1, 9, 10, 66, 21, 20, 12, 81, 15, 83, 36, 68, 23, 42, 80, -1, 17, 16, 58, 48, 84, 38, 77, 29, 40, 90, 88, 19, 33, 60, 47, 57, 37, 67, 82, -1, -1, -1, -1, 78, 30, 26, 46, 44, 31, 85, 25, -1, -1, -1, -1, -1, 69, -1, 70, -1, 62, -1, -1, -1, -1, -1, -1, -1, 32, 76, 75, -1, 35, -1, -1, 74, -1, -1, 45, -1, -1, 71, -1, 72, -1, 61, -1, 27, 49, -1, -1, -1, 8, 63, -1, -1, 22, -1, 87, 73, -1, -1, -1, 50, -1, 55, 52, 53, 54, -1, 56, -1, 28, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 64, -1, -1, -1, -1, -1, -1, -1, -1, 51};
	final static int[] M_4 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_5 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_10 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_17 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 49, -1, -1, -1, 26, 10, 53, -1, -1, 28, -1, 13, -1, 18, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 44, 31, 41, 19, 54, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_18 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 49, -1, -1, -1, 25, 9, 53, -1, -1, 27, -1, 12, -1, 17, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, 54, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_19 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 14, 11, 61, 34, 5, 62, 64, 55, 20, 21, 54, 30, 22, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 6, 41, 60, 4, 15, 17, 18, 19, 48, 37, 39, 13, 43, 45, 3, 16, 25, 49, 58, 46, 9, 47, 10, 2, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 67};
	final static int[] M_23 = { 13, 10, 60, 33, 4, 61, 63, 54, 19, 20, 53, 29, 21, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 5, 40, 59, 3, 14, 16, 17, 18, 47, 36, 38, 12, 42, 44, 2, 15, 24, 48, 57, 45, 8, 46, 9, 1, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 66};
	final static int[] M_25 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 52, -1, -1, -1, 30, 12, -1, -1, -1, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 53, -1, 43, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 45, 5, 42, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 34, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_26 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_27 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_28 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 53, -1, -1, -1, 31, 13, 57, -1, -1, 33, -1, 16, -1, 21, 59, 28, 27, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, 1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_29 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 56, -1, -1, -1, 34, 16, 60, -1, -1, 36, -1, 19, -1, 24, 62, 31, 30, -1, -1, 57, -1, 47, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 49, 9, 46, 25, 61, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 51, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 38, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_30 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 55, -1, -1, -1, 33, 15, 59, -1, -1, 35, -1, 18, -1, 23, 61, 30, 29, -1, -1, 56, -1, 46, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 48, 9, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 11, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_31 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_32 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_33 = { 49, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 58, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51};
	final static int[] M_34 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, -1, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_36 = { 22, 19, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 21, -1, -1, 11, -1, -1, -1, -1, -1, 17, -1, 18, 10, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_37 = { 66, 46, -1, 67, -1, -1, 32, 33, -1, 42, 34, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 27, -1, 28, 30, 31, -1, 60, 49, 51, -1, 55, 57, -1, 29, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_40 = { 21, 18, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 20, -1, -1, 10, -1, -1, -1, -1, -1, 16, -1, 17, 9, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14};
	final static int[] M_41 = { 65, 45, -1, 66, -1, -1, 31, 32, -1, 41, 33, 38, 39, -1, -1, 34, 37, 43, -1, 47, -1, 49, -1, 52, 26, -1, 27, 29, 30, -1, 59, 48, 50, -1, 54, 56, -1, 28, 36, 60, 63, 57, -1, 58, -1, -1, 55, -1, -1, -1, -1, 40, -1, 61, 46, 67, -1, 51, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 35, 42, 44, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68};
	final static int[] M_44 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_45 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_46 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_48 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_49 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}