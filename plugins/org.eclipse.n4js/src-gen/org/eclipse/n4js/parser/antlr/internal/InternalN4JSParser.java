package org.eclipse.n4js.parser.antlr.internal;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.n4js.services.N4JSGrammarAccess;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "QuestionMarkFullStop", "QuestionMarkQuestionMark", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_HASH_BANG", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_VERSION", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=135;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=77;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=142;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_VERSION=165;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=139;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=138;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=132;
    public static final int RULE_TEMPLATE_HEAD=140;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_EOL=153;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=141;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int Project=20;
    public static final int EqualsSignEqualsSign=76;
    public static final int RULE_HASH_BANG=131;
    public static final int Switch=27;
    public static final int RULE_OCTAL_INT=121;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int LessThanSignLessThanSign=74;
    public static final int If=84;
    public static final int RULE_REGEX_START=137;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int QuestionMarkQuestionMark=79;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=143;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int QuestionMarkFullStop=78;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=134;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=168;
    public static final int Target=28;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=167;
    public static final int Export=22;
    public static final int LessThanSignEqualsSign=75;
    public static final int CommercialAtCommercialAt=80;
    public static final int Solidus=99;
    public static final int RightCurlyBracket=112;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Constructor=5;
    public static final int Abstract=11;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int Semicolon=101;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=145;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=73;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Try=63;
    public static final int Ampersand=91;
    public static final int AsteriskEqualsSign=69;
    public static final int Void=51;
    public static final int VerticalLineEqualsSign=87;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=136;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Public=24;
    public static final int Do=83;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=144;
    public static final int This_1=48;
    public static final int RULE_NO_LINE_TERMINATOR=146;
    public static final int RULE_DOT_DOT=164;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int With=52;
    public static final int RULE_SL_COMMENT=152;
    public static final int Function=15;
    public static final int EqualsSign=103;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int RULE_BACKSLASH_SEQUENCE=133;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=166;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int While=40;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=169;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;
        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }
    protected void setInRegularExpression() {}
    protected void setInTemplateSegment() {}
    protected boolean forcedRewind(int position) { return true; } // overridden in subtype
    protected void promoteEOL() {} // overridden in subtype
    protected void addASIMessage() {} // overridden in subtype
    protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
     	private N4JSGrammarAccess grammarAccess;
        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }
        @Override
        protected String getFirstRuleName() {
        	return "Script";
       	}
       	@Override
       	protected N4JSGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}
    public final EObject entryRuleScript() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScript = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScript=ruleScript();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScript; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScript() throws RecognitionException {
        EObject current = null;
        Token lv_hashbang_1_0=null;
        EObject lv_annotations_2_0 = null;
        EObject lv_scriptElements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getScriptAccess().getScriptAction_0(),
              					current);
            }
            }
            int alt1=2;
            int LA1_0 = input.LA(1);
            if ( (LA1_0==RULE_HASH_BANG) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    {
                    {
                    lv_hashbang_1_0=(Token)match(input,RULE_HASH_BANG,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_hashbang_1_0, grammarAccess.getScriptAccess().getHashbangHASH_BANGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScriptRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"hashbang",
                      						lv_hashbang_1_0,
                      						"org.eclipse.n4js.N4JS.HASH_BANG");
                    }
                    }
                    }
                    break;
            }
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==CommercialAtCommercialAt) ) {
                    alt2=1;
                }
                else if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||(LA2_0>=HyphenMinusHyphenMinus && LA2_0<=SolidusEqualsSign)||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getScriptAccess().getAnnotationsScriptAnnotationParserRuleCall_2_0_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_annotations_2_0=ruleScriptAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"annotations",
            	      							lv_annotations_2_0,
            	      							"org.eclipse.n4js.N4JS.ScriptAnnotation");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	case 2 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getScriptAccess().getScriptElementsScriptElementParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_scriptElements_3_0=ruleScriptElement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"scriptElements",
            	      							lv_scriptElements_3_0,
            	      							"org.eclipse.n4js.N4JS.ScriptElement");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScriptElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptElement=ruleScriptElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedScriptElement_0 = null;
        EObject this_N4ClassDeclaration_1 = null;
        EObject this_N4InterfaceDeclaration_2 = null;
        EObject this_N4EnumDeclaration_3 = null;
        EObject this_ImportDeclaration_4 = null;
        EObject this_ExportDeclaration_5 = null;
        EObject this_RootStatement_6 = null;
        	enterRule();
        try {
            {
            int alt3=7;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedScriptElement_0=ruleAnnotatedScriptElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedScriptElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_1=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_2=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_3=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclaration_4=ruleImportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ImportDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_5=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportDeclaration_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_6=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedScriptElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedScriptElement=ruleAnnotatedScriptElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_11=null;
        Token otherlv_19=null;
        Token otherlv_28=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        EObject this_AnnotationList_0 = null;
        EObject this_ExportDeclarationImpl_2 = null;
        EObject this_ImportDeclarationImpl_4 = null;
        Enumerator lv_declaredModifiers_6_0 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        Enumerator lv_declaredModifiers_10_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_12_0 = null;
        AntlrDatatypeRuleToken lv_name_13_0 = null;
        EObject this_VersionDeclaration_14 = null;
        EObject this_TypeVariables_15 = null;
        EObject this_ClassExtendsImplements_16 = null;
        Enumerator lv_declaredModifiers_18_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_20_0 = null;
        AntlrDatatypeRuleToken lv_name_21_0 = null;
        EObject this_VersionDeclaration_22 = null;
        EObject this_TypeVariables_23 = null;
        EObject this_InterfaceExtendsList_24 = null;
        EObject this_Members_25 = null;
        Enumerator lv_declaredModifiers_27_0 = null;
        AntlrDatatypeRuleToken lv_name_29_0 = null;
        EObject this_VersionDeclaration_30 = null;
        EObject lv_literals_32_0 = null;
        EObject lv_literals_34_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_4);
            this_AnnotationList_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
            }
            }
            int alt19=5;
            alt19 = dfa19.predict(input);
            switch (alt19) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclarationImpl_2=ruleExportDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportDeclarationImpl_2;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclarationImpl_4=ruleImportDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ImportDeclarationImpl_4;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getFunctionDeclarationAnnotationListAction_1_2_0(),
                      							current);
                    }
                    }
                    {
                    {
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);
                        if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                            alt4=1;
                        }
                        switch (alt4) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_1_0_0_0());
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_6_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop4;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1());
                    }
                    pushFollow(FOLLOW_5);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=ruleFunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_FunctionImpl_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    int alt15=2;
                    alt15 = dfa15.predict(input);
                    switch (alt15) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4ClassDeclarationAnnotationListAction_1_3_0_0_0(),
                              									current);
                            }
                            }
                            loop5:
                            do {
                                int alt5=2;
                                int LA5_0 = input.LA(1);
                                if ( ((LA5_0>=Protected && LA5_0<=Abstract)||LA5_0==External||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Public||LA5_0==Static||LA5_0==Const) ) {
                                    alt5=1;
                                }
                                switch (alt5) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_0_1_0());
                            	    }
                            	    pushFollow(FOLLOW_6);
                            	    lv_declaredModifiers_10_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_10_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop5;
                                }
                            } while (true);
                            otherlv_11=(Token)match(input,Class,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_11, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);
                            if ( (LA6_0==Tilde) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0());
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_12_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_12_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_0_4_0());
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_13_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_13_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);
                            if ( (LA7_0==RULE_VERSION) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_0_5());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_VersionDeclaration_14=ruleVersionDeclaration(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_VersionDeclaration_14;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);
                            if ( (LA8_0==LessThanSign) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_6());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_15=ruleTypeVariables(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeVariables_15;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt9=2;
                            int LA9_0 = input.LA(1);
                            if ( (LA9_0==Implements||LA9_0==Extends) ) {
                                alt9=1;
                            }
                            switch (alt9) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsImplementsParserRuleCall_1_3_0_0_7());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_ClassExtendsImplements_16=ruleClassExtendsImplements(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_ClassExtendsImplements_16;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_3_0_1_0(),
                              									current);
                            }
                            }
                            loop10:
                            do {
                                int alt10=2;
                                int LA10_0 = input.LA(1);
                                if ( ((LA10_0>=Protected && LA10_0<=Abstract)||LA10_0==External||(LA10_0>=Private && LA10_0<=Project)||LA10_0==Public||LA10_0==Static||LA10_0==Const) ) {
                                    alt10=1;
                                }
                                switch (alt10) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_18_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_18_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop10;
                                }
                            } while (true);
                            otherlv_19=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_19, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);
                            if ( (LA11_0==Tilde) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0());
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_20_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_20_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_1_4_0());
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_21_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_21_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);
                            if ( (LA12_0==RULE_VERSION) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_1_5());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_VersionDeclaration_22=ruleVersionDeclaration(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_VersionDeclaration_22;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt13=2;
                            int LA13_0 = input.LA(1);
                            if ( (LA13_0==LessThanSign) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_6());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_23=ruleTypeVariables(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeVariables_23;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt14=2;
                            int LA14_0 = input.LA(1);
                            if ( (LA14_0==Implements||LA14_0==Extends) ) {
                                alt14=1;
                            }
                            switch (alt14) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getInterfaceExtendsListParserRuleCall_1_3_0_1_7());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_InterfaceExtendsList_24=ruleInterfaceExtendsList(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_InterfaceExtendsList_24;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_25=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_25;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getN4EnumDeclarationAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);
                        if ( ((LA16_0>=Protected && LA16_0<=Abstract)||LA16_0==External||(LA16_0>=Private && LA16_0<=Project)||LA16_0==Public||LA16_0==Static||LA16_0==Const) ) {
                            alt16=1;
                        }
                        switch (alt16) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_declaredModifiers_27_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_27_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop16;
                        }
                    } while (true);
                    otherlv_28=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_28, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_4_3_0());
                    }
                    pushFollow(FOLLOW_12);
                    lv_name_29_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_29_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt17=2;
                    int LA17_0 = input.LA(1);
                    if ( (LA17_0==RULE_VERSION) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_4_4());
                            }
                            pushFollow(FOLLOW_13);
                            this_VersionDeclaration_30=ruleVersionDeclaration(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_VersionDeclaration_30;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    otherlv_31=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_5());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_6_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_32_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_32_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);
                        if ( (LA18_0==Comma) ) {
                            alt18=1;
                        }
                        switch (alt18) {
                    	case 1 :
                    	    {
                    	    otherlv_33=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_33, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_7_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_34_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_34_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop18;
                        }
                    } while (true);
                    otherlv_35=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_8());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportDeclaration=ruleExportDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_ExportDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportDeclarationAccess().getExportDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ExportDeclarationImpl_1=ruleExportDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_wildcardExport_1_0=null;
        Token lv_defaultExport_8_0=null;
        EObject this_ExportFromClause_2 = null;
        EObject this_ExportClause_4 = null;
        EObject this_ExportFromClause_5 = null;
        EObject lv_exportedElement_7_0 = null;
        EObject lv_exportedElement_9_0 = null;
        EObject lv_defaultExportedExpression_10_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Export,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
            }
            int alt22=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt22=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt22=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt22=3;
                }
                break;
            case Default:
                {
                alt22=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);
                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_wildcardExport_1_0=(Token)match(input,Asterisk,FOLLOW_17); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_wildcardExport_1_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "wildcardExport", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_18);
                    this_ExportFromClause_2=ruleExportFromClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportFromClause_2;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_19);
                    this_ExportClause_4=ruleExportClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportClause_4;
                      					afterParserOrEnumRuleCall();
                    }
                    int alt20=2;
                    int LA20_0 = input.LA(1);
                    if ( (LA20_0==From) && (synpred9_InternalN4JSParser())) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                              						}
                              						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1());
                            }
                            pushFollow(FOLLOW_18);
                            this_ExportFromClause_5=ruleExportFromClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ExportFromClause_5;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_exportedElement_7_0=ruleExportableElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"exportedElement",
                      							lv_exportedElement_7_0,
                      							"org.eclipse.n4js.N4JS.ExportableElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    lv_defaultExport_8_0=(Token)match(input,Default,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_defaultExport_8_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "defaultExport", true, "default");
                    }
                    }
                    }
                    int alt21=2;
                    alt21 = dfa21.predict(input);
                    switch (alt21) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_3_1_0_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_exportedElement_9_0=ruleExportableElement();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              								}
                              								set(
                              									current,
                              									"exportedElement",
                              									lv_exportedElement_9_0,
                              									"org.eclipse.n4js.N4JS.ExportableElement");
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0());
                            }
                            pushFollow(FOLLOW_18);
                            lv_defaultExportedExpression_10_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              									}
                              									set(
                              										current,
                              										"defaultExportedExpression",
                              										lv_defaultExportedExpression_10_0,
                              										"org.eclipse.n4js.N4JS.AssignmentExpression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            ruleSemi();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportFromClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getExportFromClauseRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportFromClauseAccess().getReexportedFromTModuleCrossReference_1_0());
            }
            pushFollow(FOLLOW_2);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_namedExports_1_0 = null;
        EObject lv_namedExports_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( ((LA25_0>=Intersection && LA25_0<=Implements)||(LA25_0>=Promisify && LA25_0<=Abstract)||LA25_0==External||(LA25_0>=Private && LA25_0<=Project)||LA25_0==Public||LA25_0==Static||LA25_0==Target||(LA25_0>=Async && LA25_0<=Await)||LA25_0==Union||(LA25_0>=Yield && LA25_0<=This)||LA25_0==From||LA25_0==Type||(LA25_0>=Get && LA25_0<=Let)||(LA25_0>=Out && LA25_0<=Set)||LA25_0==As||LA25_0==Of||LA25_0==RULE_IDENTIFIER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_namedExports_1_0=ruleExportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportClauseRule());
                      						}
                      						add(
                      							current,
                      							"namedExports",
                      							lv_namedExports_1_0,
                      							"org.eclipse.n4js.N4JS.ExportSpecifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);
                        if ( (LA23_0==Comma) ) {
                            int LA23_1 = input.LA(2);
                            if ( ((LA23_1>=Intersection && LA23_1<=Implements)||(LA23_1>=Promisify && LA23_1<=Abstract)||LA23_1==External||(LA23_1>=Private && LA23_1<=Project)||LA23_1==Public||LA23_1==Static||LA23_1==Target||(LA23_1>=Async && LA23_1<=Await)||LA23_1==Union||(LA23_1>=Yield && LA23_1<=This)||LA23_1==From||LA23_1==Type||(LA23_1>=Get && LA23_1<=Let)||(LA23_1>=Out && LA23_1<=Set)||LA23_1==As||LA23_1==Of||LA23_1==RULE_IDENTIFIER) ) {
                                alt23=1;
                            }
                        }
                        switch (alt23) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_namedExports_3_0=ruleExportSpecifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExportClauseRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"namedExports",
                    	      								lv_namedExports_3_0,
                    	      								"org.eclipse.n4js.N4JS.ExportSpecifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop23;
                        }
                    } while (true);
                    int alt24=2;
                    int LA24_0 = input.LA(1);
                    if ( (LA24_0==Comma) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            {
                            otherlv_4=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_4, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportSpecifier=ruleExportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_element_0_0 = null;
        AntlrDatatypeRuleToken lv_alias_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportSpecifierAccess().getElementIdentifierRefParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_24);
            lv_element_0_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
              					}
              					set(
              						current,
              						"element",
              						lv_element_0_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==As) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,As,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExportSpecifierAccess().getAliasIdentifierNameParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportableElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportableElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportableElement=ruleExportableElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportableElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedExportableElement_0 = null;
        EObject this_N4ClassDeclaration_1 = null;
        EObject this_N4InterfaceDeclaration_2 = null;
        EObject this_N4EnumDeclaration_3 = null;
        EObject this_FunctionDeclaration_4 = null;
        EObject this_ExportedVariableStatement_5 = null;
        	enterRule();
        try {
            {
            int alt27=6;
            alt27 = dfa27.predict(input);
            switch (alt27) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExportableElement_0=ruleAnnotatedExportableElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedExportableElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_1=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_2=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_3=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getFunctionDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_4=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableStatement_5=ruleExportedVariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportedVariableStatement_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedExportableElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExportableElement=ruleAnnotatedExportableElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_9=null;
        Token otherlv_14=null;
        Token otherlv_21=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        EObject this_AnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject this_FunctionImpl_4 = null;
        Enumerator lv_declaredModifiers_6_0 = null;
        Enumerator lv_varStmtKeyword_7_0 = null;
        EObject lv_varDeclsOrBindings_8_0 = null;
        EObject lv_varDeclsOrBindings_10_0 = null;
        Enumerator lv_declaredModifiers_13_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_15_0 = null;
        AntlrDatatypeRuleToken lv_name_16_0 = null;
        EObject this_TypeVariables_17 = null;
        EObject this_ClassExtendsImplements_18 = null;
        Enumerator lv_declaredModifiers_20_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_22_0 = null;
        AntlrDatatypeRuleToken lv_name_23_0 = null;
        EObject this_TypeVariables_24 = null;
        EObject this_InterfaceExtendsList_25 = null;
        EObject this_Members_26 = null;
        Enumerator lv_declaredModifiers_28_0 = null;
        AntlrDatatypeRuleToken lv_name_30_0 = null;
        EObject lv_literals_32_0 = null;
        EObject lv_literals_34_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_25);
            this_AnnotationList_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
            }
            }
            int alt42=4;
            alt42 = dfa42.predict(input);
            switch (alt42) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getFunctionDeclarationAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    loop28:
                    do {
                        int alt28=2;
                        int LA28_0 = input.LA(1);
                        if ( ((LA28_0>=Protected && LA28_0<=Abstract)||LA28_0==External||(LA28_0>=Private && LA28_0<=Project)||LA28_0==Public||LA28_0==Static||LA28_0==Const) ) {
                            alt28=1;
                        }
                        switch (alt28) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_2_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop28;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2());
                    }
                    pushFollow(FOLLOW_5);
                    this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_3;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_4=ruleFunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_4;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getExportedVariableStatementAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    loop29:
                    do {
                        int alt29=2;
                        alt29 = dfa29.predict(input);
                        switch (alt29) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_26);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_6_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop29;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_1_1_2_0());
                    }
                    pushFollow(FOLLOW_27);
                    lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"varStmtKeyword",
                      								lv_varStmtKeyword_7_0,
                      								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_28);
                    lv_varDeclsOrBindings_8_0=ruleExportedVariableDeclarationOrBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"varDeclsOrBindings",
                      								lv_varDeclsOrBindings_8_0,
                      								"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);
                        if ( (LA30_0==Comma) ) {
                            alt30=1;
                        }
                        switch (alt30) {
                    	case 1 :
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_9, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_varDeclsOrBindings_10_0=ruleExportedVariableDeclarationOrBinding();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"varDeclsOrBindings",
                    	      									lv_varDeclsOrBindings_10_0,
                    	      									"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop30;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    int alt39=2;
                    alt39 = dfa39.predict(input);
                    switch (alt39) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4ClassDeclarationAnnotationListAction_1_2_0_0_0(),
                              									current);
                            }
                            }
                            loop31:
                            do {
                                int alt31=2;
                                int LA31_0 = input.LA(1);
                                if ( ((LA31_0>=Protected && LA31_0<=Abstract)||LA31_0==External||(LA31_0>=Private && LA31_0<=Project)||LA31_0==Public||LA31_0==Static||LA31_0==Const) ) {
                                    alt31=1;
                                }
                                switch (alt31) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                            	    }
                            	    pushFollow(FOLLOW_6);
                            	    lv_declaredModifiers_13_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_13_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop31;
                                }
                            } while (true);
                            otherlv_14=(Token)match(input,Class,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_14, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                            }
                            int alt32=2;
                            int LA32_0 = input.LA(1);
                            if ( (LA32_0==Tilde) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0());
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_15_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_15_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_0_4_0());
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_16_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_16_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt33=2;
                            int LA33_0 = input.LA(1);
                            if ( (LA33_0==LessThanSign) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_17=ruleTypeVariables(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeVariables_17;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt34=2;
                            int LA34_0 = input.LA(1);
                            if ( (LA34_0==Implements||LA34_0==Extends) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsImplementsParserRuleCall_1_2_0_0_6());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_ClassExtendsImplements_18=ruleClassExtendsImplements(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_ClassExtendsImplements_18;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_2_0_1_0(),
                              									current);
                            }
                            }
                            loop35:
                            do {
                                int alt35=2;
                                int LA35_0 = input.LA(1);
                                if ( ((LA35_0>=Protected && LA35_0<=Abstract)||LA35_0==External||(LA35_0>=Private && LA35_0<=Project)||LA35_0==Public||LA35_0==Static||LA35_0==Const) ) {
                                    alt35=1;
                                }
                                switch (alt35) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_20_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_20_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop35;
                                }
                            } while (true);
                            otherlv_21=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_21, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                            }
                            int alt36=2;
                            int LA36_0 = input.LA(1);
                            if ( (LA36_0==Tilde) ) {
                                alt36=1;
                            }
                            switch (alt36) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0());
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_22_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_22_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_1_4_0());
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_23_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_23_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt37=2;
                            int LA37_0 = input.LA(1);
                            if ( (LA37_0==LessThanSign) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_24=ruleTypeVariables(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeVariables_24;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt38=2;
                            int LA38_0 = input.LA(1);
                            if ( (LA38_0==Implements||LA38_0==Extends) ) {
                                alt38=1;
                            }
                            switch (alt38) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getInterfaceExtendsListParserRuleCall_1_2_0_1_6());
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_InterfaceExtendsList_25=ruleInterfaceExtendsList(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_InterfaceExtendsList_25;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_26=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_26;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getN4EnumDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);
                        if ( ((LA40_0>=Protected && LA40_0<=Abstract)||LA40_0==External||(LA40_0>=Private && LA40_0<=Project)||LA40_0==Public||LA40_0==Static||LA40_0==Const) ) {
                            alt40=1;
                        }
                        switch (alt40) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_declaredModifiers_28_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_28_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop40;
                        }
                    } while (true);
                    otherlv_29=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_29, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_3_3_0());
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_30_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_30_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_31=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_5_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_32_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_32_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);
                        if ( (LA41_0==Comma) ) {
                            alt41=1;
                        }
                        switch (alt41) {
                    	case 1 :
                    	    {
                    	    otherlv_33=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_33, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_34_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_34_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop41;
                        }
                    } while (true);
                    otherlv_35=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleImportDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportDeclaration=ruleImportDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_ImportDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ImportDeclarationImpl_1=ruleImportDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ImportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_importFrom_2_0=null;
        EObject this_ImportClause_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
            }
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( ((LA43_0>=Intersection && LA43_0<=Implements)||(LA43_0>=Promisify && LA43_0<=Abstract)||LA43_0==External||(LA43_0>=Private && LA43_0<=Project)||LA43_0==Public||LA43_0==Static||LA43_0==Target||(LA43_0>=Async && LA43_0<=Await)||LA43_0==Union||(LA43_0>=Yield && LA43_0<=This)||LA43_0==From||LA43_0==Type||(LA43_0>=Get && LA43_0<=Let)||(LA43_0>=Out && LA43_0<=Set)||LA43_0==As||LA43_0==Of||LA43_0==Asterisk||LA43_0==LeftCurlyBracket||LA43_0==RULE_IDENTIFIER) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_17);
                    this_ImportClause_1=ruleImportClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ImportClause_1;
                      				afterParserOrEnumRuleCall();
                    }
                    {
                    {
                    lv_importFrom_2_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_importFrom_2_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      						}
                      						setWithLastConsumed(current, "importFrom", true, "from");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getImportDeclarationImplRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getModuleTModuleCrossReference_2_0());
            }
            pushFollow(FOLLOW_18);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_importSpecifiers_0_0 = null;
        EObject this_ImportSpecifiersExceptDefault_2 = null;
        EObject this_ImportSpecifiersExceptDefault_3 = null;
        	enterRule();
        try {
            {
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( ((LA45_0>=Intersection && LA45_0<=Implements)||(LA45_0>=Promisify && LA45_0<=Abstract)||LA45_0==External||(LA45_0>=Private && LA45_0<=Project)||LA45_0==Public||LA45_0==Static||LA45_0==Target||(LA45_0>=Async && LA45_0<=Await)||LA45_0==Union||(LA45_0>=Yield && LA45_0<=This)||LA45_0==From||LA45_0==Type||(LA45_0>=Get && LA45_0<=Let)||(LA45_0>=Out && LA45_0<=Set)||LA45_0==As||LA45_0==Of||LA45_0==RULE_IDENTIFIER) ) {
                alt45=1;
            }
            else if ( (LA45_0==Asterisk||LA45_0==LeftCurlyBracket) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);
                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_30);
                    lv_importSpecifiers_0_0=ruleDefaultImportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getImportClauseRule());
                      						}
                      						add(
                      							current,
                      							"importSpecifiers",
                      							lv_importSpecifiers_0_0,
                      							"org.eclipse.n4js.N4JS.DefaultImportSpecifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt44=2;
                    int LA44_0 = input.LA(1);
                    if ( (LA44_0==Comma) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getImportClauseRule());
                              					}
                              					newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ImportSpecifiersExceptDefault_2=ruleImportSpecifiersExceptDefault(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ImportSpecifiersExceptDefault_2;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getImportClauseRule());
                      			}
                      			newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportSpecifiersExceptDefault_3=ruleImportSpecifiersExceptDefault(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportSpecifiersExceptDefault_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportSpecifiersExceptDefault(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_importSpecifiers_0_0 = null;
        EObject lv_importSpecifiers_2_0 = null;
        EObject lv_importSpecifiers_4_0 = null;
        	enterRule();
        try {
            {
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==Asterisk) ) {
                alt49=1;
            }
            else if ( (LA49_0==LeftCurlyBracket) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_importSpecifiers_0_0=ruleNamespaceImportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                      					}
                      					add(
                      						current,
                      						"importSpecifiers",
                      						lv_importSpecifiers_0_0,
                      						"org.eclipse.n4js.N4JS.NamespaceImportSpecifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                    }
                    int alt48=2;
                    int LA48_0 = input.LA(1);
                    if ( ((LA48_0>=Intersection && LA48_0<=With)||(LA48_0>=For && LA48_0<=Var)||(LA48_0>=As && LA48_0<=Of)||LA48_0==RULE_IDENTIFIER) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_15);
                            lv_importSpecifiers_2_0=ruleNamedImportSpecifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                              							}
                              							add(
                              								current,
                              								"importSpecifiers",
                              								lv_importSpecifiers_2_0,
                              								"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            loop46:
                            do {
                                int alt46=2;
                                int LA46_0 = input.LA(1);
                                if ( (LA46_0==Comma) ) {
                                    int LA46_1 = input.LA(2);
                                    if ( ((LA46_1>=Intersection && LA46_1<=With)||(LA46_1>=For && LA46_1<=Var)||(LA46_1>=As && LA46_1<=Of)||LA46_1==RULE_IDENTIFIER) ) {
                                        alt46=1;
                                    }
                                }
                                switch (alt46) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      						newLeafNode(otherlv_3, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_15);
                            	    lv_importSpecifiers_4_0=ruleNamedImportSpecifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"importSpecifiers",
                            	      									lv_importSpecifiers_4_0,
                            	      									"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                            	      								afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop46;
                                }
                            } while (true);
                            int alt47=2;
                            int LA47_0 = input.LA(1);
                            if ( (LA47_0==Comma) ) {
                                alt47=1;
                            }
                            switch (alt47) {
                                case 1 :
                                    {
                                    otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						newLeafNode(otherlv_5, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamedImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamedImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamedImportSpecifier=ruleNamedImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamedImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;
        	enterRule();
        try {
            {
            int alt50=2;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_1_0_0());
                    }
                    pushFollow(FOLLOW_33);
                    ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_2=(Token)match(input,As,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamedImportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDefaultImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultImportSpecifier=ruleDefaultImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getDefaultImportSpecifierRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getDefaultImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamespaceImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceImportSpecifier=ruleNamespaceImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_declaredDynamic_4_0=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNamespaceImportSpecifierAccess().getNamespaceImportSpecifierAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Asterisk,FOLLOW_33); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
            }
            otherlv_2=(Token)match(input,As,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getNamespaceImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_34);
            lv_alias_3_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNamespaceImportSpecifierRule());
              					}
              					set(
              						current,
              						"alias",
              						lv_alias_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==PlusSign) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    {
                    lv_declaredDynamic_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredDynamic_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamespaceImportSpecifierRule());
                      					}
                      					setWithLastConsumed(current, "declaredDynamic", true, "+");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleModuleSpecifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleModuleSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModuleSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModuleSpecifier=ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModuleSpecifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleModuleSpecifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_STRING_0=null;
        	enterRule();
        try {
            {
            this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(this_STRING_0);
            }
            if ( state.backtracking==0 ) {
              		newLeafNode(this_STRING_0, grammarAccess.getModuleSpecifierAccess().getSTRINGTerminalRuleCall());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionDeclaration=ruleFunctionDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);
                if ( ((LA52_0>=Protected && LA52_0<=Abstract)||LA52_0==External||(LA52_0>=Private && LA52_0<=Project)||LA52_0==Public||LA52_0==Static||LA52_0==Const) ) {
                    alt52=1;
                }
                switch (alt52) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop52;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_5);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
            }
            {
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_35);
            this_FunctionImpl_3=ruleFunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt53=2;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionDeclaration() throws RecognitionException {
        EObject current = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);
                if ( ((LA54_0>=Protected && LA54_0<=Abstract)||LA54_0==External||(LA54_0>=Private && LA54_0<=Project)||LA54_0==Public||LA54_0==Static||LA54_0==Const) ) {
                    alt54=1;
                }
                switch (alt54) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop54;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_36);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
            }
            {
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_35);
            this_FunctionImpl_3=norm3_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==Semicolon) ) {
                int LA55_1 = input.LA(2);
                if ( (synpred22_InternalN4JSParser()) ) {
                    alt55=1;
                }
            }
            else if ( (LA55_0==EOF||LA55_0==RULE_ML_COMMENT||LA55_0==RULE_EOL) && (synpred22_InternalN4JSParser())) {
                alt55=1;
            }
            else if ( (LA55_0==RightCurlyBracket) ) {
                int LA55_3 = input.LA(2);
                if ( (synpred22_InternalN4JSParser()) ) {
                    alt55=1;
                }
            }
            switch (alt55) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncNoTrailingLineBreak(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredAsync_0_0=null;
        EObject this_NoLineTerminator_1 = null;
        	enterRule();
        try {
            {
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==Async) ) {
                int LA56_1 = input.LA(2);
                if ( ((LA56_1>=Intersection && LA56_1<=With)||(LA56_1>=For && LA56_1<=Var)||(LA56_1>=As && LA56_1<=Of)||LA56_1==Asterisk||LA56_1==LeftSquareBracket||LA56_1==RULE_DOUBLE||(LA56_1>=RULE_HEX_INT && LA56_1<=RULE_OCTAL_INT)||LA56_1==RULE_SCIENTIFIC_INT||LA56_1==RULE_IDENTIFIER||LA56_1==RULE_STRING||LA56_1==RULE_NO_LINE_TERMINATOR||LA56_1==RULE_INT) ) {
                    alt56=1;
                }
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      					}
                      					setWithLastConsumed(current, "declaredAsync", true, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      			}
                      			newCompositeNode(grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_NoLineTerminator_1=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NoLineTerminator_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=ruleFunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=norm3_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=norm6_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( ((LA57_0>=Intersection && LA57_0<=Implements)||(LA57_0>=Promisify && LA57_0<=Abstract)||LA57_0==External||(LA57_0>=Private && LA57_0<=Project)||LA57_0==Public||LA57_0==Static||LA57_0==Target||(LA57_0>=Async && LA57_0<=Await)||LA57_0==Union||(LA57_0>=Yield && LA57_0<=This)||LA57_0==From||LA57_0==Type||(LA57_0>=Get && LA57_0<=Let)||(LA57_0>=Out && LA57_0<=Set)||LA57_0==As||LA57_0==Of||LA57_0==LeftParenthesis||LA57_0==LessThanSign||LA57_0==RULE_IDENTIFIER||LA57_0==RULE_VERSION) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);
                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==Asterisk) ) {
                alt58=1;
            }
            else if ( ((LA58_0>=Intersection && LA58_0<=Implements)||(LA58_0>=Promisify && LA58_0<=Abstract)||LA58_0==External||(LA58_0>=Private && LA58_0<=Project)||LA58_0==Public||LA58_0==Static||LA58_0==Target||(LA58_0>=Async && LA58_0<=Await)||LA58_0==Union||LA58_0==This||LA58_0==From||LA58_0==Type||(LA58_0>=Get && LA58_0<=Let)||(LA58_0>=Out && LA58_0<=Set)||LA58_0==As||LA58_0==Of||LA58_0==LeftParenthesis||LA58_0==LessThanSign||LA58_0==RULE_IDENTIFIER||LA58_0==RULE_VERSION) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);
                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==Asterisk) ) {
                alt59=1;
            }
            else if ( ((LA59_0>=Intersection && LA59_0<=Implements)||(LA59_0>=Promisify && LA59_0<=Abstract)||LA59_0==External||(LA59_0>=Private && LA59_0<=Project)||LA59_0==Public||LA59_0==Static||LA59_0==Target||(LA59_0>=Async && LA59_0<=Await)||LA59_0==Union||(LA59_0>=Yield && LA59_0<=This)||LA59_0==From||LA59_0==Type||(LA59_0>=Get && LA59_0<=Let)||(LA59_0>=Out && LA59_0<=Set)||LA59_0==As||LA59_0==Of||LA59_0==LeftParenthesis||LA59_0==LessThanSign||LA59_0==RULE_IDENTIFIER||LA59_0==RULE_VERSION) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);
                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==Asterisk) ) {
                alt60=1;
            }
            else if ( ((LA60_0>=Intersection && LA60_0<=Implements)||(LA60_0>=Promisify && LA60_0<=Abstract)||LA60_0==External||(LA60_0>=Private && LA60_0<=Project)||LA60_0==Public||LA60_0==Static||LA60_0==Target||(LA60_0>=Async && LA60_0<=Await)||LA60_0==Union||LA60_0==This||LA60_0==From||LA60_0==Type||(LA60_0>=Get && LA60_0<=Let)||(LA60_0>=Out && LA60_0<=Set)||LA60_0==As||LA60_0==Of||LA60_0==LeftParenthesis||LA60_0==LessThanSign||LA60_0==RULE_IDENTIFIER||LA60_0==RULE_VERSION) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);
                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==Asterisk) ) {
                alt61=1;
            }
            else if ( ((LA61_0>=Intersection && LA61_0<=Implements)||(LA61_0>=Promisify && LA61_0<=Abstract)||LA61_0==External||(LA61_0>=Private && LA61_0<=Project)||LA61_0==Public||LA61_0==Static||LA61_0==Target||(LA61_0>=Async && LA61_0<=Await)||LA61_0==Union||(LA61_0>=Yield && LA61_0<=This)||LA61_0==From||LA61_0==Type||(LA61_0>=Get && LA61_0<=Let)||(LA61_0>=Out && LA61_0<=Set)||LA61_0==As||LA61_0==Of||LA61_0==LeftParenthesis||LA61_0==LessThanSign||LA61_0==RULE_IDENTIFIER||LA61_0==RULE_VERSION) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);
                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==Asterisk) ) {
                alt62=1;
            }
            else if ( ((LA62_0>=Intersection && LA62_0<=Implements)||(LA62_0>=Promisify && LA62_0<=Abstract)||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Target||(LA62_0>=Async && LA62_0<=Await)||LA62_0==Union||LA62_0==This||LA62_0==From||LA62_0==Type||(LA62_0>=Get && LA62_0<=Let)||(LA62_0>=Out && LA62_0<=Set)||LA62_0==As||LA62_0==Of||LA62_0==LeftParenthesis||LA62_0==LessThanSign||LA62_0==RULE_IDENTIFIER||LA62_0==RULE_VERSION) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);
                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==Asterisk) ) {
                alt63=1;
            }
            else if ( ((LA63_0>=Intersection && LA63_0<=Implements)||(LA63_0>=Promisify && LA63_0<=Abstract)||LA63_0==External||(LA63_0>=Private && LA63_0<=Project)||LA63_0==Public||LA63_0==Static||LA63_0==Target||(LA63_0>=Async && LA63_0<=Await)||LA63_0==Union||(LA63_0>=Yield && LA63_0<=This)||LA63_0==From||LA63_0==Type||(LA63_0>=Get && LA63_0<=Let)||(LA63_0>=Out && LA63_0<=Set)||LA63_0==As||LA63_0==Of||LA63_0==LeftParenthesis||LA63_0==LessThanSign||LA63_0==RULE_IDENTIFIER||LA63_0==RULE_VERSION) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);
                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==Asterisk) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=Intersection && LA64_0<=Implements)||(LA64_0>=Promisify && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Target||(LA64_0>=Async && LA64_0<=Await)||LA64_0==Union||LA64_0==This||LA64_0==From||LA64_0==Type||(LA64_0>=Get && LA64_0<=Let)||(LA64_0>=Out && LA64_0<=Set)||LA64_0==As||LA64_0==Of||LA64_0==LeftParenthesis||LA64_0==LessThanSign||LA64_0==RULE_IDENTIFIER||LA64_0==RULE_VERSION) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);
                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeVariables_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_VersionDeclaration_2 = null;
        EObject this_StrictFormalParameters_3 = null;
        EObject this_ColonSepReturnTypeRef_4 = null;
        	enterRule();
        try {
            {
            {
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==LessThanSign) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_40);
                    this_TypeVariables_0=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( ((LA66_0>=Intersection && LA66_0<=Implements)||(LA66_0>=Promisify && LA66_0<=Abstract)||LA66_0==External||(LA66_0>=Private && LA66_0<=Project)||LA66_0==Public||LA66_0==Static||LA66_0==Target||(LA66_0>=Async && LA66_0<=Await)||LA66_0==Union||(LA66_0>=Yield && LA66_0<=This)||LA66_0==From||LA66_0==Type||(LA66_0>=Get && LA66_0<=Let)||(LA66_0>=Out && LA66_0<=Set)||LA66_0==As||LA66_0==Of||LA66_0==RULE_IDENTIFIER) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_41);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==RULE_VERSION) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_42);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==Colon) && (synpred23_InternalN4JSParser())) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeVariables_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_VersionDeclaration_2 = null;
        EObject this_StrictFormalParameters_3 = null;
        EObject this_ColonSepReturnTypeRef_4 = null;
        	enterRule();
        try {
            {
            {
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==LessThanSign) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_40);
                    this_TypeVariables_0=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( ((LA70_0>=Intersection && LA70_0<=Implements)||(LA70_0>=Promisify && LA70_0<=Abstract)||LA70_0==External||(LA70_0>=Private && LA70_0<=Project)||LA70_0==Public||LA70_0==Static||LA70_0==Target||(LA70_0>=Async && LA70_0<=Await)||LA70_0==Union||LA70_0==This||LA70_0==From||LA70_0==Type||(LA70_0>=Get && LA70_0<=Let)||(LA70_0>=Out && LA70_0<=Set)||LA70_0==As||LA70_0==Of||LA70_0==RULE_IDENTIFIER) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_41);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==RULE_VERSION) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_42);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
            }
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==Colon) && (synpred24_InternalN4JSParser())) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeVariables_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_VersionDeclaration_2 = null;
        EObject this_StrictFormalParameters_3 = null;
        EObject this_ColonSepReturnTypeRef_4 = null;
        	enterRule();
        try {
            {
            {
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==LessThanSign) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_39);
                    this_TypeVariables_0=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( ((LA74_0>=Intersection && LA74_0<=Implements)||(LA74_0>=Promisify && LA74_0<=Abstract)||LA74_0==External||(LA74_0>=Private && LA74_0<=Project)||LA74_0==Public||LA74_0==Static||LA74_0==Target||(LA74_0>=Async && LA74_0<=Await)||LA74_0==Union||(LA74_0>=Yield && LA74_0<=This)||LA74_0==From||LA74_0==Type||(LA74_0>=Get && LA74_0<=Let)||(LA74_0>=Out && LA74_0<=Set)||LA74_0==As||LA74_0==Of||LA74_0==RULE_IDENTIFIER) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==RULE_VERSION) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_39);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
            }
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==Colon) && (synpred25_InternalN4JSParser())) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeVariables_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_VersionDeclaration_2 = null;
        EObject this_StrictFormalParameters_3 = null;
        EObject this_ColonSepReturnTypeRef_4 = null;
        	enterRule();
        try {
            {
            {
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==LessThanSign) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_39);
                    this_TypeVariables_0=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( ((LA78_0>=Intersection && LA78_0<=Implements)||(LA78_0>=Promisify && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||LA78_0==This||LA78_0==From||LA78_0==Type||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||LA78_0==RULE_IDENTIFIER) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt79=2;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==RULE_VERSION) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_39);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
            }
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==Colon) && (synpred26_InternalN4JSParser())) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedFunctionDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedFunctionDeclaration=ruleAnnotatedFunctionDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject lv_annotationList_0_0 = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_5);
            lv_annotationList_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);
                if ( ((LA83_0>=Protected && LA83_0<=Abstract)||LA83_0==External||(LA83_0>=Private && LA83_0<=Project)||LA83_0==Public||LA83_0==Static||LA83_0==Const) ) {
                    alt83=1;
                }
                switch (alt83) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop83;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
            }
            pushFollow(FOLLOW_5);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=ruleFunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject lv_annotationList_0_0 = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_5);
            lv_annotationList_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);
                if ( ((LA84_0>=Protected && LA84_0<=Abstract)||LA84_0==External||(LA84_0>=Private && LA84_0<=Project)||LA84_0==Public||LA84_0==Static||LA84_0==Const) ) {
                    alt84=1;
                }
                switch (alt84) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop84;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
            }
            pushFollow(FOLLOW_36);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=norm3_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExpression=ruleFunctionExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject this_FunctionImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFunctionExpressionAccess().getFunctionExpressionAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_1=norm6_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAsyncFunctionExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAsyncFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAsyncFunctionExpression=ruleAsyncFunctionExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAsyncFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_0_0=null;
        Token otherlv_2=null;
        EObject this_NoLineTerminator_1 = null;
        EObject this_FunctionImplWithoutKeyword_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
            }
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              							}
              							setWithLastConsumed(current, "declaredAsync", true, "async");
            }
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_45);
            this_NoLineTerminator_1=ruleNoLineTerminator(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_NoLineTerminator_1;
              					afterParserOrEnumRuleCall();
            }
            otherlv_2=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_3=norm6_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrowExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowExpression=ruleArrowExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt87=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt87=1;
                }
                break;
            case Async:
                {
                int LA87_2 = input.LA(2);
                if ( (LA87_2==RULE_NO_LINE_TERMINATOR) && (synpred37_InternalN4JSParser())) {
                    alt87=2;
                }
                else if ( (LA87_2==LeftParenthesis) && (synpred37_InternalN4JSParser())) {
                    alt87=2;
                }
                else if ( (LA87_2==EqualsSignGreaterThanSign) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);
                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt85=2;
                    int LA85_0 = input.LA(1);
                    if ( (LA85_0==Colon) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_42);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt86=2;
                    int LA86_0 = input.LA(1);
                    if ( (LA86_0==Colon) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt91=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt91=1;
                }
                break;
            case Async:
                {
                int LA91_2 = input.LA(2);
                if ( (LA91_2==RULE_NO_LINE_TERMINATOR) && (synpred43_InternalN4JSParser())) {
                    alt91=2;
                }
                else if ( (LA91_2==LeftParenthesis) && (synpred43_InternalN4JSParser())) {
                    alt91=2;
                }
                else if ( (LA91_2==EqualsSignGreaterThanSign) ) {
                    alt91=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);
                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt89=2;
                    int LA89_0 = input.LA(1);
                    if ( (LA89_0==Colon) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_42);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt90=2;
                    int LA90_0 = input.LA(1);
                    if ( (LA90_0==Colon) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt92=2;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt95=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt95=1;
                }
                break;
            case Async:
                {
                int LA95_2 = input.LA(2);
                if ( (LA95_2==EqualsSignGreaterThanSign) ) {
                    alt95=3;
                }
                else if ( (LA95_2==RULE_NO_LINE_TERMINATOR) && (synpred49_InternalN4JSParser())) {
                    alt95=2;
                }
                else if ( (LA95_2==LeftParenthesis) && (synpred49_InternalN4JSParser())) {
                    alt95=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);
                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt93=2;
                    int LA93_0 = input.LA(1);
                    if ( (LA93_0==Colon) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_39);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt94=2;
                    int LA94_0 = input.LA(1);
                    if ( (LA94_0==Colon) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt96=2;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt99=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt99=1;
                }
                break;
            case Async:
                {
                int LA99_2 = input.LA(2);
                if ( (LA99_2==EqualsSignGreaterThanSign) ) {
                    alt99=3;
                }
                else if ( (LA99_2==RULE_NO_LINE_TERMINATOR) && (synpred55_InternalN4JSParser())) {
                    alt99=2;
                }
                else if ( (LA99_2==LeftParenthesis) && (synpred55_InternalN4JSParser())) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);
                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);
                    if ( (LA97_0==Colon) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_39);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt98=2;
                    int LA98_0 = input.LA(1);
                    if ( (LA98_0==Colon) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;
        EObject lv_fpars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( ((LA102_0>=Intersection && LA102_0<=Implements)||(LA102_0>=Promisify && LA102_0<=Abstract)||LA102_0==External||LA102_0==Default||(LA102_0>=Private && LA102_0<=Project)||LA102_0==Public||LA102_0==Static||LA102_0==Target||(LA102_0>=Async && LA102_0<=Await)||LA102_0==Union||(LA102_0>=Yield && LA102_0<=This)||LA102_0==From||LA102_0==This_1||(LA102_0>=Type && LA102_0<=Void)||LA102_0==FullStopFullStopFullStop||(LA102_0>=Get && LA102_0<=Let)||(LA102_0>=Out && LA102_0<=Set)||LA102_0==As||LA102_0==Of||(LA102_0>=CommercialAt && LA102_0<=LeftSquareBracket)||LA102_0==LeftCurlyBracket||LA102_0==Tilde||LA102_0==RULE_IDENTIFIER) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_54);
                    lv_fpars_1_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop101:
                    do {
                        int alt101=2;
                        int LA101_0 = input.LA(1);
                        if ( (LA101_0==Comma) ) {
                            alt101=1;
                        }
                        switch (alt101) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_54);
                    	    lv_fpars_3_0=ruleFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop101;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_StrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;
        EObject lv_fpars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( ((LA104_0>=Intersection && LA104_0<=Implements)||(LA104_0>=Promisify && LA104_0<=Abstract)||LA104_0==External||LA104_0==Default||(LA104_0>=Private && LA104_0<=Project)||LA104_0==Public||LA104_0==Static||LA104_0==Target||(LA104_0>=Async && LA104_0<=Await)||LA104_0==Union||LA104_0==This||LA104_0==From||LA104_0==This_1||(LA104_0>=Type && LA104_0<=Void)||LA104_0==FullStopFullStopFullStop||(LA104_0>=Get && LA104_0<=Let)||(LA104_0>=Out && LA104_0<=Set)||LA104_0==As||LA104_0==Of||(LA104_0>=CommercialAt && LA104_0<=LeftSquareBracket)||LA104_0==LeftCurlyBracket||LA104_0==Tilde||LA104_0==RULE_IDENTIFIER) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_54);
                    lv_fpars_1_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);
                        if ( (LA103_0==Comma) ) {
                            alt103=1;
                        }
                        switch (alt103) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_54);
                    	    lv_fpars_3_0=norm1_FormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop103;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingIdentifierAsFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsFormalParameter=ruleBindingIdentifierAsFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBlockMinusBraces = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockMinusBracesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlockMinusBraces=ruleBlockMinusBraces();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlockMinusBraces; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
            }
            }
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);
                if ( ((LA105_0>=Intersection && LA105_0<=Implements)||(LA105_0>=Promisify && LA105_0<=Function)||(LA105_0>=Private && LA105_0<=Delete)||(LA105_0>=Import && LA105_0<=Break)||(LA105_0>=Class && LA105_0<=This)||(LA105_0>=From && LA105_0<=With)||(LA105_0>=For && LA105_0<=Var)||LA105_0==PlusSignPlusSign||(LA105_0>=HyphenMinusHyphenMinus && LA105_0<=SolidusEqualsSign)||(LA105_0>=As && LA105_0<=If)||LA105_0==Of||LA105_0==ExclamationMark||LA105_0==LeftParenthesis||LA105_0==PlusSign||LA105_0==HyphenMinus||LA105_0==Solidus||(LA105_0>=Semicolon && LA105_0<=LessThanSign)||(LA105_0>=CommercialAt && LA105_0<=LeftSquareBracket)||LA105_0==LeftCurlyBracket||LA105_0==Tilde||LA105_0==RULE_DOUBLE||(LA105_0>=RULE_HEX_INT && LA105_0<=RULE_LEGACY_OCTAL_INT)||LA105_0==RULE_SCIENTIFIC_INT||LA105_0==RULE_IDENTIFIER||LA105_0==RULE_STRING||(LA105_0>=RULE_TEMPLATE_HEAD && LA105_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA105_0==RULE_INT) ) {
                    alt105=1;
                }
                switch (alt105) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_1_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop105;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
            }
            }
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);
                if ( ((LA106_0>=Intersection && LA106_0<=Implements)||(LA106_0>=Promisify && LA106_0<=Function)||(LA106_0>=Private && LA106_0<=Delete)||(LA106_0>=Import && LA106_0<=Break)||(LA106_0>=Class && LA106_0<=This)||(LA106_0>=From && LA106_0<=With)||(LA106_0>=For && LA106_0<=Var)||LA106_0==PlusSignPlusSign||(LA106_0>=HyphenMinusHyphenMinus && LA106_0<=SolidusEqualsSign)||(LA106_0>=As && LA106_0<=If)||LA106_0==Of||LA106_0==ExclamationMark||LA106_0==LeftParenthesis||LA106_0==PlusSign||LA106_0==HyphenMinus||LA106_0==Solidus||(LA106_0>=Semicolon && LA106_0<=LessThanSign)||(LA106_0>=CommercialAt && LA106_0<=LeftSquareBracket)||LA106_0==LeftCurlyBracket||LA106_0==Tilde||LA106_0==RULE_DOUBLE||(LA106_0>=RULE_HEX_INT && LA106_0<=RULE_LEGACY_OCTAL_INT)||LA106_0==RULE_SCIENTIFIC_INT||LA106_0==RULE_IDENTIFIER||LA106_0==RULE_STRING||(LA106_0>=RULE_TEMPLATE_HEAD && LA106_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA106_0==RULE_INT) ) {
                    alt106=1;
                }
                switch (alt106) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_56);
            	    lv_statements_1_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop106;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionDisguisedAsBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionDisguisedAsBlock=ruleExpressionDisguisedAsBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionDisguisedAsBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=norm1_AssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAssignmentExpressionStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpressionStatement=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExpression=ruleAnnotatedExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ClassExtendsImplements_4 = null;
        EObject this_Members_5 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_57);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt109=2;
            int LA109_0 = input.LA(1);
            if ( (LA109_0==Class) ) {
                alt109=1;
            }
            else if ( (LA109_0==Function||LA109_0==Async) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);
                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    otherlv_2=(Token)match(input,Class,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt107=2;
                    int LA107_0 = input.LA(1);
                    if ( ((LA107_0>=Intersection && LA107_0<=Constructor)||(LA107_0>=Promisify && LA107_0<=Abstract)||LA107_0==External||(LA107_0>=Private && LA107_0<=Project)||LA107_0==Public||LA107_0==Static||LA107_0==Target||(LA107_0>=Async && LA107_0<=Await)||LA107_0==Union||(LA107_0>=Yield && LA107_0<=This)||LA107_0==From||LA107_0==Type||(LA107_0>=Get && LA107_0<=Let)||(LA107_0>=Out && LA107_0<=Set)||LA107_0==As||LA107_0==Of||LA107_0==RULE_IDENTIFIER) ) {
                        alt107=1;
                    }
                    else if ( (LA107_0==Implements) ) {
                        int LA107_2 = input.LA(2);
                        if ( (LA107_2==Implements||LA107_2==Extends||LA107_2==LeftCurlyBracket) ) {
                            alt107=1;
                        }
                    }
                    switch (alt107) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_3_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt108=2;
                    int LA108_0 = input.LA(1);
                    if ( (LA108_0==Implements||LA108_0==Extends) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                            }
                            pushFollow(FOLLOW_9);
                            this_ClassExtendsImplements_4=ruleClassExtendsImplements(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_45);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ClassExtendsImplements_4 = null;
        EObject this_Members_5 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_57);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt112=2;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==Class) ) {
                alt112=1;
            }
            else if ( (LA112_0==Function||LA112_0==Async) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);
                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    otherlv_2=(Token)match(input,Class,FOLLOW_59); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);
                    if ( ((LA110_0>=Intersection && LA110_0<=Constructor)||(LA110_0>=Promisify && LA110_0<=Abstract)||LA110_0==External||(LA110_0>=Private && LA110_0<=Project)||LA110_0==Public||LA110_0==Static||LA110_0==Target||(LA110_0>=Async && LA110_0<=Await)||LA110_0==Union||LA110_0==This||LA110_0==From||LA110_0==Type||(LA110_0>=Get && LA110_0<=Let)||(LA110_0>=Out && LA110_0<=Set)||LA110_0==As||LA110_0==Of||LA110_0==RULE_IDENTIFIER) ) {
                        alt110=1;
                    }
                    else if ( (LA110_0==Implements) ) {
                        int LA110_2 = input.LA(2);
                        if ( (LA110_2==Implements||LA110_2==Extends||LA110_2==LeftCurlyBracket) ) {
                            alt110=1;
                        }
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                            }
                            pushFollow(FOLLOW_59);
                            lv_name_3_0=norm1_BindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( (LA111_0==Implements||LA111_0==Extends) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                            }
                            pushFollow(FOLLOW_59);
                            this_ClassExtendsImplements_4=norm1_ClassExtendsImplements(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=norm1_Members(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_45);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariable=ruleTypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariable() throws RecognitionException {
        EObject current = null;
        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject lv_declaredUpperBound_4_0 = null;
        	enterRule();
        try {
            {
            {
            int alt113=3;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==Out) ) {
                alt113=1;
            }
            else if ( (LA113_0==In) ) {
                alt113=2;
            }
            switch (alt113) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", true, "out");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", true, "in");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeVariableAccess().getNameIdentifierOrThisParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_61);
            lv_name_2_0=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeVariableRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.N4JS.IdentifierOrThis");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==Extends) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_4_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFormalParameter=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementFragment_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=ruleBindingElementFragment(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FormalParameter() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementFragment_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=norm1_BindingElementFragment(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_variadic_3_0=null;
        Token lv_hasInitializerAssignment_6_0=null;
        EObject lv_bindingPattern_0_0 = null;
        EObject lv_annotations_1_0 = null;
        EObject this_BogusTypeRefFragment_2 = null;
        AntlrDatatypeRuleToken lv_name_4_0 = null;
        EObject this_ColonSepDeclaredTypeRef_5 = null;
        EObject lv_initializer_7_0 = null;
        	enterRule();
        try {
            {
            {
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_bindingPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);
                        if ( (LA115_0==CommercialAt) ) {
                            alt115=1;
                        }
                        switch (alt115) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	    }
                    	    pushFollow(FOLLOW_64);
                    	    lv_annotations_1_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop115;
                        }
                    } while (true);
                    int alt116=2;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1());
                            }
                            pushFollow(FOLLOW_65);
                            this_BogusTypeRefFragment_2=ruleBogusTypeRefFragment(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_BogusTypeRefFragment_2;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt117=2;
                    int LA117_0 = input.LA(1);
                    if ( (LA117_0==FullStopFullStopFullStop) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            {
                            {
                            lv_variadic_3_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_variadic_3_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", true, "...");
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_3_0());
                    }
                    pushFollow(FOLLOW_66);
                    lv_name_4_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt118=2;
                    int LA118_0 = input.LA(1);
                    if ( (LA118_0==Colon) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_4());
                            }
                            pushFollow(FOLLOW_63);
                            this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ColonSepDeclaredTypeRef_5;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==EqualsSign) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_6_0=(Token)match(input,EqualsSign,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_hasInitializerAssignment_6_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                    }
                    }
                    }
                    int alt120=2;
                    int LA120_0 = input.LA(1);
                    if ( ((LA120_0>=Intersection && LA120_0<=Implements)||(LA120_0>=Promisify && LA120_0<=Abstract)||(LA120_0>=External && LA120_0<=Function)||(LA120_0>=Private && LA120_0<=Delete)||(LA120_0>=Import && LA120_0<=Public)||LA120_0==Static||(LA120_0>=Target && LA120_0<=Await)||LA120_0==Class||(LA120_0>=False && LA120_0<=Super)||LA120_0==Union||(LA120_0>=Yield && LA120_0<=This)||(LA120_0>=From && LA120_0<=Void)||(LA120_0>=Get && LA120_0<=Set)||LA120_0==PlusSignPlusSign||(LA120_0>=HyphenMinusHyphenMinus && LA120_0<=SolidusEqualsSign)||LA120_0==As||LA120_0==Of||LA120_0==ExclamationMark||LA120_0==LeftParenthesis||LA120_0==PlusSign||LA120_0==HyphenMinus||LA120_0==Solidus||LA120_0==LessThanSign||(LA120_0>=CommercialAt && LA120_0<=LeftSquareBracket)||LA120_0==LeftCurlyBracket||LA120_0==Tilde||LA120_0==RULE_DOUBLE||(LA120_0>=RULE_HEX_INT && LA120_0<=RULE_LEGACY_OCTAL_INT)||LA120_0==RULE_SCIENTIFIC_INT||LA120_0==RULE_IDENTIFIER||LA120_0==RULE_STRING||(LA120_0>=RULE_TEMPLATE_HEAD && LA120_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA120_0==RULE_INT) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_7_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_7_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_variadic_3_0=null;
        Token lv_hasInitializerAssignment_6_0=null;
        EObject lv_bindingPattern_0_0 = null;
        EObject lv_annotations_1_0 = null;
        EObject this_BogusTypeRefFragment_2 = null;
        AntlrDatatypeRuleToken lv_name_4_0 = null;
        EObject this_ColonSepDeclaredTypeRef_5 = null;
        EObject lv_initializer_7_0 = null;
        	enterRule();
        try {
            {
            {
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_bindingPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);
                        if ( (LA122_0==CommercialAt) ) {
                            alt122=1;
                        }
                        switch (alt122) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	    }
                    	    pushFollow(FOLLOW_64);
                    	    lv_annotations_1_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop122;
                        }
                    } while (true);
                    int alt123=2;
                    alt123 = dfa123.predict(input);
                    switch (alt123) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1());
                            }
                            pushFollow(FOLLOW_65);
                            this_BogusTypeRefFragment_2=ruleBogusTypeRefFragment(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_BogusTypeRefFragment_2;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt124=2;
                    int LA124_0 = input.LA(1);
                    if ( (LA124_0==FullStopFullStopFullStop) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            {
                            lv_variadic_3_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_variadic_3_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", true, "...");
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_3_0());
                    }
                    pushFollow(FOLLOW_66);
                    lv_name_4_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt125=2;
                    int LA125_0 = input.LA(1);
                    if ( (LA125_0==Colon) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_4());
                            }
                            pushFollow(FOLLOW_63);
                            this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ColonSepDeclaredTypeRef_5;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==EqualsSign) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_6_0=(Token)match(input,EqualsSign,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_hasInitializerAssignment_6_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                    }
                    }
                    }
                    int alt127=2;
                    int LA127_0 = input.LA(1);
                    if ( ((LA127_0>=Intersection && LA127_0<=Implements)||(LA127_0>=Promisify && LA127_0<=Abstract)||(LA127_0>=External && LA127_0<=Function)||(LA127_0>=Private && LA127_0<=Delete)||(LA127_0>=Import && LA127_0<=Public)||LA127_0==Static||(LA127_0>=Target && LA127_0<=Await)||LA127_0==Class||(LA127_0>=False && LA127_0<=Super)||LA127_0==Union||(LA127_0>=Yield && LA127_0<=This)||(LA127_0>=From && LA127_0<=Void)||(LA127_0>=Get && LA127_0<=Set)||LA127_0==PlusSignPlusSign||(LA127_0>=HyphenMinusHyphenMinus && LA127_0<=SolidusEqualsSign)||LA127_0==As||LA127_0==Of||LA127_0==ExclamationMark||LA127_0==LeftParenthesis||LA127_0==PlusSign||LA127_0==HyphenMinus||LA127_0==Solidus||LA127_0==LessThanSign||(LA127_0>=CommercialAt && LA127_0<=LeftSquareBracket)||LA127_0==LeftCurlyBracket||LA127_0==Tilde||LA127_0==RULE_DOUBLE||(LA127_0>=RULE_HEX_INT && LA127_0<=RULE_LEGACY_OCTAL_INT)||LA127_0==RULE_SCIENTIFIC_INT||LA127_0==RULE_IDENTIFIER||LA127_0==RULE_STRING||(LA127_0>=RULE_TEMPLATE_HEAD && LA127_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA127_0==RULE_INT) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_7_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_7_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBogusTypeRefFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_bogusTypeRef_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefTypeRefWithModifiersParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_bogusTypeRef_0_0=ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBogusTypeRefFragmentRule());
              				}
              				set(
              					current,
              					"bogusTypeRef",
              					lv_bogusTypeRef_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlock=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);
                if ( ((LA129_0>=Intersection && LA129_0<=Implements)||(LA129_0>=Promisify && LA129_0<=Function)||(LA129_0>=Private && LA129_0<=Delete)||(LA129_0>=Import && LA129_0<=Break)||(LA129_0>=Class && LA129_0<=This)||(LA129_0>=From && LA129_0<=With)||(LA129_0>=For && LA129_0<=Var)||LA129_0==PlusSignPlusSign||(LA129_0>=HyphenMinusHyphenMinus && LA129_0<=SolidusEqualsSign)||(LA129_0>=As && LA129_0<=If)||LA129_0==Of||LA129_0==ExclamationMark||LA129_0==LeftParenthesis||LA129_0==PlusSign||LA129_0==HyphenMinus||LA129_0==Solidus||(LA129_0>=Semicolon && LA129_0<=LessThanSign)||(LA129_0>=CommercialAt && LA129_0<=LeftSquareBracket)||LA129_0==LeftCurlyBracket||LA129_0==Tilde||LA129_0==RULE_DOUBLE||(LA129_0>=RULE_HEX_INT && LA129_0<=RULE_LEGACY_OCTAL_INT)||LA129_0==RULE_SCIENTIFIC_INT||LA129_0==RULE_IDENTIFIER||LA129_0==RULE_STRING||(LA129_0>=RULE_TEMPLATE_HEAD && LA129_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA129_0==RULE_INT) ) {
                    alt129=1;
                }
                switch (alt129) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_statements_2_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop129;
                }
            } while (true);
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Block() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);
                if ( ((LA130_0>=Intersection && LA130_0<=Implements)||(LA130_0>=Promisify && LA130_0<=Function)||(LA130_0>=Private && LA130_0<=Delete)||(LA130_0>=Import && LA130_0<=Break)||(LA130_0>=Class && LA130_0<=This)||(LA130_0>=From && LA130_0<=With)||(LA130_0>=For && LA130_0<=Var)||LA130_0==PlusSignPlusSign||(LA130_0>=HyphenMinusHyphenMinus && LA130_0<=SolidusEqualsSign)||(LA130_0>=As && LA130_0<=If)||LA130_0==Of||LA130_0==ExclamationMark||LA130_0==LeftParenthesis||LA130_0==PlusSign||LA130_0==HyphenMinus||LA130_0==Solidus||(LA130_0>=Semicolon && LA130_0<=LessThanSign)||(LA130_0>=CommercialAt && LA130_0<=LeftSquareBracket)||LA130_0==LeftCurlyBracket||LA130_0==Tilde||LA130_0==RULE_DOUBLE||(LA130_0>=RULE_HEX_INT && LA130_0<=RULE_LEGACY_OCTAL_INT)||LA130_0==RULE_SCIENTIFIC_INT||LA130_0==RULE_IDENTIFIER||LA130_0==RULE_STRING||(LA130_0>=RULE_TEMPLATE_HEAD && LA130_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA130_0==RULE_INT) ) {
                    alt130=1;
                }
                switch (alt130) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_statements_2_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop130;
                }
            } while (true);
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRootStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRootStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRootStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRootStatement=ruleRootStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRootStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRootStatement() throws RecognitionException {
        EObject current = null;
        EObject this_Block_0 = null;
        EObject this_FunctionDeclaration_1 = null;
        EObject this_VariableStatement_2 = null;
        EObject this_EmptyStatement_3 = null;
        EObject this_LabelledStatement_4 = null;
        EObject this_ExpressionStatement_5 = null;
        EObject this_IfStatement_6 = null;
        EObject this_IterationStatement_7 = null;
        EObject this_ContinueStatement_8 = null;
        EObject this_BreakStatement_9 = null;
        EObject this_ReturnStatement_10 = null;
        EObject this_WithStatement_11 = null;
        EObject this_SwitchStatement_12 = null;
        EObject this_ThrowStatement_13 = null;
        EObject this_TryStatement_14 = null;
        EObject this_DebuggerStatement_15 = null;
        	enterRule();
        try {
            {
            int alt131=16;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm1_VariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=ruleLabelledStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=ruleExpressionStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=ruleIfStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=ruleIterationStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=ruleContinueStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=ruleBreakStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=ruleReturnStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=ruleWithStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=ruleSwitchStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=ruleThrowStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=ruleTryStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RootStatement() throws RecognitionException {
        EObject current = null;
        EObject this_Block_0 = null;
        EObject this_FunctionDeclaration_1 = null;
        EObject this_VariableStatement_2 = null;
        EObject this_EmptyStatement_3 = null;
        EObject this_LabelledStatement_4 = null;
        EObject this_ExpressionStatement_5 = null;
        EObject this_IfStatement_6 = null;
        EObject this_IterationStatement_7 = null;
        EObject this_ContinueStatement_8 = null;
        EObject this_BreakStatement_9 = null;
        EObject this_ReturnStatement_10 = null;
        EObject this_WithStatement_11 = null;
        EObject this_SwitchStatement_12 = null;
        EObject this_ThrowStatement_13 = null;
        EObject this_TryStatement_14 = null;
        EObject this_DebuggerStatement_15 = null;
        	enterRule();
        try {
            {
            int alt132=16;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=norm1_FunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm3_VariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=norm1_LabelledStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=norm1_ExpressionStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=norm1_IfStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=norm1_IterationStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=norm1_ContinueStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=norm1_BreakStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=norm1_ReturnStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=norm1_WithStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=norm1_SwitchStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=norm1_ThrowStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=norm1_TryStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedFunctionDeclaration_0 = null;
        EObject this_RootStatement_1 = null;
        	enterRule();
        try {
            {
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=ruleAnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Statement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedFunctionDeclaration_0 = null;
        EObject this_RootStatement_1 = null;
        	enterRule();
        try {
            {
            int alt134=2;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=norm1_AnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=norm1_RootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;
        EObject lv_varDeclsOrBindings_2_0 = null;
        EObject lv_varDeclsOrBindings_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
            }
            pushFollow(FOLLOW_27);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_28);
            lv_varDeclsOrBindings_2_0=norm1_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);
                if ( (LA135_0==Comma) ) {
                    alt135=1;
                }
                switch (alt135) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_28);
            	    lv_varDeclsOrBindings_4_0=norm1_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop135;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;
        EObject lv_varDeclsOrBindings_2_0 = null;
        EObject lv_varDeclsOrBindings_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
            }
            pushFollow(FOLLOW_27);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_28);
            lv_varDeclsOrBindings_2_0=norm3_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);
                if ( (LA136_0==Comma) ) {
                    alt136=1;
                }
                switch (alt136) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_28);
            	    lv_varDeclsOrBindings_4_0=norm3_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop136;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableStatement=ruleExportedVariableStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        Enumerator lv_varStmtKeyword_2_0 = null;
        EObject lv_varDeclsOrBindings_3_0 = null;
        EObject lv_varDeclsOrBindings_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableStatementAccess().getExportedVariableStatementAction_0(),
              					current);
            }
            }
            loop137:
            do {
                int alt137=2;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop137;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_2_0());
            }
            pushFollow(FOLLOW_27);
            lv_varStmtKeyword_2_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					set(
              						current,
              						"varStmtKeyword",
              						lv_varStmtKeyword_2_0,
              						"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_28);
            lv_varDeclsOrBindings_3_0=ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_3_0,
              						"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);
                if ( (LA138_0==Comma) ) {
                    alt138=1;
                }
                switch (alt138) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_28);
            	    lv_varDeclsOrBindings_5_0=ruleExportedVariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_5_0,
            	      							"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop138;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleVariableDeclarationOrBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclarationOrBinding=ruleVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==LeftCurlyBracket) && (synpred74_InternalN4JSParser())) {
                alt139=1;
            }
            else if ( (LA139_0==LeftSquareBracket) && (synpred74_InternalN4JSParser())) {
                alt139=1;
            }
            else if ( ((LA139_0>=Intersection && LA139_0<=Implements)||(LA139_0>=Promisify && LA139_0<=Abstract)||LA139_0==External||(LA139_0>=Private && LA139_0<=Project)||LA139_0==Public||LA139_0==Static||LA139_0==Target||(LA139_0>=Async && LA139_0<=Await)||LA139_0==Union||(LA139_0>=Yield && LA139_0<=This)||LA139_0==From||LA139_0==Type||(LA139_0>=Get && LA139_0<=Let)||(LA139_0>=Out && LA139_0<=Set)||LA139_0==As||LA139_0==Of||LA139_0==CommercialAt||LA139_0==RULE_IDENTIFIER) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);
                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=ruleVariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt140=2;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==LeftCurlyBracket) && (synpred75_InternalN4JSParser())) {
                alt140=1;
            }
            else if ( (LA140_0==LeftSquareBracket) && (synpred75_InternalN4JSParser())) {
                alt140=1;
            }
            else if ( ((LA140_0>=Intersection && LA140_0<=Implements)||(LA140_0>=Promisify && LA140_0<=Abstract)||LA140_0==External||(LA140_0>=Private && LA140_0<=Project)||LA140_0==Public||LA140_0==Static||LA140_0==Target||(LA140_0>=Async && LA140_0<=Await)||LA140_0==Union||(LA140_0>=Yield && LA140_0<=This)||LA140_0==From||LA140_0==Type||(LA140_0>=Get && LA140_0<=Let)||(LA140_0>=Out && LA140_0<=Set)||LA140_0==As||LA140_0==Of||LA140_0==CommercialAt||LA140_0==RULE_IDENTIFIER) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);
                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm1_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt141=2;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==LeftCurlyBracket) && (synpred76_InternalN4JSParser())) {
                alt141=1;
            }
            else if ( (LA141_0==LeftSquareBracket) && (synpred76_InternalN4JSParser())) {
                alt141=1;
            }
            else if ( ((LA141_0>=Intersection && LA141_0<=Implements)||(LA141_0>=Promisify && LA141_0<=Abstract)||LA141_0==External||(LA141_0>=Private && LA141_0<=Project)||LA141_0==Public||LA141_0==Static||LA141_0==Target||(LA141_0>=Async && LA141_0<=Await)||LA141_0==Union||LA141_0==This||LA141_0==From||LA141_0==Type||(LA141_0>=Get && LA141_0<=Let)||(LA141_0>=Out && LA141_0<=Set)||LA141_0==As||LA141_0==Of||LA141_0==CommercialAt||LA141_0==RULE_IDENTIFIER) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);
                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm2_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt142=2;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==LeftCurlyBracket) && (synpred77_InternalN4JSParser())) {
                alt142=1;
            }
            else if ( (LA142_0==LeftSquareBracket) && (synpred77_InternalN4JSParser())) {
                alt142=1;
            }
            else if ( ((LA142_0>=Intersection && LA142_0<=Implements)||(LA142_0>=Promisify && LA142_0<=Abstract)||LA142_0==External||(LA142_0>=Private && LA142_0<=Project)||LA142_0==Public||LA142_0==Static||LA142_0==Target||(LA142_0>=Async && LA142_0<=Await)||LA142_0==Union||LA142_0==This||LA142_0==From||LA142_0==Type||(LA142_0>=Get && LA142_0<=Let)||(LA142_0>=Out && LA142_0<=Set)||LA142_0==As||LA142_0==Of||LA142_0==CommercialAt||LA142_0==RULE_IDENTIFIER) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);
                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm3_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==LeftCurlyBracket) && (synpred78_InternalN4JSParser())) {
                alt143=1;
            }
            else if ( (LA143_0==LeftSquareBracket) && (synpred78_InternalN4JSParser())) {
                alt143=1;
            }
            else if ( ((LA143_0>=Intersection && LA143_0<=Implements)||(LA143_0>=Promisify && LA143_0<=Abstract)||LA143_0==External||(LA143_0>=Private && LA143_0<=Project)||LA143_0==Public||LA143_0==Static||LA143_0==Target||(LA143_0>=Async && LA143_0<=Await)||LA143_0==Union||(LA143_0>=Yield && LA143_0<=This)||LA143_0==From||LA143_0==Type||(LA143_0>=Get && LA143_0<=Let)||(LA143_0>=Out && LA143_0<=Set)||LA143_0==As||LA143_0==Of||LA143_0==CommercialAt||LA143_0==RULE_IDENTIFIER) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);
                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm4_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==LeftCurlyBracket) && (synpred79_InternalN4JSParser())) {
                alt144=1;
            }
            else if ( (LA144_0==LeftSquareBracket) && (synpred79_InternalN4JSParser())) {
                alt144=1;
            }
            else if ( ((LA144_0>=Intersection && LA144_0<=Implements)||(LA144_0>=Promisify && LA144_0<=Abstract)||LA144_0==External||(LA144_0>=Private && LA144_0<=Project)||LA144_0==Public||LA144_0==Static||LA144_0==Target||(LA144_0>=Async && LA144_0<=Await)||LA144_0==Union||LA144_0==This||LA144_0==From||LA144_0==Type||(LA144_0>=Get && LA144_0<=Let)||(LA144_0>=Out && LA144_0<=Set)||LA144_0==As||LA144_0==Of||LA144_0==CommercialAt||LA144_0==RULE_IDENTIFIER) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);
                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm6_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleVariableBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableBinding=ruleVariableBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==EqualsSign) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt146=2;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==EqualsSign) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==EqualsSign) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==EqualsSign) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm1_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm3_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm4_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm6_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop149:
            do {
                int alt149=2;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop149;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==EqualsSign) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop151:
            do {
                int alt151=2;
                alt151 = dfa151.predict(input);
                switch (alt151) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==EqualsSign) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop153:
            do {
                int alt153=2;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==EqualsSign) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop155:
            do {
                int alt155=2;
                alt155 = dfa155.predict(input);
                switch (alt155) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==EqualsSign) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop157:
            do {
                int alt157=2;
                alt157 = dfa157.predict(input);
                switch (alt157) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop157;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt158=2;
            int LA158_0 = input.LA(1);
            if ( (LA158_0==Colon) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt159=2;
            int LA159_0 = input.LA(1);
            if ( (LA159_0==EqualsSign) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop160:
            do {
                int alt160=2;
                alt160 = dfa160.predict(input);
                switch (alt160) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop160;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==Colon) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt162=2;
            int LA162_0 = input.LA(1);
            if ( (LA162_0==EqualsSign) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop163:
            do {
                int alt163=2;
                alt163 = dfa163.predict(input);
                switch (alt163) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop163;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==Colon) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt165=2;
            int LA165_0 = input.LA(1);
            if ( (LA165_0==EqualsSign) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop166:
            do {
                int alt166=2;
                alt166 = dfa166.predict(input);
                switch (alt166) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop166;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==Colon) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt168=2;
            int LA168_0 = input.LA(1);
            if ( (LA168_0==EqualsSign) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableDeclarationOrBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclarationOrBinding=ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_ExportedVariableBinding_0 = null;
        EObject this_ExportedVariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==LeftCurlyBracket) && (synpred96_InternalN4JSParser())) {
                alt169=1;
            }
            else if ( (LA169_0==LeftSquareBracket) && (synpred96_InternalN4JSParser())) {
                alt169=1;
            }
            else if ( ((LA169_0>=Intersection && LA169_0<=Implements)||(LA169_0>=Promisify && LA169_0<=Abstract)||LA169_0==External||(LA169_0>=Private && LA169_0<=Project)||LA169_0==Public||LA169_0==Static||LA169_0==Target||(LA169_0>=Async && LA169_0<=Await)||LA169_0==Union||(LA169_0>=Yield && LA169_0<=This)||LA169_0==From||LA169_0==Type||(LA169_0>=Get && LA169_0<=Let)||(LA169_0>=Out && LA169_0<=Set)||LA169_0==As||LA169_0==Of||LA169_0==CommercialAt||LA169_0==RULE_IDENTIFIER) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);
                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=ruleExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=ruleExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_ExportedVariableBinding_0 = null;
        EObject this_ExportedVariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt170=2;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==LeftCurlyBracket) && (synpred97_InternalN4JSParser())) {
                alt170=1;
            }
            else if ( (LA170_0==LeftSquareBracket) && (synpred97_InternalN4JSParser())) {
                alt170=1;
            }
            else if ( ((LA170_0>=Intersection && LA170_0<=Implements)||(LA170_0>=Promisify && LA170_0<=Abstract)||LA170_0==External||(LA170_0>=Private && LA170_0<=Project)||LA170_0==Public||LA170_0==Static||LA170_0==Target||(LA170_0>=Async && LA170_0<=Await)||LA170_0==Union||LA170_0==This||LA170_0==From||LA170_0==Type||(LA170_0>=Get && LA170_0<=Let)||(LA170_0>=Out && LA170_0<=Set)||LA170_0==As||LA170_0==Of||LA170_0==CommercialAt||LA170_0==RULE_IDENTIFIER) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);
                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=norm1_ExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=norm1_ExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableBinding=ruleExportedVariableBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportedVariableDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclaration=ruleExportedVariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEmptyStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyStatement=ruleEmptyStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionStatement=ruleExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_18);
            lv_expression_0_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_18);
            lv_expression_0_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIfStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;
        EObject lv_ifStmt_4_0 = null;
        EObject lv_elseStmt_6_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_74);
            lv_ifStmt_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==Else) ) {
                int LA171_1 = input.LA(2);
                if ( (synpred100_InternalN4JSParser()) ) {
                    alt171=1;
                }
            }
            switch (alt171) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=ruleStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IfStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;
        EObject lv_ifStmt_4_0 = null;
        EObject lv_elseStmt_6_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_74);
            lv_ifStmt_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==Else) ) {
                int LA172_1 = input.LA(2);
                if ( (synpred101_InternalN4JSParser()) ) {
                    alt172=1;
                }
            }
            switch (alt172) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_75); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=norm1_Statement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIterationStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIterationStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIterationStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIterationStatement=ruleIterationStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIterationStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIterationStatement() throws RecognitionException {
        EObject current = null;
        EObject this_DoStatement_0 = null;
        EObject this_WhileStatement_1 = null;
        EObject this_ForStatement_2 = null;
        	enterRule();
        try {
            {
            int alt173=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt173=1;
                }
                break;
            case While:
                {
                alt173=2;
                }
                break;
            case For:
                {
                alt173=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);
                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=ruleDoStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=ruleWhileStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=ruleForStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IterationStatement() throws RecognitionException {
        EObject current = null;
        EObject this_DoStatement_0 = null;
        EObject this_WhileStatement_1 = null;
        EObject this_ForStatement_2 = null;
        	enterRule();
        try {
            {
            int alt174=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt174=1;
                }
                break;
            case While:
                {
                alt174=2;
                }
                break;
            case For:
                {
                alt174=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);
                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=norm1_DoStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=norm1_WhileStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=norm1_ForStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDoStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoStatement=ruleDoStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_76);
            lv_statement_1_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_4_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt175=2;
            alt175 = dfa175.predict(input);
            switch (alt175) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DoStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_76);
            lv_statement_1_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_4_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==Semicolon) ) {
                int LA176_1 = input.LA(2);
                if ( (synpred103_InternalN4JSParser()) ) {
                    alt176=1;
                }
            }
            else if ( (LA176_0==EOF||LA176_0==RULE_ML_COMMENT||LA176_0==RULE_EOL) && (synpred103_InternalN4JSParser())) {
                alt176=1;
            }
            else if ( (LA176_0==RightCurlyBracket) ) {
                int LA176_3 = input.LA(2);
                if ( (synpred103_InternalN4JSParser()) ) {
                    alt176=1;
                }
            }
            switch (alt176) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWhileStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWhileStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhileStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhileStatement=ruleWhileStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhileStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWhileStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WhileStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleForStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleForStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForStatement=ruleForStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleForStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_await_2_0=null;
        Token otherlv_3=null;
        Token lv_forIn_5_0=null;
        Token otherlv_7=null;
        Token lv_forIn_10_0=null;
        Token lv_forOf_11_0=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token lv_forIn_20_0=null;
        Token lv_forOf_22_0=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token lv_forIn_29_0=null;
        Token lv_forOf_31_0=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_initExpr_4_0 = null;
        EObject lv_expression_6_0 = null;
        Enumerator lv_varStmtKeyword_8_0 = null;
        EObject lv_varDeclsOrBindings_9_0 = null;
        EObject lv_expression_12_0 = null;
        EObject lv_varDeclsOrBindings_13_0 = null;
        EObject lv_varDeclsOrBindings_15_0 = null;
        EObject lv_expression_17_0 = null;
        EObject lv_updateExpr_19_0 = null;
        EObject lv_expression_21_0 = null;
        EObject lv_expression_23_0 = null;
        EObject lv_initExpr_24_0 = null;
        EObject lv_expression_26_0 = null;
        EObject lv_updateExpr_28_0 = null;
        EObject lv_expression_30_0 = null;
        EObject lv_expression_32_0 = null;
        EObject lv_expression_34_0 = null;
        EObject lv_updateExpr_36_0 = null;
        EObject lv_statement_38_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,For,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt177=2;
            int LA177_0 = input.LA(1);
            if ( (LA177_0==Await) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    {
                    {
                    lv_await_2_0=(Token)match(input,Await,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_await_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getForStatementRule());
                      					}
                      					setWithLastConsumed(current, "await", true, "await");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt195=2;
            alt195 = dfa195.predict(input);
            switch (alt195) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_4_0_0_0_0());
                    }
                    pushFollow(FOLLOW_79);
                    lv_initExpr_4_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_4_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_forIn_5_0=(Token)match(input,In,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								newLeafNode(lv_forIn_5_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", true, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0_0_2_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_expression_6_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_6_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt194=3;
                    alt194 = dfa194.predict(input);
                    switch (alt194) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_4_1_0_0_0_0());
                            }
                            pushFollow(FOLLOW_27);
                            lv_varStmtKeyword_8_0=ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_8_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt186=2;
                            alt186 = dfa186.predict(input);
                            switch (alt186) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0());
                                    }
                                    pushFollow(FOLLOW_80);
                                    lv_varDeclsOrBindings_9_0=ruleBindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_9_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt178=2;
                                    int LA178_0 = input.LA(1);
                                    if ( (LA178_0==In) ) {
                                        alt178=1;
                                    }
                                    else if ( (LA178_0==Of) ) {
                                        alt178=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 178, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt178) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_10_0=(Token)match(input,In,FOLLOW_81); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_10_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_11_0=(Token)match(input,Of,FOLLOW_81); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_11_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt179=2;
                                    alt179 = dfa179.predict(input);
                                    switch (alt179) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_12_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_12_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0());
                                    }
                                    pushFollow(FOLLOW_82);
                                    lv_varDeclsOrBindings_13_0=norm4_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_13_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt185=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt185=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt185=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt185=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 185, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt185) {
                                        case 1 :
                                            {
                                            {
                                            loop180:
                                            do {
                                                int alt180=2;
                                                int LA180_0 = input.LA(1);
                                                if ( (LA180_0==Comma) ) {
                                                    alt180=1;
                                                }
                                                switch (alt180) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_14=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      												newLeafNode(otherlv_14, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {
                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0());
                                            	    }
                                            	    pushFollow(FOLLOW_83);
                                            	    lv_varDeclsOrBindings_15_0=ruleVariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_15_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop180;
                                                }
                                            } while (true);
                                            otherlv_16=(Token)match(input,Semicolon,FOLLOW_84); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_16, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt181=2;
                                            int LA181_0 = input.LA(1);
                                            if ( ((LA181_0>=Intersection && LA181_0<=Implements)||(LA181_0>=Promisify && LA181_0<=Abstract)||(LA181_0>=External && LA181_0<=Function)||(LA181_0>=Private && LA181_0<=Delete)||(LA181_0>=Import && LA181_0<=Public)||LA181_0==Static||(LA181_0>=Target && LA181_0<=Await)||LA181_0==Class||(LA181_0>=False && LA181_0<=Super)||LA181_0==Union||(LA181_0>=Yield && LA181_0<=This)||(LA181_0>=From && LA181_0<=Void)||(LA181_0>=Get && LA181_0<=Set)||LA181_0==PlusSignPlusSign||(LA181_0>=HyphenMinusHyphenMinus && LA181_0<=SolidusEqualsSign)||LA181_0==As||LA181_0==Of||LA181_0==ExclamationMark||LA181_0==LeftParenthesis||LA181_0==PlusSign||LA181_0==HyphenMinus||LA181_0==Solidus||LA181_0==LessThanSign||(LA181_0>=CommercialAt && LA181_0<=LeftSquareBracket)||LA181_0==LeftCurlyBracket||LA181_0==Tilde||LA181_0==RULE_DOUBLE||(LA181_0>=RULE_HEX_INT && LA181_0<=RULE_LEGACY_OCTAL_INT)||LA181_0==RULE_SCIENTIFIC_INT||LA181_0==RULE_IDENTIFIER||LA181_0==RULE_STRING||(LA181_0>=RULE_TEMPLATE_HEAD && LA181_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA181_0==RULE_INT) ) {
                                                alt181=1;
                                            }
                                            switch (alt181) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0());
                                                    }
                                                    pushFollow(FOLLOW_85);
                                                    lv_expression_17_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_17_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            otherlv_18=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_18, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt182=2;
                                            int LA182_0 = input.LA(1);
                                            if ( ((LA182_0>=Intersection && LA182_0<=Implements)||(LA182_0>=Promisify && LA182_0<=Abstract)||(LA182_0>=External && LA182_0<=Function)||(LA182_0>=Private && LA182_0<=Delete)||(LA182_0>=Import && LA182_0<=Public)||LA182_0==Static||(LA182_0>=Target && LA182_0<=Await)||LA182_0==Class||(LA182_0>=False && LA182_0<=Super)||LA182_0==Union||(LA182_0>=Yield && LA182_0<=This)||(LA182_0>=From && LA182_0<=Void)||(LA182_0>=Get && LA182_0<=Set)||LA182_0==PlusSignPlusSign||(LA182_0>=HyphenMinusHyphenMinus && LA182_0<=SolidusEqualsSign)||LA182_0==As||LA182_0==Of||LA182_0==ExclamationMark||LA182_0==LeftParenthesis||LA182_0==PlusSign||LA182_0==HyphenMinus||LA182_0==Solidus||LA182_0==LessThanSign||(LA182_0>=CommercialAt && LA182_0<=LeftSquareBracket)||LA182_0==LeftCurlyBracket||LA182_0==Tilde||LA182_0==RULE_DOUBLE||(LA182_0>=RULE_HEX_INT && LA182_0<=RULE_LEGACY_OCTAL_INT)||LA182_0==RULE_SCIENTIFIC_INT||LA182_0==RULE_IDENTIFIER||LA182_0==RULE_STRING||(LA182_0>=RULE_TEMPLATE_HEAD && LA182_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA182_0==RULE_INT) ) {
                                                alt182=1;
                                            }
                                            switch (alt182) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0());
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_updateExpr_19_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_19_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_20_0=(Token)match(input,In,FOLLOW_81); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_20_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                            }
                                            }
                                            }
                                            int alt183=2;
                                            int LA183_0 = input.LA(1);
                                            if ( ((LA183_0>=Intersection && LA183_0<=Implements)||(LA183_0>=Promisify && LA183_0<=Abstract)||(LA183_0>=External && LA183_0<=Function)||(LA183_0>=Private && LA183_0<=Delete)||(LA183_0>=Import && LA183_0<=Public)||LA183_0==Static||(LA183_0>=Target && LA183_0<=Await)||LA183_0==Class||(LA183_0>=False && LA183_0<=Super)||LA183_0==Union||(LA183_0>=Yield && LA183_0<=This)||(LA183_0>=From && LA183_0<=Void)||(LA183_0>=Get && LA183_0<=Set)||LA183_0==PlusSignPlusSign||(LA183_0>=HyphenMinusHyphenMinus && LA183_0<=SolidusEqualsSign)||LA183_0==As||LA183_0==Of||LA183_0==ExclamationMark||LA183_0==LeftParenthesis||LA183_0==PlusSign||LA183_0==HyphenMinus||LA183_0==Solidus||LA183_0==LessThanSign||(LA183_0>=CommercialAt && LA183_0<=LeftSquareBracket)||LA183_0==LeftCurlyBracket||LA183_0==Tilde||LA183_0==RULE_DOUBLE||(LA183_0>=RULE_HEX_INT && LA183_0<=RULE_LEGACY_OCTAL_INT)||LA183_0==RULE_SCIENTIFIC_INT||LA183_0==RULE_IDENTIFIER||LA183_0==RULE_STRING||(LA183_0>=RULE_TEMPLATE_HEAD && LA183_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA183_0==RULE_INT) ) {
                                                alt183=1;
                                            }
                                            switch (alt183) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0());
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_21_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_21_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_22_0=(Token)match(input,Of,FOLLOW_81); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_22_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                            }
                                            }
                                            }
                                            int alt184=2;
                                            int LA184_0 = input.LA(1);
                                            if ( ((LA184_0>=Intersection && LA184_0<=Implements)||(LA184_0>=Promisify && LA184_0<=Abstract)||(LA184_0>=External && LA184_0<=Function)||(LA184_0>=Private && LA184_0<=Delete)||(LA184_0>=Import && LA184_0<=Public)||LA184_0==Static||(LA184_0>=Target && LA184_0<=Await)||LA184_0==Class||(LA184_0>=False && LA184_0<=Super)||LA184_0==Union||(LA184_0>=Yield && LA184_0<=This)||(LA184_0>=From && LA184_0<=Void)||(LA184_0>=Get && LA184_0<=Set)||LA184_0==PlusSignPlusSign||(LA184_0>=HyphenMinusHyphenMinus && LA184_0<=SolidusEqualsSign)||LA184_0==As||LA184_0==Of||LA184_0==ExclamationMark||LA184_0==LeftParenthesis||LA184_0==PlusSign||LA184_0==HyphenMinus||LA184_0==Solidus||LA184_0==LessThanSign||(LA184_0>=CommercialAt && LA184_0<=LeftSquareBracket)||LA184_0==LeftCurlyBracket||LA184_0==Tilde||LA184_0==RULE_DOUBLE||(LA184_0>=RULE_HEX_INT && LA184_0<=RULE_LEGACY_OCTAL_INT)||LA184_0==RULE_SCIENTIFIC_INT||LA184_0==RULE_IDENTIFIER||LA184_0==RULE_STRING||(LA184_0>=RULE_TEMPLATE_HEAD && LA184_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA184_0==RULE_INT) ) {
                                                alt184=1;
                                            }
                                            switch (alt184) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0());
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_23_0=norm1_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_23_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_4_1_0_1_0_0());
                            }
                            pushFollow(FOLLOW_86);
                            lv_initExpr_24_0=ruleExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_24_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt191=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt191=1;
                                }
                                break;
                            case In:
                                {
                                alt191=2;
                                }
                                break;
                            case Of:
                                {
                                alt191=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 191, 0, input);
                                throw nvae;
                            }
                            switch (alt191) {
                                case 1 :
                                    {
                                    {
                                    otherlv_25=(Token)match(input,Semicolon,FOLLOW_84); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_25, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt187=2;
                                    int LA187_0 = input.LA(1);
                                    if ( ((LA187_0>=Intersection && LA187_0<=Implements)||(LA187_0>=Promisify && LA187_0<=Abstract)||(LA187_0>=External && LA187_0<=Function)||(LA187_0>=Private && LA187_0<=Delete)||(LA187_0>=Import && LA187_0<=Public)||LA187_0==Static||(LA187_0>=Target && LA187_0<=Await)||LA187_0==Class||(LA187_0>=False && LA187_0<=Super)||LA187_0==Union||(LA187_0>=Yield && LA187_0<=This)||(LA187_0>=From && LA187_0<=Void)||(LA187_0>=Get && LA187_0<=Set)||LA187_0==PlusSignPlusSign||(LA187_0>=HyphenMinusHyphenMinus && LA187_0<=SolidusEqualsSign)||LA187_0==As||LA187_0==Of||LA187_0==ExclamationMark||LA187_0==LeftParenthesis||LA187_0==PlusSign||LA187_0==HyphenMinus||LA187_0==Solidus||LA187_0==LessThanSign||(LA187_0>=CommercialAt && LA187_0<=LeftSquareBracket)||LA187_0==LeftCurlyBracket||LA187_0==Tilde||LA187_0==RULE_DOUBLE||(LA187_0>=RULE_HEX_INT && LA187_0<=RULE_LEGACY_OCTAL_INT)||LA187_0==RULE_SCIENTIFIC_INT||LA187_0==RULE_IDENTIFIER||LA187_0==RULE_STRING||(LA187_0>=RULE_TEMPLATE_HEAD && LA187_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA187_0==RULE_INT) ) {
                                        alt187=1;
                                    }
                                    switch (alt187) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0());
                                            }
                                            pushFollow(FOLLOW_85);
                                            lv_expression_26_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_26_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    otherlv_27=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_27, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt188=2;
                                    int LA188_0 = input.LA(1);
                                    if ( ((LA188_0>=Intersection && LA188_0<=Implements)||(LA188_0>=Promisify && LA188_0<=Abstract)||(LA188_0>=External && LA188_0<=Function)||(LA188_0>=Private && LA188_0<=Delete)||(LA188_0>=Import && LA188_0<=Public)||LA188_0==Static||(LA188_0>=Target && LA188_0<=Await)||LA188_0==Class||(LA188_0>=False && LA188_0<=Super)||LA188_0==Union||(LA188_0>=Yield && LA188_0<=This)||(LA188_0>=From && LA188_0<=Void)||(LA188_0>=Get && LA188_0<=Set)||LA188_0==PlusSignPlusSign||(LA188_0>=HyphenMinusHyphenMinus && LA188_0<=SolidusEqualsSign)||LA188_0==As||LA188_0==Of||LA188_0==ExclamationMark||LA188_0==LeftParenthesis||LA188_0==PlusSign||LA188_0==HyphenMinus||LA188_0==Solidus||LA188_0==LessThanSign||(LA188_0>=CommercialAt && LA188_0<=LeftSquareBracket)||LA188_0==LeftCurlyBracket||LA188_0==Tilde||LA188_0==RULE_DOUBLE||(LA188_0>=RULE_HEX_INT && LA188_0<=RULE_LEGACY_OCTAL_INT)||LA188_0==RULE_SCIENTIFIC_INT||LA188_0==RULE_IDENTIFIER||LA188_0==RULE_STRING||(LA188_0>=RULE_TEMPLATE_HEAD && LA188_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA188_0==RULE_INT) ) {
                                        alt188=1;
                                    }
                                    switch (alt188) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_updateExpr_28_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_28_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_29_0=(Token)match(input,In,FOLLOW_81); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forIn_29_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", true, "in");
                                    }
                                    }
                                    }
                                    int alt189=2;
                                    int LA189_0 = input.LA(1);
                                    if ( ((LA189_0>=Intersection && LA189_0<=Implements)||(LA189_0>=Promisify && LA189_0<=Abstract)||(LA189_0>=External && LA189_0<=Function)||(LA189_0>=Private && LA189_0<=Delete)||(LA189_0>=Import && LA189_0<=Public)||LA189_0==Static||(LA189_0>=Target && LA189_0<=Await)||LA189_0==Class||(LA189_0>=False && LA189_0<=Super)||LA189_0==Union||(LA189_0>=Yield && LA189_0<=This)||(LA189_0>=From && LA189_0<=Void)||(LA189_0>=Get && LA189_0<=Set)||LA189_0==PlusSignPlusSign||(LA189_0>=HyphenMinusHyphenMinus && LA189_0<=SolidusEqualsSign)||LA189_0==As||LA189_0==Of||LA189_0==ExclamationMark||LA189_0==LeftParenthesis||LA189_0==PlusSign||LA189_0==HyphenMinus||LA189_0==Solidus||LA189_0==LessThanSign||(LA189_0>=CommercialAt && LA189_0<=LeftSquareBracket)||LA189_0==LeftCurlyBracket||LA189_0==Tilde||LA189_0==RULE_DOUBLE||(LA189_0>=RULE_HEX_INT && LA189_0<=RULE_LEGACY_OCTAL_INT)||LA189_0==RULE_SCIENTIFIC_INT||LA189_0==RULE_IDENTIFIER||LA189_0==RULE_STRING||(LA189_0>=RULE_TEMPLATE_HEAD && LA189_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA189_0==RULE_INT) ) {
                                        alt189=1;
                                    }
                                    switch (alt189) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_30_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_30_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_31_0=(Token)match(input,Of,FOLLOW_81); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forOf_31_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", true, "of");
                                    }
                                    }
                                    }
                                    int alt190=2;
                                    int LA190_0 = input.LA(1);
                                    if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Abstract)||(LA190_0>=External && LA190_0<=Function)||(LA190_0>=Private && LA190_0<=Delete)||(LA190_0>=Import && LA190_0<=Public)||LA190_0==Static||(LA190_0>=Target && LA190_0<=Await)||LA190_0==Class||(LA190_0>=False && LA190_0<=Super)||LA190_0==Union||(LA190_0>=Yield && LA190_0<=This)||(LA190_0>=From && LA190_0<=Void)||(LA190_0>=Get && LA190_0<=Set)||LA190_0==PlusSignPlusSign||(LA190_0>=HyphenMinusHyphenMinus && LA190_0<=SolidusEqualsSign)||LA190_0==As||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_HEX_INT && LA190_0<=RULE_LEGACY_OCTAL_INT)||LA190_0==RULE_SCIENTIFIC_INT||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_STRING||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_INT) ) {
                                        alt190=1;
                                    }
                                    switch (alt190) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_32_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_32_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_33=(Token)match(input,Semicolon,FOLLOW_84); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_33, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt192=2;
                            int LA192_0 = input.LA(1);
                            if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||(LA192_0>=Import && LA192_0<=Public)||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||(LA192_0>=HyphenMinusHyphenMinus && LA192_0<=SolidusEqualsSign)||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                alt192=1;
                            }
                            switch (alt192) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_2_1_0());
                                    }
                                    pushFollow(FOLLOW_85);
                                    lv_expression_34_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_34_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            otherlv_35=(Token)match(input,Semicolon,FOLLOW_81); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_35, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt193=2;
                            int LA193_0 = input.LA(1);
                            if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||(LA193_0>=Import && LA193_0<=Public)||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||(LA193_0>=HyphenMinusHyphenMinus && LA193_0<=SolidusEqualsSign)||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                alt193=1;
                            }
                            switch (alt193) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_2_3_0());
                                    }
                                    pushFollow(FOLLOW_72);
                                    lv_updateExpr_36_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_36_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_37, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_38_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_38_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ForStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_await_2_0=null;
        Token otherlv_3=null;
        Token lv_forIn_5_0=null;
        Token otherlv_7=null;
        Token lv_forIn_10_0=null;
        Token lv_forOf_11_0=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token lv_forIn_20_0=null;
        Token lv_forOf_22_0=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token lv_forIn_29_0=null;
        Token lv_forOf_31_0=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_initExpr_4_0 = null;
        EObject lv_expression_6_0 = null;
        Enumerator lv_varStmtKeyword_8_0 = null;
        EObject lv_varDeclsOrBindings_9_0 = null;
        EObject lv_expression_12_0 = null;
        EObject lv_varDeclsOrBindings_13_0 = null;
        EObject lv_varDeclsOrBindings_15_0 = null;
        EObject lv_expression_17_0 = null;
        EObject lv_updateExpr_19_0 = null;
        EObject lv_expression_21_0 = null;
        EObject lv_expression_23_0 = null;
        EObject lv_initExpr_24_0 = null;
        EObject lv_expression_26_0 = null;
        EObject lv_updateExpr_28_0 = null;
        EObject lv_expression_30_0 = null;
        EObject lv_expression_32_0 = null;
        EObject lv_expression_34_0 = null;
        EObject lv_updateExpr_36_0 = null;
        EObject lv_statement_38_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,For,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt196=2;
            int LA196_0 = input.LA(1);
            if ( (LA196_0==Await) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    {
                    {
                    lv_await_2_0=(Token)match(input,Await,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_await_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getForStatementRule());
                      					}
                      					setWithLastConsumed(current, "await", true, "await");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt214=2;
            alt214 = dfa214.predict(input);
            switch (alt214) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_4_0_0_0_0());
                    }
                    pushFollow(FOLLOW_79);
                    lv_initExpr_4_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_4_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_forIn_5_0=(Token)match(input,In,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								newLeafNode(lv_forIn_5_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", true, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0_0_2_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_expression_6_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_6_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt213=3;
                    alt213 = dfa213.predict(input);
                    switch (alt213) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_4_1_0_0_0_0());
                            }
                            pushFollow(FOLLOW_27);
                            lv_varStmtKeyword_8_0=ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_8_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt205=2;
                            alt205 = dfa205.predict(input);
                            switch (alt205) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0());
                                    }
                                    pushFollow(FOLLOW_80);
                                    lv_varDeclsOrBindings_9_0=norm2_BindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_9_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt197=2;
                                    int LA197_0 = input.LA(1);
                                    if ( (LA197_0==In) ) {
                                        alt197=1;
                                    }
                                    else if ( (LA197_0==Of) ) {
                                        alt197=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 197, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt197) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_10_0=(Token)match(input,In,FOLLOW_88); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_10_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_11_0=(Token)match(input,Of,FOLLOW_88); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_11_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt198=2;
                                    alt198 = dfa198.predict(input);
                                    switch (alt198) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_12_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_12_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0());
                                    }
                                    pushFollow(FOLLOW_82);
                                    lv_varDeclsOrBindings_13_0=norm6_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_13_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt204=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt204=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt204=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt204=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 204, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt204) {
                                        case 1 :
                                            {
                                            {
                                            loop199:
                                            do {
                                                int alt199=2;
                                                int LA199_0 = input.LA(1);
                                                if ( (LA199_0==Comma) ) {
                                                    alt199=1;
                                                }
                                                switch (alt199) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_14=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      												newLeafNode(otherlv_14, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {
                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0());
                                            	    }
                                            	    pushFollow(FOLLOW_83);
                                            	    lv_varDeclsOrBindings_15_0=norm2_VariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_15_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop199;
                                                }
                                            } while (true);
                                            otherlv_16=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_16, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt200=2;
                                            int LA200_0 = input.LA(1);
                                            if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||(LA200_0>=External && LA200_0<=Function)||(LA200_0>=Private && LA200_0<=Delete)||(LA200_0>=Import && LA200_0<=Public)||LA200_0==Static||(LA200_0>=Target && LA200_0<=Await)||LA200_0==Class||(LA200_0>=False && LA200_0<=Super)||LA200_0==Union||(LA200_0>=Yield && LA200_0<=This)||(LA200_0>=From && LA200_0<=Void)||(LA200_0>=Get && LA200_0<=Set)||LA200_0==PlusSignPlusSign||(LA200_0>=HyphenMinusHyphenMinus && LA200_0<=SolidusEqualsSign)||LA200_0==As||LA200_0==Of||LA200_0==ExclamationMark||LA200_0==LeftParenthesis||LA200_0==PlusSign||LA200_0==HyphenMinus||LA200_0==Solidus||LA200_0==LessThanSign||(LA200_0>=CommercialAt && LA200_0<=LeftSquareBracket)||LA200_0==LeftCurlyBracket||LA200_0==Tilde||LA200_0==RULE_DOUBLE||(LA200_0>=RULE_HEX_INT && LA200_0<=RULE_LEGACY_OCTAL_INT)||LA200_0==RULE_SCIENTIFIC_INT||LA200_0==RULE_IDENTIFIER||LA200_0==RULE_STRING||(LA200_0>=RULE_TEMPLATE_HEAD && LA200_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA200_0==RULE_INT) ) {
                                                alt200=1;
                                            }
                                            switch (alt200) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0());
                                                    }
                                                    pushFollow(FOLLOW_85);
                                                    lv_expression_17_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_17_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            otherlv_18=(Token)match(input,Semicolon,FOLLOW_88); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_18, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt201=2;
                                            int LA201_0 = input.LA(1);
                                            if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||(LA201_0>=External && LA201_0<=Function)||(LA201_0>=Private && LA201_0<=Delete)||(LA201_0>=Import && LA201_0<=Public)||LA201_0==Static||(LA201_0>=Target && LA201_0<=Await)||LA201_0==Class||(LA201_0>=False && LA201_0<=Super)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||(LA201_0>=From && LA201_0<=Void)||(LA201_0>=Get && LA201_0<=Set)||LA201_0==PlusSignPlusSign||(LA201_0>=HyphenMinusHyphenMinus && LA201_0<=SolidusEqualsSign)||LA201_0==As||LA201_0==Of||LA201_0==ExclamationMark||LA201_0==LeftParenthesis||LA201_0==PlusSign||LA201_0==HyphenMinus||LA201_0==Solidus||LA201_0==LessThanSign||(LA201_0>=CommercialAt && LA201_0<=LeftSquareBracket)||LA201_0==LeftCurlyBracket||LA201_0==Tilde||LA201_0==RULE_DOUBLE||(LA201_0>=RULE_HEX_INT && LA201_0<=RULE_LEGACY_OCTAL_INT)||LA201_0==RULE_SCIENTIFIC_INT||LA201_0==RULE_IDENTIFIER||LA201_0==RULE_STRING||(LA201_0>=RULE_TEMPLATE_HEAD && LA201_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA201_0==RULE_INT) ) {
                                                alt201=1;
                                            }
                                            switch (alt201) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0());
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_updateExpr_19_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_19_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_20_0=(Token)match(input,In,FOLLOW_88); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_20_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                            }
                                            }
                                            }
                                            int alt202=2;
                                            int LA202_0 = input.LA(1);
                                            if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||(LA202_0>=Import && LA202_0<=Public)||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||(LA202_0>=Get && LA202_0<=Set)||LA202_0==PlusSignPlusSign||(LA202_0>=HyphenMinusHyphenMinus && LA202_0<=SolidusEqualsSign)||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||LA202_0==PlusSign||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_HEX_INT && LA202_0<=RULE_LEGACY_OCTAL_INT)||LA202_0==RULE_SCIENTIFIC_INT||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_STRING||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_INT) ) {
                                                alt202=1;
                                            }
                                            switch (alt202) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0());
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_21_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_21_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_22_0=(Token)match(input,Of,FOLLOW_88); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_22_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                            }
                                            }
                                            }
                                            int alt203=2;
                                            int LA203_0 = input.LA(1);
                                            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||(LA203_0>=Import && LA203_0<=Public)||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||(LA203_0>=HyphenMinusHyphenMinus && LA203_0<=SolidusEqualsSign)||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                                alt203=1;
                                            }
                                            switch (alt203) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0());
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_23_0=norm3_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_23_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_4_1_0_1_0_0());
                            }
                            pushFollow(FOLLOW_86);
                            lv_initExpr_24_0=norm2_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_24_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt210=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt210=1;
                                }
                                break;
                            case In:
                                {
                                alt210=2;
                                }
                                break;
                            case Of:
                                {
                                alt210=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 210, 0, input);
                                throw nvae;
                            }
                            switch (alt210) {
                                case 1 :
                                    {
                                    {
                                    otherlv_25=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_25, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt206=2;
                                    int LA206_0 = input.LA(1);
                                    if ( ((LA206_0>=Intersection && LA206_0<=Implements)||(LA206_0>=Promisify && LA206_0<=Abstract)||(LA206_0>=External && LA206_0<=Function)||(LA206_0>=Private && LA206_0<=Delete)||(LA206_0>=Import && LA206_0<=Public)||LA206_0==Static||(LA206_0>=Target && LA206_0<=Await)||LA206_0==Class||(LA206_0>=False && LA206_0<=Super)||LA206_0==Union||(LA206_0>=Yield && LA206_0<=This)||(LA206_0>=From && LA206_0<=Void)||(LA206_0>=Get && LA206_0<=Set)||LA206_0==PlusSignPlusSign||(LA206_0>=HyphenMinusHyphenMinus && LA206_0<=SolidusEqualsSign)||LA206_0==As||LA206_0==Of||LA206_0==ExclamationMark||LA206_0==LeftParenthesis||LA206_0==PlusSign||LA206_0==HyphenMinus||LA206_0==Solidus||LA206_0==LessThanSign||(LA206_0>=CommercialAt && LA206_0<=LeftSquareBracket)||LA206_0==LeftCurlyBracket||LA206_0==Tilde||LA206_0==RULE_DOUBLE||(LA206_0>=RULE_HEX_INT && LA206_0<=RULE_LEGACY_OCTAL_INT)||LA206_0==RULE_SCIENTIFIC_INT||LA206_0==RULE_IDENTIFIER||LA206_0==RULE_STRING||(LA206_0>=RULE_TEMPLATE_HEAD && LA206_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA206_0==RULE_INT) ) {
                                        alt206=1;
                                    }
                                    switch (alt206) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0());
                                            }
                                            pushFollow(FOLLOW_85);
                                            lv_expression_26_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_26_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    otherlv_27=(Token)match(input,Semicolon,FOLLOW_88); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_27, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt207=2;
                                    int LA207_0 = input.LA(1);
                                    if ( ((LA207_0>=Intersection && LA207_0<=Implements)||(LA207_0>=Promisify && LA207_0<=Abstract)||(LA207_0>=External && LA207_0<=Function)||(LA207_0>=Private && LA207_0<=Delete)||(LA207_0>=Import && LA207_0<=Public)||LA207_0==Static||(LA207_0>=Target && LA207_0<=Await)||LA207_0==Class||(LA207_0>=False && LA207_0<=Super)||LA207_0==Union||(LA207_0>=Yield && LA207_0<=This)||(LA207_0>=From && LA207_0<=Void)||(LA207_0>=Get && LA207_0<=Set)||LA207_0==PlusSignPlusSign||(LA207_0>=HyphenMinusHyphenMinus && LA207_0<=SolidusEqualsSign)||LA207_0==As||LA207_0==Of||LA207_0==ExclamationMark||LA207_0==LeftParenthesis||LA207_0==PlusSign||LA207_0==HyphenMinus||LA207_0==Solidus||LA207_0==LessThanSign||(LA207_0>=CommercialAt && LA207_0<=LeftSquareBracket)||LA207_0==LeftCurlyBracket||LA207_0==Tilde||LA207_0==RULE_DOUBLE||(LA207_0>=RULE_HEX_INT && LA207_0<=RULE_LEGACY_OCTAL_INT)||LA207_0==RULE_SCIENTIFIC_INT||LA207_0==RULE_IDENTIFIER||LA207_0==RULE_STRING||(LA207_0>=RULE_TEMPLATE_HEAD && LA207_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA207_0==RULE_INT) ) {
                                        alt207=1;
                                    }
                                    switch (alt207) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_updateExpr_28_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_28_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_29_0=(Token)match(input,In,FOLLOW_88); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forIn_29_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", true, "in");
                                    }
                                    }
                                    }
                                    int alt208=2;
                                    int LA208_0 = input.LA(1);
                                    if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||(LA208_0>=External && LA208_0<=Function)||(LA208_0>=Private && LA208_0<=Delete)||(LA208_0>=Import && LA208_0<=Public)||LA208_0==Static||(LA208_0>=Target && LA208_0<=Await)||LA208_0==Class||(LA208_0>=False && LA208_0<=Super)||LA208_0==Union||(LA208_0>=Yield && LA208_0<=This)||(LA208_0>=From && LA208_0<=Void)||(LA208_0>=Get && LA208_0<=Set)||LA208_0==PlusSignPlusSign||(LA208_0>=HyphenMinusHyphenMinus && LA208_0<=SolidusEqualsSign)||LA208_0==As||LA208_0==Of||LA208_0==ExclamationMark||LA208_0==LeftParenthesis||LA208_0==PlusSign||LA208_0==HyphenMinus||LA208_0==Solidus||LA208_0==LessThanSign||(LA208_0>=CommercialAt && LA208_0<=LeftSquareBracket)||LA208_0==LeftCurlyBracket||LA208_0==Tilde||LA208_0==RULE_DOUBLE||(LA208_0>=RULE_HEX_INT && LA208_0<=RULE_LEGACY_OCTAL_INT)||LA208_0==RULE_SCIENTIFIC_INT||LA208_0==RULE_IDENTIFIER||LA208_0==RULE_STRING||(LA208_0>=RULE_TEMPLATE_HEAD && LA208_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA208_0==RULE_INT) ) {
                                        alt208=1;
                                    }
                                    switch (alt208) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_30_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_30_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_31_0=(Token)match(input,Of,FOLLOW_88); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forOf_31_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", true, "of");
                                    }
                                    }
                                    }
                                    int alt209=2;
                                    int LA209_0 = input.LA(1);
                                    if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||(LA209_0>=External && LA209_0<=Function)||(LA209_0>=Private && LA209_0<=Delete)||(LA209_0>=Import && LA209_0<=Public)||LA209_0==Static||(LA209_0>=Target && LA209_0<=Await)||LA209_0==Class||(LA209_0>=False && LA209_0<=Super)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||(LA209_0>=From && LA209_0<=Void)||(LA209_0>=Get && LA209_0<=Set)||LA209_0==PlusSignPlusSign||(LA209_0>=HyphenMinusHyphenMinus && LA209_0<=SolidusEqualsSign)||LA209_0==As||LA209_0==Of||LA209_0==ExclamationMark||LA209_0==LeftParenthesis||LA209_0==PlusSign||LA209_0==HyphenMinus||LA209_0==Solidus||LA209_0==LessThanSign||(LA209_0>=CommercialAt && LA209_0<=LeftSquareBracket)||LA209_0==LeftCurlyBracket||LA209_0==Tilde||LA209_0==RULE_DOUBLE||(LA209_0>=RULE_HEX_INT && LA209_0<=RULE_LEGACY_OCTAL_INT)||LA209_0==RULE_SCIENTIFIC_INT||LA209_0==RULE_IDENTIFIER||LA209_0==RULE_STRING||(LA209_0>=RULE_TEMPLATE_HEAD && LA209_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA209_0==RULE_INT) ) {
                                        alt209=1;
                                    }
                                    switch (alt209) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0());
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_32_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_32_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_33=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_33, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt211=2;
                            int LA211_0 = input.LA(1);
                            if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||(LA211_0>=Import && LA211_0<=Public)||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||(LA211_0>=HyphenMinusHyphenMinus && LA211_0<=SolidusEqualsSign)||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                                alt211=1;
                            }
                            switch (alt211) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_2_1_0());
                                    }
                                    pushFollow(FOLLOW_85);
                                    lv_expression_34_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_34_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            otherlv_35=(Token)match(input,Semicolon,FOLLOW_88); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_35, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt212=2;
                            int LA212_0 = input.LA(1);
                            if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||(LA212_0>=Import && LA212_0<=Public)||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||(LA212_0>=HyphenMinusHyphenMinus && LA212_0<=SolidusEqualsSign)||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||LA212_0==PlusSign||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                                alt212=1;
                            }
                            switch (alt212) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_2_3_0());
                                    }
                                    pushFollow(FOLLOW_72);
                                    lv_updateExpr_36_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_36_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_37, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_38_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_38_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLetIdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLetIdentifierRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetIdentifierRef=ruleLetIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLetIdentifierRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getLetIdentifierRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getLetIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLetAsIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLetAsIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetAsIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetAsIdentifier=ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetAsIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLetAsIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingIdentifierAsVariableDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsVariableDeclaration=ruleBindingIdentifierAsVariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleContinueStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleContinueStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContinueStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContinueStatement=ruleContinueStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContinueStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleContinueStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Continue,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt215=2;
            int LA215_0 = input.LA(1);
            if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||LA215_0==External||(LA215_0>=Private && LA215_0<=Project)||LA215_0==Public||LA215_0==Static||LA215_0==Target||(LA215_0>=Async && LA215_0<=Await)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||LA215_0==From||LA215_0==Type||(LA215_0>=Get && LA215_0<=Let)||(LA215_0>=Out && LA215_0<=Set)||LA215_0==As||LA215_0==Of||LA215_0==RULE_IDENTIFIER) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_18);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ContinueStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Continue,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||LA216_0==External||(LA216_0>=Private && LA216_0<=Project)||LA216_0==Public||LA216_0==Static||LA216_0==Target||(LA216_0>=Async && LA216_0<=Await)||LA216_0==Union||LA216_0==This||LA216_0==From||LA216_0==Type||(LA216_0>=Get && LA216_0<=Let)||(LA216_0>=Out && LA216_0<=Set)||LA216_0==As||LA216_0==Of||LA216_0==RULE_IDENTIFIER) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_18);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBreakStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBreakStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBreakStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBreakStatement=ruleBreakStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBreakStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBreakStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Break,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt217=2;
            int LA217_0 = input.LA(1);
            if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||LA217_0==External||(LA217_0>=Private && LA217_0<=Project)||LA217_0==Public||LA217_0==Static||LA217_0==Target||(LA217_0>=Async && LA217_0<=Await)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||LA217_0==From||LA217_0==Type||(LA217_0>=Get && LA217_0<=Let)||(LA217_0>=Out && LA217_0<=Set)||LA217_0==As||LA217_0==Of||LA217_0==RULE_IDENTIFIER) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_18);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BreakStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Break,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Abstract)||LA218_0==External||(LA218_0>=Private && LA218_0<=Project)||LA218_0==Public||LA218_0==Static||LA218_0==Target||(LA218_0>=Async && LA218_0<=Await)||LA218_0==Union||LA218_0==This||LA218_0==From||LA218_0==Type||(LA218_0>=Get && LA218_0<=Let)||(LA218_0>=Out && LA218_0<=Set)||LA218_0==As||LA218_0==Of||LA218_0==RULE_IDENTIFIER) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_18);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleReturnStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleReturnStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnStatement=ruleReturnStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleReturnStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Return,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt219=2;
            int LA219_0 = input.LA(1);
            if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Abstract)||(LA219_0>=External && LA219_0<=Function)||(LA219_0>=Private && LA219_0<=Delete)||(LA219_0>=Import && LA219_0<=Public)||LA219_0==Static||(LA219_0>=Target && LA219_0<=Await)||LA219_0==Class||(LA219_0>=False && LA219_0<=Super)||LA219_0==Union||(LA219_0>=Yield && LA219_0<=This)||(LA219_0>=From && LA219_0<=Void)||(LA219_0>=Get && LA219_0<=Set)||LA219_0==PlusSignPlusSign||(LA219_0>=HyphenMinusHyphenMinus && LA219_0<=SolidusEqualsSign)||LA219_0==As||LA219_0==Of||LA219_0==ExclamationMark||LA219_0==LeftParenthesis||LA219_0==PlusSign||LA219_0==HyphenMinus||LA219_0==Solidus||LA219_0==LessThanSign||(LA219_0>=CommercialAt && LA219_0<=LeftSquareBracket)||LA219_0==LeftCurlyBracket||LA219_0==Tilde||LA219_0==RULE_DOUBLE||(LA219_0>=RULE_HEX_INT && LA219_0<=RULE_LEGACY_OCTAL_INT)||LA219_0==RULE_SCIENTIFIC_INT||LA219_0==RULE_IDENTIFIER||LA219_0==RULE_STRING||(LA219_0>=RULE_TEMPLATE_HEAD && LA219_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA219_0==RULE_INT) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_2_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ReturnStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Return,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt220=2;
            int LA220_0 = input.LA(1);
            if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||(LA220_0>=External && LA220_0<=Function)||(LA220_0>=Private && LA220_0<=Delete)||(LA220_0>=Import && LA220_0<=Public)||LA220_0==Static||(LA220_0>=Target && LA220_0<=Await)||LA220_0==Class||(LA220_0>=False && LA220_0<=Super)||LA220_0==Union||(LA220_0>=Yield && LA220_0<=This)||(LA220_0>=From && LA220_0<=Void)||(LA220_0>=Get && LA220_0<=Set)||LA220_0==PlusSignPlusSign||(LA220_0>=HyphenMinusHyphenMinus && LA220_0<=SolidusEqualsSign)||LA220_0==As||LA220_0==Of||LA220_0==ExclamationMark||LA220_0==LeftParenthesis||LA220_0==PlusSign||LA220_0==HyphenMinus||LA220_0==Solidus||LA220_0==LessThanSign||(LA220_0>=CommercialAt && LA220_0<=LeftSquareBracket)||LA220_0==LeftCurlyBracket||LA220_0==Tilde||LA220_0==RULE_DOUBLE||(LA220_0>=RULE_HEX_INT && LA220_0<=RULE_LEGACY_OCTAL_INT)||LA220_0==RULE_SCIENTIFIC_INT||LA220_0==RULE_IDENTIFIER||LA220_0==RULE_STRING||(LA220_0>=RULE_TEMPLATE_HEAD && LA220_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA220_0==RULE_INT) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_2_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWithStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWithStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithStatement=ruleWithStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWithStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WithStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSwitchStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSwitchStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSwitchStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSwitchStatement=ruleSwitchStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSwitchStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSwitchStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;
        EObject lv_cases_5_0 = null;
        EObject lv_cases_6_0 = null;
        EObject lv_cases_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_93); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);
                if ( (LA221_0==Case) ) {
                    alt221=1;
                }
                switch (alt221) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	    }
            	    pushFollow(FOLLOW_93);
            	    lv_cases_5_0=ruleCaseClause();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop221;
                }
            } while (true);
            int alt223=2;
            int LA223_0 = input.LA(1);
            if ( (LA223_0==Default) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                    }
                    pushFollow(FOLLOW_94);
                    lv_cases_6_0=ruleDefaultClause();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop222:
                    do {
                        int alt222=2;
                        int LA222_0 = input.LA(1);
                        if ( (LA222_0==Case) ) {
                            alt222=1;
                        }
                        switch (alt222) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_94);
                    	    lv_cases_7_0=ruleCaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop222;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SwitchStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;
        EObject lv_cases_5_0 = null;
        EObject lv_cases_6_0 = null;
        EObject lv_cases_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_93); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);
                if ( (LA224_0==Case) ) {
                    alt224=1;
                }
                switch (alt224) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	    }
            	    pushFollow(FOLLOW_93);
            	    lv_cases_5_0=norm1_CaseClause();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop224;
                }
            } while (true);
            int alt226=2;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==Default) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                    }
                    pushFollow(FOLLOW_94);
                    lv_cases_6_0=norm1_DefaultClause();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop225:
                    do {
                        int alt225=2;
                        int LA225_0 = input.LA(1);
                        if ( (LA225_0==Case) ) {
                            alt225=1;
                        }
                        switch (alt225) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_94);
                    	    lv_cases_7_0=norm1_CaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop225;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCaseClause() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCaseClause = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseClause=ruleCaseClause();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCaseClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_95);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);
                if ( ((LA227_0>=Intersection && LA227_0<=Implements)||(LA227_0>=Promisify && LA227_0<=Function)||(LA227_0>=Private && LA227_0<=Delete)||(LA227_0>=Import && LA227_0<=Break)||(LA227_0>=Class && LA227_0<=This)||(LA227_0>=From && LA227_0<=With)||(LA227_0>=For && LA227_0<=Var)||LA227_0==PlusSignPlusSign||(LA227_0>=HyphenMinusHyphenMinus && LA227_0<=SolidusEqualsSign)||(LA227_0>=As && LA227_0<=If)||LA227_0==Of||LA227_0==ExclamationMark||LA227_0==LeftParenthesis||LA227_0==PlusSign||LA227_0==HyphenMinus||LA227_0==Solidus||(LA227_0>=Semicolon && LA227_0<=LessThanSign)||(LA227_0>=CommercialAt && LA227_0<=LeftSquareBracket)||LA227_0==LeftCurlyBracket||LA227_0==Tilde||LA227_0==RULE_DOUBLE||(LA227_0>=RULE_HEX_INT && LA227_0<=RULE_LEGACY_OCTAL_INT)||LA227_0==RULE_SCIENTIFIC_INT||LA227_0==RULE_IDENTIFIER||LA227_0==RULE_STRING||(LA227_0>=RULE_TEMPLATE_HEAD && LA227_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA227_0==RULE_INT) ) {
                    alt227=1;
                }
                switch (alt227) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop227;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CaseClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_95);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);
                if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Function)||(LA228_0>=Private && LA228_0<=Delete)||(LA228_0>=Import && LA228_0<=Break)||(LA228_0>=Class && LA228_0<=This)||(LA228_0>=From && LA228_0<=With)||(LA228_0>=For && LA228_0<=Var)||LA228_0==PlusSignPlusSign||(LA228_0>=HyphenMinusHyphenMinus && LA228_0<=SolidusEqualsSign)||(LA228_0>=As && LA228_0<=If)||LA228_0==Of||LA228_0==ExclamationMark||LA228_0==LeftParenthesis||LA228_0==PlusSign||LA228_0==HyphenMinus||LA228_0==Solidus||(LA228_0>=Semicolon && LA228_0<=LessThanSign)||(LA228_0>=CommercialAt && LA228_0<=LeftSquareBracket)||LA228_0==LeftCurlyBracket||LA228_0==Tilde||LA228_0==RULE_DOUBLE||(LA228_0>=RULE_HEX_INT && LA228_0<=RULE_LEGACY_OCTAL_INT)||LA228_0==RULE_SCIENTIFIC_INT||LA228_0==RULE_IDENTIFIER||LA228_0==RULE_STRING||(LA228_0>=RULE_TEMPLATE_HEAD && LA228_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA228_0==RULE_INT) ) {
                    alt228=1;
                }
                switch (alt228) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_56);
            	    lv_statements_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop228;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultClause() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDefaultClause = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultClause=ruleDefaultClause();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Default,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);
                if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Function)||(LA229_0>=Private && LA229_0<=Delete)||(LA229_0>=Import && LA229_0<=Break)||(LA229_0>=Class && LA229_0<=This)||(LA229_0>=From && LA229_0<=With)||(LA229_0>=For && LA229_0<=Var)||LA229_0==PlusSignPlusSign||(LA229_0>=HyphenMinusHyphenMinus && LA229_0<=SolidusEqualsSign)||(LA229_0>=As && LA229_0<=If)||LA229_0==Of||LA229_0==ExclamationMark||LA229_0==LeftParenthesis||LA229_0==PlusSign||LA229_0==HyphenMinus||LA229_0==Solidus||(LA229_0>=Semicolon && LA229_0<=LessThanSign)||(LA229_0>=CommercialAt && LA229_0<=LeftSquareBracket)||LA229_0==LeftCurlyBracket||LA229_0==Tilde||LA229_0==RULE_DOUBLE||(LA229_0>=RULE_HEX_INT && LA229_0<=RULE_LEGACY_OCTAL_INT)||LA229_0==RULE_SCIENTIFIC_INT||LA229_0==RULE_IDENTIFIER||LA229_0==RULE_STRING||(LA229_0>=RULE_TEMPLATE_HEAD && LA229_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA229_0==RULE_INT) ) {
                    alt229=1;
                }
                switch (alt229) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop229;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DefaultClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Default,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);
                if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Function)||(LA230_0>=Private && LA230_0<=Delete)||(LA230_0>=Import && LA230_0<=Break)||(LA230_0>=Class && LA230_0<=This)||(LA230_0>=From && LA230_0<=With)||(LA230_0>=For && LA230_0<=Var)||LA230_0==PlusSignPlusSign||(LA230_0>=HyphenMinusHyphenMinus && LA230_0<=SolidusEqualsSign)||(LA230_0>=As && LA230_0<=If)||LA230_0==Of||LA230_0==ExclamationMark||LA230_0==LeftParenthesis||LA230_0==PlusSign||LA230_0==HyphenMinus||LA230_0==Solidus||(LA230_0>=Semicolon && LA230_0<=LessThanSign)||(LA230_0>=CommercialAt && LA230_0<=LeftSquareBracket)||LA230_0==LeftCurlyBracket||LA230_0==Tilde||LA230_0==RULE_DOUBLE||(LA230_0>=RULE_HEX_INT && LA230_0<=RULE_LEGACY_OCTAL_INT)||LA230_0==RULE_SCIENTIFIC_INT||LA230_0==RULE_IDENTIFIER||LA230_0==RULE_STRING||(LA230_0>=RULE_TEMPLATE_HEAD && LA230_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA230_0==RULE_INT) ) {
                    alt230=1;
                }
                switch (alt230) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_56);
            	    lv_statements_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop230;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLabelledStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLabelledStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelledStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelledStatement=ruleLabelledStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelledStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLabelledStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_statement_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
            }
            pushFollow(FOLLOW_95);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LabelledStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_statement_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
            }
            pushFollow(FOLLOW_95);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThrowStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThrowStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThrowStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThrowStatement=ruleThrowStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThrowStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThrowStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_18);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ThrowStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_18);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTryStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTryStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTryStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTryStatement=ruleTryStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTryStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTryStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_block_1_0 = null;
        EObject lv_catch_2_0 = null;
        EObject lv_finally_3_0 = null;
        EObject lv_finally_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_96);
            lv_block_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==Catch) ) {
                alt232=1;
            }
            else if ( (LA232_0==Finally) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);
                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                    }
                    pushFollow(FOLLOW_97);
                    lv_catch_2_0=ruleCatchBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt231=2;
                    int LA231_0 = input.LA(1);
                    if ( (LA231_0==Finally) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=ruleFinallyBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=ruleFinallyBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TryStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_block_1_0 = null;
        EObject lv_catch_2_0 = null;
        EObject lv_finally_3_0 = null;
        EObject lv_finally_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_96);
            lv_block_1_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==Catch) ) {
                alt234=1;
            }
            else if ( (LA234_0==Finally) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);
                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                    }
                    pushFollow(FOLLOW_97);
                    lv_catch_2_0=norm1_CatchBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt233=2;
                    int LA233_0 = input.LA(1);
                    if ( (LA233_0==Finally) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=norm1_FinallyBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=norm1_FinallyBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCatchBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchBlock=ruleCatchBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;
        EObject lv_block_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_72);
            lv_catchVariable_3_0=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;
        EObject lv_block_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_72);
            lv_catchVariable_3_0=norm1_CatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCatchVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchVariable=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchVariable() throws RecognitionException {
        EObject current = null;
        EObject lv_bindingPattern_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject this_BogusTypeRefFragment_3 = null;
        AntlrDatatypeRuleToken lv_name_4_0 = null;
        	enterRule();
        try {
            {
            int alt236=3;
            alt236 = dfa236.predict(input);
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    int alt235=2;
                    alt235 = dfa235.predict(input);
                    switch (alt235) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getCatchVariableRule());
                              					}
                              					newCompositeNode(grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0());
                            }
                            pushFollow(FOLLOW_8);
                            this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_BogusTypeRefFragment_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_4_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchVariable() throws RecognitionException {
        EObject current = null;
        EObject lv_bindingPattern_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject this_BogusTypeRefFragment_3 = null;
        AntlrDatatypeRuleToken lv_name_4_0 = null;
        	enterRule();
        try {
            {
            int alt238=3;
            alt238 = dfa238.predict(input);
            switch (alt238) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    int alt237=2;
                    alt237 = dfa237.predict(input);
                    switch (alt237) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getCatchVariableRule());
                              					}
                              					newCompositeNode(grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0());
                            }
                            pushFollow(FOLLOW_8);
                            this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_BogusTypeRefFragment_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_4_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFinallyBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFinallyBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFinallyBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFinallyBlock=ruleFinallyBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFinallyBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFinallyBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_block_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FinallyBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_block_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDebuggerStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDebuggerStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDebuggerStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDebuggerStatement=ruleDebuggerStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDebuggerStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDebuggerStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDebuggerStatementAccess().getDebuggerStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Debugger,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePrimaryExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryExpression=rulePrimaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;
        EObject this_SuperLiteral_1 = null;
        EObject this_IdentifierRef_2 = null;
        EObject this_JSXFragment_3 = null;
        EObject this_JSXElement_4 = null;
        EObject this_ImportCallExpression_5 = null;
        EObject this_ParameterizedCallExpression_6 = null;
        EObject this_Literal_7 = null;
        EObject this_ArrayLiteral_8 = null;
        EObject this_ObjectLiteral_9 = null;
        EObject this_ParenExpression_10 = null;
        EObject this_AnnotatedExpression_11 = null;
        EObject this_FunctionExpression_12 = null;
        EObject this_AsyncFunctionExpression_13 = null;
        EObject this_N4ClassExpression_14 = null;
        EObject this_TemplateLiteral_15 = null;
        enterRule();
        try { 
        	{
            int alt239=16;
            // REPLACEMENT rulePrimaryExpression.java.replacement START
            try {
                alt239 = dfa239.predict(input);
            } catch (NoViableAltException re) {
            	int as = input.LA(1);
            	if (as==Async) { alt239=3; }
            	else throw re;
            }
            // REPLACEMENT rulePrimaryExpression.java.replacement END
            switch (alt239) {
                case 1 : 
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=ruleIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=ruleImportCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=ruleParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=ruleArrayLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=ruleObjectLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=ruleParenExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=ruleAnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=ruleN4ClassExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=ruleTemplateLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;
        EObject this_SuperLiteral_1 = null;
        EObject this_IdentifierRef_2 = null;
        EObject this_JSXFragment_3 = null;
        EObject this_JSXElement_4 = null;
        EObject this_ImportCallExpression_5 = null;
        EObject this_ParameterizedCallExpression_6 = null;
        EObject this_Literal_7 = null;
        EObject this_ArrayLiteral_8 = null;
        EObject this_ObjectLiteral_9 = null;
        EObject this_ParenExpression_10 = null;
        EObject this_AnnotatedExpression_11 = null;
        EObject this_FunctionExpression_12 = null;
        EObject this_AsyncFunctionExpression_13 = null;
        EObject this_N4ClassExpression_14 = null;
        EObject this_TemplateLiteral_15 = null;
        	enterRule();
        try {
            {
            int alt240=16;
            alt240 = dfa240.predict(input);
            switch (alt240) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=norm1_IdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=norm1_ImportCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=norm1_ParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=norm1_ArrayLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=norm1_ObjectLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=norm1_ParenExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=norm1_AnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=norm1_N4ClassExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=norm1_TemplateLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParenExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParenExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenExpression=ruleParenExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParenExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParenExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_72);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIdentifierRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierRef=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject this_VersionRequest_3 = null;
        	enterRule();
        try {
            {
            int alt241=2;
            alt241 = dfa241.predict(input);
            switch (alt241) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIdentifierRefRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getIdentifierRefAccess().getVersionedIdentifierRefAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifierRefRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_1_1_0());
                    }
                    pushFollow(FOLLOW_99);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getIdentifierRefRule());
                      				}
                      				newCompositeNode(grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VersionRequest_3=ruleVersionRequest(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VersionRequest_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject this_VersionRequest_3 = null;
        	enterRule();
        try {
            {
            int alt242=2;
            alt242 = dfa242.predict(input);
            switch (alt242) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIdentifierRefRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getIdentifierRefAccess().getVersionedIdentifierRefAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifierRefRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_1_1_0());
                    }
                    pushFollow(FOLLOW_99);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getIdentifierRefRule());
                      				}
                      				newCompositeNode(grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VersionRequest_3=ruleVersionRequest(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VersionRequest_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSuperLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSuperLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSuperLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSuperLiteral=ruleSuperLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSuperLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSuperLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisLiteral=ruleThisLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayLiteral=ruleArrayLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_100); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);
                if ( (LA243_0==Comma) ) {
                    alt243=1;
                }
                switch (alt243) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_100);
            	    lv_elements_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop243;
                }
            } while (true);
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( ((LA248_0>=Intersection && LA248_0<=Implements)||(LA248_0>=Promisify && LA248_0<=Abstract)||(LA248_0>=External && LA248_0<=Function)||(LA248_0>=Private && LA248_0<=Delete)||(LA248_0>=Import && LA248_0<=Public)||LA248_0==Static||(LA248_0>=Target && LA248_0<=Await)||LA248_0==Class||(LA248_0>=False && LA248_0<=Super)||LA248_0==Union||(LA248_0>=Yield && LA248_0<=This)||(LA248_0>=From && LA248_0<=Void)||LA248_0==FullStopFullStopFullStop||(LA248_0>=Get && LA248_0<=Set)||LA248_0==PlusSignPlusSign||(LA248_0>=HyphenMinusHyphenMinus && LA248_0<=SolidusEqualsSign)||LA248_0==As||LA248_0==Of||LA248_0==ExclamationMark||LA248_0==LeftParenthesis||LA248_0==PlusSign||LA248_0==HyphenMinus||LA248_0==Solidus||LA248_0==LessThanSign||(LA248_0>=CommercialAt && LA248_0<=LeftSquareBracket)||LA248_0==LeftCurlyBracket||LA248_0==Tilde||LA248_0==RULE_DOUBLE||(LA248_0>=RULE_HEX_INT && LA248_0<=RULE_LEGACY_OCTAL_INT)||LA248_0==RULE_SCIENTIFIC_INT||LA248_0==RULE_IDENTIFIER||LA248_0==RULE_STRING||(LA248_0>=RULE_TEMPLATE_HEAD && LA248_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA248_0==RULE_INT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_elements_3_0=ruleArrayElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop245:
                    do {
                        int alt245=2;
                        alt245 = dfa245.predict(input);
                        switch (alt245) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop244:
                    	    do {
                    	        int alt244=2;
                    	        int LA244_0 = input.LA(1);
                    	        if ( (LA244_0==Comma) ) {
                    	            alt244=1;
                    	        }
                    	        switch (alt244) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_102);
                    	    	    lv_elements_5_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop244;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_101);
                    	    lv_elements_6_0=ruleArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop245;
                        }
                    } while (true);
                    int alt247=2;
                    int LA247_0 = input.LA(1);
                    if ( (LA247_0==Comma) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", true, ",");
                            }
                            }
                            }
                            loop246:
                            do {
                                int alt246=2;
                                int LA246_0 = input.LA(1);
                                if ( (LA246_0==Comma) ) {
                                    alt246=1;
                                }
                                switch (alt246) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_101);
                            	    lv_elements_8_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop246;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_103); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);
                if ( (LA249_0==Comma) ) {
                    alt249=1;
                }
                switch (alt249) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_103);
            	    lv_elements_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop249;
                }
            } while (true);
            int alt254=2;
            int LA254_0 = input.LA(1);
            if ( ((LA254_0>=Intersection && LA254_0<=Implements)||(LA254_0>=Promisify && LA254_0<=Abstract)||(LA254_0>=External && LA254_0<=Function)||(LA254_0>=Private && LA254_0<=Delete)||(LA254_0>=Import && LA254_0<=Public)||LA254_0==Static||(LA254_0>=Target && LA254_0<=Await)||LA254_0==Class||(LA254_0>=False && LA254_0<=Super)||LA254_0==Union||(LA254_0>=Yield && LA254_0<=This)||(LA254_0>=From && LA254_0<=Void)||LA254_0==FullStopFullStopFullStop||(LA254_0>=Get && LA254_0<=Set)||LA254_0==PlusSignPlusSign||(LA254_0>=HyphenMinusHyphenMinus && LA254_0<=SolidusEqualsSign)||LA254_0==As||LA254_0==Of||LA254_0==ExclamationMark||LA254_0==LeftParenthesis||LA254_0==PlusSign||LA254_0==HyphenMinus||LA254_0==Solidus||LA254_0==LessThanSign||(LA254_0>=CommercialAt && LA254_0<=LeftSquareBracket)||LA254_0==LeftCurlyBracket||LA254_0==Tilde||LA254_0==RULE_DOUBLE||(LA254_0>=RULE_HEX_INT && LA254_0<=RULE_LEGACY_OCTAL_INT)||LA254_0==RULE_SCIENTIFIC_INT||LA254_0==RULE_IDENTIFIER||LA254_0==RULE_STRING||(LA254_0>=RULE_TEMPLATE_HEAD && LA254_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA254_0==RULE_INT) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_elements_3_0=norm1_ArrayElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop251:
                    do {
                        int alt251=2;
                        alt251 = dfa251.predict(input);
                        switch (alt251) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_104); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop250:
                    	    do {
                    	        int alt250=2;
                    	        int LA250_0 = input.LA(1);
                    	        if ( (LA250_0==Comma) ) {
                    	            alt250=1;
                    	        }
                    	        switch (alt250) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_104);
                    	    	    lv_elements_5_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop250;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_101);
                    	    lv_elements_6_0=norm1_ArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop251;
                        }
                    } while (true);
                    int alt253=2;
                    int LA253_0 = input.LA(1);
                    if ( (LA253_0==Comma) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", true, ",");
                            }
                            }
                            }
                            loop252:
                            do {
                                int alt252=2;
                                int LA252_0 = input.LA(1);
                                if ( (LA252_0==Comma) ) {
                                    alt252=1;
                                }
                                switch (alt252) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_101);
                            	    lv_elements_8_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop252;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayPadding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayPadding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayPaddingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayPadding=ruleArrayPadding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayPadding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayPadding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayPaddingAccess().getArrayPaddingAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayElement=ruleArrayElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayElement() throws RecognitionException {
        EObject current = null;
        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
            }
            }
            int alt255=2;
            int LA255_0 = input.LA(1);
            if ( (LA255_0==FullStopFullStopFullStop) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayElement() throws RecognitionException {
        EObject current = null;
        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
            }
            }
            int alt256=2;
            int LA256_0 = input.LA(1);
            if ( (LA256_0==FullStopFullStopFullStop) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleObjectLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectLiteral=ruleObjectLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;
        EObject lv_propertyAssignments_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( ((LA259_0>=Intersection && LA259_0<=With)||LA259_0==FullStopFullStopFullStop||(LA259_0>=For && LA259_0<=Var)||(LA259_0>=As && LA259_0<=Of)||LA259_0==LeftParenthesis||LA259_0==Asterisk||LA259_0==LessThanSign||(LA259_0>=QuestionMark && LA259_0<=LeftSquareBracket)||LA259_0==LeftCurlyBracket||LA259_0==Tilde||LA259_0==RULE_DOUBLE||(LA259_0>=RULE_HEX_INT && LA259_0<=RULE_OCTAL_INT)||LA259_0==RULE_SCIENTIFIC_INT||LA259_0==RULE_IDENTIFIER||LA259_0==RULE_STRING||LA259_0==RULE_INT) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_propertyAssignments_2_0=rulePropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop257:
                    do {
                        int alt257=2;
                        int LA257_0 = input.LA(1);
                        if ( (LA257_0==Comma) ) {
                            int LA257_1 = input.LA(2);
                            if ( ((LA257_1>=Intersection && LA257_1<=With)||LA257_1==FullStopFullStopFullStop||(LA257_1>=For && LA257_1<=Var)||(LA257_1>=As && LA257_1<=Of)||LA257_1==LeftParenthesis||LA257_1==Asterisk||LA257_1==LessThanSign||(LA257_1>=QuestionMark && LA257_1<=LeftSquareBracket)||LA257_1==LeftCurlyBracket||LA257_1==Tilde||LA257_1==RULE_DOUBLE||(LA257_1>=RULE_HEX_INT && LA257_1<=RULE_OCTAL_INT)||LA257_1==RULE_SCIENTIFIC_INT||LA257_1==RULE_IDENTIFIER||LA257_1==RULE_STRING||LA257_1==RULE_INT) ) {
                                alt257=1;
                            }
                        }
                        switch (alt257) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_106); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_propertyAssignments_4_0=rulePropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop257;
                        }
                    } while (true);
                    int alt258=2;
                    int LA258_0 = input.LA(1);
                    if ( (LA258_0==Comma) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;
        EObject lv_propertyAssignments_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt262=2;
            int LA262_0 = input.LA(1);
            if ( ((LA262_0>=Intersection && LA262_0<=With)||LA262_0==FullStopFullStopFullStop||(LA262_0>=For && LA262_0<=Var)||(LA262_0>=As && LA262_0<=Of)||LA262_0==LeftParenthesis||LA262_0==Asterisk||LA262_0==LessThanSign||(LA262_0>=QuestionMark && LA262_0<=LeftSquareBracket)||LA262_0==LeftCurlyBracket||LA262_0==Tilde||LA262_0==RULE_DOUBLE||(LA262_0>=RULE_HEX_INT && LA262_0<=RULE_OCTAL_INT)||LA262_0==RULE_SCIENTIFIC_INT||LA262_0==RULE_IDENTIFIER||LA262_0==RULE_STRING||LA262_0==RULE_INT) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_propertyAssignments_2_0=norm1_PropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);
                        if ( (LA260_0==Comma) ) {
                            int LA260_1 = input.LA(2);
                            if ( ((LA260_1>=Intersection && LA260_1<=With)||LA260_1==FullStopFullStopFullStop||(LA260_1>=For && LA260_1<=Var)||(LA260_1>=As && LA260_1<=Of)||LA260_1==LeftParenthesis||LA260_1==Asterisk||LA260_1==LessThanSign||(LA260_1>=QuestionMark && LA260_1<=LeftSquareBracket)||LA260_1==LeftCurlyBracket||LA260_1==Tilde||LA260_1==RULE_DOUBLE||(LA260_1>=RULE_HEX_INT && LA260_1<=RULE_OCTAL_INT)||LA260_1==RULE_SCIENTIFIC_INT||LA260_1==RULE_IDENTIFIER||LA260_1==RULE_STRING||LA260_1==RULE_INT) ) {
                                alt260=1;
                            }
                        }
                        switch (alt260) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_106); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_propertyAssignments_4_0=norm1_PropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop260;
                        }
                    } while (true);
                    int alt261=2;
                    int LA261_0 = input.LA(1);
                    if ( (LA261_0==Comma) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyAssignment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignment=rulePropertyAssignment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedPropertyAssignment_0 = null;
        EObject this_PropertyNameValuePair_1 = null;
        EObject this_PropertyGetterDeclaration_2 = null;
        EObject this_PropertySetterDeclaration_3 = null;
        EObject this_PropertyMethodDeclaration_4 = null;
        EObject this_PropertyNameValuePairSingleName_5 = null;
        EObject this_PropertySpread_6 = null;
        	enterRule();
        try {
            {
            int alt263=7;
            alt263 = dfa263.predict(input);
            switch (alt263) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=ruleAnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=rulePropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=rulePropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=rulePropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=rulePropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=rulePropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=rulePropertySpread();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedPropertyAssignment_0 = null;
        EObject this_PropertyNameValuePair_1 = null;
        EObject this_PropertyGetterDeclaration_2 = null;
        EObject this_PropertySetterDeclaration_3 = null;
        EObject this_PropertyMethodDeclaration_4 = null;
        EObject this_PropertyNameValuePairSingleName_5 = null;
        EObject this_PropertySpread_6 = null;
        	enterRule();
        try {
            {
            int alt264=7;
            alt264 = dfa264.predict(input);
            switch (alt264) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=norm1_AnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=norm1_PropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=norm1_PropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=norm1_PropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=norm1_PropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=norm1_PropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=norm1_PropertySpread();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedPropertyAssignment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedPropertyAssignment=ruleAnnotatedPropertyAssignment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedPropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_30=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;
        EObject lv_declaredTypeRef_2_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_expression_5_0 = null;
        EObject this_GetterHeader_7 = null;
        EObject lv_body_8_0 = null;
        EObject lv_declaredName_11_0 = null;
        EObject lv_fpar_14_0 = null;
        EObject lv_body_16_0 = null;
        EObject this_TypeVariables_18 = null;
        EObject lv_returnTypeRef_19_0 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsAndBody_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsAndBody_24 = null;
        EObject lv_declaredTypeRef_27_0 = null;
        EObject lv_expression_28_0 = null;
        EObject lv_expression_31_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_107);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt272=6;
            alt272 = dfa272.predict(input);
            switch (alt272) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    int alt265=2;
                    alt265 = dfa265.predict(input);
                    switch (alt265) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0());
                            }
                            pushFollow(FOLLOW_108);
                            lv_declaredTypeRef_2_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRef",
                              										lv_declaredTypeRef_2_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_GetterHeader_7=ruleGetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    otherlv_10=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                    }
                    pushFollow(FOLLOW_109);
                    lv_declaredName_11_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt266=2;
                    int LA266_0 = input.LA(1);
                    if ( (LA266_0==QuestionMark) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_14_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==LessThanSign) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_110);
                            this_TypeVariables_18=ruleTypeVariables(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt268=2;
                    alt268 = dfa268.predict(input);
                    switch (alt268) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0());
                            }
                            pushFollow(FOLLOW_110);
                            lv_returnTypeRef_19_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"returnTypeRef",
                              										lv_returnTypeRef_19_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt269=2;
                    int LA269_0 = input.LA(1);
                    if ( (LA269_0==Asterisk) ) {
                        alt269=1;
                    }
                    else if ( ((LA269_0>=Intersection && LA269_0<=With)||(LA269_0>=For && LA269_0<=Var)||(LA269_0>=As && LA269_0<=Of)||LA269_0==LeftSquareBracket||LA269_0==RULE_DOUBLE||(LA269_0>=RULE_HEX_INT && LA269_0<=RULE_OCTAL_INT)||LA269_0==RULE_SCIENTIFIC_INT||LA269_0==RULE_IDENTIFIER||LA269_0==RULE_STRING||LA269_0==RULE_INT) ) {
                        alt269=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 269, 0, input);
                        throw nvae;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                            }
                            pushFollow(FOLLOW_42);
                            lv_declaredName_23_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt270=2;
                    int LA270_0 = input.LA(1);
                    if ( (LA270_0==Semicolon) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    int alt271=2;
                    alt271 = dfa271.predict(input);
                    switch (alt271) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_4_1_0());
                            }
                            pushFollow(FOLLOW_112);
                            lv_declaredTypeRef_27_0=ruleTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRef",
                              								lv_declaredTypeRef_27_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_28_0=rulePropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_28_0,
                      								"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    otherlv_30=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_30, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_31_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_31_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_30=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;
        EObject lv_declaredTypeRef_2_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_expression_5_0 = null;
        EObject this_GetterHeader_7 = null;
        EObject lv_body_8_0 = null;
        EObject lv_declaredName_11_0 = null;
        EObject lv_fpar_14_0 = null;
        EObject lv_body_16_0 = null;
        EObject this_TypeVariables_18 = null;
        EObject lv_returnTypeRef_19_0 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsAndBody_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsAndBody_24 = null;
        EObject lv_declaredTypeRef_27_0 = null;
        EObject lv_expression_28_0 = null;
        EObject lv_expression_31_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_107);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt280=6;
            alt280 = dfa280.predict(input);
            switch (alt280) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    int alt273=2;
                    alt273 = dfa273.predict(input);
                    switch (alt273) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0());
                            }
                            pushFollow(FOLLOW_108);
                            lv_declaredTypeRef_2_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRef",
                              										lv_declaredTypeRef_2_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                    }
                    pushFollow(FOLLOW_13);
                    this_GetterHeader_7=norm1_GetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    otherlv_10=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                    }
                    pushFollow(FOLLOW_109);
                    lv_declaredName_11_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt274=2;
                    int LA274_0 = input.LA(1);
                    if ( (LA274_0==QuestionMark) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_14_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt275=2;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==LessThanSign) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_110);
                            this_TypeVariables_18=ruleTypeVariables(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt276=2;
                    alt276 = dfa276.predict(input);
                    switch (alt276) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0());
                            }
                            pushFollow(FOLLOW_110);
                            lv_returnTypeRef_19_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"returnTypeRef",
                              										lv_returnTypeRef_19_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt277=2;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==Asterisk) ) {
                        alt277=1;
                    }
                    else if ( ((LA277_0>=Intersection && LA277_0<=With)||(LA277_0>=For && LA277_0<=Var)||(LA277_0>=As && LA277_0<=Of)||LA277_0==LeftSquareBracket||LA277_0==RULE_DOUBLE||(LA277_0>=RULE_HEX_INT && LA277_0<=RULE_OCTAL_INT)||LA277_0==RULE_SCIENTIFIC_INT||LA277_0==RULE_IDENTIFIER||LA277_0==RULE_STRING||LA277_0==RULE_INT) ) {
                        alt277=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 0, input);
                        throw nvae;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                            }
                            pushFollow(FOLLOW_42);
                            lv_declaredName_23_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==Semicolon) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    int alt279=2;
                    alt279 = dfa279.predict(input);
                    switch (alt279) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_4_1_0());
                            }
                            pushFollow(FOLLOW_112);
                            lv_declaredTypeRef_27_0=ruleTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRef",
                              								lv_declaredTypeRef_27_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_28_0=norm1_PropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_28_0,
                      								"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    otherlv_30=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_30, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_31_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_31_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyMethodDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyMethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyMethodDeclaration=rulePropertyMethodDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyMethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        EObject this_TypeVariables_1 = null;
        EObject lv_returnTypeRef_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( (LA281_0==LessThanSign) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_110);
                    this_TypeVariables_1=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt282=2;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_110);
                    lv_returnTypeRef_2_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"returnTypeRef",
                      								lv_returnTypeRef_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_110);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt283=2;
            int LA283_0 = input.LA(1);
            if ( (LA283_0==Asterisk) ) {
                alt283=1;
            }
            else if ( ((LA283_0>=Intersection && LA283_0<=With)||(LA283_0>=For && LA283_0<=Var)||(LA283_0>=As && LA283_0<=Of)||LA283_0==LeftSquareBracket||LA283_0==RULE_DOUBLE||(LA283_0>=RULE_HEX_INT && LA283_0<=RULE_OCTAL_INT)||LA283_0==RULE_SCIENTIFIC_INT||LA283_0==RULE_IDENTIFIER||LA283_0==RULE_STRING||LA283_0==RULE_INT) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsAndBody_6=norm1_MethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_42);
                    lv_declaredName_7_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsAndBody_8=ruleMethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==Semicolon) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        EObject this_TypeVariables_1 = null;
        EObject lv_returnTypeRef_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==LessThanSign) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_110);
                    this_TypeVariables_1=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt286=2;
            alt286 = dfa286.predict(input);
            switch (alt286) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_110);
                    lv_returnTypeRef_2_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"returnTypeRef",
                      								lv_returnTypeRef_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_110);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt287=2;
            int LA287_0 = input.LA(1);
            if ( (LA287_0==Asterisk) ) {
                alt287=1;
            }
            else if ( ((LA287_0>=Intersection && LA287_0<=With)||(LA287_0>=For && LA287_0<=Var)||(LA287_0>=As && LA287_0<=Of)||LA287_0==LeftSquareBracket||LA287_0==RULE_DOUBLE||(LA287_0>=RULE_HEX_INT && LA287_0<=RULE_OCTAL_INT)||LA287_0==RULE_SCIENTIFIC_INT||LA287_0==RULE_IDENTIFIER||LA287_0==RULE_STRING||LA287_0==RULE_INT) ) {
                alt287=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);
                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsAndBody_6=norm1_MethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_42);
                    lv_declaredName_7_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsAndBody_8=ruleMethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt288=2;
            int LA288_0 = input.LA(1);
            if ( (LA288_0==Semicolon) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePair = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePair=rulePropertyNameValuePair();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePair; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRef_1_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
            }
            }
            int alt289=2;
            alt289 = dfa289.predict(input);
            switch (alt289) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0());
                    }
                    pushFollow(FOLLOW_108);
                    lv_declaredTypeRef_1_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRef",
                      								lv_declaredTypeRef_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_113);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            int alt290=2;
            int LA290_0 = input.LA(1);
            if ( (LA290_0==QuestionMark) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_95); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRef_1_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
            }
            }
            int alt291=2;
            alt291 = dfa291.predict(input);
            switch (alt291) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0());
                    }
                    pushFollow(FOLLOW_108);
                    lv_declaredTypeRef_1_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRef",
                      								lv_declaredTypeRef_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_113);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            int alt292=2;
            int LA292_0 = input.LA(1);
            if ( (LA292_0==QuestionMark) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_95); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePairSingleName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleName=rulePropertyNameValuePairSingleName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject lv_declaredTypeRef_0_0 = null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt293=2;
            alt293 = dfa293.predict(input);
            switch (alt293) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefTypeRefParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_112);
                    lv_declaredTypeRef_0_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRef",
                      						lv_declaredTypeRef_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject lv_declaredTypeRef_0_0 = null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt294=2;
            alt294 = dfa294.predict(input);
            switch (alt294) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefTypeRefParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_112);
                    lv_declaredTypeRef_0_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRef",
                      						lv_declaredTypeRef_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_PropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePairSingleNamePart = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleNamePart=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleNamePart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_63);
            this_IdentifierRef_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            int alt295=2;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==EqualsSign) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getAssignmentExpressionLhsAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_49);
                    lv_op_2_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentOperatorOnlyAssign");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_63);
            this_IdentifierRef_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            int alt296=2;
            int LA296_0 = input.LA(1);
            if ( (LA296_0==EqualsSign) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getAssignmentExpressionLhsAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_op_2_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentOperatorOnlyAssign");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyGetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyGetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyGetterDeclaration=rulePropertyGetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyGetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_GetterHeader_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_13);
            this_GetterHeader_1=ruleGetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_GetterHeader_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_13);
            this_GetterHeader_1=norm1_GetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertySetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySetterDeclaration=rulePropertySetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_fpar_5_0 = null;
        EObject lv_body_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_109);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt297=2;
            int LA297_0 = input.LA(1);
            if ( (LA297_0==QuestionMark) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_72);
            lv_fpar_5_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_fpar_5_0 = null;
        EObject lv_body_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_109);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt298=2;
            int LA298_0 = input.LA(1);
            if ( (LA298_0==QuestionMark) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_72);
            lv_fpar_5_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySpread() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertySpread = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySpreadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySpread=rulePropertySpread();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySpread; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySpread() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySpread() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedCallExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedCallExpression=ruleParameterizedCallExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;
        EObject lv_target_1_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
            }
            pushFollow(FOLLOW_8);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_114);
            lv_target_1_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==QuestionMarkFullStop) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;
        EObject lv_target_1_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
            }
            pushFollow(FOLLOW_8);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_114);
            lv_target_1_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt300=2;
            int LA300_0 = input.LA(1);
            if ( (LA300_0==QuestionMarkFullStop) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConcreteTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;
        EObject lv_typeArgs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getConcreteTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_115);
            lv_typeArgs_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop301:
            do {
                int alt301=2;
                int LA301_0 = input.LA(1);
                if ( (LA301_0==Comma) ) {
                    alt301=1;
                }
                switch (alt301) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getConcreteTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeRefParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_115);
            	    lv_typeArgs_3_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop301;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getConcreteTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportCallExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleImportCallExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportCallExpression=ruleImportCallExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportCallExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_114); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=ruleArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ImportCallExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_114); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=norm1_ArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLeftHandSideExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftHandSideExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftHandSideExpression=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftHandSideExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        EObject this_ArgumentsWithParentheses_6 = null;
        EObject this_IndexedAccessExpressionTail_8 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;
        EObject lv_template_13_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_116);
            this_MemberExpression_0=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==QuestionMarkFullStop||LA306_0==LeftParenthesis) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                    }
                    }
                    int alt302=2;
                    int LA302_0 = input.LA(1);
                    if ( (LA302_0==QuestionMarkFullStop) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", true, "?.");
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_117);
                    this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                    }
                    loop305:
                    do {
                        int alt305=5;
                        int LA305_0 = input.LA(1);
                        if ( (LA305_0==QuestionMarkFullStop) ) {
                            int LA305_2 = input.LA(2);
                            if ( (LA305_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred172_InternalN4JSParser())) {
                                alt305=4;
                            }
                            else if ( (LA305_2==RULE_TEMPLATE_HEAD) && (synpred172_InternalN4JSParser())) {
                                alt305=4;
                            }
                            else if ( ((LA305_2>=Intersection && LA305_2<=With)||(LA305_2>=For && LA305_2<=Var)||(LA305_2>=As && LA305_2<=Of)||LA305_2==LessThanSign||LA305_2==RULE_IDENTIFIER) ) {
                                alt305=3;
                            }
                            else if ( (LA305_2==LeftParenthesis) ) {
                                alt305=1;
                            }
                            else if ( (LA305_2==LeftSquareBracket) ) {
                                alt305=2;
                            }
                        }
                        else if ( (LA305_0==LeftParenthesis) ) {
                            alt305=1;
                        }
                        else if ( (LA305_0==LeftSquareBracket) ) {
                            alt305=2;
                        }
                        else if ( (LA305_0==FullStop) ) {
                            alt305=3;
                        }
                        else if ( (LA305_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred172_InternalN4JSParser())) {
                            alt305=4;
                        }
                        else if ( (LA305_0==RULE_TEMPLATE_HEAD) && (synpred172_InternalN4JSParser())) {
                            alt305=4;
                        }
                        switch (alt305) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt303=2;
                    	    int LA303_0 = input.LA(1);
                    	    if ( (LA303_0==QuestionMarkFullStop) ) {
                    	        alt303=1;
                    	    }
                    	    switch (alt303) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_ArgumentsWithParentheses_6=ruleArgumentsWithParentheses(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_IndexedAccessExpressionTail_8=ruleIndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=ruleParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	    }
                    	    }
                    	    int alt304=2;
                    	    int LA304_0 = input.LA(1);
                    	    if ( (LA304_0==QuestionMarkFullStop) ) {
                    	        alt304=1;
                    	    }
                    	    switch (alt304) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_118); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    lv_template_13_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop305;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        EObject this_ArgumentsWithParentheses_6 = null;
        EObject this_IndexedAccessExpressionTail_8 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;
        EObject lv_template_13_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_116);
            this_MemberExpression_0=norm1_MemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt311=2;
            int LA311_0 = input.LA(1);
            if ( (LA311_0==QuestionMarkFullStop||LA311_0==LeftParenthesis) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                    }
                    }
                    int alt307=2;
                    int LA307_0 = input.LA(1);
                    if ( (LA307_0==QuestionMarkFullStop) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", true, "?.");
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_117);
                    this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                    }
                    loop310:
                    do {
                        int alt310=5;
                        int LA310_0 = input.LA(1);
                        if ( (LA310_0==QuestionMarkFullStop) ) {
                            int LA310_2 = input.LA(2);
                            if ( (LA310_2==LeftParenthesis) ) {
                                alt310=1;
                            }
                            else if ( (LA310_2==LeftSquareBracket) ) {
                                alt310=2;
                            }
                            else if ( ((LA310_2>=Intersection && LA310_2<=With)||(LA310_2>=For && LA310_2<=Var)||(LA310_2>=As && LA310_2<=Of)||LA310_2==LessThanSign||LA310_2==RULE_IDENTIFIER) ) {
                                alt310=3;
                            }
                            else if ( (LA310_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred173_InternalN4JSParser())) {
                                alt310=4;
                            }
                            else if ( (LA310_2==RULE_TEMPLATE_HEAD) && (synpred173_InternalN4JSParser())) {
                                alt310=4;
                            }
                        }
                        else if ( (LA310_0==LeftParenthesis) ) {
                            alt310=1;
                        }
                        else if ( (LA310_0==LeftSquareBracket) ) {
                            alt310=2;
                        }
                        else if ( (LA310_0==FullStop) ) {
                            alt310=3;
                        }
                        else if ( (LA310_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred173_InternalN4JSParser())) {
                            alt310=4;
                        }
                        else if ( (LA310_0==RULE_TEMPLATE_HEAD) && (synpred173_InternalN4JSParser())) {
                            alt310=4;
                        }
                        switch (alt310) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt308=2;
                    	    int LA308_0 = input.LA(1);
                    	    if ( (LA308_0==QuestionMarkFullStop) ) {
                    	        alt308=1;
                    	    }
                    	    switch (alt308) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_ArgumentsWithParentheses_6=norm1_ArgumentsWithParentheses(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_IndexedAccessExpressionTail_8=norm1_IndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=norm1_ParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	    }
                    	    }
                    	    int alt309=2;
                    	    int LA309_0 = input.LA(1);
                    	    if ( (LA309_0==QuestionMarkFullStop) ) {
                    	        alt309=1;
                    	    }
                    	    switch (alt309) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_118); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    lv_template_13_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop310;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_119); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( ((LA312_0>=Intersection && LA312_0<=Implements)||(LA312_0>=Promisify && LA312_0<=Abstract)||(LA312_0>=External && LA312_0<=Function)||(LA312_0>=Private && LA312_0<=Delete)||(LA312_0>=Import && LA312_0<=Public)||LA312_0==Static||(LA312_0>=Target && LA312_0<=Await)||LA312_0==Class||(LA312_0>=False && LA312_0<=Super)||LA312_0==Union||(LA312_0>=Yield && LA312_0<=This)||(LA312_0>=From && LA312_0<=Void)||LA312_0==FullStopFullStopFullStop||(LA312_0>=Get && LA312_0<=Set)||LA312_0==PlusSignPlusSign||(LA312_0>=HyphenMinusHyphenMinus && LA312_0<=SolidusEqualsSign)||LA312_0==As||LA312_0==Of||LA312_0==ExclamationMark||LA312_0==LeftParenthesis||LA312_0==PlusSign||LA312_0==HyphenMinus||LA312_0==Solidus||LA312_0==LessThanSign||(LA312_0>=CommercialAt && LA312_0<=LeftSquareBracket)||LA312_0==LeftCurlyBracket||LA312_0==Tilde||LA312_0==RULE_DOUBLE||(LA312_0>=RULE_HEX_INT && LA312_0<=RULE_LEGACY_OCTAL_INT)||LA312_0==RULE_SCIENTIFIC_INT||LA312_0==RULE_IDENTIFIER||LA312_0==RULE_STRING||(LA312_0>=RULE_TEMPLATE_HEAD && LA312_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA312_0==RULE_INT) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_72);
                    this_Arguments_1=ruleArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_120); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( ((LA313_0>=Intersection && LA313_0<=Implements)||(LA313_0>=Promisify && LA313_0<=Abstract)||(LA313_0>=External && LA313_0<=Function)||(LA313_0>=Private && LA313_0<=Delete)||(LA313_0>=Import && LA313_0<=Public)||LA313_0==Static||(LA313_0>=Target && LA313_0<=Await)||LA313_0==Class||(LA313_0>=False && LA313_0<=Super)||LA313_0==Union||(LA313_0>=Yield && LA313_0<=This)||(LA313_0>=From && LA313_0<=Void)||LA313_0==FullStopFullStopFullStop||(LA313_0>=Get && LA313_0<=Set)||LA313_0==PlusSignPlusSign||(LA313_0>=HyphenMinusHyphenMinus && LA313_0<=SolidusEqualsSign)||LA313_0==As||LA313_0==Of||LA313_0==ExclamationMark||LA313_0==LeftParenthesis||LA313_0==PlusSign||LA313_0==HyphenMinus||LA313_0==Solidus||LA313_0==LessThanSign||(LA313_0>=CommercialAt && LA313_0<=LeftSquareBracket)||LA313_0==LeftCurlyBracket||LA313_0==Tilde||LA313_0==RULE_DOUBLE||(LA313_0>=RULE_HEX_INT && LA313_0<=RULE_LEGACY_OCTAL_INT)||LA313_0==RULE_SCIENTIFIC_INT||LA313_0==RULE_IDENTIFIER||LA313_0==RULE_STRING||(LA313_0>=RULE_TEMPLATE_HEAD && LA313_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA313_0==RULE_INT) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_72);
                    this_Arguments_1=norm1_Arguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;
        EObject lv_arguments_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_30);
            lv_arguments_0_0=ruleArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop314:
            do {
                int alt314=2;
                int LA314_0 = input.LA(1);
                if ( (LA314_0==Comma) ) {
                    alt314=1;
                }
                switch (alt314) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_121); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_arguments_2_0=ruleArgument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop314;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Arguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;
        EObject lv_arguments_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_30);
            lv_arguments_0_0=norm1_Argument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop315:
            do {
                int alt315=2;
                int LA315_0 = input.LA(1);
                if ( (LA315_0==Comma) ) {
                    alt315=1;
                }
                switch (alt315) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_122); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_arguments_2_0=norm1_Argument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop315;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArgument=ruleArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgument() throws RecognitionException {
        EObject current = null;
        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( (LA316_0==FullStopFullStopFullStop) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Argument() throws RecognitionException {
        EObject current = null;
        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt317=2;
            int LA317_0 = input.LA(1);
            if ( (LA317_0==FullStopFullStopFullStop) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMemberExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleMemberExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMemberExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMemberExpression=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMemberExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMemberExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;
        EObject this_ConcreteTypeArguments_7 = null;
        EObject this_Arguments_9 = null;
        EObject this_IndexedAccessExpressionTail_12 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;
        EObject lv_template_17_0 = null;
        EObject this_PrimaryExpression_18 = null;
        EObject this_IndexedAccessExpressionTail_20 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;
        EObject lv_template_25_0 = null;
        	enterRule();
        try {
            {
            int alt325=3;
            alt325 = dfa325.predict(input);
            switch (alt325) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_1=(Token)match(input,New,FOLLOW_123); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_124); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_5=(Token)match(input,New,FOLLOW_118); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_125);
                    lv_callee_6_0=ruleMemberExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt318=2;
                    int LA318_0 = input.LA(1);
                    if ( (LA318_0==LessThanSign) ) {
                        int LA318_1 = input.LA(2);
                        if ( (synpred176_InternalN4JSParser()) ) {
                            alt318=1;
                        }
                    }
                    switch (alt318) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                            }
                            pushFollow(FOLLOW_126);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt322=2;
                    int LA322_0 = input.LA(1);
                    if ( (LA322_0==LeftParenthesis) ) {
                        int LA322_1 = input.LA(2);
                        if ( (synpred177_InternalN4JSParser()) ) {
                            alt322=1;
                        }
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_119); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", true, "(");
                            }
                            }
                            }
                            int alt319=2;
                            int LA319_0 = input.LA(1);
                            if ( ((LA319_0>=Intersection && LA319_0<=Implements)||(LA319_0>=Promisify && LA319_0<=Abstract)||(LA319_0>=External && LA319_0<=Function)||(LA319_0>=Private && LA319_0<=Delete)||(LA319_0>=Import && LA319_0<=Public)||LA319_0==Static||(LA319_0>=Target && LA319_0<=Await)||LA319_0==Class||(LA319_0>=False && LA319_0<=Super)||LA319_0==Union||(LA319_0>=Yield && LA319_0<=This)||(LA319_0>=From && LA319_0<=Void)||LA319_0==FullStopFullStopFullStop||(LA319_0>=Get && LA319_0<=Set)||LA319_0==PlusSignPlusSign||(LA319_0>=HyphenMinusHyphenMinus && LA319_0<=SolidusEqualsSign)||LA319_0==As||LA319_0==Of||LA319_0==ExclamationMark||LA319_0==LeftParenthesis||LA319_0==PlusSign||LA319_0==HyphenMinus||LA319_0==Solidus||LA319_0==LessThanSign||(LA319_0>=CommercialAt && LA319_0<=LeftSquareBracket)||LA319_0==LeftCurlyBracket||LA319_0==Tilde||LA319_0==RULE_DOUBLE||(LA319_0>=RULE_HEX_INT && LA319_0<=RULE_LEGACY_OCTAL_INT)||LA319_0==RULE_SCIENTIFIC_INT||LA319_0==RULE_IDENTIFIER||LA319_0==RULE_STRING||(LA319_0>=RULE_TEMPLATE_HEAD && LA319_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA319_0==RULE_INT) ) {
                                alt319=1;
                            }
                            switch (alt319) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                    }
                                    pushFollow(FOLLOW_72);
                                    this_Arguments_9=ruleArguments(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_117); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop321:
                            do {
                                int alt321=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt321=2;
                                        }
                                        break;
                                    case LeftSquareBracket:
                                        {
                                        alt321=1;
                                        }
                                        break;
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt321=3;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt321=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt321=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt321=3;
                                    }
                                    break;
                                }
                                switch (alt321) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	    }
                            	    pushFollow(FOLLOW_117);
                            	    this_IndexedAccessExpressionTail_12=ruleIndexedAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	    }
                            	    pushFollow(FOLLOW_117);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=ruleParameterizedPropertyAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	    }
                            	    }
                            	    int alt320=2;
                            	    int LA320_0 = input.LA(1);
                            	    if ( (LA320_0==QuestionMarkFullStop) ) {
                            	        alt320=1;
                            	    }
                            	    switch (alt320) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_118); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {
                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            if ( state.backtracking==0 ) {
                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	    }
                            	    pushFollow(FOLLOW_117);
                            	    lv_template_17_0=ruleTemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop321;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_117);
                    this_PrimaryExpression_18=rulePrimaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                    }
                    loop324:
                    do {
                        int alt324=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt324=2;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt324=1;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt324=3;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt324=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt324=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt324=3;
                            }
                            break;
                        }
                        switch (alt324) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_IndexedAccessExpressionTail_20=ruleIndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=ruleParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt323=2;
                    	    int LA323_0 = input.LA(1);
                    	    if ( (LA323_0==QuestionMarkFullStop) ) {
                    	        alt323=1;
                    	    }
                    	    switch (alt323) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_118); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    lv_template_25_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop324;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MemberExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;
        EObject this_ConcreteTypeArguments_7 = null;
        EObject this_Arguments_9 = null;
        EObject this_IndexedAccessExpressionTail_12 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;
        EObject lv_template_17_0 = null;
        EObject this_PrimaryExpression_18 = null;
        EObject this_IndexedAccessExpressionTail_20 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;
        EObject lv_template_25_0 = null;
        	enterRule();
        try {
            {
            int alt333=3;
            alt333 = dfa333.predict(input);
            switch (alt333) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_1=(Token)match(input,New,FOLLOW_123); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_124); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_5=(Token)match(input,New,FOLLOW_118); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_125);
                    lv_callee_6_0=norm1_MemberExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt326=2;
                    int LA326_0 = input.LA(1);
                    if ( (LA326_0==LessThanSign) ) {
                        int LA326_1 = input.LA(2);
                        if ( (synpred180_InternalN4JSParser()) ) {
                            alt326=1;
                        }
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                            }
                            pushFollow(FOLLOW_126);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt330=2;
                    int LA330_0 = input.LA(1);
                    if ( (LA330_0==LeftParenthesis) ) {
                        int LA330_1 = input.LA(2);
                        if ( (synpred181_InternalN4JSParser()) ) {
                            alt330=1;
                        }
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_120); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", true, "(");
                            }
                            }
                            }
                            int alt327=2;
                            int LA327_0 = input.LA(1);
                            if ( ((LA327_0>=Intersection && LA327_0<=Implements)||(LA327_0>=Promisify && LA327_0<=Abstract)||(LA327_0>=External && LA327_0<=Function)||(LA327_0>=Private && LA327_0<=Delete)||(LA327_0>=Import && LA327_0<=Public)||LA327_0==Static||(LA327_0>=Target && LA327_0<=Await)||LA327_0==Class||(LA327_0>=False && LA327_0<=Super)||LA327_0==Union||(LA327_0>=Yield && LA327_0<=This)||(LA327_0>=From && LA327_0<=Void)||LA327_0==FullStopFullStopFullStop||(LA327_0>=Get && LA327_0<=Set)||LA327_0==PlusSignPlusSign||(LA327_0>=HyphenMinusHyphenMinus && LA327_0<=SolidusEqualsSign)||LA327_0==As||LA327_0==Of||LA327_0==ExclamationMark||LA327_0==LeftParenthesis||LA327_0==PlusSign||LA327_0==HyphenMinus||LA327_0==Solidus||LA327_0==LessThanSign||(LA327_0>=CommercialAt && LA327_0<=LeftSquareBracket)||LA327_0==LeftCurlyBracket||LA327_0==Tilde||LA327_0==RULE_DOUBLE||(LA327_0>=RULE_HEX_INT && LA327_0<=RULE_LEGACY_OCTAL_INT)||LA327_0==RULE_SCIENTIFIC_INT||LA327_0==RULE_IDENTIFIER||LA327_0==RULE_STRING||(LA327_0>=RULE_TEMPLATE_HEAD && LA327_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA327_0==RULE_INT) ) {
                                alt327=1;
                            }
                            switch (alt327) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                    }
                                    pushFollow(FOLLOW_72);
                                    this_Arguments_9=norm1_Arguments(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_117); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop329:
                            do {
                                int alt329=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt329=3;
                                        }
                                        break;
                                    case LeftSquareBracket:
                                        {
                                        alt329=1;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt329=2;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt329=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt329=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt329=3;
                                    }
                                    break;
                                }
                                switch (alt329) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	    }
                            	    pushFollow(FOLLOW_117);
                            	    this_IndexedAccessExpressionTail_12=norm1_IndexedAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	    }
                            	    pushFollow(FOLLOW_117);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=norm1_ParameterizedPropertyAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	    }
                            	    }
                            	    int alt328=2;
                            	    int LA328_0 = input.LA(1);
                            	    if ( (LA328_0==QuestionMarkFullStop) ) {
                            	        alt328=1;
                            	    }
                            	    switch (alt328) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_118); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {
                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            if ( state.backtracking==0 ) {
                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	    }
                            	    pushFollow(FOLLOW_117);
                            	    lv_template_17_0=norm1_TemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop329;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_117);
                    this_PrimaryExpression_18=norm1_PrimaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                    }
                    loop332:
                    do {
                        int alt332=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt332=3;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt332=1;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt332=2;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt332=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt332=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt332=3;
                            }
                            break;
                        }
                        switch (alt332) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_IndexedAccessExpressionTail_20=norm1_IndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=norm1_ParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt331=2;
                    	    int LA331_0 = input.LA(1);
                    	    if ( (LA331_0==QuestionMarkFullStop) ) {
                    	        alt331=1;
                    	    }
                    	    switch (alt331) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_118); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	    }
                    	    pushFollow(FOLLOW_117);
                    	    lv_template_25_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop332;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;
        	enterRule();
        try {
            {
            {
            int alt334=2;
            int LA334_0 = input.LA(1);
            if ( (LA334_0==QuestionMarkFullStop) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_127); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                    }
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_128);
            lv_index_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;
        	enterRule();
        try {
            {
            {
            int alt335=2;
            int LA335_0 = input.LA(1);
            if ( (LA335_0==QuestionMarkFullStop) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_127); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                    }
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_128);
            lv_index_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;
        	enterRule();
        try {
            {
            {
            int alt336=2;
            int LA336_0 = input.LA(1);
            if ( (LA336_0==FullStop) ) {
                alt336=1;
            }
            else if ( (LA336_0==QuestionMarkFullStop) ) {
                alt336=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);
                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_129); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_129); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", true, "?.");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==LessThanSign) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_14);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;
        	enterRule();
        try {
            {
            {
            int alt338=2;
            int LA338_0 = input.LA(1);
            if ( (LA338_0==FullStop) ) {
                alt338=1;
            }
            else if ( (LA338_0==QuestionMarkFullStop) ) {
                alt338=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);
                throw nvae;
            }
            switch (alt338) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_129); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_129); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", true, "?.");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==LessThanSign) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_14);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePostfixExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPostfixExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePostfixExpression=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePostfixExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LeftHandSideExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_LeftHandSideExpression_0=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt340=2;
            int LA340_0 = input.LA(1);
            if ( (LA340_0==PlusSignPlusSign) && (synpred182_InternalN4JSParser())) {
                alt340=1;
            }
            else if ( (LA340_0==HyphenMinusHyphenMinus) && (synpred182_InternalN4JSParser())) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LeftHandSideExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_LeftHandSideExpression_0=norm1_LeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt341=2;
            int LA341_0 = input.LA(1);
            if ( (LA341_0==PlusSignPlusSign) && (synpred183_InternalN4JSParser())) {
                alt341=1;
            }
            else if ( (LA341_0==HyphenMinusHyphenMinus) && (synpred183_InternalN4JSParser())) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCastExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCastExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCastExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCastExpression=ruleCastExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCastExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCastExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;
        EObject lv_targetTypeRef_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_24);
            this_PostfixExpression_0=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt342=2;
            int LA342_0 = input.LA(1);
            if ( (LA342_0==As) && (synpred184_InternalN4JSParser())) {
                alt342=1;
            }
            switch (alt342) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,As,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRef_3_0=ruleArrayTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRef",
                      							lv_targetTypeRef_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ArrayTypeExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CastExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;
        EObject lv_targetTypeRef_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_24);
            this_PostfixExpression_0=norm1_PostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt343=2;
            int LA343_0 = input.LA(1);
            if ( (LA343_0==As) && (synpred185_InternalN4JSParser())) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,As,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRef_3_0=ruleArrayTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRef",
                      							lv_targetTypeRef_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ArrayTypeExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleUnaryExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryExpression=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_CastExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            int alt344=2;
            int LA344_0 = input.LA(1);
            if ( ((LA344_0>=Intersection && LA344_0<=Implements)||(LA344_0>=Promisify && LA344_0<=Abstract)||(LA344_0>=External && LA344_0<=Function)||(LA344_0>=Private && LA344_0<=Project)||(LA344_0>=Import && LA344_0<=Public)||LA344_0==Static||LA344_0==Target||(LA344_0>=Async && LA344_0<=Await)||LA344_0==Class||(LA344_0>=False && LA344_0<=Super)||LA344_0==Union||(LA344_0>=Yield && LA344_0<=This)||(LA344_0>=From && LA344_0<=Type)||(LA344_0>=Get && LA344_0<=Set)||LA344_0==SolidusEqualsSign||LA344_0==As||LA344_0==Of||LA344_0==LeftParenthesis||LA344_0==Solidus||LA344_0==LessThanSign||(LA344_0>=CommercialAt && LA344_0<=LeftSquareBracket)||LA344_0==LeftCurlyBracket||LA344_0==RULE_DOUBLE||(LA344_0>=RULE_HEX_INT && LA344_0<=RULE_LEGACY_OCTAL_INT)||LA344_0==RULE_SCIENTIFIC_INT||LA344_0==RULE_IDENTIFIER||LA344_0==RULE_STRING||(LA344_0>=RULE_TEMPLATE_HEAD && LA344_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA344_0==RULE_INT) ) {
                alt344=1;
            }
            else if ( (LA344_0==Delete||LA344_0==Typeof||LA344_0==Void||LA344_0==PlusSignPlusSign||LA344_0==HyphenMinusHyphenMinus||LA344_0==ExclamationMark||LA344_0==PlusSign||LA344_0==HyphenMinus||LA344_0==Tilde) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);
                throw nvae;
            }
            switch (alt344) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=ruleCastExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_49);
                    lv_op_2_0=ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleUnaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_UnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_CastExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            int alt345=2;
            int LA345_0 = input.LA(1);
            if ( ((LA345_0>=Intersection && LA345_0<=Implements)||(LA345_0>=Promisify && LA345_0<=Abstract)||(LA345_0>=External && LA345_0<=Function)||(LA345_0>=Private && LA345_0<=Project)||(LA345_0>=Import && LA345_0<=Public)||LA345_0==Static||LA345_0==Target||(LA345_0>=Async && LA345_0<=Await)||LA345_0==Class||(LA345_0>=False && LA345_0<=Super)||LA345_0==Union||LA345_0==This||(LA345_0>=From && LA345_0<=Type)||(LA345_0>=Get && LA345_0<=Set)||LA345_0==SolidusEqualsSign||LA345_0==As||LA345_0==Of||LA345_0==LeftParenthesis||LA345_0==Solidus||LA345_0==LessThanSign||(LA345_0>=CommercialAt && LA345_0<=LeftSquareBracket)||LA345_0==LeftCurlyBracket||LA345_0==RULE_DOUBLE||(LA345_0>=RULE_HEX_INT && LA345_0<=RULE_LEGACY_OCTAL_INT)||LA345_0==RULE_SCIENTIFIC_INT||LA345_0==RULE_IDENTIFIER||LA345_0==RULE_STRING||(LA345_0>=RULE_TEMPLATE_HEAD && LA345_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA345_0==RULE_INT) ) {
                alt345=1;
            }
            else if ( (LA345_0==Delete||LA345_0==Typeof||LA345_0==Void||LA345_0==PlusSignPlusSign||LA345_0==HyphenMinusHyphenMinus||LA345_0==ExclamationMark||LA345_0==PlusSign||LA345_0==HyphenMinus||LA345_0==Tilde) ) {
                alt345=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);
                throw nvae;
            }
            switch (alt345) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=norm1_CastExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_70);
                    lv_op_2_0=ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_UnaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleMultiplicativeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_UnaryExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_UnaryExpression_0=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);
                if ( (LA346_0==Asterisk) && (synpred186_InternalN4JSParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==Solidus) && (synpred186_InternalN4JSParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==PercentSign) && (synpred186_InternalN4JSParser())) {
                    alt346=1;
                }
                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=ruleUnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop346;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_UnaryExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_UnaryExpression_0=norm1_UnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);
                if ( (LA347_0==Asterisk) && (synpred187_InternalN4JSParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==Solidus) && (synpred187_InternalN4JSParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==PercentSign) && (synpred187_InternalN4JSParser())) {
                    alt347=1;
                }
                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=norm1_UnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop347;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAdditiveExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAdditiveExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAdditiveExpression=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAdditiveExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject this_MultiplicativeExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_MultiplicativeExpression_0=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop348:
            do {
                int alt348=2;
                alt348 = dfa348.predict(input);
                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_132);
            	    lv_rhs_3_0=ruleMultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop348;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject this_MultiplicativeExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_MultiplicativeExpression_0=norm1_MultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop349:
            do {
                int alt349=2;
                alt349 = dfa349.predict(input);
                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_132);
            	    lv_rhs_3_0=norm1_MultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop349;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleShiftExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftExpression=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AdditiveExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_133);
            this_AdditiveExpression_0=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop350:
            do {
                int alt350=2;
                alt350 = dfa350.predict(input);
                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_133);
            	    lv_rhs_3_0=ruleAdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop350;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AdditiveExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_133);
            this_AdditiveExpression_0=norm1_AdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop351:
            do {
                int alt351=2;
                alt351 = dfa351.predict(input);
                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_133);
            	    lv_rhs_3_0=norm1_AdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop351;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleShiftOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleShiftOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftOperator=ruleShiftOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleShiftOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==GreaterThanSign) ) {
                alt353=1;
            }
            else if ( (LA353_0==LessThanSignLessThanSign) ) {
                alt353=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);
                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_134); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_135); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                    }
                    int alt352=2;
                    int LA352_0 = input.LA(1);
                    if ( (LA352_0==GreaterThanSign) ) {
                        alt352=1;
                    }
                    switch (alt352) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRelationalExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalExpression=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_136);
            this_ShiftExpression_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop354:
            do {
                int alt354=2;
                alt354 = dfa354.predict(input);
                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_136);
            	    lv_rhs_3_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop354;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_137);
            this_ShiftExpression_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop355:
            do {
                int alt355=2;
                alt355 = dfa355.predict(input);
                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_137);
            	    lv_rhs_3_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop355;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_136);
            this_ShiftExpression_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop356:
            do {
                int alt356=2;
                alt356 = dfa356.predict(input);
                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_136);
            	    lv_rhs_3_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop356;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_137);
            this_ShiftExpression_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop357:
            do {
                int alt357=2;
                alt357 = dfa357.predict(input);
                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_137);
            	    lv_rhs_3_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop357;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleRelationalOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleRelationalOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalOperator=ruleRelationalOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleRelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt359=4;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt359=1;
                }
                break;
            case GreaterThanSign:
                {
                alt359=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt359=3;
                }
                break;
            case Instanceof:
                {
                alt359=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 359, 0, input);
                throw nvae;
            }
            switch (alt359) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt358=2;
                    int LA358_0 = input.LA(1);
                    if ( (LA358_0==EqualsSign) ) {
                        alt358=1;
                    }
                    switch (alt358) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_RelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt361=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt361=1;
                }
                break;
            case GreaterThanSign:
                {
                alt361=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt361=3;
                }
                break;
            case Instanceof:
                {
                alt361=4;
                }
                break;
            case In:
                {
                alt361=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);
                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt360=2;
                    int LA360_0 = input.LA(1);
                    if ( (LA360_0==EqualsSign) ) {
                        alt360=1;
                    }
                    switch (alt360) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInKeyword_4_0());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEqualityExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEqualityExpression=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEqualityExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_138);
            this_RelationalExpression_0=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);
                if ( (LA362_0==EqualsSignEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt362=1;
                }
                else if ( (LA362_0==ExclamationMarkEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt362=1;
                }
                else if ( (LA362_0==EqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt362=1;
                }
                else if ( (LA362_0==ExclamationMarkEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt362=1;
                }
                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=ruleRelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop362;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_138);
            this_RelationalExpression_0=norm1_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);
                if ( (LA363_0==EqualsSignEqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt363=1;
                }
                else if ( (LA363_0==ExclamationMarkEqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt363=1;
                }
                else if ( (LA363_0==EqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt363=1;
                }
                else if ( (LA363_0==ExclamationMarkEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt363=1;
                }
                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=norm1_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop363;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_138);
            this_RelationalExpression_0=norm2_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);
                if ( (LA364_0==EqualsSignEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==ExclamationMarkEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==EqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==ExclamationMarkEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt364=1;
                }
                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=norm2_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop364;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_138);
            this_RelationalExpression_0=norm3_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);
                if ( (LA365_0==EqualsSignEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==ExclamationMarkEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==EqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==ExclamationMarkEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt365=1;
                }
                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=norm3_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop365;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseANDExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDExpression=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_139);
            this_EqualityExpression_0=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);
                if ( (LA366_0==Ampersand) && (synpred206_InternalN4JSParser())) {
                    alt366=1;
                }
                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=ruleEqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop366;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_139);
            this_EqualityExpression_0=norm1_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);
                if ( (LA367_0==Ampersand) && (synpred207_InternalN4JSParser())) {
                    alt367=1;
                }
                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=norm1_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop367;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_139);
            this_EqualityExpression_0=norm2_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);
                if ( (LA368_0==Ampersand) && (synpred208_InternalN4JSParser())) {
                    alt368=1;
                }
                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=norm2_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop368;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_139);
            this_EqualityExpression_0=norm3_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);
                if ( (LA369_0==Ampersand) && (synpred209_InternalN4JSParser())) {
                    alt369=1;
                }
                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=norm3_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop369;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseANDOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseANDOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDOperator=ruleBitwiseANDOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseXORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXORExpression=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_140);
            this_BitwiseANDExpression_0=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);
                if ( (LA370_0==CircumflexAccent) && (synpred210_InternalN4JSParser())) {
                    alt370=1;
                }
                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=ruleBitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop370;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_140);
            this_BitwiseANDExpression_0=norm1_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);
                if ( (LA371_0==CircumflexAccent) && (synpred211_InternalN4JSParser())) {
                    alt371=1;
                }
                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=norm1_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop371;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_140);
            this_BitwiseANDExpression_0=norm2_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);
                if ( (LA372_0==CircumflexAccent) && (synpred212_InternalN4JSParser())) {
                    alt372=1;
                }
                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=norm2_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop372;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_140);
            this_BitwiseANDExpression_0=norm3_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);
                if ( (LA373_0==CircumflexAccent) && (synpred213_InternalN4JSParser())) {
                    alt373=1;
                }
                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=norm3_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop373;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseXOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseXOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXOROperator=ruleBitwiseXOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseXOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseORExpression=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_141);
            this_BitwiseXORExpression_0=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);
                if ( (LA374_0==VerticalLine) && (synpred214_InternalN4JSParser())) {
                    alt374=1;
                }
                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=ruleBitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop374;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_141);
            this_BitwiseXORExpression_0=norm1_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);
                if ( (LA375_0==VerticalLine) && (synpred215_InternalN4JSParser())) {
                    alt375=1;
                }
                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=norm1_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop375;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_141);
            this_BitwiseXORExpression_0=norm2_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);
                if ( (LA376_0==VerticalLine) && (synpred216_InternalN4JSParser())) {
                    alt376=1;
                }
                switch (alt376) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=norm2_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop376;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_141);
            this_BitwiseXORExpression_0=norm3_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);
                if ( (LA377_0==VerticalLine) && (synpred217_InternalN4JSParser())) {
                    alt377=1;
                }
                switch (alt377) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=norm3_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop377;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseOROperator=ruleBitwiseOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLogicalANDExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDExpression=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_142);
            this_BitwiseORExpression_0=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop378:
            do {
                int alt378=2;
                int LA378_0 = input.LA(1);
                if ( (LA378_0==AmpersandAmpersand) && (synpred218_InternalN4JSParser())) {
                    alt378=1;
                }
                switch (alt378) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_rhs_3_0=ruleBitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop378;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_142);
            this_BitwiseORExpression_0=norm1_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop379:
            do {
                int alt379=2;
                int LA379_0 = input.LA(1);
                if ( (LA379_0==AmpersandAmpersand) && (synpred219_InternalN4JSParser())) {
                    alt379=1;
                }
                switch (alt379) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_rhs_3_0=norm1_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop379;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_142);
            this_BitwiseORExpression_0=norm2_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop380:
            do {
                int alt380=2;
                int LA380_0 = input.LA(1);
                if ( (LA380_0==AmpersandAmpersand) && (synpred220_InternalN4JSParser())) {
                    alt380=1;
                }
                switch (alt380) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_rhs_3_0=norm2_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop380;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_142);
            this_BitwiseORExpression_0=norm3_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop381:
            do {
                int alt381=2;
                int LA381_0 = input.LA(1);
                if ( (LA381_0==AmpersandAmpersand) && (synpred221_InternalN4JSParser())) {
                    alt381=1;
                }
                switch (alt381) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_rhs_3_0=norm3_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop381;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalANDOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLogicalANDOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDOperator=ruleLogicalANDOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLogicalORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalORExpression=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_143);
            this_LogicalANDExpression_0=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop382:
            do {
                int alt382=2;
                int LA382_0 = input.LA(1);
                if ( (LA382_0==VerticalLineVerticalLine) && (synpred222_InternalN4JSParser())) {
                    alt382=1;
                }
                switch (alt382) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_143);
            	    lv_rhs_3_0=ruleLogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop382;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_143);
            this_LogicalANDExpression_0=norm1_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop383:
            do {
                int alt383=2;
                int LA383_0 = input.LA(1);
                if ( (LA383_0==VerticalLineVerticalLine) && (synpred223_InternalN4JSParser())) {
                    alt383=1;
                }
                switch (alt383) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_143);
            	    lv_rhs_3_0=norm1_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop383;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_143);
            this_LogicalANDExpression_0=norm2_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop384:
            do {
                int alt384=2;
                int LA384_0 = input.LA(1);
                if ( (LA384_0==VerticalLineVerticalLine) && (synpred224_InternalN4JSParser())) {
                    alt384=1;
                }
                switch (alt384) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_143);
            	    lv_rhs_3_0=norm2_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop384;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_143);
            this_LogicalANDExpression_0=norm3_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop385:
            do {
                int alt385=2;
                int LA385_0 = input.LA(1);
                if ( (LA385_0==VerticalLineVerticalLine) && (synpred225_InternalN4JSParser())) {
                    alt385=1;
                }
                switch (alt385) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_143);
            	    lv_rhs_3_0=norm3_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop385;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLogicalOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalOROperator=ruleLogicalOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCoalesceExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCoalesceExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCoalesceExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCoalesceExpression=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCoalesceExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_144);
            this_LogicalORExpression_0=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop386:
            do {
                int alt386=2;
                int LA386_0 = input.LA(1);
                if ( (LA386_0==QuestionMarkQuestionMark) && (synpred226_InternalN4JSParser())) {
                    alt386=1;
                }
                switch (alt386) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_49); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_defaultExpression_3_0=ruleLogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop386;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_144);
            this_LogicalORExpression_0=norm1_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop387:
            do {
                int alt387=2;
                int LA387_0 = input.LA(1);
                if ( (LA387_0==QuestionMarkQuestionMark) && (synpred227_InternalN4JSParser())) {
                    alt387=1;
                }
                switch (alt387) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_49); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_defaultExpression_3_0=norm1_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop387;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_144);
            this_LogicalORExpression_0=norm2_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop388:
            do {
                int alt388=2;
                int LA388_0 = input.LA(1);
                if ( (LA388_0==QuestionMarkQuestionMark) && (synpred228_InternalN4JSParser())) {
                    alt388=1;
                }
                switch (alt388) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_70); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_defaultExpression_3_0=norm2_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop388;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_144);
            this_LogicalORExpression_0=norm3_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop389:
            do {
                int alt389=2;
                int LA389_0 = input.LA(1);
                if ( (LA389_0==QuestionMarkQuestionMark) && (synpred229_InternalN4JSParser())) {
                    alt389=1;
                }
                switch (alt389) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_70); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_defaultExpression_3_0=norm3_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop389;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleConditionalExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleConditionalExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConditionalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConditionalExpression=ruleConditionalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConditionalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_145);
            this_CoalesceExpression_0=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt390=2;
            int LA390_0 = input.LA(1);
            if ( (LA390_0==QuestionMark) && (synpred230_InternalN4JSParser())) {
                alt390=1;
            }
            switch (alt390) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_145);
            this_CoalesceExpression_0=norm1_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt391=2;
            int LA391_0 = input.LA(1);
            if ( (LA391_0==QuestionMark) && (synpred231_InternalN4JSParser())) {
                alt391=1;
            }
            switch (alt391) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_145);
            this_CoalesceExpression_0=norm2_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt392=2;
            int LA392_0 = input.LA(1);
            if ( (LA392_0==QuestionMark) && (synpred232_InternalN4JSParser())) {
                alt392=1;
            }
            switch (alt392) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_145);
            this_CoalesceExpression_0=norm3_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt393=2;
            int LA393_0 = input.LA(1);
            if ( (LA393_0==QuestionMark) && (synpred233_InternalN4JSParser())) {
                alt393=1;
            }
            switch (alt393) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAssignmentExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpression=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_ConditionalExpression_3 = null;
        AntlrDatatypeRuleToken lv_op_5_0 = null;
        EObject lv_rhs_6_0 = null;
        	enterRule();
        try {
            {
            int alt395=4;
            alt395 = dfa395.predict(input);
            switch (alt395) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=ruleAwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=rulePromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=ruleArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_146);
                    this_ConditionalExpression_3=ruleConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt394=2;
                    alt394 = dfa394.predict(input);
                    switch (alt394) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_5_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_ConditionalExpression_3 = null;
        AntlrDatatypeRuleToken lv_op_5_0 = null;
        EObject lv_rhs_6_0 = null;
        	enterRule();
        try {
            {
            int alt397=4;
            alt397 = dfa397.predict(input);
            switch (alt397) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm1_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm1_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm1_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_146);
                    this_ConditionalExpression_3=norm1_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt396=2;
                    alt396 = dfa396.predict(input);
                    switch (alt396) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_5_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_YieldExpression_3 = null;
        EObject this_ConditionalExpression_4 = null;
        AntlrDatatypeRuleToken lv_op_6_0 = null;
        EObject lv_rhs_7_0 = null;
        	enterRule();
        try {
            {
            int alt399=5;
            alt399 = dfa399.predict(input);
            switch (alt399) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm2_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm2_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm2_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=ruleYieldExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_146);
                    this_ConditionalExpression_4=norm2_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt398=2;
                    alt398 = dfa398.predict(input);
                    switch (alt398) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_70);
                            lv_op_6_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm2_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_YieldExpression_3 = null;
        EObject this_ConditionalExpression_4 = null;
        AntlrDatatypeRuleToken lv_op_6_0 = null;
        EObject lv_rhs_7_0 = null;
        	enterRule();
        try {
            {
            int alt401=5;
            alt401 = dfa401.predict(input);
            switch (alt401) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm3_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm3_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm3_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=norm1_YieldExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_146);
                    this_ConditionalExpression_4=norm3_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt400=2;
                    alt400 = dfa400.predict(input);
                    switch (alt400) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_70);
                            lv_op_6_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleYieldExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleYieldExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldExpression=ruleYieldExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleYieldExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Yield,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt402=2;
            int LA402_0 = input.LA(1);
            if ( (LA402_0==Asterisk) && (synpred258_InternalN4JSParser())) {
                alt402=1;
            }
            switch (alt402) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", true, "*");
                    }
                    }
                    }
                    break;
            }
            int alt403=2;
            alt403 = dfa403.predict(input);
            switch (alt403) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_YieldExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Yield,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt404=2;
            int LA404_0 = input.LA(1);
            if ( (LA404_0==Asterisk) && (synpred260_InternalN4JSParser())) {
                alt404=1;
            }
            switch (alt404) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", true, "*");
                    }
                    }
                    }
                    break;
            }
            int alt405=2;
            alt405 = dfa405.predict(input);
            switch (alt405) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAssignmentOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperator=ruleAssignmentOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt407=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt407=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt407=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt407=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt407=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt407=5;
                }
                break;
            case HyphenMinus:
                {
                alt407=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt407=7;
                }
                break;
            case GreaterThanSign:
                {
                alt407=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt407=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt407=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt407=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);
                throw nvae;
            }
            switch (alt407) {
                case 1 :
                    {
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    kw=(Token)match(input,HyphenMinus,FOLLOW_69); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_5_0());
                    }
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_5_1());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_134); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_148); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                    }
                    int alt406=2;
                    int LA406_0 = input.LA(1);
                    if ( (LA406_0==GreaterThanSign) ) {
                        alt406=1;
                    }
                    switch (alt406) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_69); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_2());
                            }
                            }
                            break;
                    }
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_7_3());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperatorOnlyAssign() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAssignmentOperatorOnlyAssign = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorOnlyAssignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperatorOnlyAssign=ruleAssignmentOperatorOnlyAssign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperatorOnlyAssign.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperatorOnlyAssign() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getAssignmentOperatorOnlyAssignAccess().getEqualsSignKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAwaitExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAwaitExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAwaitExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAwaitExpression=ruleAwaitExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAwaitExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePromisifyExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePromisifyExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPromisifyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePromisifyExpression=rulePromisifyExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePromisifyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_149); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_149); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_149); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_149); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt409=2;
            int LA409_0 = input.LA(1);
            if ( (LA409_0==Comma) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop408:
                    do {
                        int alt408=2;
                        int LA408_0 = input.LA(1);
                        if ( (LA408_0==Comma) ) {
                            alt408=1;
                        }
                        switch (alt408) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=ruleAssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop408;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt411=2;
            int LA411_0 = input.LA(1);
            if ( (LA411_0==Comma) ) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop410:
                    do {
                        int alt410=2;
                        int LA410_0 = input.LA(1);
                        if ( (LA410_0==Comma) ) {
                            alt410=1;
                        }
                        switch (alt410) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=norm1_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop410;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt413=2;
            int LA413_0 = input.LA(1);
            if ( (LA413_0==Comma) ) {
                alt413=1;
            }
            switch (alt413) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop412:
                    do {
                        int alt412=2;
                        int LA412_0 = input.LA(1);
                        if ( (LA412_0==Comma) ) {
                            alt412=1;
                        }
                        switch (alt412) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=norm2_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop412;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt415=2;
            int LA415_0 = input.LA(1);
            if ( (LA415_0==Comma) ) {
                alt415=1;
            }
            switch (alt415) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop414:
                    do {
                        int alt414=2;
                        int LA414_0 = input.LA(1);
                        if ( (LA414_0==Comma) ) {
                            alt414=1;
                        }
                        switch (alt414) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=norm3_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop414;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateLiteral=ruleTemplateLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject lv_segments_1_0 = null;
        EObject lv_segments_2_0 = null;
        EObject lv_segments_3_0 = null;
        EObject lv_segments_5_0 = null;
        EObject lv_segments_6_0 = null;
        EObject lv_segments_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
            }
            }
            int alt419=2;
            int LA419_0 = input.LA(1);
            if ( (LA419_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt419=1;
            }
            else if ( (LA419_0==RULE_TEMPLATE_HEAD) ) {
                alt419=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);
                throw nvae;
            }
            switch (alt419) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_150);
                    lv_segments_2_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt416=2;
                    int LA416_0 = input.LA(1);
                    if ( ((LA416_0>=Intersection && LA416_0<=Implements)||(LA416_0>=Promisify && LA416_0<=Abstract)||(LA416_0>=External && LA416_0<=Function)||(LA416_0>=Private && LA416_0<=Delete)||(LA416_0>=Import && LA416_0<=Public)||LA416_0==Static||(LA416_0>=Target && LA416_0<=Await)||LA416_0==Class||(LA416_0>=False && LA416_0<=Super)||LA416_0==Union||(LA416_0>=Yield && LA416_0<=This)||(LA416_0>=From && LA416_0<=Void)||(LA416_0>=Get && LA416_0<=Set)||LA416_0==PlusSignPlusSign||(LA416_0>=HyphenMinusHyphenMinus && LA416_0<=SolidusEqualsSign)||LA416_0==As||LA416_0==Of||LA416_0==ExclamationMark||LA416_0==LeftParenthesis||LA416_0==PlusSign||LA416_0==HyphenMinus||LA416_0==Solidus||LA416_0==LessThanSign||(LA416_0>=CommercialAt && LA416_0<=LeftSquareBracket)||LA416_0==LeftCurlyBracket||LA416_0==Tilde||LA416_0==RULE_DOUBLE||(LA416_0>=RULE_HEX_INT && LA416_0<=RULE_LEGACY_OCTAL_INT)||LA416_0==RULE_SCIENTIFIC_INT||LA416_0==RULE_IDENTIFIER||LA416_0==RULE_STRING||(LA416_0>=RULE_TEMPLATE_HEAD && LA416_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA416_0==RULE_INT) ) {
                        alt416=1;
                    }
                    switch (alt416) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_150);
                            lv_segments_3_0=norm1_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_151);
                    ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    loop418:
                    do {
                        int alt418=2;
                        int LA418_0 = input.LA(1);
                        if ( (LA418_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt418=1;
                        }
                        switch (alt418) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	    }
                    	    pushFollow(FOLLOW_150);
                    	    lv_segments_5_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    int alt417=2;
                    	    int LA417_0 = input.LA(1);
                    	    if ( ((LA417_0>=Intersection && LA417_0<=Implements)||(LA417_0>=Promisify && LA417_0<=Abstract)||(LA417_0>=External && LA417_0<=Function)||(LA417_0>=Private && LA417_0<=Delete)||(LA417_0>=Import && LA417_0<=Public)||LA417_0==Static||(LA417_0>=Target && LA417_0<=Await)||LA417_0==Class||(LA417_0>=False && LA417_0<=Super)||LA417_0==Union||(LA417_0>=Yield && LA417_0<=This)||(LA417_0>=From && LA417_0<=Void)||(LA417_0>=Get && LA417_0<=Set)||LA417_0==PlusSignPlusSign||(LA417_0>=HyphenMinusHyphenMinus && LA417_0<=SolidusEqualsSign)||LA417_0==As||LA417_0==Of||LA417_0==ExclamationMark||LA417_0==LeftParenthesis||LA417_0==PlusSign||LA417_0==HyphenMinus||LA417_0==Solidus||LA417_0==LessThanSign||(LA417_0>=CommercialAt && LA417_0<=LeftSquareBracket)||LA417_0==LeftCurlyBracket||LA417_0==Tilde||LA417_0==RULE_DOUBLE||(LA417_0>=RULE_HEX_INT && LA417_0<=RULE_LEGACY_OCTAL_INT)||LA417_0==RULE_SCIENTIFIC_INT||LA417_0==RULE_IDENTIFIER||LA417_0==RULE_STRING||(LA417_0>=RULE_TEMPLATE_HEAD && LA417_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA417_0==RULE_INT) ) {
                    	        alt417=1;
                    	    }
                    	    switch (alt417) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {
                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	            }
                    	            pushFollow(FOLLOW_150);
                    	            lv_segments_6_0=norm1_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	    }
                    	    pushFollow(FOLLOW_151);
                    	    ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop418;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject lv_segments_1_0 = null;
        EObject lv_segments_2_0 = null;
        EObject lv_segments_3_0 = null;
        EObject lv_segments_5_0 = null;
        EObject lv_segments_6_0 = null;
        EObject lv_segments_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
            }
            }
            int alt423=2;
            int LA423_0 = input.LA(1);
            if ( (LA423_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt423=1;
            }
            else if ( (LA423_0==RULE_TEMPLATE_HEAD) ) {
                alt423=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);
                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_152);
                    lv_segments_2_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt420=2;
                    int LA420_0 = input.LA(1);
                    if ( ((LA420_0>=Intersection && LA420_0<=Implements)||(LA420_0>=Promisify && LA420_0<=Abstract)||(LA420_0>=External && LA420_0<=Function)||(LA420_0>=Private && LA420_0<=Delete)||(LA420_0>=Import && LA420_0<=Public)||LA420_0==Static||(LA420_0>=Target && LA420_0<=Await)||LA420_0==Class||(LA420_0>=False && LA420_0<=Super)||LA420_0==Union||(LA420_0>=Yield && LA420_0<=This)||(LA420_0>=From && LA420_0<=Void)||(LA420_0>=Get && LA420_0<=Set)||LA420_0==PlusSignPlusSign||(LA420_0>=HyphenMinusHyphenMinus && LA420_0<=SolidusEqualsSign)||LA420_0==As||LA420_0==Of||LA420_0==ExclamationMark||LA420_0==LeftParenthesis||LA420_0==PlusSign||LA420_0==HyphenMinus||LA420_0==Solidus||LA420_0==LessThanSign||(LA420_0>=CommercialAt && LA420_0<=LeftSquareBracket)||LA420_0==LeftCurlyBracket||LA420_0==Tilde||LA420_0==RULE_DOUBLE||(LA420_0>=RULE_HEX_INT && LA420_0<=RULE_LEGACY_OCTAL_INT)||LA420_0==RULE_SCIENTIFIC_INT||LA420_0==RULE_IDENTIFIER||LA420_0==RULE_STRING||(LA420_0>=RULE_TEMPLATE_HEAD && LA420_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA420_0==RULE_INT) ) {
                        alt420=1;
                    }
                    switch (alt420) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_150);
                            lv_segments_3_0=norm3_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_151);
                    ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    loop422:
                    do {
                        int alt422=2;
                        int LA422_0 = input.LA(1);
                        if ( (LA422_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt422=1;
                        }
                        switch (alt422) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	    }
                    	    pushFollow(FOLLOW_152);
                    	    lv_segments_5_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    int alt421=2;
                    	    int LA421_0 = input.LA(1);
                    	    if ( ((LA421_0>=Intersection && LA421_0<=Implements)||(LA421_0>=Promisify && LA421_0<=Abstract)||(LA421_0>=External && LA421_0<=Function)||(LA421_0>=Private && LA421_0<=Delete)||(LA421_0>=Import && LA421_0<=Public)||LA421_0==Static||(LA421_0>=Target && LA421_0<=Await)||LA421_0==Class||(LA421_0>=False && LA421_0<=Super)||LA421_0==Union||(LA421_0>=Yield && LA421_0<=This)||(LA421_0>=From && LA421_0<=Void)||(LA421_0>=Get && LA421_0<=Set)||LA421_0==PlusSignPlusSign||(LA421_0>=HyphenMinusHyphenMinus && LA421_0<=SolidusEqualsSign)||LA421_0==As||LA421_0==Of||LA421_0==ExclamationMark||LA421_0==LeftParenthesis||LA421_0==PlusSign||LA421_0==HyphenMinus||LA421_0==Solidus||LA421_0==LessThanSign||(LA421_0>=CommercialAt && LA421_0<=LeftSquareBracket)||LA421_0==LeftCurlyBracket||LA421_0==Tilde||LA421_0==RULE_DOUBLE||(LA421_0>=RULE_HEX_INT && LA421_0<=RULE_LEGACY_OCTAL_INT)||LA421_0==RULE_SCIENTIFIC_INT||LA421_0==RULE_IDENTIFIER||LA421_0==RULE_STRING||(LA421_0>=RULE_TEMPLATE_HEAD && LA421_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA421_0==RULE_INT) ) {
                    	        alt421=1;
                    	    }
                    	    switch (alt421) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {
                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	            }
                    	            pushFollow(FOLLOW_150);
                    	            lv_segments_6_0=norm3_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	    }
                    	    pushFollow(FOLLOW_151);
                    	    ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop422;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateExpressionEnd() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateExpressionEnd = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateExpressionEndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateExpressionEnd=ruleTemplateExpressionEnd();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateExpressionEnd.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateExpressionEnd() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	setInTemplateSegment();
        try {
            {
            kw=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNoSubstitutionTemplate = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoSubstitutionTemplateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNoSubstitutionTemplate=ruleNoSubstitutionTemplate();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoSubstitutionTemplate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;
        Token lv_value_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNoSubstitutionTemplateAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_value_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getNoSubstitutionTemplateRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.NO_SUBSTITUTION_TEMPLATE_LITERAL");
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateHead() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateHead = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateHead=ruleTemplateHead();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateHead; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateHead() throws RecognitionException {
        EObject current = null;
        Token lv_value_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateHeadAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_value_1_0, grammarAccess.getTemplateHeadAccess().getValueTEMPLATE_HEADTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTemplateHeadRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TEMPLATE_HEAD");
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateTail() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateTail = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTail=ruleTemplateTail();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateTail() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateTailAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTemplateTailAccess().getValueTemplateTailLiteralParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateTailRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateTailLiteral");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateMiddle() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateMiddle = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddle=ruleTemplateMiddle();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddle; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateMiddle() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateMiddleAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTemplateMiddleAccess().getValueTemplateMiddleLiteralParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateMiddleRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateMiddleLiteral");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteral() throws RecognitionException {
        EObject current = null;
        EObject this_NumericLiteral_0 = null;
        EObject this_BooleanLiteral_1 = null;
        EObject this_StringLiteral_2 = null;
        EObject this_NullLiteral_3 = null;
        EObject this_RegularExpressionLiteral_4 = null;
        	enterRule();
        try {
            {
            int alt424=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt424=1;
                }
                break;
            case False:
            case True:
                {
                alt424=2;
                }
                break;
            case RULE_STRING:
                {
                alt424=3;
                }
                break;
            case Null:
                {
                alt424=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt424=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);
                throw nvae;
            }
            switch (alt424) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteral_0=ruleNumericLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NumericLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteral_1=ruleBooleanLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BooleanLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteral_2=ruleStringLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_StringLiteral_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_NullLiteral_3=ruleNullLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NullLiteral_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularExpressionLiteral_4=ruleRegularExpressionLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RegularExpressionLiteral_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNullLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNullLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullLiteral=ruleNullLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNullLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBooleanLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBooleanLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteral=ruleBooleanLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBooleanLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_true_1_0=null;
        Token otherlv_2=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
              					current);
            }
            }
            int alt425=2;
            int LA425_0 = input.LA(1);
            if ( (LA425_0==True) ) {
                alt425=1;
            }
            else if ( (LA425_0==False) ) {
                alt425=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    {
                    {
                    lv_true_1_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_true_1_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      						}
                      						setWithLastConsumed(current, "true", true, "true");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    otherlv_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStringLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStringLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteral=ruleStringLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStringLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.STRING");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNumericLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNumericLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteral=ruleNumericLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNumericLiteral() throws RecognitionException {
        EObject current = null;
        EObject this_DoubleLiteral_0 = null;
        EObject this_IntLiteral_1 = null;
        EObject this_BinaryIntLiteral_2 = null;
        EObject this_OctalIntLiteral_3 = null;
        EObject this_LegacyOctalIntLiteral_4 = null;
        EObject this_HexIntLiteral_5 = null;
        EObject this_ScientificIntLiteral_6 = null;
        	enterRule();
        try {
            {
            int alt426=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt426=1;
                }
                break;
            case RULE_INT:
                {
                alt426=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt426=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt426=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt426=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt426=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt426=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);
                throw nvae;
            }
            switch (alt426) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoubleLiteral_0=ruleDoubleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoubleLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntLiteral_1=ruleIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_BinaryIntLiteral_2=ruleBinaryIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BinaryIntLiteral_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_OctalIntLiteral_3=ruleOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_OctalIntLiteral_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyOctalIntLiteral_4=ruleLegacyOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_LegacyOctalIntLiteral_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_HexIntLiteral_5=ruleHexIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_HexIntLiteral_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ScientificIntLiteral_6=ruleScientificIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ScientificIntLiteral_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoubleLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDoubleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoubleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoubleLiteral=ruleDoubleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoubleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoubleLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getDoubleLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.DOUBLE");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntLiteral=ruleIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleOctalIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOctalIntLiteral=ruleOctalIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getOctalIntLiteralAccess().getValueOCTAL_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.OCTAL_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLegacyOctalIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyOctalIntLiteral=ruleLegacyOctalIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueLEGACY_OCTAL_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getLegacyOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.LEGACY_OCTAL_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleHexIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleHexIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHexIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHexIntLiteral=ruleHexIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHexIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleHexIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getHexIntLiteralAccess().getValueHEX_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getHexIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.HEX_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBinaryIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBinaryIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBinaryIntLiteral=ruleBinaryIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBinaryIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getBinaryIntLiteralAccess().getValueBINARY_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getBinaryIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.BINARY_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScientificIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScientificIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScientificIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScientificIntLiteral=ruleScientificIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScientificIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScientificIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getScientificIntLiteralAccess().getValueSCIENTIFIC_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getScientificIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.SCIENTIFIC_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRegularExpressionLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularExpressionLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularExpressionLiteral=ruleRegularExpressionLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularExpressionLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getRegularExpressionLiteralAccess().getValueREGEX_LITERALParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_0_0=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getRegularExpressionLiteralRule());
              				}
              				set(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.REGEX_LITERAL");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleNumericLiteralAsString() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleNumericLiteralAsString = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralAsStringRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralAsString=ruleNumericLiteralAsString();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralAsString.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleNumericLiteralAsString() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_DOUBLE_0=null;
        Token this_INT_1=null;
        Token this_BINARY_INT_2=null;
        Token this_OCTAL_INT_3=null;
        Token this_HEX_INT_4=null;
        Token this_SCIENTIFIC_INT_5=null;
        	enterRule();
        try {
            {
            int alt427=6;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt427=1;
                }
                break;
            case RULE_INT:
                {
                alt427=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt427=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt427=4;
                }
                break;
            case RULE_HEX_INT:
                {
                alt427=5;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt427=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);
                throw nvae;
            }
            switch (alt427) {
                case 1 :
                    {
                    this_DOUBLE_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_DOUBLE_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_DOUBLE_0, grammarAccess.getNumericLiteralAsStringAccess().getDOUBLETerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    this_INT_1=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_INT_1);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_INT_1, grammarAccess.getNumericLiteralAsStringAccess().getINTTerminalRuleCall_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    this_BINARY_INT_2=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_BINARY_INT_2);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_BINARY_INT_2, grammarAccess.getNumericLiteralAsStringAccess().getBINARY_INTTerminalRuleCall_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    this_OCTAL_INT_3=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_OCTAL_INT_3);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_OCTAL_INT_3, grammarAccess.getNumericLiteralAsStringAccess().getOCTAL_INTTerminalRuleCall_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    this_HEX_INT_4=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_HEX_INT_4);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_HEX_INT_4, grammarAccess.getNumericLiteralAsStringAccess().getHEX_INTTerminalRuleCall_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    this_SCIENTIFIC_INT_5=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_SCIENTIFIC_INT_5);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_SCIENTIFIC_INT_5, grammarAccess.getNumericLiteralAsStringAccess().getSCIENTIFIC_INTTerminalRuleCall_5());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierOrThis() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleIdentifierOrThis = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierOrThisRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierOrThis=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierOrThis.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierOrThis() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        	enterRule();
        try {
            {
            int alt428=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt428=1;
                }
                break;
            case This:
                {
                alt428=2;
                }
                break;
            case Promisify:
                {
                alt428=3;
                }
                break;
            case Target:
                {
                alt428=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);
                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierOrThisAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAnnotationName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAnnotationName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationName=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAnnotationName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        	enterRule();
        try {
            {
            int alt429=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt429=1;
                }
                break;
            case This:
                {
                alt429=2;
                }
                break;
            case Target:
                {
                alt429=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);
                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getAnnotationNameAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleREGEX_LITERAL() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleREGEX_LITERAL = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getREGEX_LITERALRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleREGEX_LITERAL=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleREGEX_LITERAL.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleREGEX_LITERAL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_REGEX_TAIL_2=null;
        	enterRule();
        	setInRegularExpression();
        try {
            {
            {
            int alt430=2;
            int LA430_0 = input.LA(1);
            if ( (LA430_0==Solidus) ) {
                alt430=1;
            }
            else if ( (LA430_0==SolidusEqualsSign) ) {
                alt430=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 430, 0, input);
                throw nvae;
            }
            switch (alt430) {
                case 1 :
                    {
                    kw=(Token)match(input,Solidus,FOLLOW_153); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_153); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                    }
                    }
                    break;
            }
            int alt431=2;
            int LA431_0 = input.LA(1);
            if ( (LA431_0==RULE_REGEX_TAIL) ) {
                alt431=1;
            }
            switch (alt431) {
                case 1 :
                    {
                    this_REGEX_TAIL_2=(Token)match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(this_REGEX_TAIL_2);
                    }
                    if ( state.backtracking==0 ) {
                      				newLeafNode(this_REGEX_TAIL_2, grammarAccess.getREGEX_LITERALAccess().getREGEX_TAILTerminalRuleCall_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateTailLiteral() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateTailLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTailLiteral=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTailLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateTailLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_TEMPLATE_END_0=null;
        	enterRule();
        try {
            {
            int alt432=2;
            int LA432_0 = input.LA(1);
            if ( (LA432_0==RULE_TEMPLATE_END) ) {
                alt432=1;
            }
            switch (alt432) {
                case 1 :
                    {
                    this_TEMPLATE_END_0=(Token)match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_TEMPLATE_END_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_TEMPLATE_END_0, grammarAccess.getTemplateTailLiteralAccess().getTEMPLATE_ENDTerminalRuleCall());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateMiddleLiteral() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateMiddleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddleLiteral=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddleLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateMiddleLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_TEMPLATE_MIDDLE_0=null;
        	enterRule();
        try {
            {
            this_TEMPLATE_MIDDLE_0=(Token)match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(this_TEMPLATE_MIDDLE_0);
            }
            if ( state.backtracking==0 ) {
              		newLeafNode(this_TEMPLATE_MIDDLE_0, grammarAccess.getTemplateMiddleLiteralAccess().getTEMPLATE_MIDDLETerminalRuleCall());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleSemi() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleSemi = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSemiRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSemi=ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSemi.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleSemi() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
         enterRule();
        		int position = input.index();
        		promoteEOL();    
        try {
            int alt433=3;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt433=1;
                }
                break;
            case EOF:
            case RULE_ML_COMMENT:
            case RULE_EOL:
                {
                alt433=2;
                }
                break;
            case RightCurlyBracket:
                {
                alt433=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);
                throw nvae;
            }
            switch (alt433) {
                case 1 :
                    {
                    kw=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)input.LT(1);
                    if ( input.LA(1)==EOF||input.LA(1)==RULE_ML_COMMENT||input.LA(1)==RULE_EOL ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }
                    if ( state.backtracking==0 ) {
                              addASIMessage();
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( !(( forcedRewind(position) )) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(position) ");
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              		leaveRule(); 
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement START
 public final EObject ruleNoLineTerminator(EObject in_current) throws RecognitionException {
    	EObject current = in_current;
    	if (state.backtracking==0) {
    		promoteEOL();
    	}
    	if (hasDisallowedEOL()) { 
        	if (state.backtracking==0) {
        		NoViableAltException nvae = new NoViableAltException("", 0, 0, input);
                reportError(nvae);
                throw nvae;
        	}
        	state.failed=true; 
        	return current;
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement END
    public final EObject entryRuleAnnotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotation=ruleAnnotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAt,FOLLOW_154); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptAnnotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScriptAnnotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptAnnotation=ruleScriptAnnotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptAnnotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_154); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationNoAtSign = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNoAtSignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationNoAtSign=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationNoAtSign; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_args_2_0 = null;
        EObject lv_args_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getNameAnnotationNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_126);
            lv_name_0_0=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt437=2;
            alt437 = dfa437.predict(input);
            switch (alt437) {
                case 1 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_155); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_1, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                    }
                    }
                    int alt436=2;
                    int LA436_0 = input.LA(1);
                    if ( ((LA436_0>=Intersection && LA436_0<=Constructor)||LA436_0==Promisify||LA436_0==Default||LA436_0==Target||LA436_0==Await||LA436_0==False||LA436_0==Union||LA436_0==This||(LA436_0>=Null && LA436_0<=Void)||LA436_0==SolidusEqualsSign||LA436_0==LeftParenthesis||LA436_0==Solidus||LA436_0==QuestionMark||LA436_0==LeftSquareBracket||LA436_0==LeftCurlyBracket||LA436_0==Tilde||LA436_0==RULE_DOUBLE||(LA436_0>=RULE_HEX_INT && LA436_0<=RULE_LEGACY_OCTAL_INT)||LA436_0==RULE_SCIENTIFIC_INT||LA436_0==RULE_IDENTIFIER||LA436_0==RULE_STRING||LA436_0==RULE_INT) ) {
                        alt436=1;
                    }
                    switch (alt436) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_54);
                            lv_args_2_0=ruleAnnotationArgument();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                              							}
                              							add(
                              								current,
                              								"args",
                              								lv_args_2_0,
                              								"org.eclipse.n4js.N4JS.AnnotationArgument");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            loop435:
                            do {
                                int alt435=2;
                                int LA435_0 = input.LA(1);
                                if ( (LA435_0==Comma) ) {
                                    alt435=1;
                                }
                                switch (alt435) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      						newLeafNode(otherlv_3, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_54);
                            	    lv_args_4_0=ruleAnnotationArgument();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"args",
                            	      									lv_args_4_0,
                            	      									"org.eclipse.n4js.N4JS.AnnotationArgument");
                            	      								afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop435;
                                }
                            } while (true);
                            }
                            break;
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationArgument=ruleAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject this_LiteralAnnotationArgument_0 = null;
        EObject this_TypeRefAnnotationArgument_1 = null;
        	enterRule();
        try {
            {
            int alt438=2;
            int LA438_0 = input.LA(1);
            if ( (LA438_0==False||LA438_0==Null||LA438_0==True||LA438_0==SolidusEqualsSign||LA438_0==Solidus||LA438_0==RULE_DOUBLE||(LA438_0>=RULE_HEX_INT && LA438_0<=RULE_LEGACY_OCTAL_INT)||LA438_0==RULE_SCIENTIFIC_INT||LA438_0==RULE_STRING||LA438_0==RULE_INT) ) {
                alt438=1;
            }
            else if ( ((LA438_0>=Intersection && LA438_0<=Constructor)||LA438_0==Promisify||LA438_0==Default||LA438_0==Target||LA438_0==Await||LA438_0==Union||LA438_0==This||LA438_0==This_1||(LA438_0>=Type && LA438_0<=Void)||LA438_0==LeftParenthesis||LA438_0==QuestionMark||LA438_0==LeftSquareBracket||LA438_0==LeftCurlyBracket||LA438_0==Tilde||LA438_0==RULE_IDENTIFIER) ) {
                alt438=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);
                throw nvae;
            }
            switch (alt438) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralAnnotationArgument_0=ruleLiteralAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_LiteralAnnotationArgument_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefAnnotationArgument_1=ruleTypeRefAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRefAnnotationArgument_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralAnnotationArgument=ruleLiteralAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject lv_literal_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralLiteralParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_literal_0_0=ruleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getLiteralAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"literal",
              					lv_literal_0_0,
              					"org.eclipse.n4js.N4JS.Literal");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefAnnotationArgument=ruleTypeRefAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRef_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefTypeRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_0_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeRefAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"typeRef",
              					lv_typeRef_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationList=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationList() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_annotations_2_0 = null;
        EObject lv_annotations_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAnnotationListAccess().getAnnotationListAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_154); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_157);
            lv_annotations_2_0=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getAnnotationListRule());
              							}
              							add(
              								current,
              								"annotations",
              								lv_annotations_2_0,
              								"org.eclipse.n4js.N4JS.AnnotationNoAtSign");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);
                if ( (LA439_0==CommercialAt) ) {
                    alt439=1;
                }
                switch (alt439) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_annotations_3_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_3_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop439;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionAnnotationList=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionAnnotationListAccess().getExpressionAnnotationListAction_0(),
              					current);
            }
            }
            int cnt440=0;
            loop440:
            do {
                int alt440=2;
                int LA440_0 = input.LA(1);
                if ( (LA440_0==CommercialAt) ) {
                    alt440=1;
                }
                switch (alt440) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExpressionAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt440 >= 1 ) break loop440;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(440, input);
                        throw eee;
                }
                cnt440++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyAssignmentAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignmentAnnotationList=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignmentAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getPropertyAssignmentAnnotationListAccess().getPropertyAssignmentAnnotationListAction_0(),
              					current);
            }
            }
            int cnt441=0;
            loop441:
            do {
                int alt441=2;
                int LA441_0 = input.LA(1);
                if ( (LA441_0==CommercialAt) ) {
                    alt441=1;
                }
                switch (alt441) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyAssignmentAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt441 >= 1 ) break loop441;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(441, input);
                        throw eee;
                }
                cnt441++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MemberAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberAnnotationList=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4MemberAnnotationListAccess().getN4MemberAnnotationListAction_0(),
              					current);
            }
            }
            int cnt442=0;
            loop442:
            do {
                int alt442=2;
                int LA442_0 = input.LA(1);
                if ( (LA442_0==CommercialAt) ) {
                    alt442=1;
                }
                switch (alt442) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4MemberAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt442 >= 1 ) break loop442;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(442, input);
                        throw eee;
                }
                cnt442++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReference(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            int alt443=2;
            alt443 = dfa443.predict(input);
            switch (alt443) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeReferenceRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTypeReferenceAccess().getAstNamespaceModuleNamespaceVirtualTypeCrossReference_0_0_0());
                    }
                    pushFollow(FOLLOW_123);
                    ruleTypeReferenceName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_1=(Token)match(input,FullStop,FOLLOW_158); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getTypeReferenceAccess().getFullStopKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeReferenceRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeReferenceAccess().getDeclaredTypeTypeCrossReference_1_0());
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypeReferenceName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypeReferenceName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceName=ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_IDENTIFIER_6=null;
        	enterRule();
        try {
            {
            int alt444=7;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt444=1;
                }
                break;
            case This:
                {
                alt444=2;
                }
                break;
            case Await:
                {
                alt444=3;
                }
                break;
            case Promisify:
                {
                alt444=4;
                }
                break;
            case Target:
                {
                alt444=5;
                }
                break;
            case Default:
                {
                alt444=6;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt444=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 444, 0, input);
                throw nvae;
            }
            switch (alt444) {
                case 1 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getDefaultKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    this_IDENTIFIER_6=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_6);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_6, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_6());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4ClassDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassDeclaration=ruleN4ClassDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_VersionDeclaration_4 = null;
        EObject this_TypeVariables_5 = null;
        EObject this_ClassExtendsImplements_6 = null;
        EObject this_Members_7 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop445:
            do {
                int alt445=2;
                int LA445_0 = input.LA(1);
                if ( ((LA445_0>=Protected && LA445_0<=Abstract)||LA445_0==External||(LA445_0>=Private && LA445_0<=Project)||LA445_0==Public||LA445_0==Static||LA445_0==Const) ) {
                    alt445=1;
                }
                switch (alt445) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_6);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop445;
                }
            } while (true);
            otherlv_1=(Token)match(input,Class,FOLLOW_159); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
            }
            int alt446=2;
            int LA446_0 = input.LA(1);
            if ( (LA446_0==Tilde) ) {
                alt446=1;
            }
            switch (alt446) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_58);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt447=2;
            int LA447_0 = input.LA(1);
            if ( ((LA447_0>=Intersection && LA447_0<=Constructor)||(LA447_0>=Promisify && LA447_0<=Abstract)||LA447_0==External||(LA447_0>=Private && LA447_0<=Project)||LA447_0==Public||LA447_0==Static||LA447_0==Target||(LA447_0>=Async && LA447_0<=Await)||LA447_0==Union||(LA447_0>=Yield && LA447_0<=This)||LA447_0==From||LA447_0==Type||(LA447_0>=Get && LA447_0<=Let)||(LA447_0>=Out && LA447_0<=Set)||LA447_0==As||LA447_0==Of||LA447_0==RULE_IDENTIFIER) ) {
                alt447=1;
            }
            else if ( (LA447_0==Implements) ) {
                int LA447_2 = input.LA(2);
                if ( (LA447_2==Implements||LA447_2==Extends||LA447_2==LessThanSign||LA447_2==LeftCurlyBracket||LA447_2==RULE_VERSION) ) {
                    alt447=1;
                }
            }
            switch (alt447) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_9);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt448=2;
            int LA448_0 = input.LA(1);
            if ( (LA448_0==RULE_VERSION) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4());
                    }
                    pushFollow(FOLLOW_9);
                    this_VersionDeclaration_4=ruleVersionDeclaration(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_VersionDeclaration_4;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt449=2;
            int LA449_0 = input.LA(1);
            if ( (LA449_0==LessThanSign) ) {
                alt449=1;
            }
            switch (alt449) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_9);
                    this_TypeVariables_5=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeVariables_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt450=2;
            int LA450_0 = input.LA(1);
            if ( (LA450_0==Implements||LA450_0==Extends) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_9);
                    this_ClassExtendsImplements_6=ruleClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_7=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_7;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMembers(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop451:
            do {
                int alt451=2;
                int LA451_0 = input.LA(1);
                if ( ((LA451_0>=Intersection && LA451_0<=With)||(LA451_0>=For && LA451_0<=Var)||(LA451_0>=As && LA451_0<=Of)||LA451_0==LeftParenthesis||LA451_0==Asterisk||LA451_0==LessThanSign||(LA451_0>=CommercialAt && LA451_0<=LeftSquareBracket)||LA451_0==LeftCurlyBracket||LA451_0==Tilde||LA451_0==RULE_DOUBLE||(LA451_0>=RULE_HEX_INT && LA451_0<=RULE_OCTAL_INT)||LA451_0==RULE_SCIENTIFIC_INT||LA451_0==RULE_IDENTIFIER||LA451_0==RULE_STRING||LA451_0==RULE_INT) ) {
                    alt451=1;
                }
                switch (alt451) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_160);
            	    lv_ownedMembersRaw_1_0=ruleN4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop451;
                }
            } while (true);
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Members(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop452:
            do {
                int alt452=2;
                int LA452_0 = input.LA(1);
                if ( ((LA452_0>=Intersection && LA452_0<=With)||(LA452_0>=For && LA452_0<=Var)||(LA452_0>=As && LA452_0<=Of)||LA452_0==LeftParenthesis||LA452_0==Asterisk||LA452_0==LessThanSign||(LA452_0>=CommercialAt && LA452_0<=LeftSquareBracket)||LA452_0==LeftCurlyBracket||LA452_0==Tilde||LA452_0==RULE_DOUBLE||(LA452_0>=RULE_HEX_INT && LA452_0<=RULE_OCTAL_INT)||LA452_0==RULE_SCIENTIFIC_INT||LA452_0==RULE_IDENTIFIER||LA452_0==RULE_STRING||LA452_0==RULE_INT) ) {
                    alt452=1;
                }
                switch (alt452) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_160);
            	    lv_ownedMembersRaw_1_0=norm1_N4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop452;
                }
            } while (true);
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_ClassExtendsClause_0 = null;
        EObject this_ClassImplementsList_1 = null;
        EObject this_ClassImplementsList_2 = null;
        EObject this_ClassExtendsClause_3 = null;
        	enterRule();
        try {
            {
            int alt455=2;
            int LA455_0 = input.LA(1);
            if ( (LA455_0==Extends) ) {
                alt455=1;
            }
            else if ( (LA455_0==Implements) ) {
                alt455=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 455, 0, input);
                throw nvae;
            }
            switch (alt455) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_161);
                    this_ClassExtendsClause_0=ruleClassExtendsClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt453=2;
                    int LA453_0 = input.LA(1);
                    if ( (LA453_0==Implements) ) {
                        alt453=1;
                    }
                    switch (alt453) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_61);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt454=2;
                    int LA454_0 = input.LA(1);
                    if ( (LA454_0==Extends) ) {
                        alt454=1;
                    }
                    switch (alt454) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=ruleClassExtendsClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_ClassExtendsClause_0 = null;
        EObject this_ClassImplementsList_1 = null;
        EObject this_ClassImplementsList_2 = null;
        EObject this_ClassExtendsClause_3 = null;
        	enterRule();
        try {
            {
            int alt458=2;
            int LA458_0 = input.LA(1);
            if ( (LA458_0==Extends) ) {
                alt458=1;
            }
            else if ( (LA458_0==Implements) ) {
                alt458=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 458, 0, input);
                throw nvae;
            }
            switch (alt458) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_161);
                    this_ClassExtendsClause_0=norm1_ClassExtendsClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt456=2;
                    int LA456_0 = input.LA(1);
                    if ( (LA456_0==Implements) ) {
                        alt456=1;
                    }
                    switch (alt456) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_61);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt457=2;
                    int LA457_0 = input.LA(1);
                    if ( (LA457_0==Extends) ) {
                        alt457=1;
                    }
                    switch (alt457) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=norm1_ClassExtendsClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;
        EObject lv_superClassExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_162); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt459=2;
            int LA459_0 = input.LA(1);
            if ( (LA459_0==Void) && (synpred274_InternalN4JSParser())) {
                alt459=1;
            }
            else if ( (LA459_0==This) ) {
                int LA459_2 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Await) ) {
                int LA459_3 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Promisify) ) {
                int LA459_4 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Target) ) {
                int LA459_5 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Default) && (synpred274_InternalN4JSParser())) {
                alt459=1;
            }
            else if ( (LA459_0==RULE_IDENTIFIER) ) {
                int LA459_7 = input.LA(2);
                if ( (synpred274_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA459_0>=Intersection && LA459_0<=Implements)||(LA459_0>=Interface && LA459_0<=Abstract)||(LA459_0>=External && LA459_0<=Function)||(LA459_0>=Private && LA459_0<=Project)||(LA459_0>=Import && LA459_0<=Public)||LA459_0==Static||LA459_0==Async||LA459_0==Class||(LA459_0>=False && LA459_0<=Super)||LA459_0==Union||LA459_0==Yield||(LA459_0>=From && LA459_0<=Type)||(LA459_0>=Get && LA459_0<=Set)||LA459_0==SolidusEqualsSign||LA459_0==As||LA459_0==Of||LA459_0==LeftParenthesis||LA459_0==Solidus||LA459_0==LessThanSign||(LA459_0>=CommercialAt && LA459_0<=LeftSquareBracket)||LA459_0==LeftCurlyBracket||LA459_0==RULE_DOUBLE||(LA459_0>=RULE_HEX_INT && LA459_0<=RULE_LEGACY_OCTAL_INT)||LA459_0==RULE_SCIENTIFIC_INT||LA459_0==RULE_STRING||(LA459_0>=RULE_TEMPLATE_HEAD && LA459_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA459_0==RULE_INT) ) {
                alt459=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 459, 0, input);
                throw nvae;
            }
            switch (alt459) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=ruleLeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;
        EObject lv_superClassExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_162); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt460=2;
            int LA460_0 = input.LA(1);
            if ( (LA460_0==Void) && (synpred275_InternalN4JSParser())) {
                alt460=1;
            }
            else if ( (LA460_0==This) ) {
                int LA460_2 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt460=1;
                }
                else if ( (true) ) {
                    alt460=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 460, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA460_0==Await) ) {
                int LA460_3 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt460=1;
                }
                else if ( (true) ) {
                    alt460=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 460, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA460_0==Promisify) ) {
                int LA460_4 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt460=1;
                }
                else if ( (true) ) {
                    alt460=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 460, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA460_0==Target) ) {
                int LA460_5 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt460=1;
                }
                else if ( (true) ) {
                    alt460=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 460, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA460_0==Default) && (synpred275_InternalN4JSParser())) {
                alt460=1;
            }
            else if ( (LA460_0==RULE_IDENTIFIER) ) {
                int LA460_7 = input.LA(2);
                if ( (synpred275_InternalN4JSParser()) ) {
                    alt460=1;
                }
                else if ( (true) ) {
                    alt460=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 460, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA460_0>=Intersection && LA460_0<=Implements)||(LA460_0>=Interface && LA460_0<=Abstract)||(LA460_0>=External && LA460_0<=Function)||(LA460_0>=Private && LA460_0<=Project)||(LA460_0>=Import && LA460_0<=Public)||LA460_0==Static||LA460_0==Async||LA460_0==Class||(LA460_0>=False && LA460_0<=Super)||LA460_0==Union||(LA460_0>=From && LA460_0<=Type)||(LA460_0>=Get && LA460_0<=Set)||LA460_0==SolidusEqualsSign||LA460_0==As||LA460_0==Of||LA460_0==LeftParenthesis||LA460_0==Solidus||LA460_0==LessThanSign||(LA460_0>=CommercialAt && LA460_0<=LeftSquareBracket)||LA460_0==LeftCurlyBracket||LA460_0==RULE_DOUBLE||(LA460_0>=RULE_HEX_INT && LA460_0<=RULE_LEGACY_OCTAL_INT)||LA460_0==RULE_SCIENTIFIC_INT||LA460_0==RULE_STRING||(LA460_0>=RULE_TEMPLATE_HEAD && LA460_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA460_0==RULE_INT) ) {
                alt460=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 460, 0, input);
                throw nvae;
            }
            switch (alt460) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=norm1_LeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassImplementsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_implementedInterfaceRefs_1_0 = null;
        EObject lv_implementedInterfaceRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Implements,FOLLOW_158); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_30);
            lv_implementedInterfaceRefs_1_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
              					}
              					add(
              						current,
              						"implementedInterfaceRefs",
              						lv_implementedInterfaceRefs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop461:
            do {
                int alt461=2;
                int LA461_0 = input.LA(1);
                if ( (LA461_0==Comma) ) {
                    alt461=1;
                }
                switch (alt461) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_158); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getClassImplementsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_implementedInterfaceRefs_3_0=ruleParameterizedTypeRefNominal();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"implementedInterfaceRefs",
            	      							lv_implementedInterfaceRefs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop461;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4ClassExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassExpression=ruleN4ClassExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ClassExtendsImplements_3 = null;
        EObject this_Members_4 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt462=2;
            int LA462_0 = input.LA(1);
            if ( ((LA462_0>=Intersection && LA462_0<=Constructor)||(LA462_0>=Promisify && LA462_0<=Abstract)||LA462_0==External||(LA462_0>=Private && LA462_0<=Project)||LA462_0==Public||LA462_0==Static||LA462_0==Target||(LA462_0>=Async && LA462_0<=Await)||LA462_0==Union||(LA462_0>=Yield && LA462_0<=This)||LA462_0==From||LA462_0==Type||(LA462_0>=Get && LA462_0<=Let)||(LA462_0>=Out && LA462_0<=Set)||LA462_0==As||LA462_0==Of||LA462_0==RULE_IDENTIFIER) ) {
                alt462=1;
            }
            else if ( (LA462_0==Implements) ) {
                int LA462_2 = input.LA(2);
                if ( (LA462_2==Implements||LA462_2==Extends||LA462_2==LeftCurlyBracket) ) {
                    alt462=1;
                }
            }
            switch (alt462) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_9);
                    lv_name_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt463=2;
            int LA463_0 = input.LA(1);
            if ( (LA463_0==Implements||LA463_0==Extends) ) {
                alt463=1;
            }
            switch (alt463) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_9);
                    this_ClassExtendsImplements_3=ruleClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            this_Members_4=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4ClassExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ClassExtendsImplements_3 = null;
        EObject this_Members_4 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Class,FOLLOW_59); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt464=2;
            int LA464_0 = input.LA(1);
            if ( ((LA464_0>=Intersection && LA464_0<=Constructor)||(LA464_0>=Promisify && LA464_0<=Abstract)||LA464_0==External||(LA464_0>=Private && LA464_0<=Project)||LA464_0==Public||LA464_0==Static||LA464_0==Target||(LA464_0>=Async && LA464_0<=Await)||LA464_0==Union||LA464_0==This||LA464_0==From||LA464_0==Type||(LA464_0>=Get && LA464_0<=Let)||(LA464_0>=Out && LA464_0<=Set)||LA464_0==As||LA464_0==Of||LA464_0==RULE_IDENTIFIER) ) {
                alt464=1;
            }
            else if ( (LA464_0==Implements) ) {
                int LA464_2 = input.LA(2);
                if ( (LA464_2==Implements||LA464_2==Extends||LA464_2==LeftCurlyBracket) ) {
                    alt464=1;
                }
            }
            switch (alt464) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt465=2;
            int LA465_0 = input.LA(1);
            if ( (LA465_0==Implements||LA465_0==Extends) ) {
                alt465=1;
            }
            switch (alt465) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_59);
                    this_ClassExtendsImplements_3=norm1_ClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            this_Members_4=norm1_Members(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4InterfaceDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4InterfaceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4InterfaceDeclaration=ruleN4InterfaceDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4InterfaceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_VersionDeclaration_4 = null;
        EObject this_TypeVariables_5 = null;
        EObject this_InterfaceExtendsList_6 = null;
        EObject this_Members_7 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop466:
            do {
                int alt466=2;
                int LA466_0 = input.LA(1);
                if ( ((LA466_0>=Protected && LA466_0<=Abstract)||LA466_0==External||(LA466_0>=Private && LA466_0<=Project)||LA466_0==Public||LA466_0==Static||LA466_0==Const) ) {
                    alt466=1;
                }
                switch (alt466) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop466;
                }
            } while (true);
            otherlv_1=(Token)match(input,Interface,FOLLOW_159); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
            }
            int alt467=2;
            int LA467_0 = input.LA(1);
            if ( (LA467_0==Tilde) ) {
                alt467=1;
            }
            switch (alt467) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_58);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt468=2;
            int LA468_0 = input.LA(1);
            if ( ((LA468_0>=Intersection && LA468_0<=Constructor)||(LA468_0>=Promisify && LA468_0<=Abstract)||LA468_0==External||(LA468_0>=Private && LA468_0<=Project)||LA468_0==Public||LA468_0==Static||LA468_0==Target||(LA468_0>=Async && LA468_0<=Await)||LA468_0==Union||(LA468_0>=Yield && LA468_0<=This)||LA468_0==From||LA468_0==Type||(LA468_0>=Get && LA468_0<=Let)||(LA468_0>=Out && LA468_0<=Set)||LA468_0==As||LA468_0==Of||LA468_0==RULE_IDENTIFIER) ) {
                alt468=1;
            }
            else if ( (LA468_0==Implements) ) {
                int LA468_2 = input.LA(2);
                if ( (LA468_2==Implements||LA468_2==Extends||LA468_2==LessThanSign||LA468_2==LeftCurlyBracket||LA468_2==RULE_VERSION) ) {
                    alt468=1;
                }
            }
            switch (alt468) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_9);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt469=2;
            int LA469_0 = input.LA(1);
            if ( (LA469_0==RULE_VERSION) ) {
                alt469=1;
            }
            switch (alt469) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4());
                    }
                    pushFollow(FOLLOW_9);
                    this_VersionDeclaration_4=ruleVersionDeclaration(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_VersionDeclaration_4;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt470=2;
            int LA470_0 = input.LA(1);
            if ( (LA470_0==LessThanSign) ) {
                alt470=1;
            }
            switch (alt470) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_9);
                    this_TypeVariables_5=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeVariables_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt471=2;
            int LA471_0 = input.LA(1);
            if ( (LA471_0==Implements||LA471_0==Extends) ) {
                alt471=1;
            }
            switch (alt471) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_9);
                    this_InterfaceExtendsList_6=ruleInterfaceExtendsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_InterfaceExtendsList_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_7=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_7;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleInterfaceExtendsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_superInterfaceRefs_2_0 = null;
        EObject lv_superInterfaceRefs_4_0 = null;
        	enterRule();
        try {
            {
            {
            int alt472=2;
            int LA472_0 = input.LA(1);
            if ( (LA472_0==Extends) ) {
                alt472=1;
            }
            else if ( (LA472_0==Implements) ) {
                alt472=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 472, 0, input);
                throw nvae;
            }
            switch (alt472) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,Extends,FOLLOW_158); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getInterfaceExtendsListAccess().getExtendsKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    otherlv_1=(Token)match(input,Implements,FOLLOW_158); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getInterfaceExtendsListAccess().getImplementsKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_30);
            lv_superInterfaceRefs_2_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
              					}
              					add(
              						current,
              						"superInterfaceRefs",
              						lv_superInterfaceRefs_2_0,
              						"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop473:
            do {
                int alt473=2;
                int LA473_0 = input.LA(1);
                if ( (LA473_0==Comma) ) {
                    alt473=1;
                }
                switch (alt473) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_158); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getInterfaceExtendsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_superInterfaceRefs_4_0=ruleParameterizedTypeRefNominal();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"superInterfaceRefs",
            	      							lv_superInterfaceRefs_4_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop473;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4EnumDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumDeclaration=ruleN4EnumDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_VersionDeclaration_4 = null;
        EObject lv_literals_6_0 = null;
        EObject lv_literals_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4EnumDeclarationAccess().getN4EnumDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop474:
            do {
                int alt474=2;
                int LA474_0 = input.LA(1);
                if ( ((LA474_0>=Protected && LA474_0<=Abstract)||LA474_0==External||(LA474_0>=Private && LA474_0<=Project)||LA474_0==Public||LA474_0==Static||LA474_0==Const) ) {
                    alt474=1;
                }
                switch (alt474) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_11);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop474;
                }
            } while (true);
            otherlv_2=(Token)match(input,Enum,FOLLOW_163); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
            }
            int alt475=2;
            int LA475_0 = input.LA(1);
            if ( ((LA475_0>=Intersection && LA475_0<=Implements)||(LA475_0>=Promisify && LA475_0<=Abstract)||LA475_0==External||(LA475_0>=Private && LA475_0<=Project)||LA475_0==Public||LA475_0==Static||LA475_0==Target||(LA475_0>=Async && LA475_0<=Await)||LA475_0==Union||(LA475_0>=Yield && LA475_0<=This)||LA475_0==From||LA475_0==Type||(LA475_0>=Get && LA475_0<=Let)||(LA475_0>=Out && LA475_0<=Set)||LA475_0==As||LA475_0==Of||LA475_0==RULE_IDENTIFIER) ) {
                alt475=1;
            }
            switch (alt475) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_12);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt476=2;
            int LA476_0 = input.LA(1);
            if ( (LA476_0==RULE_VERSION) ) {
                alt476=1;
            }
            switch (alt476) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4());
                    }
                    pushFollow(FOLLOW_13);
                    this_VersionDeclaration_4=ruleVersionDeclaration(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_VersionDeclaration_4;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt478=2;
            int LA478_0 = input.LA(1);
            if ( ((LA478_0>=Intersection && LA478_0<=With)||(LA478_0>=For && LA478_0<=Var)||(LA478_0>=As && LA478_0<=Of)||LA478_0==RULE_IDENTIFIER) ) {
                alt478=1;
            }
            switch (alt478) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_6_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						add(
                      							current,
                      							"literals",
                      							lv_literals_6_0,
                      							"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop477:
                    do {
                        int alt477=2;
                        int LA477_0 = input.LA(1);
                        if ( (LA477_0==Comma) ) {
                            alt477=1;
                        }
                        switch (alt477) {
                    	case 1 :
                    	    {
                    	    otherlv_7=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_7, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_8_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"literals",
                    	      								lv_literals_8_0,
                    	      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop477;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4EnumLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumLiteral=ruleN4EnumLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_valueExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getNameIdentifierNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_43);
            lv_name_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt479=2;
            int LA479_0 = input.LA(1);
            if ( (LA479_0==Colon) ) {
                alt479=1;
            }
            switch (alt479) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getValueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_valueExpression_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
                      						}
                      						set(
                      							current,
                      							"valueExpression",
                      							lv_valueExpression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MemberDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberDeclaration=ruleN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedN4MemberDeclaration_0 = null;
        EObject this_N4GetterDeclaration_1 = null;
        EObject this_N4SetterDeclaration_2 = null;
        EObject this_N4MethodDeclaration_3 = null;
        EObject this_N4FieldDeclaration_4 = null;
        EObject this_N4CallableConstructorDeclaration_5 = null;
        	enterRule();
        try {
            {
            int alt480=6;
            alt480 = dfa480.predict(input);
            switch (alt480) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=ruleAnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=ruleN4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=ruleN4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=ruleN4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=ruleN4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=ruleN4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedN4MemberDeclaration_0 = null;
        EObject this_N4GetterDeclaration_1 = null;
        EObject this_N4SetterDeclaration_2 = null;
        EObject this_N4MethodDeclaration_3 = null;
        EObject this_N4FieldDeclaration_4 = null;
        EObject this_N4CallableConstructorDeclaration_5 = null;
        	enterRule();
        try {
            {
            int alt481=6;
            alt481 = dfa481.predict(input);
            switch (alt481) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=norm1_AnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=norm1_N4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=norm1_N4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=norm1_N4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=norm1_N4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=norm1_N4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedN4MemberDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedN4MemberDeclaration=ruleAnnotatedN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_26=null;
        EObject this_N4MemberAnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_GetterHeader_3 = null;
        EObject lv_body_4_0 = null;
        Enumerator lv_declaredModifiers_7_0 = null;
        EObject lv_declaredName_9_0 = null;
        EObject lv_fpar_12_0 = null;
        EObject lv_body_14_0 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        EObject this_TypeVariables_18 = null;
        EObject this_BogusTypeRefFragment_19 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsReturnAndBody_22 = null;
        EObject this_AsyncNoTrailingLineBreak_23 = null;
        EObject lv_declaredName_24_0 = null;
        EObject this_MethodParamsReturnAndBody_25 = null;
        EObject this_FieldDeclarationImpl_28 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_164);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt494=4;
            alt494 = dfa494.predict(input);
            switch (alt494) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    loop482:
                    do {
                        int alt482=2;
                        int LA482_0 = input.LA(1);
                        if ( ((LA482_0>=Protected && LA482_0<=Abstract)||LA482_0==External||(LA482_0>=Private && LA482_0<=Project)||LA482_0==Public||LA482_0==Static||LA482_0==Const) ) {
                            alt482=1;
                        }
                        switch (alt482) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_165);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop482;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                    }
                    pushFollow(FOLLOW_166);
                    this_GetterHeader_3=ruleGetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt483=2;
                    alt483 = dfa483.predict(input);
                    switch (alt483) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                            }
                            pushFollow(FOLLOW_111);
                            lv_body_4_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt484=2;
                    int LA484_0 = input.LA(1);
                    if ( (LA484_0==Semicolon) ) {
                        alt484=1;
                    }
                    switch (alt484) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    loop485:
                    do {
                        int alt485=2;
                        int LA485_0 = input.LA(1);
                        if ( ((LA485_0>=Protected && LA485_0<=Abstract)||LA485_0==External||(LA485_0>=Private && LA485_0<=Project)||LA485_0==Public||LA485_0==Static||LA485_0==Const) ) {
                            alt485=1;
                        }
                        switch (alt485) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_167);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop485;
                        }
                    } while (true);
                    otherlv_8=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                    }
                    pushFollow(FOLLOW_109);
                    lv_declaredName_9_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt486=2;
                    int LA486_0 = input.LA(1);
                    if ( (LA486_0==QuestionMark) ) {
                        alt486=1;
                    }
                    switch (alt486) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_12_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_166); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt487=2;
                    alt487 = dfa487.predict(input);
                    switch (alt487) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                            }
                            pushFollow(FOLLOW_111);
                            lv_body_14_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt488=2;
                    int LA488_0 = input.LA(1);
                    if ( (LA488_0==Semicolon) ) {
                        alt488=1;
                    }
                    switch (alt488) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    loop489:
                    do {
                        int alt489=2;
                        alt489 = dfa489.predict(input);
                        switch (alt489) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_164);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop489;
                        }
                    } while (true);
                    int alt490=2;
                    int LA490_0 = input.LA(1);
                    if ( (LA490_0==LessThanSign) ) {
                        alt490=1;
                    }
                    switch (alt490) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2());
                            }
                            pushFollow(FOLLOW_110);
                            this_TypeVariables_18=ruleTypeVariables(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt491=2;
                    alt491 = dfa491.predict(input);
                    switch (alt491) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3());
                            }
                            pushFollow(FOLLOW_110);
                            this_BogusTypeRefFragment_19=ruleBogusTypeRefFragment(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_BogusTypeRefFragment_19;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt492=2;
                    int LA492_0 = input.LA(1);
                    if ( (LA492_0==Asterisk) ) {
                        alt492=1;
                    }
                    else if ( ((LA492_0>=Intersection && LA492_0<=With)||(LA492_0>=For && LA492_0<=Var)||(LA492_0>=As && LA492_0<=Of)||LA492_0==LeftSquareBracket||LA492_0==RULE_DOUBLE||(LA492_0>=RULE_HEX_INT && LA492_0<=RULE_OCTAL_INT)||LA492_0==RULE_SCIENTIFIC_INT||LA492_0==RULE_IDENTIFIER||LA492_0==RULE_STRING||LA492_0==RULE_INT) ) {
                        alt492=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 492, 0, input);
                        throw nvae;
                    }
                    switch (alt492) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0());
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsReturnAndBody_22=norm1_MethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0());
                            }
                            pushFollow(FOLLOW_108);
                            this_AsyncNoTrailingLineBreak_23=ruleAsyncNoTrailingLineBreak(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									current = this_AsyncNoTrailingLineBreak_23;
                              									afterParserOrEnumRuleCall();
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0());
                            }
                            pushFollow(FOLLOW_168);
                            lv_declaredName_24_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_24_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsReturnAndBody_25=ruleMethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_25;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt493=2;
                    int LA493_0 = input.LA(1);
                    if ( (LA493_0==Semicolon) ) {
                        alt493=1;
                    }
                    switch (alt493) {
                        case 1 :
                            {
                            otherlv_26=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_26, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_28=ruleFieldDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FieldDeclarationImpl_28;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_26=null;
        EObject this_N4MemberAnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_GetterHeader_3 = null;
        EObject lv_body_4_0 = null;
        Enumerator lv_declaredModifiers_7_0 = null;
        EObject lv_declaredName_9_0 = null;
        EObject lv_fpar_12_0 = null;
        EObject lv_body_14_0 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        EObject this_TypeVariables_18 = null;
        EObject this_BogusTypeRefFragment_19 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsReturnAndBody_22 = null;
        EObject this_AsyncNoTrailingLineBreak_23 = null;
        EObject lv_declaredName_24_0 = null;
        EObject this_MethodParamsReturnAndBody_25 = null;
        EObject this_FieldDeclarationImpl_28 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_164);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt507=4;
            alt507 = dfa507.predict(input);
            switch (alt507) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    loop495:
                    do {
                        int alt495=2;
                        int LA495_0 = input.LA(1);
                        if ( ((LA495_0>=Protected && LA495_0<=Abstract)||LA495_0==External||(LA495_0>=Private && LA495_0<=Project)||LA495_0==Public||LA495_0==Static||LA495_0==Const) ) {
                            alt495=1;
                        }
                        switch (alt495) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_165);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop495;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                    }
                    pushFollow(FOLLOW_166);
                    this_GetterHeader_3=norm1_GetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt496=2;
                    alt496 = dfa496.predict(input);
                    switch (alt496) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                            }
                            pushFollow(FOLLOW_111);
                            lv_body_4_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt497=2;
                    int LA497_0 = input.LA(1);
                    if ( (LA497_0==Semicolon) ) {
                        alt497=1;
                    }
                    switch (alt497) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    loop498:
                    do {
                        int alt498=2;
                        int LA498_0 = input.LA(1);
                        if ( ((LA498_0>=Protected && LA498_0<=Abstract)||LA498_0==External||(LA498_0>=Private && LA498_0<=Project)||LA498_0==Public||LA498_0==Static||LA498_0==Const) ) {
                            alt498=1;
                        }
                        switch (alt498) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_167);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop498;
                        }
                    } while (true);
                    otherlv_8=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                    }
                    pushFollow(FOLLOW_109);
                    lv_declaredName_9_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt499=2;
                    int LA499_0 = input.LA(1);
                    if ( (LA499_0==QuestionMark) ) {
                        alt499=1;
                    }
                    switch (alt499) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_12_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_166); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt500=2;
                    alt500 = dfa500.predict(input);
                    switch (alt500) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                            }
                            pushFollow(FOLLOW_111);
                            lv_body_14_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt501=2;
                    int LA501_0 = input.LA(1);
                    if ( (LA501_0==Semicolon) ) {
                        alt501=1;
                    }
                    switch (alt501) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    loop502:
                    do {
                        int alt502=2;
                        alt502 = dfa502.predict(input);
                        switch (alt502) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_164);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop502;
                        }
                    } while (true);
                    int alt503=2;
                    int LA503_0 = input.LA(1);
                    if ( (LA503_0==LessThanSign) ) {
                        alt503=1;
                    }
                    switch (alt503) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2());
                            }
                            pushFollow(FOLLOW_110);
                            this_TypeVariables_18=ruleTypeVariables(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt504=2;
                    alt504 = dfa504.predict(input);
                    switch (alt504) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3());
                            }
                            pushFollow(FOLLOW_110);
                            this_BogusTypeRefFragment_19=ruleBogusTypeRefFragment(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_BogusTypeRefFragment_19;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt505=2;
                    int LA505_0 = input.LA(1);
                    if ( (LA505_0==Asterisk) ) {
                        alt505=1;
                    }
                    else if ( ((LA505_0>=Intersection && LA505_0<=With)||(LA505_0>=For && LA505_0<=Var)||(LA505_0>=As && LA505_0<=Of)||LA505_0==LeftSquareBracket||LA505_0==RULE_DOUBLE||(LA505_0>=RULE_HEX_INT && LA505_0<=RULE_OCTAL_INT)||LA505_0==RULE_SCIENTIFIC_INT||LA505_0==RULE_IDENTIFIER||LA505_0==RULE_STRING||LA505_0==RULE_INT) ) {
                        alt505=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 505, 0, input);
                        throw nvae;
                    }
                    switch (alt505) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0());
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsReturnAndBody_22=norm1_MethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0());
                            }
                            pushFollow(FOLLOW_108);
                            this_AsyncNoTrailingLineBreak_23=ruleAsyncNoTrailingLineBreak(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									current = this_AsyncNoTrailingLineBreak_23;
                              									afterParserOrEnumRuleCall();
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0());
                            }
                            pushFollow(FOLLOW_168);
                            lv_declaredName_24_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_24_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2());
                            }
                            pushFollow(FOLLOW_111);
                            this_MethodParamsReturnAndBody_25=ruleMethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_25;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt506=2;
                    int LA506_0 = input.LA(1);
                    if ( (LA506_0==Semicolon) ) {
                        alt506=1;
                    }
                    switch (alt506) {
                        case 1 :
                            {
                            otherlv_26=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_26, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_28=norm1_FieldDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FieldDeclarationImpl_28;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        EObject this_BogusTypeRefFragment_1 = null;
        EObject lv_declaredName_2_0 = null;
        EObject this_ColonSepDeclaredTypeRef_4 = null;
        EObject lv_expression_6_0 = null;
        	enterRule();
        try {
            {
            {
            loop508:
            do {
                int alt508=2;
                alt508 = dfa508.predict(input);
                switch (alt508) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_108);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop508;
                }
            } while (true);
            int alt509=2;
            alt509 = dfa509.predict(input);
            switch (alt509) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_108);
                    this_BogusTypeRefFragment_1=ruleBogusTypeRefFragment(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_BogusTypeRefFragment_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_169);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt510=2;
            int LA510_0 = input.LA(1);
            if ( (LA510_0==QuestionMark) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_170); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            int alt511=2;
            int LA511_0 = input.LA(1);
            if ( (LA511_0==Colon) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_171);
                    this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt512=2;
            int LA512_0 = input.LA(1);
            if ( (LA512_0==EqualsSign) ) {
                alt512=1;
            }
            switch (alt512) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_6_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_6_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        EObject this_BogusTypeRefFragment_1 = null;
        EObject lv_declaredName_2_0 = null;
        EObject this_ColonSepDeclaredTypeRef_4 = null;
        EObject lv_expression_6_0 = null;
        	enterRule();
        try {
            {
            {
            loop513:
            do {
                int alt513=2;
                alt513 = dfa513.predict(input);
                switch (alt513) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_108);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop513;
                }
            } while (true);
            int alt514=2;
            alt514 = dfa514.predict(input);
            switch (alt514) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_108);
                    this_BogusTypeRefFragment_1=ruleBogusTypeRefFragment(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_BogusTypeRefFragment_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_169);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt515=2;
            int LA515_0 = input.LA(1);
            if ( (LA515_0==QuestionMark) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_170); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            int alt516=2;
            int LA516_0 = input.LA(1);
            if ( (LA516_0==Colon) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_171);
                    this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt517=2;
            int LA517_0 = input.LA(1);
            if ( (LA517_0==EqualsSign) ) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_6_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_6_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4FieldDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4FieldDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4FieldDeclaration=ruleN4FieldDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4FieldDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_FieldDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=ruleFieldDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_FieldDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=norm1_FieldDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MethodDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MethodDeclaration=ruleN4MethodDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_TypeVariables_2 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsReturnAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsReturnAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop518:
            do {
                int alt518=2;
                alt518 = dfa518.predict(input);
                switch (alt518) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_164);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop518;
                }
            } while (true);
            int alt519=2;
            int LA519_0 = input.LA(1);
            if ( (LA519_0==LessThanSign) ) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2());
                    }
                    pushFollow(FOLLOW_110);
                    this_TypeVariables_2=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeVariables_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_110);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt520=2;
            int LA520_0 = input.LA(1);
            if ( (LA520_0==Asterisk) ) {
                alt520=1;
            }
            else if ( ((LA520_0>=Intersection && LA520_0<=With)||(LA520_0>=For && LA520_0<=Var)||(LA520_0>=As && LA520_0<=Of)||LA520_0==LeftSquareBracket||LA520_0==RULE_DOUBLE||(LA520_0>=RULE_HEX_INT && LA520_0<=RULE_OCTAL_INT)||LA520_0==RULE_SCIENTIFIC_INT||LA520_0==RULE_IDENTIFIER||LA520_0==RULE_STRING||LA520_0==RULE_INT) ) {
                alt520=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 520, 0, input);
                throw nvae;
            }
            switch (alt520) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_168);
                    lv_declaredName_7_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsReturnAndBody_8=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt521=2;
            int LA521_0 = input.LA(1);
            if ( (LA521_0==Semicolon) ) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_TypeVariables_2 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsReturnAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsReturnAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop522:
            do {
                int alt522=2;
                alt522 = dfa522.predict(input);
                switch (alt522) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_164);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop522;
                }
            } while (true);
            int alt523=2;
            int LA523_0 = input.LA(1);
            if ( (LA523_0==LessThanSign) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2());
                    }
                    pushFollow(FOLLOW_110);
                    this_TypeVariables_2=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeVariables_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_110);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt524=2;
            int LA524_0 = input.LA(1);
            if ( (LA524_0==Asterisk) ) {
                alt524=1;
            }
            else if ( ((LA524_0>=Intersection && LA524_0<=With)||(LA524_0>=For && LA524_0<=Var)||(LA524_0>=As && LA524_0<=Of)||LA524_0==LeftSquareBracket||LA524_0==RULE_DOUBLE||(LA524_0>=RULE_HEX_INT && LA524_0<=RULE_OCTAL_INT)||LA524_0==RULE_SCIENTIFIC_INT||LA524_0==RULE_IDENTIFIER||LA524_0==RULE_STRING||LA524_0==RULE_INT) ) {
                alt524=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 524, 0, input);
                throw nvae;
            }
            switch (alt524) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_108); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_168);
                    lv_declaredName_7_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_111);
                    this_MethodParamsReturnAndBody_8=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt525=2;
            int LA525_0 = input.LA(1);
            if ( (LA525_0==Semicolon) ) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4CallableConstructorDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4CallableConstructorDeclaration=ruleN4CallableConstructorDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4CallableConstructorDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
            }
            pushFollow(FOLLOW_111);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
            }
            int alt526=2;
            int LA526_0 = input.LA(1);
            if ( (LA526_0==Semicolon) ) {
                alt526=1;
            }
            switch (alt526) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
            }
            pushFollow(FOLLOW_111);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
            }
            int alt527=2;
            int LA527_0 = input.LA(1);
            if ( (LA527_0==Semicolon) ) {
                alt527=1;
            }
            switch (alt527) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject lv_body_1_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_172);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt528=2;
            int LA528_0 = input.LA(1);
            if ( (LA528_0==LeftCurlyBracket) && (synpred306_InternalN4JSParser())) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject lv_body_1_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_172);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt529=2;
            int LA529_0 = input.LA(1);
            if ( (LA529_0==LeftCurlyBracket) && (synpred307_InternalN4JSParser())) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepReturnTypeRef_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_173);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt530=2;
            int LA530_0 = input.LA(1);
            if ( (LA530_0==Colon) ) {
                alt530=1;
            }
            switch (alt530) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_172);
                    this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt531=2;
            alt531 = dfa531.predict(input);
            switch (alt531) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepReturnTypeRef_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_173);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt532=2;
            int LA532_0 = input.LA(1);
            if ( (LA532_0==Colon) ) {
                alt532=1;
            }
            switch (alt532) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_172);
                    this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt533=2;
            alt533 = dfa533.predict(input);
            switch (alt533) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4GetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4GetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4GetterDeclaration=ruleN4GetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4GetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_GetterHeader_2 = null;
        EObject lv_body_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop534:
            do {
                int alt534=2;
                int LA534_0 = input.LA(1);
                if ( ((LA534_0>=Protected && LA534_0<=Abstract)||LA534_0==External||(LA534_0>=Private && LA534_0<=Project)||LA534_0==Public||LA534_0==Static||LA534_0==Const) ) {
                    alt534=1;
                }
                switch (alt534) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_165);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop534;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_166);
            this_GetterHeader_2=ruleGetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt535=2;
            alt535 = dfa535.predict(input);
            switch (alt535) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_111);
                    lv_body_3_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt536=2;
            int LA536_0 = input.LA(1);
            if ( (LA536_0==Semicolon) ) {
                alt536=1;
            }
            switch (alt536) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_GetterHeader_2 = null;
        EObject lv_body_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop537:
            do {
                int alt537=2;
                int LA537_0 = input.LA(1);
                if ( ((LA537_0>=Protected && LA537_0<=Abstract)||LA537_0==External||(LA537_0>=Private && LA537_0<=Project)||LA537_0==Public||LA537_0==Static||LA537_0==Const) ) {
                    alt537=1;
                }
                switch (alt537) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_165);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop537;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_166);
            this_GetterHeader_2=norm1_GetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt538=2;
            alt538 = dfa538.predict(input);
            switch (alt538) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_111);
                    lv_body_3_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt539=2;
            int LA539_0 = input.LA(1);
            if ( (LA539_0==Semicolon) ) {
                alt539=1;
            }
            switch (alt539) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleGetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject this_BogusTypeRefFragment_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject this_ColonSepDeclaredTypeRef_6 = null;
        	enterRule();
        try {
            {
            {
            int alt540=2;
            int LA540_0 = input.LA(1);
            if ( ((LA540_0>=Intersection && LA540_0<=Constructor)||LA540_0==Promisify||LA540_0==Default||LA540_0==Target||LA540_0==Await||LA540_0==Union||LA540_0==This||LA540_0==This_1||(LA540_0>=Type && LA540_0<=Void)||LA540_0==LeftCurlyBracket||LA540_0==Tilde||LA540_0==RULE_IDENTIFIER) ) {
                alt540=1;
            }
            switch (alt540) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_174);
                    this_BogusTypeRefFragment_0=ruleBogusTypeRefFragment(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_BogusTypeRefFragment_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,Get,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_109);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt541=2;
            int LA541_0 = input.LA(1);
            if ( (LA541_0==QuestionMark) ) {
                alt541=1;
            }
            switch (alt541) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
            }
            int alt542=2;
            int LA542_0 = input.LA(1);
            if ( (LA542_0==Colon) ) {
                alt542=1;
            }
            switch (alt542) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_GetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject this_BogusTypeRefFragment_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject this_ColonSepDeclaredTypeRef_6 = null;
        	enterRule();
        try {
            {
            {
            int alt543=2;
            int LA543_0 = input.LA(1);
            if ( ((LA543_0>=Intersection && LA543_0<=Constructor)||LA543_0==Promisify||LA543_0==Default||LA543_0==Target||LA543_0==Await||LA543_0==Union||LA543_0==This||LA543_0==This_1||(LA543_0>=Type && LA543_0<=Void)||LA543_0==LeftCurlyBracket||LA543_0==Tilde||LA543_0==RULE_IDENTIFIER) ) {
                alt543=1;
            }
            switch (alt543) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_174);
                    this_BogusTypeRefFragment_0=ruleBogusTypeRefFragment(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_BogusTypeRefFragment_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,Get,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_109);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt544=2;
            int LA544_0 = input.LA(1);
            if ( (LA544_0==QuestionMark) ) {
                alt544=1;
            }
            switch (alt544) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
            }
            int alt545=2;
            int LA545_0 = input.LA(1);
            if ( (LA545_0==Colon) ) {
                alt545=1;
            }
            switch (alt545) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4SetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4SetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4SetterDeclaration=ruleN4SetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4SetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_fpar_6_0 = null;
        EObject lv_body_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop546:
            do {
                int alt546=2;
                int LA546_0 = input.LA(1);
                if ( ((LA546_0>=Protected && LA546_0<=Abstract)||LA546_0==External||(LA546_0>=Private && LA546_0<=Project)||LA546_0==Public||LA546_0==Static||LA546_0==Const) ) {
                    alt546=1;
                }
                switch (alt546) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_167);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop546;
                }
            } while (true);
            otherlv_2=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_109);
            lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt547=2;
            int LA547_0 = input.LA(1);
            if ( (LA547_0==QuestionMark) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_72);
            lv_fpar_6_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_166); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt548=2;
            alt548 = dfa548.predict(input);
            switch (alt548) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                    }
                    pushFollow(FOLLOW_111);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt549=2;
            int LA549_0 = input.LA(1);
            if ( (LA549_0==Semicolon) ) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_fpar_6_0 = null;
        EObject lv_body_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop550:
            do {
                int alt550=2;
                int LA550_0 = input.LA(1);
                if ( ((LA550_0>=Protected && LA550_0<=Abstract)||LA550_0==External||(LA550_0>=Private && LA550_0<=Project)||LA550_0==Public||LA550_0==Static||LA550_0==Const) ) {
                    alt550=1;
                }
                switch (alt550) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_167);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop550;
                }
            } while (true);
            otherlv_2=(Token)match(input,Set,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_109);
            lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt551=2;
            int LA551_0 = input.LA(1);
            if ( (LA551_0==QuestionMark) ) {
                alt551=1;
            }
            switch (alt551) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_72);
            lv_fpar_6_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_166); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt552=2;
            alt552 = dfa552.predict(input);
            switch (alt552) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                    }
                    pushFollow(FOLLOW_111);
                    lv_body_8_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt553=2;
            int LA553_0 = input.LA(1);
            if ( (LA553_0==Semicolon) ) {
                alt553=1;
            }
            switch (alt553) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingPattern=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject this_ObjectBindingPattern_0 = null;
        EObject this_ArrayBindingPattern_1 = null;
        	enterRule();
        try {
            {
            int alt554=2;
            int LA554_0 = input.LA(1);
            if ( (LA554_0==LeftCurlyBracket) ) {
                alt554=1;
            }
            else if ( (LA554_0==LeftSquareBracket) ) {
                alt554=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 554, 0, input);
                throw nvae;
            }
            switch (alt554) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=ruleObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=ruleArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingPattern() throws RecognitionException {
        EObject current = null;
        EObject this_ObjectBindingPattern_0 = null;
        EObject this_ArrayBindingPattern_1 = null;
        	enterRule();
        try {
            {
            int alt555=2;
            int LA555_0 = input.LA(1);
            if ( (LA555_0==LeftCurlyBracket) ) {
                alt555=1;
            }
            else if ( (LA555_0==LeftSquareBracket) ) {
                alt555=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 555, 0, input);
                throw nvae;
            }
            switch (alt555) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=norm1_ObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=norm1_ArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleObjectBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectBindingPattern=ruleObjectBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;
        EObject lv_properties_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt557=2;
            int LA557_0 = input.LA(1);
            if ( ((LA557_0>=Intersection && LA557_0<=With)||(LA557_0>=For && LA557_0<=Var)||(LA557_0>=As && LA557_0<=Of)||(LA557_0>=CommercialAt && LA557_0<=LeftSquareBracket)||LA557_0==RULE_DOUBLE||(LA557_0>=RULE_HEX_INT && LA557_0<=RULE_OCTAL_INT)||LA557_0==RULE_SCIENTIFIC_INT||LA557_0==RULE_IDENTIFIER||LA557_0==RULE_STRING||LA557_0==RULE_INT) ) {
                alt557=1;
            }
            switch (alt557) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_properties_2_0=ruleBindingProperty();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop556:
                    do {
                        int alt556=2;
                        int LA556_0 = input.LA(1);
                        if ( (LA556_0==Comma) ) {
                            alt556=1;
                        }
                        switch (alt556) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_176); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_properties_4_0=ruleBindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop556;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;
        EObject lv_properties_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt559=2;
            int LA559_0 = input.LA(1);
            if ( ((LA559_0>=Intersection && LA559_0<=With)||(LA559_0>=For && LA559_0<=Var)||(LA559_0>=As && LA559_0<=Of)||(LA559_0>=CommercialAt && LA559_0<=LeftSquareBracket)||LA559_0==RULE_DOUBLE||(LA559_0>=RULE_HEX_INT && LA559_0<=RULE_OCTAL_INT)||LA559_0==RULE_SCIENTIFIC_INT||LA559_0==RULE_IDENTIFIER||LA559_0==RULE_STRING||LA559_0==RULE_INT) ) {
                alt559=1;
            }
            switch (alt559) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_15);
                    lv_properties_2_0=norm1_BindingProperty();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop558:
                    do {
                        int alt558=2;
                        int LA558_0 = input.LA(1);
                        if ( (LA558_0==Comma) ) {
                            alt558=1;
                        }
                        switch (alt558) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_176); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_properties_4_0=norm1_BindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop558;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayBindingPattern=ruleArrayBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_177); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop560:
            do {
                int alt560=2;
                int LA560_0 = input.LA(1);
                if ( (LA560_0==Comma) ) {
                    alt560=1;
                }
                switch (alt560) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_177);
            	    lv_elements_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop560;
                }
            } while (true);
            int alt565=2;
            int LA565_0 = input.LA(1);
            if ( ((LA565_0>=Intersection && LA565_0<=Implements)||(LA565_0>=Promisify && LA565_0<=Abstract)||LA565_0==External||(LA565_0>=Private && LA565_0<=Project)||LA565_0==Public||LA565_0==Static||LA565_0==Target||(LA565_0>=Async && LA565_0<=Await)||LA565_0==Union||(LA565_0>=Yield && LA565_0<=This)||LA565_0==From||LA565_0==Type||LA565_0==FullStopFullStopFullStop||(LA565_0>=Get && LA565_0<=Let)||(LA565_0>=Out && LA565_0<=Set)||LA565_0==As||LA565_0==Of||(LA565_0>=CommercialAt && LA565_0<=LeftSquareBracket)||LA565_0==LeftCurlyBracket||LA565_0==RULE_IDENTIFIER) ) {
                alt565=1;
            }
            switch (alt565) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_elements_3_0=ruleBindingRestElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop562:
                    do {
                        int alt562=2;
                        alt562 = dfa562.predict(input);
                        switch (alt562) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_178); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop561:
                    	    do {
                    	        int alt561=2;
                    	        int LA561_0 = input.LA(1);
                    	        if ( (LA561_0==Comma) ) {
                    	            alt561=1;
                    	        }
                    	        switch (alt561) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_178);
                    	    	    lv_elements_5_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop561;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_101);
                    	    lv_elements_6_0=ruleBindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop562;
                        }
                    } while (true);
                    int alt564=2;
                    int LA564_0 = input.LA(1);
                    if ( (LA564_0==Comma) ) {
                        alt564=1;
                    }
                    switch (alt564) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop563:
                            do {
                                int alt563=2;
                                int LA563_0 = input.LA(1);
                                if ( (LA563_0==Comma) ) {
                                    alt563=1;
                                }
                                switch (alt563) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_101);
                            	    lv_elements_8_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop563;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_177); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop566:
            do {
                int alt566=2;
                int LA566_0 = input.LA(1);
                if ( (LA566_0==Comma) ) {
                    alt566=1;
                }
                switch (alt566) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_177);
            	    lv_elements_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop566;
                }
            } while (true);
            int alt571=2;
            int LA571_0 = input.LA(1);
            if ( ((LA571_0>=Intersection && LA571_0<=Implements)||(LA571_0>=Promisify && LA571_0<=Abstract)||LA571_0==External||(LA571_0>=Private && LA571_0<=Project)||LA571_0==Public||LA571_0==Static||LA571_0==Target||(LA571_0>=Async && LA571_0<=Await)||LA571_0==Union||LA571_0==This||LA571_0==From||LA571_0==Type||LA571_0==FullStopFullStopFullStop||(LA571_0>=Get && LA571_0<=Let)||(LA571_0>=Out && LA571_0<=Set)||LA571_0==As||LA571_0==Of||(LA571_0>=CommercialAt && LA571_0<=LeftSquareBracket)||LA571_0==LeftCurlyBracket||LA571_0==RULE_IDENTIFIER) ) {
                alt571=1;
            }
            switch (alt571) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_elements_3_0=norm1_BindingRestElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop568:
                    do {
                        int alt568=2;
                        alt568 = dfa568.predict(input);
                        switch (alt568) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_178); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop567:
                    	    do {
                    	        int alt567=2;
                    	        int LA567_0 = input.LA(1);
                    	        if ( (LA567_0==Comma) ) {
                    	            alt567=1;
                    	        }
                    	        switch (alt567) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_178);
                    	    	    lv_elements_5_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop567;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_101);
                    	    lv_elements_6_0=norm1_BindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop568;
                        }
                    } while (true);
                    int alt570=2;
                    int LA570_0 = input.LA(1);
                    if ( (LA570_0==Comma) ) {
                        alt570=1;
                    }
                    switch (alt570) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop569:
                            do {
                                int alt569=2;
                                int LA569_0 = input.LA(1);
                                if ( (LA569_0==Comma) ) {
                                    alt569=1;
                                }
                                switch (alt569) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_101);
                            	    lv_elements_8_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop569;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingProperty() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingProperty = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPropertyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingProperty=ruleBindingProperty();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingProperty; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingProperty() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;
        EObject lv_value_2_0 = null;
        EObject lv_value_3_0 = null;
        	enterRule();
        try {
            {
            int alt572=2;
            alt572 = dfa572.predict(input);
            switch (alt572) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_declaredName_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_179); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=ruleBindingElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=ruleSingleNameBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingProperty() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;
        EObject lv_value_2_0 = null;
        EObject lv_value_3_0 = null;
        	enterRule();
        try {
            {
            int alt573=2;
            alt573 = dfa573.predict(input);
            switch (alt573) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_declaredName_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_179); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=norm1_BindingElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=norm1_SingleNameBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSingleNameBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleNameBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleNameBinding=ruleSingleNameBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleNameBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm1_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm3_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm5_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm7_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingElement=ruleBindingElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElement() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementImpl_0 = null;
        	enterRule();
        try {
            {
            if ( state.backtracking==0 ) {
              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=ruleBindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElement() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementImpl_0 = null;
        	enterRule();
        try {
            {
            if ( state.backtracking==0 ) {
              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=norm1_BindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingRestElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingRestElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingRestElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingRestElement=ruleBindingRestElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingRestElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingRestElement() throws RecognitionException {
        EObject current = null;
        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;
        	enterRule();
        try {
            {
            {
            int alt574=2;
            int LA574_0 = input.LA(1);
            if ( (LA574_0==FullStopFullStopFullStop) ) {
                alt574=1;
            }
            switch (alt574) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_179); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", true, "...");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=ruleBindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingRestElement() throws RecognitionException {
        EObject current = null;
        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;
        	enterRule();
        try {
            {
            {
            int alt575=2;
            int LA575_0 = input.LA(1);
            if ( (LA575_0==FullStopFullStopFullStop) ) {
                alt575=1;
            }
            switch (alt575) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_179); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", true, "...");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=norm1_BindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        EObject lv_varDecl_3_0 = null;
        	enterRule();
        try {
            {
            int alt577=2;
            int LA577_0 = input.LA(1);
            if ( (LA577_0==LeftCurlyBracket) && (synpred324_InternalN4JSParser())) {
                alt577=1;
            }
            else if ( (LA577_0==LeftSquareBracket) && (synpred324_InternalN4JSParser())) {
                alt577=1;
            }
            else if ( ((LA577_0>=Intersection && LA577_0<=Implements)||(LA577_0>=Promisify && LA577_0<=Abstract)||LA577_0==External||(LA577_0>=Private && LA577_0<=Project)||LA577_0==Public||LA577_0==Static||LA577_0==Target||(LA577_0>=Async && LA577_0<=Await)||LA577_0==Union||(LA577_0>=Yield && LA577_0<=This)||LA577_0==From||LA577_0==Type||(LA577_0>=Get && LA577_0<=Let)||(LA577_0>=Out && LA577_0<=Set)||LA577_0==As||LA577_0==Of||LA577_0==CommercialAt||LA577_0==RULE_IDENTIFIER) ) {
                alt577=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 577, 0, input);
                throw nvae;
            }
            switch (alt577) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_nestedPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt576=2;
                    int LA576_0 = input.LA(1);
                    if ( (LA576_0==EqualsSign) ) {
                        alt576=1;
                    }
                    switch (alt576) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        EObject lv_varDecl_3_0 = null;
        	enterRule();
        try {
            {
            int alt579=2;
            int LA579_0 = input.LA(1);
            if ( (LA579_0==LeftCurlyBracket) && (synpred325_InternalN4JSParser())) {
                alt579=1;
            }
            else if ( (LA579_0==LeftSquareBracket) && (synpred325_InternalN4JSParser())) {
                alt579=1;
            }
            else if ( ((LA579_0>=Intersection && LA579_0<=Implements)||(LA579_0>=Promisify && LA579_0<=Abstract)||LA579_0==External||(LA579_0>=Private && LA579_0<=Project)||LA579_0==Public||LA579_0==Static||LA579_0==Target||(LA579_0>=Async && LA579_0<=Await)||LA579_0==Union||LA579_0==This||LA579_0==From||LA579_0==Type||(LA579_0>=Get && LA579_0<=Let)||(LA579_0>=Out && LA579_0<=Set)||LA579_0==As||LA579_0==Of||LA579_0==CommercialAt||LA579_0==RULE_IDENTIFIER) ) {
                alt579=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 579, 0, input);
                throw nvae;
            }
            switch (alt579) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_nestedPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt578=2;
                    int LA578_0 = input.LA(1);
                    if ( (LA578_0==EqualsSign) ) {
                        alt578=1;
                    }
                    switch (alt578) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleElision() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleElision = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElisionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleElision=ruleElision();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElision; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleElision() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getElisionAccess().getBindingElementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralOrComputedPropertyName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralOrComputedPropertyName=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralOrComputedPropertyName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;
        AntlrDatatypeRuleToken lv_literalName_2_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            int alt580=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt580=1;
                }
                break;
            case RULE_STRING:
                {
                alt580=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt580=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt580=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 580, 0, input);
                throw nvae;
            }
            switch (alt580) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.N4JS.STRING");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_128);
                    lv_expression_4_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;
        AntlrDatatypeRuleToken lv_literalName_2_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            int alt581=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt581=1;
                }
                break;
            case RULE_STRING:
                {
                alt581=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt581=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt581=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 581, 0, input);
                throw nvae;
            }
            switch (alt581) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.N4JS.STRING");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_128);
                    lv_expression_4_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElement=ruleJSXElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        EObject lv_jsxElementName_1_0 = null;
        EObject lv_jsxAttributes_2_0 = null;
        EObject lv_jsxChildren_4_0 = null;
        EObject lv_jsxClosingName_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxElementNameJSXElementNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_180);
            lv_jsxElementName_1_0=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXElementRule());
              					}
              					set(
              						current,
              						"jsxElementName",
              						lv_jsxElementName_1_0,
              						"org.eclipse.n4js.N4JS.JSXElementName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop582:
            do {
                int alt582=2;
                int LA582_0 = input.LA(1);
                if ( ((LA582_0>=Intersection && LA582_0<=With)||(LA582_0>=For && LA582_0<=Var)||(LA582_0>=As && LA582_0<=Of)||LA582_0==LeftCurlyBracket||LA582_0==RULE_IDENTIFIER) ) {
                    alt582=1;
                }
                switch (alt582) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxAttributesJSXAttributeParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_180);
            	    lv_jsxAttributes_2_0=ruleJSXAttribute();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXElementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxAttributes",
            	      						lv_jsxAttributes_2_0,
            	      						"org.eclipse.n4js.N4JS.JSXAttribute");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop582;
                }
            } while (true);
            int alt584=2;
            int LA584_0 = input.LA(1);
            if ( (LA584_0==GreaterThanSign) ) {
                alt584=1;
            }
            else if ( (LA584_0==Solidus) ) {
                alt584=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 584, 0, input);
                throw nvae;
            }
            switch (alt584) {
                case 1 :
                    {
                    {
                    otherlv_3=(Token)match(input,GreaterThanSign,FOLLOW_181); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0());
                    }
                    loop583:
                    do {
                        int alt583=2;
                        int LA583_0 = input.LA(1);
                        if ( (LA583_0==LessThanSign) ) {
                            int LA583_1 = input.LA(2);
                            if ( ((LA583_1>=Intersection && LA583_1<=Implements)||(LA583_1>=Promisify && LA583_1<=Abstract)||LA583_1==External||(LA583_1>=Private && LA583_1<=Project)||LA583_1==Public||LA583_1==Static||LA583_1==Target||(LA583_1>=Async && LA583_1<=Await)||LA583_1==Union||(LA583_1>=Yield && LA583_1<=This)||LA583_1==From||LA583_1==Type||(LA583_1>=Get && LA583_1<=Let)||(LA583_1>=Out && LA583_1<=Set)||LA583_1==As||LA583_1==Of||LA583_1==GreaterThanSign||LA583_1==RULE_IDENTIFIER) ) {
                                alt583=1;
                            }
                        }
                        else if ( (LA583_0==LeftCurlyBracket) ) {
                            alt583=1;
                        }
                        switch (alt583) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxChildrenJSXChildParserRuleCall_3_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_181);
                    	    lv_jsxChildren_4_0=ruleJSXChild();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"jsxChildren",
                    	      								lv_jsxChildren_4_0,
                    	      								"org.eclipse.n4js.N4JS.JSXChild");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop583;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,LessThanSign,FOLLOW_182); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_3_0_2());
                    }
                    otherlv_6=(Token)match(input,Solidus,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_6, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_0_3());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxClosingNameJSXElementNameParserRuleCall_3_0_4_0());
                    }
                    pushFollow(FOLLOW_134);
                    lv_jsxClosingName_7_0=ruleJSXElementName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                      							}
                      							set(
                      								current,
                      								"jsxClosingName",
                      								lv_jsxClosingName_7_0,
                      								"org.eclipse.n4js.N4JS.JSXElementName");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_8=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_8, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_5());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_9=(Token)match(input,Solidus,FOLLOW_134); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_9, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0());
                    }
                    otherlv_10=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXFragment() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXFragment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXFragment=ruleJSXFragment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXFragment() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jsxChildren_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getJSXFragmentAccess().getJSXFragmentAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LessThanSign,FOLLOW_134); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_1());
            }
            otherlv_2=(Token)match(input,GreaterThanSign,FOLLOW_181); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_2());
            }
            loop585:
            do {
                int alt585=2;
                int LA585_0 = input.LA(1);
                if ( (LA585_0==LessThanSign) ) {
                    int LA585_1 = input.LA(2);
                    if ( ((LA585_1>=Intersection && LA585_1<=Implements)||(LA585_1>=Promisify && LA585_1<=Abstract)||LA585_1==External||(LA585_1>=Private && LA585_1<=Project)||LA585_1==Public||LA585_1==Static||LA585_1==Target||(LA585_1>=Async && LA585_1<=Await)||LA585_1==Union||(LA585_1>=Yield && LA585_1<=This)||LA585_1==From||LA585_1==Type||(LA585_1>=Get && LA585_1<=Let)||(LA585_1>=Out && LA585_1<=Set)||LA585_1==As||LA585_1==Of||LA585_1==GreaterThanSign||LA585_1==RULE_IDENTIFIER) ) {
                        alt585=1;
                    }
                }
                else if ( (LA585_0==LeftCurlyBracket) ) {
                    alt585=1;
                }
                switch (alt585) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getJSXFragmentAccess().getJsxChildrenJSXChildParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_181);
            	    lv_jsxChildren_3_0=ruleJSXChild();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXFragmentRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxChildren",
            	      						lv_jsxChildren_3_0,
            	      						"org.eclipse.n4js.N4JS.JSXChild");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop585;
                }
            } while (true);
            otherlv_4=(Token)match(input,LessThanSign,FOLLOW_182); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_4());
            }
            otherlv_5=(Token)match(input,Solidus,FOLLOW_134); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getJSXFragmentAccess().getSolidusKeyword_5());
            }
            otherlv_6=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_6());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXChild() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXChild = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXChildRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXChild=ruleJSXChild();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXChild; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXChild() throws RecognitionException {
        EObject current = null;
        EObject this_JSXElement_0 = null;
        EObject this_JSXFragment_1 = null;
        EObject this_JSXExpression_2 = null;
        	enterRule();
        try {
            {
            int alt586=3;
            int LA586_0 = input.LA(1);
            if ( (LA586_0==LessThanSign) ) {
                int LA586_1 = input.LA(2);
                if ( (LA586_1==GreaterThanSign) ) {
                    alt586=2;
                }
                else if ( ((LA586_1>=Intersection && LA586_1<=Implements)||(LA586_1>=Promisify && LA586_1<=Abstract)||LA586_1==External||(LA586_1>=Private && LA586_1<=Project)||LA586_1==Public||LA586_1==Static||LA586_1==Target||(LA586_1>=Async && LA586_1<=Await)||LA586_1==Union||(LA586_1>=Yield && LA586_1<=This)||LA586_1==From||LA586_1==Type||(LA586_1>=Get && LA586_1<=Let)||(LA586_1>=Out && LA586_1<=Set)||LA586_1==As||LA586_1==Of||LA586_1==RULE_IDENTIFIER) ) {
                    alt586=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 586, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA586_0==LeftCurlyBracket) ) {
                alt586=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 586, 0, input);
                throw nvae;
            }
            switch (alt586) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_0=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXFragmentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_1=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXExpression_2=ruleJSXExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXExpression_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXExpression=ruleJSXExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_23);
            lv_expression_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementName() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElementName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementName=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementName() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getJSXElementNameAccess().getExpressionJSXElementNameExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getJSXElementNameRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.JSXElementNameExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElementNameExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementNameExpression=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementNameExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_2 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_183);
            this_IdentifierRef_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            loop587:
            do {
                int alt587=2;
                int LA587_0 = input.LA(1);
                if ( (LA587_0==QuestionMarkFullStop||LA587_0==FullStop) ) {
                    alt587=1;
                }
                switch (alt587) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_0(),
            	      						current);
            	    }
            	    }
            	    if ( state.backtracking==0 ) {
            	      				if (current==null) {
            	      					current = createModelElement(grammarAccess.getJSXElementNameExpressionRule());
            	      				}
            	      				newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1());
            	    }
            	    pushFollow(FOLLOW_183);
            	    this_ParameterizedPropertyAccessExpressionTail_2=ruleParameterizedPropertyAccessExpressionTail(current);
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				current = this_ParameterizedPropertyAccessExpressionTail_2;
            	      				afterParserOrEnumRuleCall();
            	    }
            	    }
            	    break;
            	default :
            	    break loop587;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXAttribute=ruleJSXAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXAttribute() throws RecognitionException {
        EObject current = null;
        EObject this_JSXSpreadAttribute_0 = null;
        EObject this_JSXPropertyAttribute_1 = null;
        	enterRule();
        try {
            {
            int alt588=2;
            int LA588_0 = input.LA(1);
            if ( (LA588_0==LeftCurlyBracket) ) {
                alt588=1;
            }
            else if ( ((LA588_0>=Intersection && LA588_0<=With)||(LA588_0>=For && LA588_0<=Var)||(LA588_0>=As && LA588_0<=Of)||LA588_0==RULE_IDENTIFIER) ) {
                alt588=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 588, 0, input);
                throw nvae;
            }
            switch (alt588) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXSpreadAttribute_0=ruleJSXSpreadAttribute();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXSpreadAttribute_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXPropertyAttribute_1=ruleJSXPropertyAttribute();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXPropertyAttribute_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXSpreadAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXSpreadAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXSpreadAttribute=ruleJSXSpreadAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXSpreadAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_184); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0());
            }
            otherlv_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_23);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXSpreadAttributeRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleJSXIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleJSXIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXIdentifier=ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleJSXIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_INT_3=null;
        Token this_HEX_INT_4=null;
        Token this_BINARY_INT_5=null;
        Token this_OCTAL_INT_6=null;
        Token this_SCIENTIFIC_INT_7=null;
        Token this_LEGACY_OCTAL_INT_8=null;
        AntlrDatatypeRuleToken this_IdentifierName_0 = null;
        AntlrDatatypeRuleToken this_IdentifierName_9 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_0());
            }
            pushFollow(FOLLOW_185);
            this_IdentifierName_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(this_IdentifierName_0);
            }
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            loop592:
            do {
                int alt592=2;
                int LA592_0 = input.LA(1);
                if ( (LA592_0==HyphenMinusHyphenMinus||LA592_0==HyphenMinus) ) {
                    alt592=1;
                }
                switch (alt592) {
            	case 1 :
            	    {
            	    int alt589=2;
            	    int LA589_0 = input.LA(1);
            	    if ( (LA589_0==HyphenMinus) ) {
            	        alt589=1;
            	    }
            	    else if ( (LA589_0==HyphenMinusHyphenMinus) ) {
            	        alt589=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 589, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt589) {
            	        case 1 :
            	            {
            	            kw=(Token)match(input,HyphenMinus,FOLLOW_186); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusKeyword_1_0_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            kw=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_186); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
            	            }
            	            }
            	            break;
            	    }
            	    int alt591=2;
            	    alt591 = dfa591.predict(input);
            	    switch (alt591) {
            	        case 1 :
            	            {
            	            int alt590=7;
            	            switch ( input.LA(1) ) {
            	            case RULE_INT:
            	                {
            	                alt590=1;
            	                }
            	                break;
            	            case RULE_HEX_INT:
            	                {
            	                alt590=2;
            	                }
            	                break;
            	            case RULE_BINARY_INT:
            	                {
            	                alt590=3;
            	                }
            	                break;
            	            case RULE_OCTAL_INT:
            	                {
            	                alt590=4;
            	                }
            	                break;
            	            case RULE_SCIENTIFIC_INT:
            	                {
            	                alt590=5;
            	                }
            	                break;
            	            case RULE_LEGACY_OCTAL_INT:
            	                {
            	                alt590=6;
            	                }
            	                break;
            	            case Intersection:
            	            case Constructor:
            	            case Implements:
            	            case Instanceof:
            	            case Promisify:
            	            case Interface:
            	            case Protected:
            	            case Abstract:
            	            case Continue:
            	            case Debugger:
            	            case External:
            	            case Function:
            	            case Default:
            	            case Extends:
            	            case Finally:
            	            case Private:
            	            case Project:
            	            case Delete:
            	            case Export:
            	            case Import:
            	            case Public:
            	            case Return:
            	            case Static:
            	            case Switch:
            	            case Target:
            	            case Typeof:
            	            case Async:
            	            case Await:
            	            case Break:
            	            case Catch:
            	            case Class:
            	            case Const:
            	            case False:
            	            case Super:
            	            case Throw:
            	            case Union:
            	            case While:
            	            case Yield:
            	            case This:
            	            case Case:
            	            case Else:
            	            case Enum:
            	            case From:
            	            case Null:
            	            case This_1:
            	            case True:
            	            case Type:
            	            case Void:
            	            case With:
            	            case For:
            	            case Get:
            	            case Let:
            	            case New:
            	            case Out:
            	            case Set:
            	            case Try:
            	            case Var:
            	            case As:
            	            case Do:
            	            case If:
            	            case In:
            	            case Of:
            	            case RULE_IDENTIFIER:
            	                {
            	                alt590=7;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 590, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt590) {
            	                case 1 :
            	                    {
            	                    this_INT_3=(Token)match(input,RULE_INT,FOLLOW_185); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_INT_3);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_INT_3, grammarAccess.getJSXIdentifierAccess().getINTTerminalRuleCall_1_1_0_0());
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    this_HEX_INT_4=(Token)match(input,RULE_HEX_INT,FOLLOW_185); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_HEX_INT_4);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_HEX_INT_4, grammarAccess.getJSXIdentifierAccess().getHEX_INTTerminalRuleCall_1_1_0_1());
            	                    }
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    this_BINARY_INT_5=(Token)match(input,RULE_BINARY_INT,FOLLOW_185); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_BINARY_INT_5);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_BINARY_INT_5, grammarAccess.getJSXIdentifierAccess().getBINARY_INTTerminalRuleCall_1_1_0_2());
            	                    }
            	                    }
            	                    break;
            	                case 4 :
            	                    {
            	                    this_OCTAL_INT_6=(Token)match(input,RULE_OCTAL_INT,FOLLOW_185); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_OCTAL_INT_6);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_OCTAL_INT_6, grammarAccess.getJSXIdentifierAccess().getOCTAL_INTTerminalRuleCall_1_1_0_3());
            	                    }
            	                    }
            	                    break;
            	                case 5 :
            	                    {
            	                    this_SCIENTIFIC_INT_7=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_185); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_SCIENTIFIC_INT_7);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_SCIENTIFIC_INT_7, grammarAccess.getJSXIdentifierAccess().getSCIENTIFIC_INTTerminalRuleCall_1_1_0_4());
            	                    }
            	                    }
            	                    break;
            	                case 6 :
            	                    {
            	                    this_LEGACY_OCTAL_INT_8=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_185); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_LEGACY_OCTAL_INT_8);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_LEGACY_OCTAL_INT_8, grammarAccess.getJSXIdentifierAccess().getLEGACY_OCTAL_INTTerminalRuleCall_1_1_0_5());
            	                    }
            	                    }
            	                    break;
            	                case 7 :
            	                    {
            	                    if ( state.backtracking==0 ) {
            	                      						newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_1_1_0_6());
            	                    }
            	                    pushFollow(FOLLOW_185);
            	                    this_IdentifierName_9=ruleIdentifierName();
            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_IdentifierName_9);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						afterParserOrEnumRuleCall();
            	                    }
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop592;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXPropertyAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXPropertyAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXPropertyAttribute=ruleJSXPropertyAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXPropertyAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_jsxAttributeValue_2_0 = null;
        EObject lv_jsxAttributeValue_3_0 = null;
        EObject lv_jsxAttributeValue_4_0 = null;
        EObject lv_jsxAttributeValue_6_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getJSXPropertyAttributeRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getPropertyIdentifiableElementCrossReference_0_0());
            }
            pushFollow(FOLLOW_63);
            ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt594=2;
            int LA594_0 = input.LA(1);
            if ( (LA594_0==EqualsSign) ) {
                alt594=1;
            }
            switch (alt594) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_187); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0());
                    }
                    int alt593=4;
                    switch ( input.LA(1) ) {
                    case RULE_STRING:
                        {
                        alt593=1;
                        }
                        break;
                    case LessThanSign:
                        {
                        int LA593_2 = input.LA(2);
                        if ( ((LA593_2>=Intersection && LA593_2<=Implements)||(LA593_2>=Promisify && LA593_2<=Abstract)||LA593_2==External||(LA593_2>=Private && LA593_2<=Project)||LA593_2==Public||LA593_2==Static||LA593_2==Target||(LA593_2>=Async && LA593_2<=Await)||LA593_2==Union||(LA593_2>=Yield && LA593_2<=This)||LA593_2==From||LA593_2==Type||(LA593_2>=Get && LA593_2<=Let)||(LA593_2>=Out && LA593_2<=Set)||LA593_2==As||LA593_2==Of||LA593_2==RULE_IDENTIFIER) ) {
                            alt593=2;
                        }
                        else if ( (LA593_2==GreaterThanSign) ) {
                            alt593=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 593, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LeftCurlyBracket:
                        {
                        alt593=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 593, 0, input);
                        throw nvae;
                    }
                    switch (alt593) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueStringLiteralParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_2_0=ruleStringLiteral();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_2_0,
                              								"org.eclipse.n4js.N4JS.StringLiteral");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXElementParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_3_0=ruleJSXElement();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_3_0,
                              								"org.eclipse.n4js.N4JS.JSXElement");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_4_0=ruleJSXFragment();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_4_0,
                              								"org.eclipse.n4js.N4JS.JSXFragment");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 4 :
                            {
                            {
                            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_3_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0());
                            }
                            pushFollow(FOLLOW_23);
                            lv_jsxAttributeValue_6_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              								}
                              								set(
                              									current,
                              									"jsxAttributeValue",
                              									lv_jsxAttributeValue_6_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_7, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_3_2());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVersionDeclaration(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredVersion_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_declaredVersion_0_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_declaredVersion_0_0, grammarAccess.getVersionDeclarationAccess().getDeclaredVersionVERSIONTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getVersionDeclarationRule());
              				}
              				setWithLastConsumed(
              					current,
              					"declaredVersion",
              					lv_declaredVersion_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.VERSION");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRef=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_IntersectionTypeExpression_0 = null;
        EObject lv_typeRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getTypeRefAccess().getIntersectionTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_141);
            this_IntersectionTypeExpression_0=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IntersectionTypeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt596=2;
            int LA596_0 = input.LA(1);
            if ( (LA596_0==VerticalLine) ) {
                alt596=1;
            }
            switch (alt596) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTypeRefAccess().getUnionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                    }
                    }
                    int cnt595=0;
                    loop595:
                    do {
                        int alt595=2;
                        int LA595_0 = input.LA(1);
                        if ( (LA595_0==VerticalLine) ) {
                            alt595=1;
                        }
                        switch (alt595) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_62); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getTypeRefAccess().getVerticalLineKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_141);
                    	    lv_typeRefs_3_0=ruleIntersectionTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTypeRefRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.IntersectionTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt595 >= 1 ) break loop595;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(595, input);
                                throw eee;
                        }
                        cnt595++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntersectionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpression=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ArrayTypeExpression_0 = null;
        EObject lv_typeRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getArrayTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_139);
            this_ArrayTypeExpression_0=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArrayTypeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt598=2;
            int LA598_0 = input.LA(1);
            if ( (LA598_0==Ampersand) ) {
                alt598=1;
            }
            switch (alt598) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getIntersectionTypeExpressionAccess().getIntersectionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                    }
                    }
                    int cnt597=0;
                    loop597:
                    do {
                        int alt597=2;
                        int LA597_0 = input.LA(1);
                        if ( (LA597_0==Ampersand) ) {
                            alt597=1;
                        }
                        switch (alt597) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Ampersand,FOLLOW_62); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_139);
                    	    lv_typeRefs_3_0=ruleArrayTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.ArrayTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt597 >= 1 ) break loop597;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(597, input);
                                throw eee;
                        }
                        cnt597++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeExpression=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayTypeExpression() throws RecognitionException {
        EObject current = null;
        Token lv_arrayTypeExpression_2_0=null;
        Token otherlv_3=null;
        Token lv_arrayTypeExpression_5_0=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_arrayTypeExpression_11_0=null;
        Token otherlv_12=null;
        Token lv_arrayTypeExpression_14_0=null;
        Token otherlv_15=null;
        Token lv_arrayTypeExpression_18_0=null;
        Token otherlv_19=null;
        EObject lv_typeArgs_1_0 = null;
        EObject lv_typeArgs_9_0 = null;
        EObject this_PrimaryTypeExpression_16 = null;
        	enterRule();
        try {
            {
            int alt602=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                alt602=1;
                }
                break;
            case LeftParenthesis:
                {
                switch ( input.LA(2) ) {
                case QuestionMark:
                    {
                    int LA602_4 = input.LA(3);
                    if ( (LA602_4==LeftSquareBracket) ) {
                        alt602=3;
                    }
                    else if ( (LA602_4==Extends||LA602_4==Super||LA602_4==RightParenthesis) ) {
                        alt602=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 602, 4, input);
                        throw nvae;
                    }
                    }
                    break;
                case Out:
                    {
                    int LA602_5 = input.LA(3);
                    if ( ((LA602_5>=Intersection && LA602_5<=Constructor)||LA602_5==Promisify||LA602_5==Default||LA602_5==Target||LA602_5==Await||LA602_5==Union||LA602_5==This||LA602_5==This_1||(LA602_5>=Type && LA602_5<=Void)||LA602_5==LeftParenthesis||LA602_5==QuestionMark||LA602_5==LeftSquareBracket||LA602_5==LeftCurlyBracket||LA602_5==Tilde||LA602_5==RULE_IDENTIFIER) ) {
                        alt602=2;
                    }
                    else if ( (LA602_5==Colon) ) {
                        alt602=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 602, 5, input);
                        throw nvae;
                    }
                    }
                    break;
                case In:
                    {
                    alt602=2;
                    }
                    break;
                case Intersection:
                case Constructor:
                case Implements:
                case Promisify:
                case Interface:
                case Protected:
                case Abstract:
                case External:
                case Default:
                case Private:
                case Project:
                case Public:
                case Static:
                case Target:
                case Async:
                case Await:
                case Union:
                case Yield:
                case This:
                case From:
                case This_1:
                case Type:
                case Void:
                case FullStopFullStopFullStop:
                case Get:
                case Let:
                case Set:
                case As:
                case Of:
                case LeftParenthesis:
                case RightParenthesis:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                case Tilde:
                case RULE_IDENTIFIER:
                    {
                    alt602=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 602, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt602=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);
                throw nvae;
            }
            switch (alt602) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_0_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getTypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_127);
                    lv_typeArgs_1_0=ruleWildcardOldNotationWithoutBound();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.WildcardOldNotationWithoutBound");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_arrayTypeExpression_2_0=(Token)match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_arrayTypeExpression_2_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_3());
                    }
                    loop599:
                    do {
                        int alt599=2;
                        int LA599_0 = input.LA(1);
                        if ( (LA599_0==LeftSquareBracket) ) {
                            int LA599_2 = input.LA(2);
                            if ( (LA599_2==RightSquareBracket) ) {
                                int LA599_3 = input.LA(3);
                                if ( (synpred327_InternalN4JSParser()) ) {
                                    alt599=1;
                                }
                            }
                        }
                        switch (alt599) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_0_4_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_5_0=(Token)match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_5_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_6, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_4_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop599;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_189); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_8, grammarAccess.getArrayTypeExpressionAccess().getLeftParenthesisKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getTypeArgsWildcardParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_typeArgs_9_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_9_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.Wildcard");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_127); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_10, grammarAccess.getArrayTypeExpressionAccess().getRightParenthesisKeyword_1_3());
                    }
                    {
                    {
                    lv_arrayTypeExpression_11_0=(Token)match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_arrayTypeExpression_11_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    }
                    }
                    }
                    otherlv_12=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_12, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_5());
                    }
                    loop600:
                    do {
                        int alt600=2;
                        int LA600_0 = input.LA(1);
                        if ( (LA600_0==LeftSquareBracket) ) {
                            int LA600_2 = input.LA(2);
                            if ( (LA600_2==RightSquareBracket) ) {
                                int LA600_3 = input.LA(3);
                                if ( (synpred328_InternalN4JSParser()) ) {
                                    alt600=1;
                                }
                            }
                        }
                        switch (alt600) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_1_6_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_14_0=(Token)match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_14_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_15, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_6_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop600;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_188);
                    this_PrimaryTypeExpression_16=rulePrimaryTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryTypeExpression_16;
                      				afterParserOrEnumRuleCall();
                    }
                    loop601:
                    do {
                        int alt601=2;
                        int LA601_0 = input.LA(1);
                        if ( (LA601_0==LeftSquareBracket) ) {
                            int LA601_2 = input.LA(2);
                            if ( (LA601_2==RightSquareBracket) ) {
                                int LA601_3 = input.LA(3);
                                if ( (synpred329_InternalN4JSParser()) ) {
                                    alt601=1;
                                }
                            }
                        }
                        switch (alt601) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_18_0=(Token)match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_18_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_19=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_19, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_2_1_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop601;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePrimaryTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryTypeExpression=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_ArrowFunctionTypeExpression_0 = null;
        EObject this_IterableTypeExpression_1 = null;
        EObject this_TypeRefWithModifiers_2 = null;
        EObject this_TypeRef_4 = null;
        	enterRule();
        try {
            {
            int alt603=4;
            alt603 = dfa603.predict(input);
            switch (alt603) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowFunctionTypeExpression_0=ruleArrowFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowFunctionTypeExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterableTypeExpression_1=ruleIterableTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterableTypeExpression_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefWithModifiers_2=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRefWithModifiers_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1());
                    }
                    pushFollow(FOLLOW_72);
                    this_TypeRef_4=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeRef_4;
                      				afterParserOrEnumRuleCall();
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefWithModifiers = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithModifiers=ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;
        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0());
            }
            pushFollow(FOLLOW_145);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
            }
            int alt604=2;
            alt604 = dfa604.predict(input);
            switch (alt604) {
                case 1 :
                    {
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefWithModifiersRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", true, "?");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefWithoutModifiers = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithoutModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithoutModifiers=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithoutModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;
        Token lv_dynamic_2_0=null;
        EObject this_ParameterizedTypeRef_0 = null;
        EObject this_ThisTypeRef_1 = null;
        EObject this_TypeTypeRef_3 = null;
        EObject this_FunctionTypeExpressionOLD_4 = null;
        EObject this_UnionTypeExpressionOLD_5 = null;
        EObject this_IntersectionTypeExpressionOLD_6 = null;
        	enterRule();
        try {
            {
            int alt607=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt607=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt607=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt607=3;
                }
                break;
            case Union:
                {
                alt607=4;
                }
                break;
            case Intersection:
                {
                alt607=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 607, 0, input);
                throw nvae;
            }
            switch (alt607) {
                case 1 :
                    {
                    {
                    int alt605=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Default:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt605=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA605_4 = input.LA(3);
                            if ( (LA605_4==Promisify||LA605_4==Default||LA605_4==Target||LA605_4==Await||LA605_4==This||LA605_4==Void||LA605_4==RULE_IDENTIFIER) ) {
                                alt605=1;
                            }
                            else if ( (LA605_4==This_1) ) {
                                alt605=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 605, 4, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA605_5 = input.LA(3);
                            if ( (LA605_5==Promisify||LA605_5==Default||LA605_5==Target||LA605_5==Await||LA605_5==This||LA605_5==Void||LA605_5==RULE_IDENTIFIER) ) {
                                alt605=1;
                            }
                            else if ( (LA605_5==This_1) ) {
                                alt605=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 605, 5, input);
                                throw nvae;
                            }
                            }
                            break;
                        case Promisify:
                        case Default:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt605=1;
                            }
                            break;
                        case This_1:
                            {
                            alt605=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 605, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case This_1:
                        {
                        alt605=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 605, 0, input);
                        throw nvae;
                    }
                    switch (alt605) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0());
                            }
                            pushFollow(FOLLOW_34);
                            this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ParameterizedTypeRef_0;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                        case 2 :
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1());
                            }
                            pushFollow(FOLLOW_34);
                            this_ThisTypeRef_1=ruleThisTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ThisTypeRef_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt606=2;
                    alt606 = dfa606.predict(input);
                    switch (alt606) {
                        case 1 :
                            {
                            {
                            lv_dynamic_2_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_dynamic_2_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTypeRefWithoutModifiersRule());
                              						}
                              						setWithLastConsumed(current, "dynamic", true, "+");
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_4=ruleFunctionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_5=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_UnionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_6=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntersectionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefFunctionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefFunctionTypeExpression=ruleTypeRefFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRef_0 = null;
        EObject this_IterableTypeExpression_1 = null;
        EObject this_TypeTypeRef_2 = null;
        EObject this_UnionTypeExpressionOLD_3 = null;
        EObject this_IntersectionTypeExpressionOLD_4 = null;
        	enterRule();
        try {
            {
            int alt608=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt608=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt608=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt608=3;
                }
                break;
            case Union:
                {
                alt608=4;
                }
                break;
            case Intersection:
                {
                alt608=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 608, 0, input);
                throw nvae;
            }
            switch (alt608) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterableTypeExpression_1=ruleIterableTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterableTypeExpression_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_2=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeTypeRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_3=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_UnionTypeExpressionOLD_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_4=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntersectionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeArgInTypeTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgInTypeTypeRef=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgInTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRefNominal_0 = null;
        EObject this_ThisTypeRefNominal_1 = null;
        EObject this_WildcardOldNotation_2 = null;
        	enterRule();
        try {
            {
            int alt609=3;
            int LA609_0 = input.LA(1);
            if ( (LA609_0==Promisify||LA609_0==Default||LA609_0==Target||LA609_0==Await||LA609_0==This||LA609_0==Void||LA609_0==RULE_IDENTIFIER) ) {
                alt609=1;
            }
            else if ( (LA609_0==This_1) ) {
                alt609=2;
            }
            else if ( (LA609_0==QuestionMark) && (synpred333_InternalN4JSParser())) {
                alt609=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 609, 0, input);
                throw nvae;
            }
            switch (alt609) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_1=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefNominal_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardOldNotationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_2=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_WildcardOldNotation_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRef=ruleThisTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ThisTypeRefNominal_0 = null;
        EObject this_ThisTypeRefStructural_1 = null;
        	enterRule();
        try {
            {
            int alt610=2;
            int LA610_0 = input.LA(1);
            if ( (LA610_0==This_1) ) {
                alt610=1;
            }
            else if ( (LA610_0==Tilde) ) {
                alt610=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 610, 0, input);
                throw nvae;
            }
            switch (alt610) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_0=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefStructural_1=ruleThisTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRefNominal = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefNominal=ruleThisTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getThisTypeRefNominalAccess().getThisTypeRefNominalAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRefStructural = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefStructural=ruleThisTypeRefStructural();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;
        EObject this_TStructMemberList_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_190);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThisTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_191); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
            }
            int alt611=2;
            int LA611_0 = input.LA(1);
            if ( (LA611_0==With) ) {
                int LA611_1 = input.LA(2);
                if ( (LA611_1==LeftCurlyBracket) ) {
                    alt611=1;
                }
            }
            switch (alt611) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getThisTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionTypeExpressionOLD=ruleFunctionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        EObject lv_declaredThisType_5_0 = null;
        EObject lv_ownedTypeVars_9_0 = null;
        EObject lv_ownedTypeVars_11_0 = null;
        EObject this_TAnonymousFormalParameterList_14 = null;
        EObject this_ColonSepReturnTypeRef_16 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_192); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt612=2;
            int LA612_0 = input.LA(1);
            if ( (LA612_0==CommercialAt) ) {
                alt612=1;
            }
            switch (alt612) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,CommercialAt,FOLLOW_193); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                    }
                    otherlv_3=(Token)match(input,This,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                    }
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_194); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0());
                    }
                    pushFollow(FOLLOW_72);
                    lv_declaredThisType_5_0=ruleTypeRefFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"declaredThisType",
                      							lv_declaredThisType_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefFunctionTypeExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,Function,FOLLOW_195); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
            }
            int alt614=2;
            int LA614_0 = input.LA(1);
            if ( (LA614_0==LessThanSign) ) {
                alt614=1;
            }
            switch (alt614) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,LessThanSign,FOLLOW_196); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_8, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_1_0());
                    }
                    pushFollow(FOLLOW_115);
                    lv_ownedTypeVars_9_0=ruleTypeVariable();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						add(
                      							current,
                      							"ownedTypeVars",
                      							lv_ownedTypeVars_9_0,
                      							"org.eclipse.n4js.N4JS.TypeVariable");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop613:
                    do {
                        int alt613=2;
                        int LA613_0 = input.LA(1);
                        if ( (LA613_0==Comma) ) {
                            alt613=1;
                        }
                        switch (alt613) {
                    	case 1 :
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_196); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_10, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0());
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    lv_ownedTypeVars_11_0=ruleTypeVariable();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"ownedTypeVars",
                    	      								lv_ownedTypeVars_11_0,
                    	      								"org.eclipse.n4js.N4JS.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop613;
                        }
                    } while (true);
                    otherlv_12=(Token)match(input,GreaterThanSign,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_12, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                    }
                    }
                    break;
            }
            otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_13, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6());
            }
            pushFollow(FOLLOW_72);
            this_TAnonymousFormalParameterList_14=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TAnonymousFormalParameterList_14;
              			afterParserOrEnumRuleCall();
            }
            otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_198); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_15, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
            }
            int alt615=2;
            int LA615_0 = input.LA(1);
            if ( (LA615_0==Colon) ) {
                alt615=1;
            }
            switch (alt615) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_23);
                    this_ColonSepReturnTypeRef_16=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_16;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_17=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_17, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrowFunctionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowFunctionTypeExpression=ruleArrowFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject this_TAnonymousFormalParameterList_2 = null;
        EObject lv_returnTypeRef_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getArrowFunctionTypeExpressionAccess().getFunctionTypeExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_72);
            this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_TAnonymousFormalParameterList_2;
              					afterParserOrEnumRuleCall();
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
            }
            otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_4());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_5_0=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_fpars_0_0 = null;
        EObject lv_fpars_2_0 = null;
        	enterRule();
        try {
            {
            int alt617=2;
            int LA617_0 = input.LA(1);
            if ( ((LA617_0>=Intersection && LA617_0<=Implements)||(LA617_0>=Promisify && LA617_0<=Abstract)||LA617_0==External||LA617_0==Default||(LA617_0>=Private && LA617_0<=Project)||LA617_0==Public||LA617_0==Static||LA617_0==Target||(LA617_0>=Async && LA617_0<=Await)||LA617_0==Union||(LA617_0>=Yield && LA617_0<=This)||LA617_0==From||LA617_0==This_1||(LA617_0>=Type && LA617_0<=Void)||LA617_0==FullStopFullStopFullStop||(LA617_0>=Get && LA617_0<=Let)||(LA617_0>=Out && LA617_0<=Set)||LA617_0==As||LA617_0==Of||LA617_0==LeftParenthesis||LA617_0==QuestionMark||LA617_0==LeftSquareBracket||LA617_0==LeftCurlyBracket||LA617_0==Tilde||LA617_0==RULE_IDENTIFIER) ) {
                alt617=1;
            }
            switch (alt617) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_30);
                    lv_fpars_0_0=ruleTAnonymousFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                      					}
                      					add(
                      						current,
                      						"fpars",
                      						lv_fpars_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop616:
                    do {
                        int alt616=2;
                        int LA616_0 = input.LA(1);
                        if ( (LA616_0==Comma) ) {
                            alt616=1;
                        }
                        switch (alt616) {
                    	case 1 :
                    	    {
                    	    otherlv_1=(Token)match(input,Comma,FOLLOW_199); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      				newLeafNode(otherlv_1, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_fpars_2_0=ruleTAnonymousFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"fpars",
                    	      							lv_fpars_2_0,
                    	      							"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop616;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTAnonymousFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnonymousFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnonymousFormalParameter=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnonymousFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;
        Token lv_variadic_0_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepTypeRef_2 = null;
        EObject lv_typeRef_3_0 = null;
        EObject this_DefaultFormalParameter_4 = null;
        	enterRule();
        try {
            {
            {
            int alt618=2;
            int LA618_0 = input.LA(1);
            if ( (LA618_0==FullStopFullStopFullStop) ) {
                alt618=1;
            }
            switch (alt618) {
                case 1 :
                    {
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_112); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", true, "...");
                    }
                    }
                    }
                    break;
            }
            int alt619=2;
            alt619 = dfa619.predict(input);
            switch (alt619) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0());
                    }
                    pushFollow(FOLLOW_95);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_1_0,
                      									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      							}
                      							newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1());
                    }
                    pushFollow(FOLLOW_69);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefTypeRefParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_typeRef_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      						}
                      						set(
                      							current,
                      							"typeRef",
                      							lv_typeRef_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultFormalParameter(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_hasInitializerAssignment_0_0=null;
        AntlrDatatypeRuleToken lv_astInitializer_1_0 = null;
        	enterRule();
        try {
            {
            int alt621=2;
            int LA621_0 = input.LA(1);
            if ( (LA621_0==EqualsSign) ) {
                alt621=1;
            }
            switch (alt621) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_0_0=(Token)match(input,EqualsSign,FOLLOW_200); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_hasInitializerAssignment_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                    }
                    }
                    }
                    int alt620=2;
                    int LA620_0 = input.LA(1);
                    if ( (LA620_0==Promisify||LA620_0==Default||LA620_0==Target||LA620_0==Await||LA620_0==This||LA620_0==Void||LA620_0==RULE_IDENTIFIER) ) {
                        alt620=1;
                    }
                    switch (alt620) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getDefaultFormalParameterAccess().getAstInitializerTypeReferenceNameParserRuleCall_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_astInitializer_1_0=ruleTypeReferenceName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElementForParent(grammarAccess.getDefaultFormalParameterRule());
                              					}
                              					set(
                              						current,
                              						"astInitializer",
                              						lv_astInitializer_1_0,
                              						"org.eclipse.n4js.N4JS.TypeReferenceName");
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleUnionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnionTypeExpressionOLD=ruleUnionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;
        EObject lv_typeRefs_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getUnionTypeExpressionOLDAccess().getUnionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_15);
            lv_typeRefs_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop622:
            do {
                int alt622=2;
                int LA622_0 = input.LA(1);
                if ( (LA622_0==Comma) ) {
                    alt622=1;
                }
                switch (alt622) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_typeRefs_5_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop622;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntersectionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpressionOLD=ruleIntersectionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;
        EObject lv_typeRefs_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_15);
            lv_typeRefs_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop623:
            do {
                int alt623=2;
                int LA623_0 = input.LA(1);
                if ( (LA623_0==Comma) ) {
                    alt623=1;
                }
                switch (alt623) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_typeRefs_5_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop623;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRef=ruleParameterizedTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRefNominal_0 = null;
        EObject this_ParameterizedTypeRefStructural_1 = null;
        	enterRule();
        try {
            {
            int alt624=2;
            int LA624_0 = input.LA(1);
            if ( (LA624_0==Promisify||LA624_0==Default||LA624_0==Target||LA624_0==Await||LA624_0==This||LA624_0==Void||LA624_0==RULE_IDENTIFIER) ) {
                alt624=1;
            }
            else if ( (LA624_0==Tilde) ) {
                alt624=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 624, 0, input);
                throw nvae;
            }
            switch (alt624) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefStructural_1=ruleParameterizedTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefNominal = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominal=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject this_TypeReference_0 = null;
        EObject this_TypeReference_2 = null;
        EObject this_VersionRequest_3 = null;
        EObject this_TypeArguments_4 = null;
        	enterRule();
        try {
            {
            {
            int alt625=2;
            alt625 = dfa625.predict(input);
            switch (alt625) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_201);
                    this_TypeReference_0=ruleTypeReference(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeReference_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElement(
                      							grammarAccess.getParameterizedTypeRefNominalAccess().getVersionedParameterizedTypeRefAction_0_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_1_1());
                    }
                    pushFollow(FOLLOW_99);
                    this_TypeReference_2=ruleTypeReference(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_TypeReference_2;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getVersionRequestParserRuleCall_0_1_2());
                    }
                    pushFollow(FOLLOW_201);
                    this_VersionRequest_3=ruleVersionRequest(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_VersionRequest_3;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt626=2;
            alt626 = dfa626.predict(input);
            switch (alt626) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeArguments_4=ruleTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeArguments_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefStructural = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefStructural=ruleParameterizedTypeRefStructural();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;
        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;
        EObject this_TypeReference_1 = null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_3_0 = null;
        EObject this_TypeReference_4 = null;
        EObject this_VersionRequest_5 = null;
        EObject this_TypeArguments_6 = null;
        EObject this_TStructMemberList_8 = null;
        	enterRule();
        try {
            {
            {
            int alt627=2;
            alt627 = dfa627.predict(input);
            switch (alt627) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0());
                    }
                    pushFollow(FOLLOW_158);
                    lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                      							}
                      							set(
                      								current,
                      								"definedTypingStrategy",
                      								lv_definedTypingStrategy_0_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_202);
                    this_TypeReference_1=ruleTypeReference(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_TypeReference_1;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElement(
                      							grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionedParameterizedTypeRefStructuralAction_0_1_0(),
                      							current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0());
                    }
                    pushFollow(FOLLOW_158);
                    lv_definedTypingStrategy_3_0=ruleTypingStrategyUseSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                      							}
                      							set(
                      								current,
                      								"definedTypingStrategy",
                      								lv_definedTypingStrategy_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_1_2());
                    }
                    pushFollow(FOLLOW_99);
                    this_TypeReference_4=ruleTypeReference(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_TypeReference_4;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionRequestParserRuleCall_0_1_3());
                    }
                    pushFollow(FOLLOW_202);
                    this_VersionRequest_5=ruleVersionRequest(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_VersionRequest_5;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt628=2;
            alt628 = dfa628.predict(input);
            switch (alt628) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_191);
                    this_TypeArguments_6=ruleTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeArguments_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt629=2;
            int LA629_0 = input.LA(1);
            if ( (LA629_0==With) ) {
                int LA629_1 = input.LA(2);
                if ( (LA629_1==LeftCurlyBracket) ) {
                    alt629=1;
                }
            }
            switch (alt629) {
                case 1 :
                    {
                    otherlv_7=(Token)match(input,With,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_7, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_8=ruleTStructMemberList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMemberList_8;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIterableTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIterableTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIterableTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIterableTypeExpression=ruleIterableTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIterableTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIterableTypeExpression() throws RecognitionException {
        EObject current = null;
        Token lv_iterableTypeExpression_0_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArgs_1_0 = null;
        EObject lv_typeArgs_2_0 = null;
        EObject lv_typeArgs_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            lv_iterableTypeExpression_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_203); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_iterableTypeExpression_0_0, grammarAccess.getIterableTypeExpressionAccess().getIterableTypeExpressionLeftSquareBracketKeyword_0_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getIterableTypeExpressionRule());
              					}
              					setWithLastConsumed(current, "iterableTypeExpression", true, "[");
            }
            }
            }
            int alt631=2;
            int LA631_0 = input.LA(1);
            if ( (LA631_0==RightSquareBracket) ) {
                alt631=1;
            }
            else if ( ((LA631_0>=Intersection && LA631_0<=Constructor)||LA631_0==Promisify||LA631_0==Default||LA631_0==Target||LA631_0==Await||LA631_0==Union||LA631_0==This||LA631_0==This_1||(LA631_0>=Type && LA631_0<=Void)||LA631_0==Out||LA631_0==In||LA631_0==LeftParenthesis||LA631_0==QuestionMark||LA631_0==LeftSquareBracket||LA631_0==LeftCurlyBracket||LA631_0==Tilde||LA631_0==RULE_IDENTIFIER) ) {
                alt631=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 631, 0, input);
                throw nvae;
            }
            switch (alt631) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIterableTypeExpressionAccess().getTypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_typeArgs_1_0=ruleEmptyIterableTypeExpressionTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIterableTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.EmptyIterableTypeExpressionTail");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getIterableTypeExpressionAccess().getTypeArgsTypeArgumentParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_typeArgs_2_0=ruleTypeArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getIterableTypeExpressionRule());
                      							}
                      							add(
                      								current,
                      								"typeArgs",
                      								lv_typeArgs_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop630:
                    do {
                        int alt630=2;
                        int LA630_0 = input.LA(1);
                        if ( (LA630_0==Comma) ) {
                            alt630=1;
                        }
                        switch (alt630) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_203); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_3, grammarAccess.getIterableTypeExpressionAccess().getCommaKeyword_1_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getIterableTypeExpressionAccess().getTypeArgsTypeArgumentParserRuleCall_1_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_101);
                    	    lv_typeArgs_4_0=ruleTypeArgument();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getIterableTypeExpressionRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"typeArgs",
                    	      									lv_typeArgs_4_0,
                    	      									"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop630;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getIterableTypeExpressionAccess().getRightSquareBracketKeyword_1_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEmptyIterableTypeExpressionTail = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyIterableTypeExpressionTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyIterableTypeExpressionTail=ruleEmptyIterableTypeExpressionTail();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyIterableTypeExpressionTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getEmptyIterableTypeExpressionTailAccess().getWildcardAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getEmptyIterableTypeExpressionTailAccess().getRightSquareBracketKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVersionRequest(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_requestedVersion_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_requestedVersion_0_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_requestedVersion_0_0, grammarAccess.getVersionRequestAccess().getRequestedVersionVERSIONTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getVersionRequestRule());
              				}
              				setWithLastConsumed(
              					current,
              					"requestedVersion",
              					lv_requestedVersion_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.VERSION");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;
        EObject lv_typeArgs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_203); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_115);
            lv_typeArgs_1_0=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop632:
            do {
                int alt632=2;
                int LA632_0 = input.LA(1);
                if ( (LA632_0==Comma) ) {
                    alt632=1;
                }
                switch (alt632) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_203); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_115);
            	    lv_typeArgs_3_0=ruleTypeArgument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop632;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMemberList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_astStructuralMembers_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_204); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
            }
            loop634:
            do {
                int alt634=2;
                int LA634_0 = input.LA(1);
                if ( ((LA634_0>=Intersection && LA634_0<=With)||(LA634_0>=For && LA634_0<=Var)||(LA634_0>=As && LA634_0<=Of)||LA634_0==LessThanSign||LA634_0==RULE_IDENTIFIER) ) {
                    alt634=1;
                }
                switch (alt634) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTStructMemberListAccess().getAstStructuralMembersTStructMemberParserRuleCall_1_0_0());
            	    }
            	    pushFollow(FOLLOW_205);
            	    lv_astStructuralMembers_1_0=ruleTStructMember();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTStructMemberListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astStructuralMembers",
            	      							lv_astStructuralMembers_1_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TStructMember");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    int alt633=3;
            	    int LA633_0 = input.LA(1);
            	    if ( (LA633_0==Semicolon) ) {
            	        alt633=1;
            	    }
            	    else if ( (LA633_0==Comma) ) {
            	        alt633=2;
            	    }
            	    switch (alt633) {
            	        case 1 :
            	            {
            	            otherlv_2=(Token)match(input,Semicolon,FOLLOW_204); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					newLeafNode(otherlv_2, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_204); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					newLeafNode(otherlv_3, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop634;
                }
            } while (true);
            otherlv_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMember() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructMember = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMember=ruleTStructMember();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMember() throws RecognitionException {
        EObject current = null;
        EObject this_TStructGetter_0 = null;
        EObject this_TStructSetter_1 = null;
        EObject this_TStructMethod_2 = null;
        EObject this_TStructField_3 = null;
        	enterRule();
        try {
            {
            int alt635=4;
            alt635 = dfa635.predict(input);
            switch (alt635) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructGetter_0=ruleTStructGetter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructGetter_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructSetter_1=ruleTStructSetter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructSetter_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMethod_2=ruleTStructMethod();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMethod_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructField_3=ruleTStructField();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TStructField_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMethod() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructMethod = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMethod=ruleTStructMethod();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMethod() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_TypeVariables_1 = null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_TAnonymousFormalParameterList_4 = null;
        EObject this_ColonSepReturnTypeRef_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructMethodAccess().getTStructMethodAction_0_0_0(),
              							current);
            }
            }
            int alt636=2;
            int LA636_0 = input.LA(1);
            if ( (LA636_0==LessThanSign) ) {
                alt636=1;
            }
            switch (alt636) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTStructMethodRule());
                      						}
                      						newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVariablesParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_14);
                    this_TypeVariables_1=ruleTypeVariables(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructMethodAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_42);
            lv_name_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructMethodRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getTStructMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1());
            }
            pushFollow(FOLLOW_72);
            this_TAnonymousFormalParameterList_4=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TAnonymousFormalParameterList_4;
              			afterParserOrEnumRuleCall();
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
            }
            int alt637=2;
            int LA637_0 = input.LA(1);
            if ( (LA637_0==Colon) ) {
                alt637=1;
            }
            switch (alt637) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructMethodRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_6=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariables(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeVars_1_0 = null;
        EObject lv_typeVars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_196); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_115);
            lv_typeVars_1_0=ruleTypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
              					}
              					add(
              						current,
              						"typeVars",
              						lv_typeVars_1_0,
              						"org.eclipse.n4js.N4JS.TypeVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop638:
            do {
                int alt638=2;
                int LA638_0 = input.LA(1);
                if ( (LA638_0==Comma) ) {
                    alt638=1;
                }
                switch (alt638) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_196); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_115);
            	    lv_typeVars_3_0=ruleTypeVariable();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeVars",
            	      							lv_typeVars_3_0,
            	      							"org.eclipse.n4js.N4JS.TypeVariable");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop638;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepDeclaredTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_declaredTypeRef_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepDeclaredTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepDeclaredTypeRefAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_declaredTypeRef_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepDeclaredTypeRefRule());
              					}
              					set(
              						current,
              						"declaredTypeRef",
              						lv_declaredTypeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_typeRef_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepTypeRefAccess().getTypeRefTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepTypeRefRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_returnTypeRef_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepReturnTypeRefRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructField() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructField = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructField=ruleTStructField();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructField() throws RecognitionException {
        EObject current = null;
        Token lv_optional_1_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject this_ColonSepTypeRef_2 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTStructFieldAccess().getNameIdentifierNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_206);
            lv_name_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructFieldRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt639=2;
            int LA639_0 = input.LA(1);
            if ( (LA639_0==QuestionMark) ) {
                alt639=1;
            }
            switch (alt639) {
                case 1 :
                    {
                    {
                    lv_optional_1_0=(Token)match(input,QuestionMark,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                    }
                    }
                    }
                    break;
            }
            int alt640=2;
            int LA640_0 = input.LA(1);
            if ( (LA640_0==Colon) ) {
                alt640=1;
            }
            switch (alt640) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructFieldRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepTypeRef_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructGetter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructGetter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructGetter=ruleTStructGetter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructGetter() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ColonSepDeclaredTypeRef_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructGetterAccess().getTStructGetterAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Get,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructGetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_109);
            lv_name_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructGetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt641=2;
            int LA641_0 = input.LA(1);
            if ( (LA641_0==QuestionMark) ) {
                alt641=1;
            }
            switch (alt641) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
            }
            int alt642=2;
            int LA642_0 = input.LA(1);
            if ( (LA642_0==Colon) ) {
                alt642=1;
            }
            switch (alt642) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructGetterRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructGetterAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructSetter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructSetter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructSetter=ruleTStructSetter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructSetter() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject lv_fpar_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructSetterAccess().getTStructSetterAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_109);
            lv_name_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt643=2;
            int LA643_0 = input.LA(1);
            if ( (LA643_0==QuestionMark) ) {
                alt643=1;
            }
            switch (alt643) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_199); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_72);
            lv_fpar_5_0=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypingStrategyUseSiteOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyUseSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyUseSiteOperator=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyUseSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_STRUCTMODSUFFIX_2=null;
        	enterRule();
        try {
            {
            {
            kw=(Token)match(input,Tilde,FOLLOW_207); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
            }
            int alt644=3;
            int LA644_0 = input.LA(1);
            if ( (LA644_0==Tilde) ) {
                alt644=1;
            }
            else if ( (LA644_0==RULE_STRUCTMODSUFFIX) ) {
                alt644=2;
            }
            switch (alt644) {
                case 1 :
                    {
                    kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    this_STRUCTMODSUFFIX_2=(Token)match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(this_STRUCTMODSUFFIX_2);
                    }
                    if ( state.backtracking==0 ) {
                      				newLeafNode(this_STRUCTMODSUFFIX_2, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getSTRUCTMODSUFFIXTerminalRuleCall_1_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypingStrategyDefSiteOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyDefSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyDefSiteOperator=ruleTypingStrategyDefSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyDefSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeTypeRef=ruleTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_constructorRef_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArg_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTypeTypeRefAccess().getTypeTypeRefAction_0(),
              					current);
            }
            }
            int alt645=2;
            int LA645_0 = input.LA(1);
            if ( (LA645_0==Type) ) {
                alt645=1;
            }
            else if ( (LA645_0==Constructor) ) {
                alt645=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 645, 0, input);
                throw nvae;
            }
            switch (alt645) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_constructorRef_2_0=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_constructorRef_2_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "constructorRef", true, "constructor");
                    }
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftCurlyBracket,FOLLOW_208); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeTypeRefAccess().getTypeArgTypeArgInTypeTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_23);
            lv_typeArg_4_0=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeTypeRefRule());
              					}
              					set(
              						current,
              						"typeArg",
              						lv_typeArg_4_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgInTypeTypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgument=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgument() throws RecognitionException {
        EObject current = null;
        EObject this_Wildcard_0 = null;
        EObject this_TypeRef_1 = null;
        	enterRule();
        try {
            {
            int alt646=2;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA646_1 = input.LA(2);
                if ( (LA646_1==EOF||LA646_1==Extends||LA646_1==Super||LA646_1==Comma||LA646_1==GreaterThanSign||LA646_1==RightSquareBracket) ) {
                    alt646=1;
                }
                else if ( (LA646_1==LeftSquareBracket) ) {
                    alt646=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 646, 1, input);
                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt646=1;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt646=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 646, 0, input);
                throw nvae;
            }
            switch (alt646) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Wildcard_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRef_1=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRef_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcard() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcard = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcard=ruleWildcard();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcard; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcard() throws RecognitionException {
        EObject current = null;
        EObject this_WildcardOldNotation_0 = null;
        EObject this_WildcardNewNotation_1 = null;
        	enterRule();
        try {
            {
            int alt647=2;
            int LA647_0 = input.LA(1);
            if ( (LA647_0==QuestionMark) && (synpred345_InternalN4JSParser())) {
                alt647=1;
            }
            else if ( (LA647_0==Out||LA647_0==In) ) {
                alt647=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 647, 0, input);
                throw nvae;
            }
            switch (alt647) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getWildcardAccess().getWildcardOldNotationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_0=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_WildcardOldNotation_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getWildcardAccess().getWildcardNewNotationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardNewNotation_1=ruleWildcardNewNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WildcardNewNotation_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardOldNotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotation=ruleWildcardOldNotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredUpperBound_3_0 = null;
        EObject lv_declaredLowerBound_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getWildcardOldNotationAccess().getWildcardAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_209); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationAccess().getQuestionMarkKeyword_0_0_1());
            }
            }
            }
            int alt648=3;
            int LA648_0 = input.LA(1);
            if ( (LA648_0==Extends) ) {
                alt648=1;
            }
            else if ( (LA648_0==Super) ) {
                alt648=2;
            }
            switch (alt648) {
                case 1 :
                    {
                    {
                    otherlv_2=(Token)match(input,Extends,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getWildcardOldNotationAccess().getExtendsKeyword_1_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredUpperBound",
                      								lv_declaredUpperBound_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_4=(Token)match(input,Super,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_4, grammarAccess.getWildcardOldNotationAccess().getSuperKeyword_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_5_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredLowerBound",
                      								lv_declaredLowerBound_5_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardOldNotationWithoutBound = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationWithoutBoundRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotationWithoutBound=ruleWildcardOldNotationWithoutBound();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotationWithoutBound; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getWildcardOldNotationWithoutBoundAccess().getWildcardAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationWithoutBoundAccess().getQuestionMarkKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardNewNotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardNewNotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardNewNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardNewNotation=ruleWildcardNewNotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardNewNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardNewNotation() throws RecognitionException {
        EObject current = null;
        Token lv_usingInOutNotation_0_0=null;
        Token lv_usingInOutNotation_2_0=null;
        EObject lv_declaredUpperBound_1_0 = null;
        EObject lv_declaredLowerBound_3_0 = null;
        	enterRule();
        try {
            {
            int alt649=2;
            int LA649_0 = input.LA(1);
            if ( (LA649_0==Out) ) {
                alt649=1;
            }
            else if ( (LA649_0==In) ) {
                alt649=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 649, 0, input);
                throw nvae;
            }
            switch (alt649) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_0_0=(Token)match(input,Out,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_usingInOutNotation_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "out");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_2_0=(Token)match(input,In,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_usingInOutNotation_2_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredLowerBound",
                      							lv_declaredLowerBound_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBindingIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBindingIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifier=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;
        	enterRule();
        try {
            {
            int alt650=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt650=1;
                }
                break;
            case Yield:
                {
                alt650=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt650=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 650, 0, input);
                throw nvae;
            }
            switch (alt650) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_2);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_BindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_N4Keyword_1 = null;
        	enterRule();
        try {
            {
            int alt651=2;
            int LA651_0 = input.LA(1);
            if ( (LA651_0==RULE_IDENTIFIER) ) {
                alt651=1;
            }
            else if ( ((LA651_0>=Intersection && LA651_0<=Implements)||(LA651_0>=Promisify && LA651_0<=Abstract)||LA651_0==External||(LA651_0>=Private && LA651_0<=Project)||LA651_0==Public||LA651_0==Static||LA651_0==Target||(LA651_0>=Async && LA651_0<=Await)||LA651_0==Union||LA651_0==This||LA651_0==From||LA651_0==Type||(LA651_0>=Get && LA651_0<=Let)||(LA651_0>=Out && LA651_0<=Set)||LA651_0==As||LA651_0==Of) ) {
                alt651=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 651, 0, input);
                throw nvae;
            }
            switch (alt651) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_1=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_1);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleIdentifierName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierName=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_ReservedWord_1 = null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;
        	enterRule();
        try {
            {
            int alt652=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt652=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt652=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt652=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 652, 0, input);
                throw nvae;
            }
            switch (alt652) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierNameAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getReservedWordParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReservedWord_1=ruleReservedWord();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_ReservedWord_1);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_2);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleReservedWord() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleReservedWord = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReservedWordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReservedWord=ruleReservedWord();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReservedWord.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleReservedWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt653=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt653=1;
                }
                break;
            case Case:
                {
                alt653=2;
                }
                break;
            case Catch:
                {
                alt653=3;
                }
                break;
            case Class:
                {
                alt653=4;
                }
                break;
            case Const:
                {
                alt653=5;
                }
                break;
            case Continue:
                {
                alt653=6;
                }
                break;
            case Debugger:
                {
                alt653=7;
                }
                break;
            case Default:
                {
                alt653=8;
                }
                break;
            case Delete:
                {
                alt653=9;
                }
                break;
            case Do:
                {
                alt653=10;
                }
                break;
            case Else:
                {
                alt653=11;
                }
                break;
            case Export:
                {
                alt653=12;
                }
                break;
            case Extends:
                {
                alt653=13;
                }
                break;
            case Finally:
                {
                alt653=14;
                }
                break;
            case For:
                {
                alt653=15;
                }
                break;
            case Function:
                {
                alt653=16;
                }
                break;
            case If:
                {
                alt653=17;
                }
                break;
            case Import:
                {
                alt653=18;
                }
                break;
            case In:
                {
                alt653=19;
                }
                break;
            case Instanceof:
                {
                alt653=20;
                }
                break;
            case New:
                {
                alt653=21;
                }
                break;
            case Return:
                {
                alt653=22;
                }
                break;
            case Super:
                {
                alt653=23;
                }
                break;
            case Switch:
                {
                alt653=24;
                }
                break;
            case This_1:
                {
                alt653=25;
                }
                break;
            case Throw:
                {
                alt653=26;
                }
                break;
            case Try:
                {
                alt653=27;
                }
                break;
            case Typeof:
                {
                alt653=28;
                }
                break;
            case Var:
                {
                alt653=29;
                }
                break;
            case Void:
                {
                alt653=30;
                }
                break;
            case While:
                {
                alt653=31;
                }
                break;
            case With:
                {
                alt653=32;
                }
                break;
            case Yield:
                {
                alt653=33;
                }
                break;
            case Null:
                {
                alt653=34;
                }
                break;
            case True:
                {
                alt653=35;
                }
                break;
            case False:
                {
                alt653=36;
                }
                break;
            case Enum:
                {
                alt653=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 653, 0, input);
                throw nvae;
            }
            switch (alt653) {
                case 1 :
                    {
                    kw=(Token)match(input,Break,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Class,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Do,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Else,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Export,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,For,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getForKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,Function,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Import,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,New,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Return,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                    }
                    }
                    break;
                case 26 :
                    {
                    kw=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                    }
                    }
                    break;
                case 27 :
                    {
                    kw=(Token)match(input,Try,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                    }
                    }
                    break;
                case 28 :
                    {
                    kw=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                    }
                    }
                    break;
                case 29 :
                    {
                    kw=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                    }
                    }
                    break;
                case 30 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                    }
                    }
                    break;
                case 31 :
                    {
                    kw=(Token)match(input,While,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                    }
                    }
                    break;
                case 32 :
                    {
                    kw=(Token)match(input,With,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                    }
                    }
                    break;
                case 33 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                    }
                    }
                    break;
                case 34 :
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                    }
                    }
                    break;
                case 35 :
                    {
                    kw=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                    }
                    }
                    break;
                case 36 :
                    {
                    kw=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                    }
                    }
                    break;
                case 37 :
                    {
                    kw=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleN4Keyword() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleN4Keyword = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4KeywordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4Keyword=ruleN4Keyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4Keyword.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleN4Keyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt654=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt654=1;
                }
                break;
            case Set:
                {
                alt654=2;
                }
                break;
            case Let:
                {
                alt654=3;
                }
                break;
            case Project:
                {
                alt654=4;
                }
                break;
            case External:
                {
                alt654=5;
                }
                break;
            case Abstract:
                {
                alt654=6;
                }
                break;
            case Static:
                {
                alt654=7;
                }
                break;
            case As:
                {
                alt654=8;
                }
                break;
            case From:
                {
                alt654=9;
                }
                break;
            case Constructor:
                {
                alt654=10;
                }
                break;
            case Of:
                {
                alt654=11;
                }
                break;
            case Target:
                {
                alt654=12;
                }
                break;
            case Type:
                {
                alt654=13;
                }
                break;
            case Union:
                {
                alt654=14;
                }
                break;
            case Intersection:
                {
                alt654=15;
                }
                break;
            case This:
                {
                alt654=16;
                }
                break;
            case Promisify:
                {
                alt654=17;
                }
                break;
            case Await:
                {
                alt654=18;
                }
                break;
            case Async:
                {
                alt654=19;
                }
                break;
            case Implements:
                {
                alt654=20;
                }
                break;
            case Interface:
                {
                alt654=21;
                }
                break;
            case Private:
                {
                alt654=22;
                }
                break;
            case Protected:
                {
                alt654=23;
                }
                break;
            case Public:
                {
                alt654=24;
                }
                break;
            case Out:
                {
                alt654=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 654, 0, input);
                throw nvae;
            }
            switch (alt654) {
                case 1 :
                    {
                    kw=(Token)match(input,Get,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Set,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,As,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,From,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Of,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Type,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Union,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,Async,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleVariableStatementKeyword() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        	enterRule();
        try {
            {
            int alt655=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt655=1;
                }
                break;
            case Const:
                {
                alt655=2;
                }
                break;
            case Let:
                {
                alt655=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 655, 0, input);
                throw nvae;
            }
            switch (alt655) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator rulePostfixOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        	enterRule();
        try {
            {
            int alt656=2;
            int LA656_0 = input.LA(1);
            if ( (LA656_0==PlusSignPlusSign) ) {
                alt656=1;
            }
            else if ( (LA656_0==HyphenMinusHyphenMinus) ) {
                alt656=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 656, 0, input);
                throw nvae;
            }
            switch (alt656) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleUnaryOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        	enterRule();
        try {
            {
            int alt657=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt657=1;
                }
                break;
            case Void:
                {
                alt657=2;
                }
                break;
            case Typeof:
                {
                alt657=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt657=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt657=5;
                }
                break;
            case PlusSign:
                {
                alt657=6;
                }
                break;
            case HyphenMinus:
                {
                alt657=7;
                }
                break;
            case Tilde:
                {
                alt657=8;
                }
                break;
            case ExclamationMark:
                {
                alt657=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 657, 0, input);
                throw nvae;
            }
            switch (alt657) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    {
                    enumLiteral_8=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleMultiplicativeOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        	enterRule();
        try {
            {
            int alt658=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt658=1;
                }
                break;
            case Solidus:
                {
                alt658=2;
                }
                break;
            case PercentSign:
                {
                alt658=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 658, 0, input);
                throw nvae;
            }
            switch (alt658) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleAdditiveOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        	enterRule();
        try {
            {
            int alt659=2;
            int LA659_0 = input.LA(1);
            if ( (LA659_0==PlusSign) ) {
                alt659=1;
            }
            else if ( (LA659_0==HyphenMinus) ) {
                alt659=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 659, 0, input);
                throw nvae;
            }
            switch (alt659) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleEqualityOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        	enterRule();
        try {
            {
            int alt660=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt660=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt660=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt660=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt660=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 660, 0, input);
                throw nvae;
            }
            switch (alt660) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleN4Modifier() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        	enterRule();
        try {
            {
            int alt661=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt661=1;
                }
                break;
            case Project:
                {
                alt661=2;
                }
                break;
            case Protected:
                {
                alt661=3;
                }
                break;
            case Public:
                {
                alt661=4;
                }
                break;
            case External:
                {
                alt661=5;
                }
                break;
            case Abstract:
                {
                alt661=6;
                }
                break;
            case Static:
                {
                alt661=7;
                }
                break;
            case Const:
                {
                alt661=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 661, 0, input);
                throw nvae;
            }
            switch (alt661) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_154); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop662:
        do {
            int alt662=2;
            int LA662_0 = input.LA(1);
            if ( ((LA662_0>=Protected && LA662_0<=Abstract)||LA662_0==External||(LA662_0>=Private && LA662_0<=Project)||LA662_0==Public||LA662_0==Static||LA662_0==Const) ) {
                alt662=1;
            }
            switch (alt662) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop662;
            }
        } while (true);
        match(input,Class,FOLLOW_210); if (state.failed) return ;
        int alt663=2;
        int LA663_0 = input.LA(1);
        if ( (LA663_0==Tilde) ) {
            alt663=1;
        }
        switch (alt663) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt664=2;
        int LA664_0 = input.LA(1);
        if ( ((LA664_0>=Intersection && LA664_0<=Implements)||(LA664_0>=Promisify && LA664_0<=Abstract)||LA664_0==External||(LA664_0>=Private && LA664_0<=Project)||LA664_0==Public||LA664_0==Static||LA664_0==Target||(LA664_0>=Async && LA664_0<=Await)||LA664_0==Union||(LA664_0>=Yield && LA664_0<=This)||LA664_0==From||LA664_0==Type||(LA664_0>=Get && LA664_0<=Let)||(LA664_0>=Out && LA664_0<=Set)||LA664_0==As||LA664_0==Of||LA664_0==RULE_IDENTIFIER) ) {
            alt664=1;
        }
        switch (alt664) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt665=2;
        int LA665_0 = input.LA(1);
        if ( (LA665_0==RULE_VERSION) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop666:
        do {
            int alt666=2;
            int LA666_0 = input.LA(1);
            if ( ((LA666_0>=Protected && LA666_0<=Abstract)||LA666_0==External||(LA666_0>=Private && LA666_0<=Project)||LA666_0==Public||LA666_0==Static||LA666_0==Const) ) {
                alt666=1;
            }
            switch (alt666) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop666;
            }
        } while (true);
        match(input,Interface,FOLLOW_210); if (state.failed) return ;
        int alt667=2;
        int LA667_0 = input.LA(1);
        if ( (LA667_0==Tilde) ) {
            alt667=1;
        }
        switch (alt667) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt668=2;
        int LA668_0 = input.LA(1);
        if ( ((LA668_0>=Intersection && LA668_0<=Implements)||(LA668_0>=Promisify && LA668_0<=Abstract)||LA668_0==External||(LA668_0>=Private && LA668_0<=Project)||LA668_0==Public||LA668_0==Static||LA668_0==Target||(LA668_0>=Async && LA668_0<=Await)||LA668_0==Union||(LA668_0>=Yield && LA668_0<=This)||LA668_0==From||LA668_0==Type||(LA668_0>=Get && LA668_0<=Let)||(LA668_0>=Out && LA668_0<=Set)||LA668_0==As||LA668_0==Of||LA668_0==RULE_IDENTIFIER) ) {
            alt668=1;
        }
        switch (alt668) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt669=2;
        int LA669_0 = input.LA(1);
        if ( (LA669_0==RULE_VERSION) ) {
            alt669=1;
        }
        switch (alt669) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop670:
        do {
            int alt670=2;
            int LA670_0 = input.LA(1);
            if ( ((LA670_0>=Protected && LA670_0<=Abstract)||LA670_0==External||(LA670_0>=Private && LA670_0<=Project)||LA670_0==Public||LA670_0==Static||LA670_0==Const) ) {
                alt670=1;
            }
            switch (alt670) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop670;
            }
        } while (true);
        match(input,Enum,FOLLOW_211); if (state.failed) return ;
        int alt671=2;
        int LA671_0 = input.LA(1);
        if ( ((LA671_0>=Intersection && LA671_0<=Implements)||(LA671_0>=Promisify && LA671_0<=Abstract)||LA671_0==External||(LA671_0>=Private && LA671_0<=Project)||LA671_0==Public||LA671_0==Static||LA671_0==Target||(LA671_0>=Async && LA671_0<=Await)||LA671_0==Union||(LA671_0>=Yield && LA671_0<=This)||LA671_0==From||LA671_0==Type||(LA671_0>=Get && LA671_0<=Let)||(LA671_0>=Out && LA671_0<=Set)||LA671_0==As||LA671_0==Of||LA671_0==RULE_IDENTIFIER) ) {
            alt671=1;
        }
        switch (alt671) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt672=2;
        int LA672_0 = input.LA(1);
        if ( (LA672_0==RULE_VERSION) ) {
            alt672=1;
        }
        switch (alt672) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred5_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleImportDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_154); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop674:
        do {
            int alt674=2;
            int LA674_0 = input.LA(1);
            if ( ((LA674_0>=Protected && LA674_0<=Abstract)||LA674_0==External||(LA674_0>=Private && LA674_0<=Project)||LA674_0==Public||LA674_0==Static||LA674_0==Const) ) {
                alt674=1;
            }
            switch (alt674) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop674;
            }
        } while (true);
        match(input,Class,FOLLOW_210); if (state.failed) return ;
        int alt675=2;
        int LA675_0 = input.LA(1);
        if ( (LA675_0==Tilde) ) {
            alt675=1;
        }
        switch (alt675) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt676=2;
        int LA676_0 = input.LA(1);
        if ( ((LA676_0>=Intersection && LA676_0<=Implements)||(LA676_0>=Promisify && LA676_0<=Abstract)||LA676_0==External||(LA676_0>=Private && LA676_0<=Project)||LA676_0==Public||LA676_0==Static||LA676_0==Target||(LA676_0>=Async && LA676_0<=Await)||LA676_0==Union||(LA676_0>=Yield && LA676_0<=This)||LA676_0==From||LA676_0==Type||(LA676_0>=Get && LA676_0<=Let)||(LA676_0>=Out && LA676_0<=Set)||LA676_0==As||LA676_0==Of||LA676_0==RULE_IDENTIFIER) ) {
            alt676=1;
        }
        switch (alt676) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt677=2;
        int LA677_0 = input.LA(1);
        if ( (LA677_0==RULE_VERSION) ) {
            alt677=1;
        }
        switch (alt677) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop678:
        do {
            int alt678=2;
            int LA678_0 = input.LA(1);
            if ( ((LA678_0>=Protected && LA678_0<=Abstract)||LA678_0==External||(LA678_0>=Private && LA678_0<=Project)||LA678_0==Public||LA678_0==Static||LA678_0==Const) ) {
                alt678=1;
            }
            switch (alt678) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop678;
            }
        } while (true);
        match(input,Interface,FOLLOW_210); if (state.failed) return ;
        int alt679=2;
        int LA679_0 = input.LA(1);
        if ( (LA679_0==Tilde) ) {
            alt679=1;
        }
        switch (alt679) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt680=2;
        int LA680_0 = input.LA(1);
        if ( ((LA680_0>=Intersection && LA680_0<=Implements)||(LA680_0>=Promisify && LA680_0<=Abstract)||LA680_0==External||(LA680_0>=Private && LA680_0<=Project)||LA680_0==Public||LA680_0==Static||LA680_0==Target||(LA680_0>=Async && LA680_0<=Await)||LA680_0==Union||(LA680_0>=Yield && LA680_0<=This)||LA680_0==From||LA680_0==Type||(LA680_0>=Get && LA680_0<=Let)||(LA680_0>=Out && LA680_0<=Set)||LA680_0==As||LA680_0==Of||LA680_0==RULE_IDENTIFIER) ) {
            alt680=1;
        }
        switch (alt680) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt681=2;
        int LA681_0 = input.LA(1);
        if ( (LA681_0==RULE_VERSION) ) {
            alt681=1;
        }
        switch (alt681) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred14_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop682:
        do {
            int alt682=2;
            int LA682_0 = input.LA(1);
            if ( ((LA682_0>=Protected && LA682_0<=Abstract)||LA682_0==External||(LA682_0>=Private && LA682_0<=Project)||LA682_0==Public||LA682_0==Static||LA682_0==Const) ) {
                alt682=1;
            }
            switch (alt682) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop682;
            }
        } while (true);
        match(input,Enum,FOLLOW_211); if (state.failed) return ;
        int alt683=2;
        int LA683_0 = input.LA(1);
        if ( ((LA683_0>=Intersection && LA683_0<=Implements)||(LA683_0>=Promisify && LA683_0<=Abstract)||LA683_0==External||(LA683_0>=Private && LA683_0<=Project)||LA683_0==Public||LA683_0==Static||LA683_0==Target||(LA683_0>=Async && LA683_0<=Await)||LA683_0==Union||(LA683_0>=Yield && LA683_0<=This)||LA683_0==From||LA683_0==Type||(LA683_0>=Get && LA683_0<=Let)||(LA683_0>=Out && LA683_0<=Set)||LA683_0==As||LA683_0==Of||LA683_0==RULE_IDENTIFIER) ) {
            alt683=1;
        }
        switch (alt683) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt684=2;
        int LA684_0 = input.LA(1);
        if ( (LA684_0==RULE_VERSION) ) {
            alt684=1;
        }
        switch (alt684) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred15_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop685:
        do {
            int alt685=2;
            int LA685_0 = input.LA(1);
            if ( ((LA685_0>=Protected && LA685_0<=Abstract)||LA685_0==External||(LA685_0>=Private && LA685_0<=Project)||LA685_0==Public||LA685_0==Static||LA685_0==Const) ) {
                alt685=1;
            }
            switch (alt685) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop685;
            }
        } while (true);
        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred19_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred27_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred28_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred37_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred39_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred43_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred45_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred49_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred51_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred55_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred58_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred59_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred63_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop700:
        do {
            int alt700=2;
            int LA700_0 = input.LA(1);
            if ( ((LA700_0>=Protected && LA700_0<=Abstract)||LA700_0==External||(LA700_0>=Private && LA700_0<=Project)||LA700_0==Public||LA700_0==Static||LA700_0==Const) ) {
                alt700=1;
            }
            switch (alt700) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop700;
            }
        } while (true);
        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred64_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_95);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop701:
        do {
            int alt701=2;
            int LA701_0 = input.LA(1);
            if ( ((LA701_0>=Protected && LA701_0<=Abstract)||LA701_0==External||(LA701_0>=Private && LA701_0<=Project)||LA701_0==Public||LA701_0==Static||LA701_0==Const) ) {
                alt701=1;
            }
            switch (alt701) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop701;
            }
        } while (true);
        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_95);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_154); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred71_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_154); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred74_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred75_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred76_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred77_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred78_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred79_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred89_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred90_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt702=2;
        int LA702_0 = input.LA(1);
        if ( (LA702_0==Colon) ) {
            alt702=1;
        }
        switch (alt702) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt703=2;
        int LA703_0 = input.LA(1);
        if ( (LA703_0==Colon) ) {
            alt703=1;
        }
        switch (alt703) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt704=2;
        int LA704_0 = input.LA(1);
        if ( (LA704_0==Colon) ) {
            alt704=1;
        }
        switch (alt704) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt705=2;
        int LA705_0 = input.LA(1);
        if ( (LA705_0==Colon) ) {
            alt705=1;
        }
        switch (alt705) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred103_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred104_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_79);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_49); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_72);
        norm1_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred105_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred106_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleBindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt706=2;
        int LA706_0 = input.LA(1);
        if ( (LA706_0==In) ) {
            alt706=1;
        }
        else if ( (LA706_0==Of) ) {
            alt706=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 706, 0, input);
            throw nvae;
        }
        switch (alt706) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt707=2;
        int LA707_0 = input.LA(1);
        if ( ((LA707_0>=Intersection && LA707_0<=Implements)||(LA707_0>=Promisify && LA707_0<=Abstract)||(LA707_0>=External && LA707_0<=Function)||(LA707_0>=Private && LA707_0<=Delete)||(LA707_0>=Import && LA707_0<=Public)||LA707_0==Static||(LA707_0>=Target && LA707_0<=Await)||LA707_0==Class||(LA707_0>=False && LA707_0<=Super)||LA707_0==Union||(LA707_0>=Yield && LA707_0<=This)||(LA707_0>=From && LA707_0<=Void)||(LA707_0>=Get && LA707_0<=Set)||LA707_0==PlusSignPlusSign||(LA707_0>=HyphenMinusHyphenMinus && LA707_0<=SolidusEqualsSign)||LA707_0==As||LA707_0==Of||LA707_0==ExclamationMark||LA707_0==LeftParenthesis||LA707_0==PlusSign||LA707_0==HyphenMinus||LA707_0==Solidus||LA707_0==LessThanSign||(LA707_0>=CommercialAt && LA707_0<=LeftSquareBracket)||LA707_0==LeftCurlyBracket||LA707_0==Tilde||LA707_0==RULE_DOUBLE||(LA707_0>=RULE_HEX_INT && LA707_0<=RULE_LEGACY_OCTAL_INT)||LA707_0==RULE_SCIENTIFIC_INT||LA707_0==RULE_IDENTIFIER||LA707_0==RULE_STRING||(LA707_0>=RULE_TEMPLATE_HEAD && LA707_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA707_0==RULE_INT) ) {
            alt707=1;
        }
        switch (alt707) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred107_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred108_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_79);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_70); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_72);
        norm3_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        norm2_BindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt708=2;
        int LA708_0 = input.LA(1);
        if ( (LA708_0==In) ) {
            alt708=1;
        }
        else if ( (LA708_0==Of) ) {
            alt708=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 708, 0, input);
            throw nvae;
        }
        switch (alt708) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt709=2;
        int LA709_0 = input.LA(1);
        if ( ((LA709_0>=Intersection && LA709_0<=Implements)||(LA709_0>=Promisify && LA709_0<=Abstract)||(LA709_0>=External && LA709_0<=Function)||(LA709_0>=Private && LA709_0<=Delete)||(LA709_0>=Import && LA709_0<=Public)||LA709_0==Static||(LA709_0>=Target && LA709_0<=Await)||LA709_0==Class||(LA709_0>=False && LA709_0<=Super)||LA709_0==Union||(LA709_0>=Yield && LA709_0<=This)||(LA709_0>=From && LA709_0<=Void)||(LA709_0>=Get && LA709_0<=Set)||LA709_0==PlusSignPlusSign||(LA709_0>=HyphenMinusHyphenMinus && LA709_0<=SolidusEqualsSign)||LA709_0==As||LA709_0==Of||LA709_0==ExclamationMark||LA709_0==LeftParenthesis||LA709_0==PlusSign||LA709_0==HyphenMinus||LA709_0==Solidus||LA709_0==LessThanSign||(LA709_0>=CommercialAt && LA709_0<=LeftSquareBracket)||LA709_0==LeftCurlyBracket||LA709_0==Tilde||LA709_0==RULE_DOUBLE||(LA709_0>=RULE_HEX_INT && LA709_0<=RULE_LEGACY_OCTAL_INT)||LA709_0==RULE_SCIENTIFIC_INT||LA709_0==RULE_IDENTIFIER||LA709_0==RULE_STRING||(LA709_0>=RULE_TEMPLATE_HEAD && LA709_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA709_0==RULE_INT) ) {
            alt709=1;
        }
        switch (alt709) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred111_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred119_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_95);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred122_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_95);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_45);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_45);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt710=2;
        alt710 = dfa710.predict(input);
        switch (alt710) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_113);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt711=2;
        int LA711_0 = input.LA(1);
        if ( (LA711_0==QuestionMark) ) {
            alt711=1;
        }
        switch (alt711) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_95); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred131_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt712=2;
        int LA712_0 = input.LA(1);
        if ( (LA712_0==LessThanSign) ) {
            alt712=1;
        }
        switch (alt712) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt713=2;
        alt713 = dfa713.predict(input);
        switch (alt713) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_110);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_110);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt714=2;
        int LA714_0 = input.LA(1);
        if ( (LA714_0==Asterisk) ) {
            alt714=1;
        }
        else if ( ((LA714_0>=Intersection && LA714_0<=With)||(LA714_0>=For && LA714_0<=Var)||(LA714_0>=As && LA714_0<=Of)||LA714_0==LeftSquareBracket||LA714_0==RULE_DOUBLE||(LA714_0>=RULE_HEX_INT && LA714_0<=RULE_OCTAL_INT)||LA714_0==RULE_SCIENTIFIC_INT||LA714_0==RULE_IDENTIFIER||LA714_0==RULE_STRING||LA714_0==RULE_INT) ) {
            alt714=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 714, 0, input);
            throw nvae;
        }
        switch (alt714) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred132_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt715=2;
        alt715 = dfa715.predict(input);
        switch (alt715) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_113);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt716=2;
        int LA716_0 = input.LA(1);
        if ( (LA716_0==QuestionMark) ) {
            alt716=1;
        }
        switch (alt716) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_95); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred134_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred135_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt717=2;
        int LA717_0 = input.LA(1);
        if ( (LA717_0==LessThanSign) ) {
            alt717=1;
        }
        switch (alt717) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt718=2;
        alt718 = dfa718.predict(input);
        switch (alt718) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_110);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_110);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt719=2;
        int LA719_0 = input.LA(1);
        if ( (LA719_0==Asterisk) ) {
            alt719=1;
        }
        else if ( ((LA719_0>=Intersection && LA719_0<=With)||(LA719_0>=For && LA719_0<=Var)||(LA719_0>=As && LA719_0<=Of)||LA719_0==LeftSquareBracket||LA719_0==RULE_DOUBLE||(LA719_0>=RULE_HEX_INT && LA719_0<=RULE_OCTAL_INT)||LA719_0==RULE_SCIENTIFIC_INT||LA719_0==RULE_IDENTIFIER||LA719_0==RULE_STRING||LA719_0==RULE_INT) ) {
            alt719=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 719, 0, input);
            throw nvae;
        }
        switch (alt719) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt720=2;
        alt720 = dfa720.predict(input);
        switch (alt720) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_95);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred142_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt721=2;
        int LA721_0 = input.LA(1);
        if ( (LA721_0==LessThanSign) ) {
            alt721=1;
        }
        switch (alt721) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt722=2;
        alt722 = dfa722.predict(input);
        switch (alt722) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_110);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt723=2;
        int LA723_0 = input.LA(1);
        if ( (LA723_0==Asterisk) ) {
            alt723=1;
        }
        else if ( ((LA723_0>=Intersection && LA723_0<=With)||(LA723_0>=For && LA723_0<=Var)||(LA723_0>=As && LA723_0<=Of)||LA723_0==LeftSquareBracket||LA723_0==RULE_DOUBLE||(LA723_0>=RULE_HEX_INT && LA723_0<=RULE_OCTAL_INT)||LA723_0==RULE_SCIENTIFIC_INT||LA723_0==RULE_IDENTIFIER||LA723_0==RULE_STRING||LA723_0==RULE_INT) ) {
            alt723=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 723, 0, input);
            throw nvae;
        }
        switch (alt723) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred145_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt724=2;
        alt724 = dfa724.predict(input);
        switch (alt724) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_95);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred146_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred148_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred151_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt725=2;
        int LA725_0 = input.LA(1);
        if ( (LA725_0==LessThanSign) ) {
            alt725=1;
        }
        switch (alt725) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt726=2;
        alt726 = dfa726.predict(input);
        switch (alt726) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_110);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt727=2;
        int LA727_0 = input.LA(1);
        if ( (LA727_0==Asterisk) ) {
            alt727=1;
        }
        else if ( ((LA727_0>=Intersection && LA727_0<=With)||(LA727_0>=For && LA727_0<=Var)||(LA727_0>=As && LA727_0<=Of)||LA727_0==LeftSquareBracket||LA727_0==RULE_DOUBLE||(LA727_0>=RULE_HEX_INT && LA727_0<=RULE_OCTAL_INT)||LA727_0==RULE_SCIENTIFIC_INT||LA727_0==RULE_IDENTIFIER||LA727_0==RULE_STRING||LA727_0==RULE_INT) ) {
            alt727=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 727, 0, input);
            throw nvae;
        }
        switch (alt727) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred172_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred173_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred174_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_123); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred175_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred176_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred177_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred178_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_123); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred184_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred186_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred188_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred190_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_214);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_214);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_214);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_149); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt740=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt740=1;
            }
            break;
        case Async:
            {
            int LA740_2 = input.LA(2);
            if ( (LA740_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSParser())) {
                alt740=2;
            }
            else if ( (LA740_2==LeftParenthesis) && (synpred236_InternalN4JSParser())) {
                alt740=2;
            }
            else if ( (LA740_2==EqualsSignGreaterThanSign) ) {
                alt740=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 740, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt740=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 740, 0, input);
            throw nvae;
        }
        switch (alt740) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt738=2;
                int LA738_0 = input.LA(1);
                if ( (LA738_0==Colon) ) {
                    alt738=1;
                }
                switch (alt738) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_42);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt739=2;
                int LA739_0 = input.LA(1);
                if ( (LA739_0==Colon) ) {
                    alt739=1;
                }
                switch (alt739) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_149); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt743=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt743=1;
            }
            break;
        case Async:
            {
            int LA743_2 = input.LA(2);
            if ( (LA743_2==RULE_NO_LINE_TERMINATOR) && (synpred242_InternalN4JSParser())) {
                alt743=2;
            }
            else if ( (LA743_2==LeftParenthesis) && (synpred242_InternalN4JSParser())) {
                alt743=2;
            }
            else if ( (LA743_2==EqualsSignGreaterThanSign) ) {
                alt743=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 743, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt743=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 743, 0, input);
            throw nvae;
        }
        switch (alt743) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt741=2;
                int LA741_0 = input.LA(1);
                if ( (LA741_0==Colon) ) {
                    alt741=1;
                }
                switch (alt741) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_42);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt742=2;
                int LA742_0 = input.LA(1);
                if ( (LA742_0==Colon) ) {
                    alt742=1;
                }
                switch (alt742) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred245_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_149); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred248_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt746=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt746=1;
            }
            break;
        case Async:
            {
            int LA746_2 = input.LA(2);
            if ( (LA746_2==RULE_NO_LINE_TERMINATOR) && (synpred248_InternalN4JSParser())) {
                alt746=2;
            }
            else if ( (LA746_2==LeftParenthesis) && (synpred248_InternalN4JSParser())) {
                alt746=2;
            }
            else if ( (LA746_2==EqualsSignGreaterThanSign) ) {
                alt746=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 746, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt746=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 746, 0, input);
            throw nvae;
        }
        switch (alt746) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt744=2;
                int LA744_0 = input.LA(1);
                if ( (LA744_0==Colon) ) {
                    alt744=1;
                }
                switch (alt744) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_39);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt745=2;
                int LA745_0 = input.LA(1);
                if ( (LA745_0==Colon) ) {
                    alt745=1;
                }
                switch (alt745) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_149); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt749=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt749=1;
            }
            break;
        case Async:
            {
            int LA749_2 = input.LA(2);
            if ( (LA749_2==RULE_NO_LINE_TERMINATOR) && (synpred254_InternalN4JSParser())) {
                alt749=2;
            }
            else if ( (LA749_2==LeftParenthesis) && (synpred254_InternalN4JSParser())) {
                alt749=2;
            }
            else if ( (LA749_2==EqualsSignGreaterThanSign) ) {
                alt749=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 749, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt749=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 749, 0, input);
            throw nvae;
        }
        switch (alt749) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt747=2;
                int LA747_0 = input.LA(1);
                if ( (LA747_0==Colon) ) {
                    alt747=1;
                }
                switch (alt747) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_39);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt748=2;
                int LA748_0 = input.LA(1);
                if ( (LA748_0==Colon) ) {
                    alt748=1;
                }
                switch (alt748) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred257_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred258_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred270_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred274_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop761:
        do {
            int alt761=2;
            int LA761_0 = input.LA(1);
            if ( ((LA761_0>=Protected && LA761_0<=Abstract)||LA761_0==External||(LA761_0>=Private && LA761_0<=Project)||LA761_0==Public||LA761_0==Static||LA761_0==Const) ) {
                alt761=1;
            }
            switch (alt761) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop761;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred279_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop762:
        do {
            int alt762=2;
            int LA762_0 = input.LA(1);
            if ( ((LA762_0>=Protected && LA762_0<=Abstract)||LA762_0==External||(LA762_0>=Private && LA762_0<=Project)||LA762_0==Public||LA762_0==Static||LA762_0==Const) ) {
                alt762=1;
            }
            switch (alt762) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop762;
            }
        } while (true);
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred280_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop763:
        do {
            int alt763=2;
            alt763 = dfa763.predict(input);
            switch (alt763) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_164);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop763;
            }
        } while (true);
        int alt764=2;
        int LA764_0 = input.LA(1);
        if ( (LA764_0==LessThanSign) ) {
            alt764=1;
        }
        switch (alt764) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_110);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt765=2;
        int LA765_0 = input.LA(1);
        if ( (LA765_0==Asterisk) ) {
            alt765=1;
        }
        else if ( ((LA765_0>=Intersection && LA765_0<=With)||(LA765_0>=For && LA765_0<=Var)||(LA765_0>=As && LA765_0<=Of)||LA765_0==LeftSquareBracket||LA765_0==RULE_DOUBLE||(LA765_0>=RULE_HEX_INT && LA765_0<=RULE_OCTAL_INT)||LA765_0==RULE_SCIENTIFIC_INT||LA765_0==RULE_IDENTIFIER||LA765_0==RULE_STRING||LA765_0==RULE_INT) ) {
            alt765=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 765, 0, input);
            throw nvae;
        }
        switch (alt765) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred281_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop766:
        do {
            int alt766=2;
            int LA766_0 = input.LA(1);
            if ( ((LA766_0>=Protected && LA766_0<=Abstract)||LA766_0==External||(LA766_0>=Private && LA766_0<=Project)||LA766_0==Public||LA766_0==Static||LA766_0==Const) ) {
                alt766=1;
            }
            switch (alt766) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop766;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred282_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop767:
        do {
            int alt767=2;
            int LA767_0 = input.LA(1);
            if ( ((LA767_0>=Protected && LA767_0<=Abstract)||LA767_0==External||(LA767_0>=Private && LA767_0<=Project)||LA767_0==Public||LA767_0==Static||LA767_0==Const) ) {
                alt767=1;
            }
            switch (alt767) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop767;
            }
        } while (true);
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred283_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop768:
        do {
            int alt768=2;
            alt768 = dfa768.predict(input);
            switch (alt768) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_164);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop768;
            }
        } while (true);
        int alt769=2;
        int LA769_0 = input.LA(1);
        if ( (LA769_0==LessThanSign) ) {
            alt769=1;
        }
        switch (alt769) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_110);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt770=2;
        int LA770_0 = input.LA(1);
        if ( (LA770_0==Asterisk) ) {
            alt770=1;
        }
        else if ( ((LA770_0>=Intersection && LA770_0<=With)||(LA770_0>=For && LA770_0<=Var)||(LA770_0>=As && LA770_0<=Of)||LA770_0==LeftSquareBracket||LA770_0==RULE_DOUBLE||(LA770_0>=RULE_HEX_INT && LA770_0<=RULE_OCTAL_INT)||LA770_0==RULE_SCIENTIFIC_INT||LA770_0==RULE_IDENTIFIER||LA770_0==RULE_STRING||LA770_0==RULE_INT) ) {
            alt770=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 770, 0, input);
            throw nvae;
        }
        switch (alt770) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred284_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop771:
        do {
            int alt771=2;
            int LA771_0 = input.LA(1);
            if ( ((LA771_0>=Protected && LA771_0<=Abstract)||LA771_0==External||(LA771_0>=Private && LA771_0<=Project)||LA771_0==Public||LA771_0==Static||LA771_0==Const) ) {
                alt771=1;
            }
            switch (alt771) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop771;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred285_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred286_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop772:
        do {
            int alt772=2;
            int LA772_0 = input.LA(1);
            if ( ((LA772_0>=Protected && LA772_0<=Abstract)||LA772_0==External||(LA772_0>=Private && LA772_0<=Project)||LA772_0==Public||LA772_0==Static||LA772_0==Const) ) {
                alt772=1;
            }
            switch (alt772) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop772;
            }
        } while (true);
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop773:
        do {
            int alt773=2;
            alt773 = dfa773.predict(input);
            switch (alt773) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_164);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop773;
            }
        } while (true);
        int alt774=2;
        int LA774_0 = input.LA(1);
        if ( (LA774_0==LessThanSign) ) {
            alt774=1;
        }
        switch (alt774) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt775=2;
        alt775 = dfa775.predict(input);
        switch (alt775) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleBogusTypeRefFragment(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt776=2;
        int LA776_0 = input.LA(1);
        if ( (LA776_0==Asterisk) ) {
            alt776=1;
        }
        else if ( ((LA776_0>=Intersection && LA776_0<=With)||(LA776_0>=For && LA776_0<=Var)||(LA776_0>=As && LA776_0<=Of)||LA776_0==LeftSquareBracket||LA776_0==RULE_DOUBLE||(LA776_0>=RULE_HEX_INT && LA776_0<=RULE_OCTAL_INT)||LA776_0==RULE_SCIENTIFIC_INT||LA776_0==RULE_IDENTIFIER||LA776_0==RULE_STRING||LA776_0==RULE_INT) ) {
            alt776=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 776, 0, input);
            throw nvae;
        }
        switch (alt776) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleAsyncNoTrailingLineBreak(null);
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred292_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop777:
        do {
            int alt777=2;
            int LA777_0 = input.LA(1);
            if ( ((LA777_0>=Protected && LA777_0<=Abstract)||LA777_0==External||(LA777_0>=Private && LA777_0<=Project)||LA777_0==Public||LA777_0==Static||LA777_0==Const) ) {
                alt777=1;
            }
            switch (alt777) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop777;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred293_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred294_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop778:
        do {
            int alt778=2;
            int LA778_0 = input.LA(1);
            if ( ((LA778_0>=Protected && LA778_0<=Abstract)||LA778_0==External||(LA778_0>=Private && LA778_0<=Project)||LA778_0==Public||LA778_0==Static||LA778_0==Const) ) {
                alt778=1;
            }
            switch (alt778) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop778;
            }
        } while (true);
        match(input,Set,FOLLOW_213); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred296_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred297_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop779:
        do {
            int alt779=2;
            alt779 = dfa779.predict(input);
            switch (alt779) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_164);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop779;
            }
        } while (true);
        int alt780=2;
        int LA780_0 = input.LA(1);
        if ( (LA780_0==LessThanSign) ) {
            alt780=1;
        }
        switch (alt780) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt781=2;
        alt781 = dfa781.predict(input);
        switch (alt781) {
            case 1 :
                {
                pushFollow(FOLLOW_110);
                ruleBogusTypeRefFragment(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt782=2;
        int LA782_0 = input.LA(1);
        if ( (LA782_0==Asterisk) ) {
            alt782=1;
        }
        else if ( ((LA782_0>=Intersection && LA782_0<=With)||(LA782_0>=For && LA782_0<=Var)||(LA782_0>=As && LA782_0<=Of)||LA782_0==LeftSquareBracket||LA782_0==RULE_DOUBLE||(LA782_0>=RULE_HEX_INT && LA782_0<=RULE_OCTAL_INT)||LA782_0==RULE_SCIENTIFIC_INT||LA782_0==RULE_IDENTIFIER||LA782_0==RULE_STRING||LA782_0==RULE_INT) ) {
            alt782=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 782, 0, input);
            throw nvae;
        }
        switch (alt782) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_108); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_108);
                ruleAsyncNoTrailingLineBreak(null);
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred306_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred308_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred322_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_95);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred323_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_95);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred324_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred325_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred326_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred327_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred328_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred329_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_128); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred330_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return ;
        pushFollow(FOLLOW_72);
        ruleTAnonymousFormalParameterList(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_47); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred331_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred332_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred333_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred335_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_95);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred337_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred338_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred339_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Get,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred340_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred341_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt793=2;
        int LA793_0 = input.LA(1);
        if ( (LA793_0==LessThanSign) ) {
            alt793=1;
        }
        switch (alt793) {
            case 1 :
                {
                pushFollow(FOLLOW_14);
                ruleTypeVariables(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_42);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred345_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA214 dfa214 = new DFA214(this);
    protected DFA213 dfa213 = new DFA213(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA236 dfa236 = new DFA236(this);
    protected DFA235 dfa235 = new DFA235(this);
    protected DFA238 dfa238 = new DFA238(this);
    protected DFA237 dfa237 = new DFA237(this);
    protected DFA239 dfa239 = new DFA239(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA241 dfa241 = new DFA241(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA245 dfa245 = new DFA245(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA271 dfa271 = new DFA271(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA276 dfa276 = new DFA276(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA289 dfa289 = new DFA289(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA293 dfa293 = new DFA293(this);
    protected DFA294 dfa294 = new DFA294(this);
    protected DFA325 dfa325 = new DFA325(this);
    protected DFA333 dfa333 = new DFA333(this);
    protected DFA348 dfa348 = new DFA348(this);
    protected DFA349 dfa349 = new DFA349(this);
    protected DFA350 dfa350 = new DFA350(this);
    protected DFA351 dfa351 = new DFA351(this);
    protected DFA354 dfa354 = new DFA354(this);
    protected DFA355 dfa355 = new DFA355(this);
    protected DFA356 dfa356 = new DFA356(this);
    protected DFA357 dfa357 = new DFA357(this);
    protected DFA395 dfa395 = new DFA395(this);
    protected DFA394 dfa394 = new DFA394(this);
    protected DFA397 dfa397 = new DFA397(this);
    protected DFA396 dfa396 = new DFA396(this);
    protected DFA399 dfa399 = new DFA399(this);
    protected DFA398 dfa398 = new DFA398(this);
    protected DFA401 dfa401 = new DFA401(this);
    protected DFA400 dfa400 = new DFA400(this);
    protected DFA403 dfa403 = new DFA403(this);
    protected DFA405 dfa405 = new DFA405(this);
    protected DFA437 dfa437 = new DFA437(this);
    protected DFA443 dfa443 = new DFA443(this);
    protected DFA480 dfa480 = new DFA480(this);
    protected DFA481 dfa481 = new DFA481(this);
    protected DFA494 dfa494 = new DFA494(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA487 dfa487 = new DFA487(this);
    protected DFA489 dfa489 = new DFA489(this);
    protected DFA491 dfa491 = new DFA491(this);
    protected DFA507 dfa507 = new DFA507(this);
    protected DFA496 dfa496 = new DFA496(this);
    protected DFA500 dfa500 = new DFA500(this);
    protected DFA502 dfa502 = new DFA502(this);
    protected DFA504 dfa504 = new DFA504(this);
    protected DFA508 dfa508 = new DFA508(this);
    protected DFA509 dfa509 = new DFA509(this);
    protected DFA513 dfa513 = new DFA513(this);
    protected DFA514 dfa514 = new DFA514(this);
    protected DFA518 dfa518 = new DFA518(this);
    protected DFA522 dfa522 = new DFA522(this);
    protected DFA531 dfa531 = new DFA531(this);
    protected DFA533 dfa533 = new DFA533(this);
    protected DFA535 dfa535 = new DFA535(this);
    protected DFA538 dfa538 = new DFA538(this);
    protected DFA548 dfa548 = new DFA548(this);
    protected DFA552 dfa552 = new DFA552(this);
    protected DFA562 dfa562 = new DFA562(this);
    protected DFA568 dfa568 = new DFA568(this);
    protected DFA572 dfa572 = new DFA572(this);
    protected DFA573 dfa573 = new DFA573(this);
    protected DFA591 dfa591 = new DFA591(this);
    protected DFA603 dfa603 = new DFA603(this);
    protected DFA604 dfa604 = new DFA604(this);
    protected DFA606 dfa606 = new DFA606(this);
    protected DFA619 dfa619 = new DFA619(this);
    protected DFA625 dfa625 = new DFA625(this);
    protected DFA626 dfa626 = new DFA626(this);
    protected DFA627 dfa627 = new DFA627(this);
    protected DFA628 dfa628 = new DFA628(this);
    protected DFA635 dfa635 = new DFA635(this);
    protected DFA710 dfa710 = new DFA710(this);
    protected DFA713 dfa713 = new DFA713(this);
    protected DFA715 dfa715 = new DFA715(this);
    protected DFA718 dfa718 = new DFA718(this);
    protected DFA720 dfa720 = new DFA720(this);
    protected DFA722 dfa722 = new DFA722(this);
    protected DFA724 dfa724 = new DFA724(this);
    protected DFA726 dfa726 = new DFA726(this);
    protected DFA763 dfa763 = new DFA763(this);
    protected DFA768 dfa768 = new DFA768(this);
    protected DFA773 dfa773 = new DFA773(this);
    protected DFA775 dfa775 = new DFA775(this);
    protected DFA779 dfa779 = new DFA779(this);
    protected DFA781 dfa781 = new DFA781(this);
    static final String dfa_1s = "\124\uffff";
    static final String dfa_2s = "\1\4\13\0\1\uffff\1\0\106\uffff";
    static final String dfa_3s = "\1\u0095\13\0\1\uffff\1\0\106\uffff";
    static final String dfa_4s = "\14\uffff\1\4\1\uffff\1\6\1\7\100\uffff\1\1\1\2\1\3\1\5";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\106\uffff}>";
    static final String[] dfa_6s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\2\17\10\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\12\uffff\2\17\7\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);
    class DFA3 extends DFA {
        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "173:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedScriptElement_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4ClassDeclaration_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4InterfaceDeclaration_2= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4EnumDeclaration_3= ruleN4EnumDeclaration ) | ( ( ruleImportDeclaration )=>this_ImportDeclaration_4= ruleImportDeclaration ) | this_ExportDeclaration_5= ruleExportDeclaration | this_RootStatement_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA3_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}
                        else if ( (LA3_0==Import) ) {s = 13;}
                        else if ( (LA3_0==Export) ) {s = 14;}
                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||(LA3_0>=HyphenMinusHyphenMinus && LA3_0<=SolidusEqualsSign)||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_HEX_INT && LA3_0<=RULE_LEGACY_OCTAL_INT)||LA3_0==RULE_SCIENTIFIC_INT||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_INT) ) {s = 15;}
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA3_13 = input.LA(1);
                        int index3_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 15;}
                        input.seek(index3_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\16\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\3\uffff";
    static final String dfa_9s = "\1\55\2\uffff\10\55\3\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\1\3\1\4\1\5";
    static final String dfa_11s = "\16\uffff}>";
    static final String[] dfa_12s = {
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            ""
    };
    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);
    class DFA19 extends DFA {
        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "365:3: ( ( () this_ExportDeclarationImpl_2= ruleExportDeclarationImpl[$current] ) | ( () this_ImportDeclarationImpl_4= ruleImportDeclarationImpl[$current] ) | ( () ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=> ( ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_7= ruleAsyncNoTrailingLineBreak[$current] ( ( Function )=>this_FunctionImpl_8= ruleFunctionImpl[$current] ) ) ) ) | ( ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_14= ruleVersionDeclaration[$current] )? (this_TypeVariables_15= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_16= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_18_0= ruleN4Modifier ) )* otherlv_19= Interface ( (lv_typingStrategy_20_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_21_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_22= ruleVersionDeclaration[$current] )? (this_TypeVariables_23= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_24= ruleInterfaceExtendsList[$current] )? ) ) this_Members_25= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_27_0= ruleN4Modifier ) )* otherlv_28= Enum ( (lv_name_29_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_30= ruleVersionDeclaration[$current] )? otherlv_31= LeftCurlyBracket ( (lv_literals_32_0= ruleN4EnumLiteral ) ) (otherlv_33= Comma ( (lv_literals_34_0= ruleN4EnumLiteral ) ) )* otherlv_35= RightCurlyBracket ) )";
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\43\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);
    class DFA15 extends DFA {
        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "477:5: ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_14= ruleVersionDeclaration[$current] )? (this_TypeVariables_15= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_16= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_18_0= ruleN4Modifier ) )* otherlv_19= Interface ( (lv_typingStrategy_20_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_21_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_22= ruleVersionDeclaration[$current] )? (this_TypeVariables_23= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_24= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_19s = "\102\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_21s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\60\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\61\uffff}>";
    static final String[] dfa_24s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\1\uffff\1\21\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\2\21\10\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\12\uffff\2\21\7\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);
    class DFA21 extends DFA {
        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "988:5: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (lv_exportedElement_9_0= ruleExportableElement ) ) | ( ( (lv_defaultExportedExpression_10_0= norm1_AssignmentExpression ) ) ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_0 = input.LA(1);
                        int index21_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_0==CommercialAt) ) {s = 1;}
                        else if ( (LA21_0==Private) ) {s = 2;}
                        else if ( (LA21_0==Project) ) {s = 3;}
                        else if ( (LA21_0==Protected) ) {s = 4;}
                        else if ( (LA21_0==Public) ) {s = 5;}
                        else if ( (LA21_0==External) ) {s = 6;}
                        else if ( (LA21_0==Abstract) ) {s = 7;}
                        else if ( (LA21_0==Static) ) {s = 8;}
                        else if ( (LA21_0==Const) && (synpred10_InternalN4JSParser())) {s = 9;}
                        else if ( (LA21_0==Class) ) {s = 10;}
                        else if ( (LA21_0==Interface) ) {s = 11;}
                        else if ( (LA21_0==Enum) && (synpred10_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_0==Async) ) {s = 13;}
                        else if ( (LA21_0==Function) ) {s = 14;}
                        else if ( (LA21_0==Var) && (synpred10_InternalN4JSParser())) {s = 15;}
                        else if ( (LA21_0==Let) ) {s = 16;}
                        else if ( ((LA21_0>=Intersection && LA21_0<=Implements)||LA21_0==Promisify||LA21_0==Delete||LA21_0==Import||(LA21_0>=Target && LA21_0<=Typeof)||LA21_0==Await||(LA21_0>=False && LA21_0<=Super)||LA21_0==Union||(LA21_0>=Yield && LA21_0<=This)||(LA21_0>=From && LA21_0<=Void)||LA21_0==Get||(LA21_0>=New && LA21_0<=Set)||LA21_0==PlusSignPlusSign||(LA21_0>=HyphenMinusHyphenMinus && LA21_0<=SolidusEqualsSign)||LA21_0==As||LA21_0==Of||LA21_0==ExclamationMark||LA21_0==LeftParenthesis||LA21_0==PlusSign||LA21_0==HyphenMinus||LA21_0==Solidus||LA21_0==LessThanSign||LA21_0==LeftSquareBracket||LA21_0==LeftCurlyBracket||LA21_0==Tilde||LA21_0==RULE_DOUBLE||(LA21_0>=RULE_HEX_INT && LA21_0<=RULE_LEGACY_OCTAL_INT)||LA21_0==RULE_SCIENTIFIC_INT||LA21_0==RULE_IDENTIFIER||LA21_0==RULE_STRING||(LA21_0>=RULE_TEMPLATE_HEAD && LA21_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA21_0==RULE_INT) ) {s = 17;}
                        input.seek(index21_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_1 = input.LA(1);
                        int index21_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_2 = input.LA(1);
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_3 = input.LA(1);
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_4 = input.LA(1);
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_5 = input.LA(1);
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA21_6 = input.LA(1);
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA21_7 = input.LA(1);
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA21_8 = input.LA(1);
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA21_10 = input.LA(1);
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA21_11 = input.LA(1);
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA21_13 = input.LA(1);
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA21_14 = input.LA(1);
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA21_16 = input.LA(1);
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\72\uffff";
    static final String dfa_26s = "\20\uffff\11\17\41\uffff";
    static final String dfa_27s = "\1\11\1\uffff\7\11\1\4\6\uffff\1\4\7\11\1\17\41\uffff";
    static final String dfa_28s = "\1\152\1\uffff\7\100\1\176\6\uffff\1\u00a5\10\u0099\41\uffff";
    static final String dfa_29s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\2\5\1\6\11\uffff\40\3\1\5";
    static final String dfa_30s = "\1\0\1\uffff\1\6\1\15\1\12\1\2\1\10\1\7\1\17\1\20\6\uffff\1\14\1\4\1\21\1\5\1\16\1\13\1\3\1\11\1\1\41\uffff}>";
    static final String[] dfa_31s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\3\17\1\uffff\1\17\1\20\1\23\1\26\2\uffff\1\25\1\16\3\uffff\1\21\1\22\3\uffff\1\24\1\uffff\1\27\1\uffff\1\17\1\uffff\1\30\1\17\2\uffff\1\12\1\11\3\uffff\1\17\1\uffff\2\17\2\uffff\1\14\1\17\3\uffff\1\17\7\uffff\2\17\1\uffff\2\17\1\uffff\1\17\21\uffff\1\17\3\uffff\1\17\23\uffff\2\17\2\uffff\1\17\17\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\1\45\1\57\1\uffff\1\54\1\60\1\62\1\41\2\uffff\1\40\2\uffff\1\67\1\uffff\1\61\1\37\3\uffff\1\63\1\uffff\1\42\1\uffff\1\47\1\uffff\1\56\1\55\7\uffff\1\51\1\uffff\1\33\1\53\3\uffff\1\44\3\uffff\1\50\7\uffff\1\34\1\36\1\uffff\1\64\1\35\23\uffff\1\43\3\uffff\1\46\11\uffff\1\17\3\uffff\2\17\1\66\1\17\6\uffff\1\70\1\uffff\1\17\1\31\14\uffff\1\32\30\uffff\1\17\1\uffff\1\17\13\uffff\1\65",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\46\uffff\1\17\1\uffff\1\17",
            "\1\16\120\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\41\uffff\1\71\4\uffff\1\17\1\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);
    class DFA27 extends DFA {
        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "1228:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedExportableElement_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4ClassDeclaration_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4InterfaceDeclaration_2= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4EnumDeclaration_3= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_4= ruleFunctionDeclaration ) | this_ExportedVariableStatement_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_0 = input.LA(1);
                        int index27_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_0==CommercialAt) && (synpred11_InternalN4JSParser())) {s = 1;}
                        else if ( (LA27_0==Private) ) {s = 2;}
                        else if ( (LA27_0==Project) ) {s = 3;}
                        else if ( (LA27_0==Protected) ) {s = 4;}
                        else if ( (LA27_0==Public) ) {s = 5;}
                        else if ( (LA27_0==External) ) {s = 6;}
                        else if ( (LA27_0==Abstract) ) {s = 7;}
                        else if ( (LA27_0==Static) ) {s = 8;}
                        else if ( (LA27_0==Const) ) {s = 9;}
                        else if ( (LA27_0==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_0==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_0==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_0==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_0==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_0==Let||LA27_0==Var) ) {s = 15;}
                        input.seek(index27_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_24 = input.LA(1);
                        int index27_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_24==RULE_NO_LINE_TERMINATOR) && (synpred15_InternalN4JSParser())) {s = 57;}
                        else if ( (LA27_24==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_24==EOF||LA27_24==Comma||(LA27_24>=Colon && LA27_24<=Semicolon)||LA27_24==EqualsSign||LA27_24==RightCurlyBracket||LA27_24==RULE_ML_COMMENT||LA27_24==RULE_EOL) ) {s = 15;}
                        input.seek(index27_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_5 = input.LA(1);
                        int index27_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_5==Let||LA27_5==Var) ) {s = 15;}
                        else if ( (LA27_5==Const) ) {s = 9;}
                        else if ( (LA27_5==Private) ) {s = 2;}
                        else if ( (LA27_5==Project) ) {s = 3;}
                        else if ( (LA27_5==Protected) ) {s = 4;}
                        else if ( (LA27_5==Public) ) {s = 5;}
                        else if ( (LA27_5==External) ) {s = 6;}
                        else if ( (LA27_5==Abstract) ) {s = 7;}
                        else if ( (LA27_5==Static) ) {s = 8;}
                        else if ( (LA27_5==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_5==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_5==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_5==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_5==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        input.seek(index27_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_22 = input.LA(1);
                        int index27_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_22==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_22==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_22==Private) ) {s = 2;}
                        else if ( (LA27_22==Project) ) {s = 3;}
                        else if ( (LA27_22==Protected) ) {s = 4;}
                        else if ( (LA27_22==Public) ) {s = 5;}
                        else if ( (LA27_22==External) ) {s = 6;}
                        else if ( (LA27_22==Abstract) ) {s = 7;}
                        else if ( (LA27_22==Static) ) {s = 8;}
                        else if ( (LA27_22==Const) ) {s = 9;}
                        else if ( (LA27_22==EOF||LA27_22==Let||LA27_22==Var||LA27_22==Comma||(LA27_22>=Colon && LA27_22<=Semicolon)||LA27_22==EqualsSign||LA27_22==RightCurlyBracket||LA27_22==RULE_ML_COMMENT||LA27_22==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_22==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_22==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_22==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        input.seek(index27_22);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA27_17 = input.LA(1);
                        int index27_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_17==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_17==Private) ) {s = 2;}
                        else if ( (LA27_17==Project) ) {s = 3;}
                        else if ( (LA27_17==Protected) ) {s = 4;}
                        else if ( (LA27_17==Public) ) {s = 5;}
                        else if ( (LA27_17==External) ) {s = 6;}
                        else if ( (LA27_17==Abstract) ) {s = 7;}
                        else if ( (LA27_17==Static) ) {s = 8;}
                        else if ( (LA27_17==Const) ) {s = 9;}
                        else if ( (LA27_17==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_17==EOF||LA27_17==Let||LA27_17==Var||LA27_17==Comma||(LA27_17>=Colon && LA27_17<=Semicolon)||LA27_17==EqualsSign||LA27_17==RightCurlyBracket||LA27_17==RULE_ML_COMMENT||LA27_17==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_17==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_17==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_17==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index27_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA27_19 = input.LA(1);
                        int index27_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_19==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_19==Private) ) {s = 2;}
                        else if ( (LA27_19==Project) ) {s = 3;}
                        else if ( (LA27_19==Protected) ) {s = 4;}
                        else if ( (LA27_19==Public) ) {s = 5;}
                        else if ( (LA27_19==External) ) {s = 6;}
                        else if ( (LA27_19==Abstract) ) {s = 7;}
                        else if ( (LA27_19==Static) ) {s = 8;}
                        else if ( (LA27_19==Const) ) {s = 9;}
                        else if ( (LA27_19==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_19==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_19==EOF||LA27_19==Let||LA27_19==Var||LA27_19==Comma||(LA27_19>=Colon && LA27_19<=Semicolon)||LA27_19==EqualsSign||LA27_19==RightCurlyBracket||LA27_19==RULE_ML_COMMENT||LA27_19==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_19==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_19==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        input.seek(index27_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA27_2 = input.LA(1);
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_2==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_2==Private) ) {s = 2;}
                        else if ( (LA27_2==Project) ) {s = 3;}
                        else if ( (LA27_2==Protected) ) {s = 4;}
                        else if ( (LA27_2==Public) ) {s = 5;}
                        else if ( (LA27_2==External) ) {s = 6;}
                        else if ( (LA27_2==Abstract) ) {s = 7;}
                        else if ( (LA27_2==Static) ) {s = 8;}
                        else if ( (LA27_2==Const) ) {s = 9;}
                        else if ( (LA27_2==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_2==Let||LA27_2==Var) ) {s = 15;}
                        else if ( (LA27_2==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_2==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_2==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA27_7 = input.LA(1);
                        int index27_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_7==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_7==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_7==Private) ) {s = 2;}
                        else if ( (LA27_7==Project) ) {s = 3;}
                        else if ( (LA27_7==Protected) ) {s = 4;}
                        else if ( (LA27_7==Public) ) {s = 5;}
                        else if ( (LA27_7==External) ) {s = 6;}
                        else if ( (LA27_7==Abstract) ) {s = 7;}
                        else if ( (LA27_7==Static) ) {s = 8;}
                        else if ( (LA27_7==Const) ) {s = 9;}
                        else if ( (LA27_7==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_7==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_7==Let||LA27_7==Var) ) {s = 15;}
                        else if ( (LA27_7==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        input.seek(index27_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA27_6 = input.LA(1);
                        int index27_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_6==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_6==Private) ) {s = 2;}
                        else if ( (LA27_6==Project) ) {s = 3;}
                        else if ( (LA27_6==Protected) ) {s = 4;}
                        else if ( (LA27_6==Public) ) {s = 5;}
                        else if ( (LA27_6==External) ) {s = 6;}
                        else if ( (LA27_6==Abstract) ) {s = 7;}
                        else if ( (LA27_6==Static) ) {s = 8;}
                        else if ( (LA27_6==Const) ) {s = 9;}
                        else if ( (LA27_6==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_6==Let||LA27_6==Var) ) {s = 15;}
                        else if ( (LA27_6==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_6==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_6==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index27_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA27_23 = input.LA(1);
                        int index27_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_23==EOF||LA27_23==Let||LA27_23==Var||LA27_23==Comma||(LA27_23>=Colon && LA27_23<=Semicolon)||LA27_23==EqualsSign||LA27_23==RightCurlyBracket||LA27_23==RULE_ML_COMMENT||LA27_23==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_23==Const) ) {s = 9;}
                        else if ( (LA27_23==Private) ) {s = 2;}
                        else if ( (LA27_23==Project) ) {s = 3;}
                        else if ( (LA27_23==Protected) ) {s = 4;}
                        else if ( (LA27_23==Public) ) {s = 5;}
                        else if ( (LA27_23==External) ) {s = 6;}
                        else if ( (LA27_23==Abstract) ) {s = 7;}
                        else if ( (LA27_23==Static) ) {s = 8;}
                        else if ( (LA27_23==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_23==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_23==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_23==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_23==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        input.seek(index27_23);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA27_4 = input.LA(1);
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_4==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_4==Private) ) {s = 2;}
                        else if ( (LA27_4==Project) ) {s = 3;}
                        else if ( (LA27_4==Protected) ) {s = 4;}
                        else if ( (LA27_4==Public) ) {s = 5;}
                        else if ( (LA27_4==External) ) {s = 6;}
                        else if ( (LA27_4==Abstract) ) {s = 7;}
                        else if ( (LA27_4==Static) ) {s = 8;}
                        else if ( (LA27_4==Const) ) {s = 9;}
                        else if ( (LA27_4==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_4==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_4==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_4==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_4==Let||LA27_4==Var) ) {s = 15;}
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA27_21 = input.LA(1);
                        int index27_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_21==EOF||LA27_21==Let||LA27_21==Var||LA27_21==Comma||(LA27_21>=Colon && LA27_21<=Semicolon)||LA27_21==EqualsSign||LA27_21==RightCurlyBracket||LA27_21==RULE_ML_COMMENT||LA27_21==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_21==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_21==Private) ) {s = 2;}
                        else if ( (LA27_21==Project) ) {s = 3;}
                        else if ( (LA27_21==Protected) ) {s = 4;}
                        else if ( (LA27_21==Public) ) {s = 5;}
                        else if ( (LA27_21==External) ) {s = 6;}
                        else if ( (LA27_21==Abstract) ) {s = 7;}
                        else if ( (LA27_21==Static) ) {s = 8;}
                        else if ( (LA27_21==Const) ) {s = 9;}
                        else if ( (LA27_21==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_21==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_21==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_21==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index27_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA27_16 = input.LA(1);
                        int index27_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_16==EOF||LA27_16==Comma||(LA27_16>=Colon && LA27_16<=Semicolon)||LA27_16==EqualsSign||LA27_16==RightCurlyBracket||LA27_16==RULE_ML_COMMENT||LA27_16==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_16==Tilde) && (synpred13_InternalN4JSParser())) {s = 25;}
                        else if ( (LA27_16==RULE_IDENTIFIER) && (synpred13_InternalN4JSParser())) {s = 26;}
                        else if ( (LA27_16==Yield) && (synpred13_InternalN4JSParser())) {s = 27;}
                        else if ( (LA27_16==Get) && (synpred13_InternalN4JSParser())) {s = 28;}
                        else if ( (LA27_16==Set) && (synpred13_InternalN4JSParser())) {s = 29;}
                        else if ( (LA27_16==Let) && (synpred13_InternalN4JSParser())) {s = 30;}
                        else if ( (LA27_16==Project) && (synpred13_InternalN4JSParser())) {s = 31;}
                        else if ( (LA27_16==External) && (synpred13_InternalN4JSParser())) {s = 32;}
                        else if ( (LA27_16==Abstract) && (synpred13_InternalN4JSParser())) {s = 33;}
                        else if ( (LA27_16==Static) && (synpred13_InternalN4JSParser())) {s = 34;}
                        else if ( (LA27_16==As) && (synpred13_InternalN4JSParser())) {s = 35;}
                        else if ( (LA27_16==From) && (synpred13_InternalN4JSParser())) {s = 36;}
                        else if ( (LA27_16==Constructor) && (synpred13_InternalN4JSParser())) {s = 37;}
                        else if ( (LA27_16==Of) && (synpred13_InternalN4JSParser())) {s = 38;}
                        else if ( (LA27_16==Target) && (synpred13_InternalN4JSParser())) {s = 39;}
                        else if ( (LA27_16==Type) && (synpred13_InternalN4JSParser())) {s = 40;}
                        else if ( (LA27_16==Union) && (synpred13_InternalN4JSParser())) {s = 41;}
                        else if ( (LA27_16==Intersection) && (synpred13_InternalN4JSParser())) {s = 42;}
                        else if ( (LA27_16==This) && (synpred13_InternalN4JSParser())) {s = 43;}
                        else if ( (LA27_16==Promisify) && (synpred13_InternalN4JSParser())) {s = 44;}
                        else if ( (LA27_16==Await) && (synpred13_InternalN4JSParser())) {s = 45;}
                        else if ( (LA27_16==Async) && (synpred13_InternalN4JSParser())) {s = 46;}
                        else if ( (LA27_16==Implements) && (synpred13_InternalN4JSParser())) {s = 47;}
                        else if ( (LA27_16==Interface) && (synpred13_InternalN4JSParser())) {s = 48;}
                        else if ( (LA27_16==Private) && (synpred13_InternalN4JSParser())) {s = 49;}
                        else if ( (LA27_16==Protected) && (synpred13_InternalN4JSParser())) {s = 50;}
                        else if ( (LA27_16==Public) && (synpred13_InternalN4JSParser())) {s = 51;}
                        else if ( (LA27_16==Out) && (synpred13_InternalN4JSParser())) {s = 52;}
                        else if ( (LA27_16==RULE_VERSION) && (synpred13_InternalN4JSParser())) {s = 53;}
                        else if ( (LA27_16==LessThanSign) && (synpred13_InternalN4JSParser())) {s = 54;}
                        else if ( (LA27_16==Extends) && (synpred13_InternalN4JSParser())) {s = 55;}
                        else if ( (LA27_16==LeftCurlyBracket) && (synpred13_InternalN4JSParser())) {s = 56;}
                        input.seek(index27_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA27_3 = input.LA(1);
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_3==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_3==Private) ) {s = 2;}
                        else if ( (LA27_3==Project) ) {s = 3;}
                        else if ( (LA27_3==Protected) ) {s = 4;}
                        else if ( (LA27_3==Public) ) {s = 5;}
                        else if ( (LA27_3==External) ) {s = 6;}
                        else if ( (LA27_3==Abstract) ) {s = 7;}
                        else if ( (LA27_3==Static) ) {s = 8;}
                        else if ( (LA27_3==Const) ) {s = 9;}
                        else if ( (LA27_3==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_3==Let||LA27_3==Var) ) {s = 15;}
                        else if ( (LA27_3==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_3==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_3==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA27_20 = input.LA(1);
                        int index27_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_20==EOF||LA27_20==Let||LA27_20==Var||LA27_20==Comma||(LA27_20>=Colon && LA27_20<=Semicolon)||LA27_20==EqualsSign||LA27_20==RightCurlyBracket||LA27_20==RULE_ML_COMMENT||LA27_20==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_20==Const) ) {s = 9;}
                        else if ( (LA27_20==Private) ) {s = 2;}
                        else if ( (LA27_20==Project) ) {s = 3;}
                        else if ( (LA27_20==Protected) ) {s = 4;}
                        else if ( (LA27_20==Public) ) {s = 5;}
                        else if ( (LA27_20==External) ) {s = 6;}
                        else if ( (LA27_20==Abstract) ) {s = 7;}
                        else if ( (LA27_20==Static) ) {s = 8;}
                        else if ( (LA27_20==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_20==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_20==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_20==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_20==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        input.seek(index27_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA27_8 = input.LA(1);
                        int index27_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_8==Let||LA27_8==Var) ) {s = 15;}
                        else if ( (LA27_8==Const) ) {s = 9;}
                        else if ( (LA27_8==Private) ) {s = 2;}
                        else if ( (LA27_8==Project) ) {s = 3;}
                        else if ( (LA27_8==Protected) ) {s = 4;}
                        else if ( (LA27_8==Public) ) {s = 5;}
                        else if ( (LA27_8==External) ) {s = 6;}
                        else if ( (LA27_8==Abstract) ) {s = 7;}
                        else if ( (LA27_8==Static) ) {s = 8;}
                        else if ( (LA27_8==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_8==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_8==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA27_8==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_8==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        input.seek(index27_8);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA27_9 = input.LA(1);
                        int index27_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_9==Interface) ) {s = 16;}
                        else if ( (LA27_9==Private) ) {s = 17;}
                        else if ( (LA27_9==Project) ) {s = 18;}
                        else if ( (LA27_9==Protected) ) {s = 19;}
                        else if ( (LA27_9==Public) ) {s = 20;}
                        else if ( (LA27_9==External) ) {s = 21;}
                        else if ( (LA27_9==Abstract) ) {s = 22;}
                        else if ( (LA27_9==Static) ) {s = 23;}
                        else if ( (LA27_9==Const) ) {s = 9;}
                        else if ( (LA27_9==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( ((LA27_9>=Intersection && LA27_9<=Implements)||LA27_9==Promisify||LA27_9==Target||LA27_9==Await||LA27_9==Union||(LA27_9>=Yield && LA27_9<=This)||LA27_9==From||LA27_9==Type||(LA27_9>=Get && LA27_9<=Let)||(LA27_9>=Out && LA27_9<=Set)||LA27_9==Var||LA27_9==As||LA27_9==Of||(LA27_9>=CommercialAt && LA27_9<=LeftSquareBracket)||LA27_9==LeftCurlyBracket||LA27_9==RULE_IDENTIFIER) ) {s = 15;}
                        else if ( (LA27_9==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_9==Async) ) {s = 24;}
                        else if ( (LA27_9==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index27_9);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA27_18 = input.LA(1);
                        int index27_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_18==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}
                        else if ( (LA27_18==Private) ) {s = 2;}
                        else if ( (LA27_18==Project) ) {s = 3;}
                        else if ( (LA27_18==Protected) ) {s = 4;}
                        else if ( (LA27_18==Public) ) {s = 5;}
                        else if ( (LA27_18==External) ) {s = 6;}
                        else if ( (LA27_18==Abstract) ) {s = 7;}
                        else if ( (LA27_18==Static) ) {s = 8;}
                        else if ( (LA27_18==Const) ) {s = 9;}
                        else if ( (LA27_18==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}
                        else if ( (LA27_18==EOF||LA27_18==Let||LA27_18==Var||LA27_18==Comma||(LA27_18>=Colon && LA27_18<=Semicolon)||LA27_18==EqualsSign||LA27_18==RightCurlyBracket||LA27_18==RULE_ML_COMMENT||LA27_18==RULE_EOL) ) {s = 15;}
                        else if ( (LA27_18==Class) && (synpred12_InternalN4JSParser())) {s = 10;}
                        else if ( (LA27_18==Async) && (synpred15_InternalN4JSParser())) {s = 13;}
                        else if ( (LA27_18==Function) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index27_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\26\uffff";
    static final String dfa_33s = "\15\uffff\11\12";
    static final String dfa_34s = "\10\11\1\4\4\uffff\7\11\1\17\1\4";
    static final String dfa_35s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_37s = "\26\uffff}>";
    static final String[] dfa_38s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\1\uffff\1\12\1\uffff\1\24\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\41\uffff\1\11\4\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12"
    };
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);
    class DFA42 extends DFA {
        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "1422:3: ( ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_3= ruleAsyncNoTrailingLineBreak[$current] this_FunctionImpl_4= ruleFunctionImpl[$current] ) | ( () ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* ( (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( (lv_varDeclsOrBindings_8_0= ruleExportedVariableDeclarationOrBinding ) ) (otherlv_9= Comma ( (lv_varDeclsOrBindings_10_0= ruleExportedVariableDeclarationOrBinding ) ) )* ruleSemi ) | ( ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeVariables_17= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeVariables_24= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) ) this_Members_26= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_28_0= ruleN4Modifier ) )* otherlv_29= Enum ( (lv_name_30_0= ruleBindingIdentifier ) ) otherlv_31= LeftCurlyBracket ( (lv_literals_32_0= ruleN4EnumLiteral ) ) (otherlv_33= Comma ( (lv_literals_34_0= ruleN4EnumLiteral ) ) )* otherlv_35= RightCurlyBracket ) )";
        }
    }
    static final String dfa_39s = "\14\uffff";
    static final String dfa_40s = "\4\uffff\10\1";
    static final String dfa_41s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_42s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_43s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_44s = "\14\uffff}>";
    static final String[] dfa_45s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);
    class DFA29 extends DFA {
        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 1482:5: ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )*";
        }
    }
    class DFA39 extends DFA {
        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "1574:5: ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeVariables_17= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeVariables_24= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_46s = "\36\uffff";
    static final String dfa_47s = "\1\uffff\33\35\2\uffff";
    static final String dfa_48s = "\1\4\33\122\2\uffff";
    static final String dfa_49s = "\1\176\33\160\2\uffff";
    static final String dfa_50s = "\34\uffff\1\2\1\1";
    static final String dfa_51s = "\36\uffff}>";
    static final String[] dfa_52s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);
    class DFA50 extends DFA {
        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "2166:2: ( ( ( ruleBindingIdentifier ) ) | ( ( ( ruleIdentifierName ) ) otherlv_2= As ( (lv_alias_3_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_53s = "\134\uffff";
    static final String dfa_54s = "\1\2\1\uffff\1\6\3\uffff\1\133\125\uffff";
    static final String dfa_55s = "\1\4\1\0\1\4\1\0\2\uffff\1\0\125\uffff";
    static final String dfa_56s = "\1\u0099\1\0\1\u0095\1\0\2\uffff\1\0\125\uffff";
    static final String dfa_57s = "\4\uffff\1\1\1\2\1\uffff\125\1";
    static final String dfa_58s = "\1\3\1\4\1\1\1\2\2\uffff\1\0\125\uffff}>";
    static final String[] dfa_59s = {
            "\3\5\1\uffff\11\5\2\uffff\16\5\1\uffff\23\5\4\uffff\10\5\5\uffff\1\5\1\uffff\2\5\6\uffff\1\5\1\uffff\3\5\1\uffff\1\5\2\uffff\1\5\2\uffff\1\5\2\uffff\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1\1\1\5\3\uffff\2\5\2\uffff\1\5\1\uffff\1\3\1\5\3\uffff\1\5\1\uffff\4\5\1\uffff\1\5\1\uffff\1\5\2\uffff\1\5\12\uffff\2\5\7\uffff\1\5\1\uffff\1\4\1\uffff\1\4",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\117\1\126\1\15\1\30\1\131\2\uffff\1\11\1\12\1\102\1\25\1\24\1\14\1\121\1\17\1\123\1\44\1\104\1\27\1\52\1\120\1\uffff\1\21\1\20\1\72\1\60\1\124\1\46\1\115\1\35\1\50\1\132\1\130\1\23\1\41\1\74\1\57\1\71\1\45\1\103\1\122\4\uffff\1\116\1\36\1\32\1\56\1\54\1\37\1\125\1\31\5\uffff\1\105\1\uffff\1\106\1\76\6\uffff\1\7\1\uffff\1\40\1\114\1\113\1\uffff\1\43\2\uffff\1\112\2\uffff\1\55\2\uffff\1\107\1\uffff\1\110\1\uffff\1\75\1\uffff\1\33\1\61\3\uffff\1\10\1\77\2\uffff\1\26\1\uffff\1\127\1\111\3\uffff\1\62\1\uffff\1\67\1\64\1\65\1\66\1\uffff\1\70\1\uffff\1\34\2\uffff\1\73\12\uffff\1\101\1\100\7\uffff\1\63",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);
    class DFA53 extends DFA {
        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "2435:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_6 = input.LA(1);
                        int index53_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA53_6==EOF) && (synpred19_InternalN4JSParser())) {s = 91;}
                        input.seek(index53_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA53_2 = input.LA(1);
                        int index53_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA53_2==EOF) ) {s = 6;}
                        else if ((LA53_2>=-1 && LA53_2<=149 && (s=T2S.M_1[LA53_2-(-1)])>=0) && (synpred19_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index53_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA53_3 = input.LA(1);
                        int index53_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSParser()) ) {s = 90;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index53_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA53_0 = input.LA(1);
                        int index53_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA53_0==Semicolon) ) {s = 1;}
                        else if ( (LA53_0==EOF) ) {s = 2;}
                        else if ( (LA53_0==RightCurlyBracket) ) {s = 3;}
                        else if ( (LA53_0==RULE_ML_COMMENT||LA53_0==RULE_EOL) && (synpred19_InternalN4JSParser())) {s = 4;}
                        else if ( ((LA53_0>=Intersection && LA53_0<=Implements)||(LA53_0>=Promisify && LA53_0<=Default)||(LA53_0>=Private && LA53_0<=Break)||(LA53_0>=Class && LA53_0<=With)||(LA53_0>=For && LA53_0<=Var)||LA53_0==PlusSignPlusSign||(LA53_0>=HyphenMinusHyphenMinus && LA53_0<=SolidusEqualsSign)||LA53_0==CommercialAtCommercialAt||(LA53_0>=As && LA53_0<=If)||LA53_0==Of||LA53_0==ExclamationMark||LA53_0==LeftParenthesis||LA53_0==PlusSign||LA53_0==HyphenMinus||LA53_0==Solidus||LA53_0==LessThanSign||(LA53_0>=CommercialAt && LA53_0<=LeftSquareBracket)||LA53_0==LeftCurlyBracket||LA53_0==Tilde||LA53_0==RULE_DOUBLE||(LA53_0>=RULE_HEX_INT && LA53_0<=RULE_LEGACY_OCTAL_INT)||LA53_0==RULE_SCIENTIFIC_INT||LA53_0==RULE_IDENTIFIER||LA53_0==RULE_STRING||(LA53_0>=RULE_TEMPLATE_HEAD && LA53_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA53_0==RULE_INT) ) {s = 5;}
                        input.seek(index53_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA53_1 = input.LA(1);
                        int index53_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index53_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\130\uffff";
    static final String dfa_61s = "\1\2\127\uffff";
    static final String dfa_62s = "\1\4\1\0\126\uffff";
    static final String dfa_63s = "\1\u0099\1\0\126\uffff";
    static final String dfa_64s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_65s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_66s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);
    class DFA81 extends DFA {
        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "3609:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_1 = input.LA(1);
                        int index81_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSParser()) ) {s = 87;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index81_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA82 extends DFA {
        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "3645:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_1 = input.LA(1);
                        int index82_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalN4JSParser()) ) {s = 87;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index82_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\100\uffff";
    static final String dfa_68s = "\1\4\1\0\76\uffff";
    static final String dfa_69s = "\1\u0095\1\0\76\uffff";
    static final String dfa_70s = "\2\uffff\1\2\74\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);
    class DFA88 extends DFA {
        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4221:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_1 = input.LA(1);
                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA92 extends DFA {
        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4469:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA96 extends DFA {
        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4717:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_1 = input.LA(1);
                        int index96_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index96_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA100 extends DFA {
        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4965:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_1 = input.LA(1);
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\44\uffff";
    static final String dfa_74s = "\1\4\1\0\42\uffff";
    static final String dfa_75s = "\1\176\1\0\42\uffff";
    static final String dfa_76s = "\2\uffff\1\1\1\2\40\uffff";
    static final String dfa_77s = "\1\0\1\1\42\uffff}>";
    static final String[] dfa_78s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\uffff\1\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);
    class DFA119 extends DFA {
        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "5864:3: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( (lv_annotations_1_0= ruleAnnotation ) )* (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )? ( (lv_variadic_3_0= FullStopFullStopFullStop ) )? ( (lv_name_4_0= ruleBindingIdentifier ) ) (this_ColonSepDeclaredTypeRef_5= ruleColonSepDeclaredTypeRef[$current] )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_0 = input.LA(1);
                        int index119_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_0==LeftCurlyBracket) ) {s = 1;}
                        else if ( (LA119_0==LeftSquareBracket) && (synpred58_InternalN4JSParser())) {s = 2;}
                        else if ( ((LA119_0>=Intersection && LA119_0<=Implements)||(LA119_0>=Promisify && LA119_0<=Abstract)||LA119_0==External||LA119_0==Default||(LA119_0>=Private && LA119_0<=Project)||LA119_0==Public||LA119_0==Static||LA119_0==Target||(LA119_0>=Async && LA119_0<=Await)||LA119_0==Union||(LA119_0>=Yield && LA119_0<=This)||LA119_0==From||LA119_0==This_1||(LA119_0>=Type && LA119_0<=Void)||LA119_0==FullStopFullStopFullStop||(LA119_0>=Get && LA119_0<=Let)||(LA119_0>=Out && LA119_0<=Set)||LA119_0==As||LA119_0==Of||LA119_0==CommercialAt||LA119_0==Tilde||LA119_0==RULE_IDENTIFIER) ) {s = 3;}
                        input.seek(index119_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA119_1 = input.LA(1);
                        int index119_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 3;}
                        input.seek(index119_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\2\uffff\11\13\1\uffff";
    static final String dfa_80s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_81s = "\1\176\1\uffff\5\u00a5\4\156\1\uffff";
    static final String dfa_82s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_83s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);
    class DFA116 extends DFA {
        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "5909:5: (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_84s = "\43\uffff";
    static final String dfa_85s = "\1\4\1\0\41\uffff";
    static final String dfa_86s = "\1\176\1\0\41\uffff";
    static final String dfa_87s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_88s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_89s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\uffff\1\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);
    class DFA126 extends DFA {
        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "6018:3: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( (lv_annotations_1_0= ruleAnnotation ) )* (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )? ( (lv_variadic_3_0= FullStopFullStopFullStop ) )? ( (lv_name_4_0= norm1_BindingIdentifier ) ) (this_ColonSepDeclaredTypeRef_5= ruleColonSepDeclaredTypeRef[$current] )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_0 = input.LA(1);
                        int index126_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_0==LeftCurlyBracket) ) {s = 1;}
                        else if ( (LA126_0==LeftSquareBracket) && (synpred59_InternalN4JSParser())) {s = 2;}
                        else if ( ((LA126_0>=Intersection && LA126_0<=Implements)||(LA126_0>=Promisify && LA126_0<=Abstract)||LA126_0==External||LA126_0==Default||(LA126_0>=Private && LA126_0<=Project)||LA126_0==Public||LA126_0==Static||LA126_0==Target||(LA126_0>=Async && LA126_0<=Await)||LA126_0==Union||LA126_0==This||LA126_0==From||LA126_0==This_1||(LA126_0>=Type && LA126_0<=Void)||LA126_0==FullStopFullStopFullStop||(LA126_0>=Get && LA126_0<=Let)||(LA126_0>=Out && LA126_0<=Set)||LA126_0==As||LA126_0==Of||LA126_0==CommercialAt||LA126_0==Tilde||LA126_0==RULE_IDENTIFIER) ) {s = 3;}
                        input.seek(index126_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_1 = input.LA(1);
                        int index126_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 3;}
                        input.seek(index126_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_90s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_90 = unpackEncodedStringArray(dfa_90s);
    class DFA123 extends DFA {
        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_90;
        }
        public String getDescription() {
            return "6063:5: (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_91s = "\121\uffff";
    static final String dfa_92s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_93s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_94s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_95s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\60\uffff}>";
    static final String[] dfa_96s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\41\1\uffff\1\41\1\5\1\110\1\10\1\112\1\27\1\41\1\12\1\35\1\107\1\uffff\1\41\1\11\2\41\1\113\1\31\1\103\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\111\4\uffff\1\103\1\21\1\15\1\41\1\40\1\22\1\114\1\14\5\uffff\1\41\1\uffff\2\41\10\uffff\1\23\1\103\1\102\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\12\uffff\2\41\7\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);
    class DFA131 extends DFA {
        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "6327:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= ruleBlock ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= ruleFunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm1_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= ruleLabelledStatement ) | this_ExpressionStatement_5= ruleExpressionStatement | this_IfStatement_6= ruleIfStatement | this_IterationStatement_7= ruleIterationStatement | this_ContinueStatement_8= ruleContinueStatement | this_BreakStatement_9= ruleBreakStatement | this_ReturnStatement_10= ruleReturnStatement | this_WithStatement_11= ruleWithStatement | this_SwitchStatement_12= ruleSwitchStatement | this_ThrowStatement_13= ruleThrowStatement | this_TryStatement_14= ruleTryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_0 = input.LA(1);
                        int index131_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA131_0>=10 && LA131_0<=110 && (s=T2S.M_2[LA131_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA131_0==Var) && (synpred64_InternalN4JSParser())) {s = 12;}
                        else if ((LA131_0>=4 && LA131_0<=126 && (s=T2S.M_3[LA131_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA131_0==Delete||LA131_0==Import||LA131_0==Typeof||LA131_0==Class||(LA131_0>=False && LA131_0<=Super)||(LA131_0>=Null && LA131_0<=True)||LA131_0==Void||LA131_0==New||LA131_0==PlusSignPlusSign||(LA131_0>=HyphenMinusHyphenMinus && LA131_0<=SolidusEqualsSign)||LA131_0==ExclamationMark||LA131_0==LeftParenthesis||LA131_0==PlusSign||LA131_0==HyphenMinus||LA131_0==Solidus||LA131_0==LessThanSign||(LA131_0>=CommercialAt && LA131_0<=LeftSquareBracket)||LA131_0==Tilde||LA131_0==RULE_DOUBLE||(LA131_0>=RULE_HEX_INT && LA131_0<=RULE_LEGACY_OCTAL_INT)||LA131_0==RULE_SCIENTIFIC_INT||LA131_0==RULE_STRING||(LA131_0>=RULE_TEMPLATE_HEAD && LA131_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA131_0==RULE_INT) ) {s = 33;}
                        else if ( (LA131_0==If) ) {s = 66;}
                        else if ( (LA131_0==While||LA131_0==For||LA131_0==Do) ) {s = 67;}
                        else if ( (LA131_0==Continue) ) {s = 70;}
                        else if ( (LA131_0==Break) ) {s = 71;}
                        else if ( (LA131_0==Return) ) {s = 72;}
                        else if ( (LA131_0==With) ) {s = 73;}
                        else if ( (LA131_0==Switch) ) {s = 74;}
                        else if ( (LA131_0==Throw) ) {s = 75;}
                        else if ( (LA131_0==Try) ) {s = 76;}
                        else if ( (LA131_0==Debugger) ) {s = 77;}
                        input.seek(index131_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_1 = input.LA(1);
                        int index131_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA131_2 = input.LA(1);
                        int index131_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA131_3 = input.LA(1);
                        int index131_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA131_4 = input.LA(1);
                        int index131_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA131_5 = input.LA(1);
                        int index131_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA131_6 = input.LA(1);
                        int index131_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA131_7 = input.LA(1);
                        int index131_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA131_8 = input.LA(1);
                        int index131_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA131_9 = input.LA(1);
                        int index131_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred64_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index131_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA131_10 = input.LA(1);
                        int index131_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA131_11 = input.LA(1);
                        int index131_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA131_13 = input.LA(1);
                        int index131_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA131_15 = input.LA(1);
                        int index131_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA131_16 = input.LA(1);
                        int index131_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA131_17 = input.LA(1);
                        int index131_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA131_18 = input.LA(1);
                        int index131_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA131_19 = input.LA(1);
                        int index131_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA131_20 = input.LA(1);
                        int index131_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA131_21 = input.LA(1);
                        int index131_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA131_22 = input.LA(1);
                        int index131_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA131_23 = input.LA(1);
                        int index131_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA131_24 = input.LA(1);
                        int index131_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA131_25 = input.LA(1);
                        int index131_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA131_26 = input.LA(1);
                        int index131_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA131_27 = input.LA(1);
                        int index131_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA131_28 = input.LA(1);
                        int index131_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA131_29 = input.LA(1);
                        int index131_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA131_30 = input.LA(1);
                        int index131_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA131_31 = input.LA(1);
                        int index131_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA131_32 = input.LA(1);
                        int index131_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index131_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_97s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_98s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_99s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_100s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\61\uffff}>";
    static final String[] dfa_101s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\40\1\uffff\1\40\1\5\1\110\1\10\1\112\1\26\1\40\1\12\1\34\1\107\1\uffff\1\40\1\11\2\40\1\113\1\30\1\103\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\111\4\uffff\1\103\1\20\1\15\1\40\1\37\1\21\1\114\1\14\5\uffff\1\40\1\uffff\2\40\10\uffff\1\22\1\103\1\102\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\12\uffff\2\40\7\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);
    class DFA132 extends DFA {
        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "6528:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= norm1_Block ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= norm1_FunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm3_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= norm1_LabelledStatement ) | this_ExpressionStatement_5= norm1_ExpressionStatement | this_IfStatement_6= norm1_IfStatement | this_IterationStatement_7= norm1_IterationStatement | this_ContinueStatement_8= norm1_ContinueStatement | this_BreakStatement_9= norm1_BreakStatement | this_ReturnStatement_10= norm1_ReturnStatement | this_WithStatement_11= norm1_WithStatement | this_SwitchStatement_12= norm1_SwitchStatement | this_ThrowStatement_13= norm1_ThrowStatement | this_TryStatement_14= norm1_TryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_0 = input.LA(1);
                        int index132_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA132_0>=10 && LA132_0<=110 && (s=T2S.M_2[LA132_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA132_0==Var) && (synpred68_InternalN4JSParser())) {s = 12;}
                        else if ((LA132_0>=4 && LA132_0<=126 && (s=T2S.M_5[LA132_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA132_0==Delete||LA132_0==Import||LA132_0==Typeof||LA132_0==Class||(LA132_0>=False && LA132_0<=Super)||LA132_0==Yield||(LA132_0>=Null && LA132_0<=True)||LA132_0==Void||LA132_0==New||LA132_0==PlusSignPlusSign||(LA132_0>=HyphenMinusHyphenMinus && LA132_0<=SolidusEqualsSign)||LA132_0==ExclamationMark||LA132_0==LeftParenthesis||LA132_0==PlusSign||LA132_0==HyphenMinus||LA132_0==Solidus||LA132_0==LessThanSign||(LA132_0>=CommercialAt && LA132_0<=LeftSquareBracket)||LA132_0==Tilde||LA132_0==RULE_DOUBLE||(LA132_0>=RULE_HEX_INT && LA132_0<=RULE_LEGACY_OCTAL_INT)||LA132_0==RULE_SCIENTIFIC_INT||LA132_0==RULE_STRING||(LA132_0>=RULE_TEMPLATE_HEAD && LA132_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA132_0==RULE_INT) ) {s = 32;}
                        else if ( (LA132_0==If) ) {s = 66;}
                        else if ( (LA132_0==While||LA132_0==For||LA132_0==Do) ) {s = 67;}
                        else if ( (LA132_0==Continue) ) {s = 70;}
                        else if ( (LA132_0==Break) ) {s = 71;}
                        else if ( (LA132_0==Return) ) {s = 72;}
                        else if ( (LA132_0==With) ) {s = 73;}
                        else if ( (LA132_0==Switch) ) {s = 74;}
                        else if ( (LA132_0==Throw) ) {s = 75;}
                        else if ( (LA132_0==Try) ) {s = 76;}
                        else if ( (LA132_0==Debugger) ) {s = 77;}
                        input.seek(index132_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_1 = input.LA(1);
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA132_2 = input.LA(1);
                        int index132_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA132_3 = input.LA(1);
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA132_4 = input.LA(1);
                        int index132_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA132_5 = input.LA(1);
                        int index132_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA132_6 = input.LA(1);
                        int index132_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA132_7 = input.LA(1);
                        int index132_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA132_8 = input.LA(1);
                        int index132_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA132_9 = input.LA(1);
                        int index132_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred68_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index132_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA132_10 = input.LA(1);
                        int index132_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA132_11 = input.LA(1);
                        int index132_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA132_13 = input.LA(1);
                        int index132_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA132_15 = input.LA(1);
                        int index132_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA132_16 = input.LA(1);
                        int index132_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA132_17 = input.LA(1);
                        int index132_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA132_18 = input.LA(1);
                        int index132_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA132_19 = input.LA(1);
                        int index132_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA132_20 = input.LA(1);
                        int index132_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA132_21 = input.LA(1);
                        int index132_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA132_22 = input.LA(1);
                        int index132_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA132_23 = input.LA(1);
                        int index132_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA132_24 = input.LA(1);
                        int index132_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA132_25 = input.LA(1);
                        int index132_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA132_26 = input.LA(1);
                        int index132_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA132_27 = input.LA(1);
                        int index132_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA132_28 = input.LA(1);
                        int index132_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA132_29 = input.LA(1);
                        int index132_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA132_30 = input.LA(1);
                        int index132_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA132_31 = input.LA(1);
                        int index132_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index132_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\117\uffff";
    static final String dfa_103s = "\1\4\1\0\115\uffff";
    static final String dfa_104s = "\1\u0095\1\0\115\uffff";
    static final String dfa_105s = "\2\uffff\1\2\113\uffff\1\1";
    static final String dfa_106s = "\1\uffff\1\0\115\uffff}>";
    static final String[] dfa_107s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\1\uffff\12\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\10\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);
    class DFA133 extends DFA {
        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "6735:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= ruleAnnotatedFunctionDeclaration ) | this_RootStatement_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_1 = input.LA(1);
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA134 extends DFA {
        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "6780:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= norm1_AnnotatedFunctionDeclaration ) | this_RootStatement_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_1 = input.LA(1);
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_108s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\12\1\7\2\uffff\1\6\4\uffff\1\11\1\5\3\uffff\1\13\1\uffff\1\10\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };
    static final short[][] dfa_108 = unpackEncodedStringArray(dfa_108s);
    class DFA137 extends DFA {
        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_108;
        }
        public String getDescription() {
            return "()* loopback of 7047:3: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_109s = "\35\uffff";
    static final String dfa_110s = "\1\4\34\uffff";
    static final String dfa_111s = "\1\176\34\uffff";
    static final String dfa_112s = "\1\uffff\33\2\1\1";
    static final String dfa_113s = "\1\0\34\uffff}>";
    static final String[] dfa_114s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[][] dfa_114 = unpackEncodedStringArray(dfa_114s);
    class DFA149 extends DFA {
        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 8051:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_0 = input.LA(1);
                        int index149_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA149_0>=4 && LA149_0<=126 && (s=T2S.M_6[LA149_0-(4)])>=0) && (synpred88_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA149_0==CommercialAt) ) {s = 28;}
                        input.seek(index149_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA151 extends DFA {
        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 8137:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_0 = input.LA(1);
                        int index151_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA151_0>=4 && LA151_0<=126 && (s=T2S.M_6[LA151_0-(4)])>=0) && (synpred89_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA151_0==CommercialAt) ) {s = 28;}
                        input.seek(index151_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_115s = "\34\uffff";
    static final String dfa_116s = "\1\4\33\uffff";
    static final String dfa_117s = "\1\176\33\uffff";
    static final String dfa_118s = "\1\uffff\32\2\1\1";
    static final String dfa_119s = "\1\0\33\uffff}>";
    static final String[] dfa_120s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_115 = DFA.unpackEncodedString(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[][] dfa_120 = unpackEncodedStringArray(dfa_120s);
    class DFA153 extends DFA {
        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 8223:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA153_0>=4 && LA153_0<=126 && (s=T2S.M_8[LA153_0-(4)])>=0) && (synpred90_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA153_0==CommercialAt) ) {s = 27;}
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA155 extends DFA {
        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 8309:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_0 = input.LA(1);
                        int index155_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA155_0>=4 && LA155_0<=126 && (s=T2S.M_8[LA155_0-(4)])>=0) && (synpred91_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA155_0==CommercialAt) ) {s = 27;}
                        input.seek(index155_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA157 extends DFA {
        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 8395:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA157_0>=4 && LA157_0<=126 && (s=T2S.M_6[LA157_0-(4)])>=0) && (synpred92_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA157_0==CommercialAt) ) {s = 28;}
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA160 extends DFA {
        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 8501:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_0 = input.LA(1);
                        int index160_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA160_0>=4 && LA160_0<=126 && (s=T2S.M_6[LA160_0-(4)])>=0) && (synpred93_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA160_0==CommercialAt) ) {s = 28;}
                        input.seek(index160_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA163 extends DFA {
        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 8607:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_0 = input.LA(1);
                        int index163_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA163_0>=4 && LA163_0<=126 && (s=T2S.M_8[LA163_0-(4)])>=0) && (synpred94_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA163_0==CommercialAt) ) {s = 27;}
                        input.seek(index163_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA166 extends DFA {
        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 8713:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_0 = input.LA(1);
                        int index166_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA166_0>=4 && LA166_0<=126 && (s=T2S.M_8[LA166_0-(4)])>=0) && (synpred95_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA166_0==CommercialAt) ) {s = 27;}
                        input.seek(index166_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_121s = "\1\2\1\1\1\3\1\0\2\uffff\1\4\125\uffff}>";
    static final short[] dfa_121 = DFA.unpackEncodedString(dfa_121s);
    class DFA175 extends DFA {
        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_121;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "9535:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_3 = input.LA(1);
                        int index175_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 90;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index175_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA175_1 = input.LA(1);
                        int index175_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index175_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA175_0 = input.LA(1);
                        int index175_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA175_0==Semicolon) ) {s = 1;}
                        else if ( (LA175_0==EOF) ) {s = 2;}
                        else if ( (LA175_0==RightCurlyBracket) ) {s = 3;}
                        else if ( (LA175_0==RULE_ML_COMMENT||LA175_0==RULE_EOL) && (synpred102_InternalN4JSParser())) {s = 4;}
                        else if ( ((LA175_0>=Intersection && LA175_0<=Implements)||(LA175_0>=Promisify && LA175_0<=Default)||(LA175_0>=Private && LA175_0<=Break)||(LA175_0>=Class && LA175_0<=With)||(LA175_0>=For && LA175_0<=Var)||LA175_0==PlusSignPlusSign||(LA175_0>=HyphenMinusHyphenMinus && LA175_0<=SolidusEqualsSign)||LA175_0==CommercialAtCommercialAt||(LA175_0>=As && LA175_0<=If)||LA175_0==Of||LA175_0==ExclamationMark||LA175_0==LeftParenthesis||LA175_0==PlusSign||LA175_0==HyphenMinus||LA175_0==Solidus||LA175_0==LessThanSign||(LA175_0>=CommercialAt && LA175_0<=LeftSquareBracket)||LA175_0==LeftCurlyBracket||LA175_0==Tilde||LA175_0==RULE_DOUBLE||(LA175_0>=RULE_HEX_INT && LA175_0<=RULE_LEGACY_OCTAL_INT)||LA175_0==RULE_SCIENTIFIC_INT||LA175_0==RULE_IDENTIFIER||LA175_0==RULE_STRING||(LA175_0>=RULE_TEMPLATE_HEAD && LA175_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA175_0==RULE_INT) ) {s = 5;}
                        input.seek(index175_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA175_2 = input.LA(1);
                        int index175_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA175_2==EOF) ) {s = 6;}
                        else if ((LA175_2>=-1 && LA175_2<=149 && (s=T2S.M_1[LA175_2-(-1)])>=0) && (synpred102_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index175_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA175_6 = input.LA(1);
                        int index175_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA175_6==EOF) && (synpred102_InternalN4JSParser())) {s = 91;}
                        input.seek(index175_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_122s = "\103\uffff";
    static final String dfa_123s = "\1\4\1\0\101\uffff";
    static final String dfa_124s = "\1\u0095\1\0\101\uffff";
    static final String dfa_125s = "\2\uffff\1\2\77\uffff\1\1";
    static final String dfa_126s = "\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_127s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final char[] dfa_124 = DFA.unpackEncodedStringToUnsignedChars(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final short[][] dfa_127 = unpackEncodedStringArray(dfa_127s);
    class DFA195 extends DFA {
        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "9802:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_4_0= ruleLetIdentifierRef ) ) ( (lv_forIn_5_0= In ) ) ( (lv_expression_6_0= norm1_Expression ) ) otherlv_7= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= ruleExpression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm1_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm1_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm1_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm1_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm1_Expression ) )? ) ) otherlv_37= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA195_1 = input.LA(1);
                        int index195_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index195_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_128s = "\1\4\2\uffff\1\0\76\uffff";
    static final String dfa_129s = "\1\u0095\2\uffff\1\0\76\uffff";
    static final String dfa_130s = "\1\uffff\2\1\1\uffff\1\2\74\uffff\1\3";
    static final String dfa_131s = "\1\0\2\uffff\1\1\76\uffff}>";
    static final String[] dfa_132s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\101\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\7\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_128 = DFA.unpackEncodedStringToUnsignedChars(dfa_128s);
    static final char[] dfa_129 = DFA.unpackEncodedStringToUnsignedChars(dfa_129s);
    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final short[] dfa_131 = DFA.unpackEncodedString(dfa_131s);
    static final short[][] dfa_132 = unpackEncodedStringArray(dfa_132s);
    class DFA194 extends DFA {
        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_128;
            this.max = dfa_129;
            this.accept = dfa_130;
            this.special = dfa_131;
            this.transition = dfa_132;
        }
        public String getDescription() {
            return "9884:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= ruleExpression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm1_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm1_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm1_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm1_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA194_0 = input.LA(1);
                        int index194_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA194_0==Var) && (synpred105_InternalN4JSParser())) {s = 1;}
                        else if ( (LA194_0==Const) && (synpred105_InternalN4JSParser())) {s = 2;}
                        else if ( (LA194_0==Let) ) {s = 3;}
                        else if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||(LA194_0>=External && LA194_0<=Function)||(LA194_0>=Private && LA194_0<=Delete)||(LA194_0>=Import && LA194_0<=Public)||LA194_0==Static||(LA194_0>=Target && LA194_0<=Await)||LA194_0==Class||(LA194_0>=False && LA194_0<=Super)||LA194_0==Union||(LA194_0>=Yield && LA194_0<=This)||(LA194_0>=From && LA194_0<=Void)||LA194_0==Get||(LA194_0>=New && LA194_0<=Set)||LA194_0==PlusSignPlusSign||(LA194_0>=HyphenMinusHyphenMinus && LA194_0<=SolidusEqualsSign)||LA194_0==As||LA194_0==Of||LA194_0==ExclamationMark||LA194_0==LeftParenthesis||LA194_0==PlusSign||LA194_0==HyphenMinus||LA194_0==Solidus||LA194_0==LessThanSign||(LA194_0>=CommercialAt && LA194_0<=LeftSquareBracket)||LA194_0==LeftCurlyBracket||LA194_0==Tilde||LA194_0==RULE_DOUBLE||(LA194_0>=RULE_HEX_INT && LA194_0<=RULE_LEGACY_OCTAL_INT)||LA194_0==RULE_SCIENTIFIC_INT||LA194_0==RULE_IDENTIFIER||LA194_0==RULE_STRING||(LA194_0>=RULE_TEMPLATE_HEAD && LA194_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA194_0==RULE_INT) ) {s = 4;}
                        else if ( (LA194_0==Semicolon) ) {s = 65;}
                        input.seek(index194_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA194_3 = input.LA(1);
                        int index194_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index194_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 194, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_133s = "\40\uffff";
    static final String dfa_134s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_135s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_136s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_137s = "\35\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_138s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final char[] dfa_135 = DFA.unpackEncodedStringToUnsignedChars(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final short[][] dfa_138 = unpackEncodedStringArray(dfa_138s);
    class DFA186 extends DFA {
        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = dfa_133;
            this.eof = dfa_133;
            this.min = dfa_134;
            this.max = dfa_135;
            this.accept = dfa_136;
            this.special = dfa_137;
            this.transition = dfa_138;
        }
        public String getDescription() {
            return "9906:7: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_29 = input.LA(1);
                        int index186_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index186_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA186_30 = input.LA(1);
                        int index186_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index186_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_139s = "\1\4\77\uffff";
    static final String dfa_140s = "\1\u0095\77\uffff";
    static final String dfa_141s = "\1\uffff\76\1\1\2";
    static final String dfa_142s = "\1\0\77\uffff}>";
    static final String[] dfa_143s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\1\uffff\1\42\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\55\1\37\1\52\1\23\1\67\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\16\3\uffff\1\21\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final char[] dfa_140 = DFA.unpackEncodedStringToUnsignedChars(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[] dfa_142 = DFA.unpackEncodedString(dfa_142s);
    static final short[][] dfa_143 = unpackEncodedStringArray(dfa_143s);
    class DFA179 extends DFA {
        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_139;
            this.max = dfa_140;
            this.accept = dfa_141;
            this.special = dfa_142;
            this.transition = dfa_143;
        }
        public String getDescription() {
            return "10105:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_0 = input.LA(1);
                        int index179_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA179_0>=4 && LA179_0<=149 && (s=T2S.M_15[LA179_0-(4)])>=0) && (synpred107_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA179_0==RightParenthesis) ) {s = 63;}
                        input.seek(index179_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA214 extends DFA {
        public DFA214(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 214;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "10559:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_4_0= ruleLetIdentifierRef ) ) ( (lv_forIn_5_0= In ) ) ( (lv_expression_6_0= norm3_Expression ) ) otherlv_7= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= norm2_Expression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm3_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm3_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm3_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm3_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm3_Expression ) )? ) ) otherlv_37= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA214_1 = input.LA(1);
                        int index214_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index214_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 214, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA213 extends DFA {
        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_128;
            this.max = dfa_129;
            this.accept = dfa_130;
            this.special = dfa_131;
            this.transition = dfa_132;
        }
        public String getDescription() {
            return "10641:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= norm2_Expression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm3_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm3_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm3_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm3_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA213_0 = input.LA(1);
                        int index213_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA213_0==Var) && (synpred109_InternalN4JSParser())) {s = 1;}
                        else if ( (LA213_0==Const) && (synpred109_InternalN4JSParser())) {s = 2;}
                        else if ( (LA213_0==Let) ) {s = 3;}
                        else if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||(LA213_0>=Import && LA213_0<=Public)||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||LA213_0==Get||(LA213_0>=New && LA213_0<=Set)||LA213_0==PlusSignPlusSign||(LA213_0>=HyphenMinusHyphenMinus && LA213_0<=SolidusEqualsSign)||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||LA213_0==PlusSign||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {s = 4;}
                        else if ( (LA213_0==Semicolon) ) {s = 65;}
                        input.seek(index213_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA213_3 = input.LA(1);
                        int index213_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index213_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 213, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_144s = "\37\uffff";
    static final String dfa_145s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_146s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_147s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_148s = "\34\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_149s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);
    class DFA205 extends DFA {
        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = dfa_144;
            this.eof = dfa_144;
            this.min = dfa_145;
            this.max = dfa_146;
            this.accept = dfa_147;
            this.special = dfa_148;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "10663:7: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA205_28 = input.LA(1);
                        int index205_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 30;}
                        else if ( (true) ) {s = 27;}
                        input.seek(index205_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA205_29 = input.LA(1);
                        int index205_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 30;}
                        else if ( (true) ) {s = 27;}
                        input.seek(index205_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 205, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_150s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\15\3\uffff\1\20\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_150 = unpackEncodedStringArray(dfa_150s);
    class DFA198 extends DFA {
        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_139;
            this.max = dfa_140;
            this.accept = dfa_141;
            this.special = dfa_142;
            this.transition = dfa_150;
        }
        public String getDescription() {
            return "10862:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_0 = input.LA(1);
                        int index198_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA198_0>=4 && LA198_0<=149 && (s=T2S.M_16[LA198_0-(4)])>=0) && (synpred111_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA198_0==RightParenthesis) ) {s = 63;}
                        input.seek(index198_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_151s = "\1\4\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_152s = "\1\176\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_153s = "\2\uffff\1\1\33\uffff\1\3\3\uffff\1\2";
    static final String dfa_154s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\uffff}>";
    static final String[] dfa_155s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\1\uffff\1\36\2\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);
    class DFA236 extends DFA {
        public DFA236(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "12909:2: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )? ( (lv_name_4_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA236_0 = input.LA(1);
                        int index236_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA236_0==LeftCurlyBracket) ) {s = 1;}
                        else if ( (LA236_0==LeftSquareBracket) && (synpred118_InternalN4JSParser())) {s = 2;}
                        else if ((LA236_0>=4 && LA236_0<=126 && (s=T2S.M_17[LA236_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA236_0==Default||LA236_0==This_1||LA236_0==Void||LA236_0==Tilde) ) {s = 30;}
                        input.seek(index236_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA236_1 = input.LA(1);
                        int index236_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA236_3 = input.LA(1);
                        int index236_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA236_4 = input.LA(1);
                        int index236_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA236_5 = input.LA(1);
                        int index236_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA236_6 = input.LA(1);
                        int index236_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA236_7 = input.LA(1);
                        int index236_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA236_8 = input.LA(1);
                        int index236_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA236_9 = input.LA(1);
                        int index236_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA236_10 = input.LA(1);
                        int index236_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA236_11 = input.LA(1);
                        int index236_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA236_12 = input.LA(1);
                        int index236_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA236_13 = input.LA(1);
                        int index236_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA236_14 = input.LA(1);
                        int index236_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA236_15 = input.LA(1);
                        int index236_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA236_16 = input.LA(1);
                        int index236_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA236_17 = input.LA(1);
                        int index236_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA236_18 = input.LA(1);
                        int index236_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA236_19 = input.LA(1);
                        int index236_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA236_20 = input.LA(1);
                        int index236_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA236_21 = input.LA(1);
                        int index236_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA236_22 = input.LA(1);
                        int index236_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA236_23 = input.LA(1);
                        int index236_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA236_24 = input.LA(1);
                        int index236_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA236_25 = input.LA(1);
                        int index236_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA236_26 = input.LA(1);
                        int index236_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA236_27 = input.LA(1);
                        int index236_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA236_28 = input.LA(1);
                        int index236_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA236_29 = input.LA(1);
                        int index236_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index236_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 236, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_156s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_156 = unpackEncodedStringArray(dfa_156s);
    class DFA235 extends DFA {
        public DFA235(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 235;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "12982:4: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_157s = "\42\uffff";
    static final String dfa_158s = "\1\4\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_159s = "\1\176\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_160s = "\2\uffff\1\1\32\uffff\1\3\3\uffff\1\2";
    static final String dfa_161s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\uffff}>";
    static final String[] dfa_162s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\1\uffff\1\35\2\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_157 = DFA.unpackEncodedString(dfa_157s);
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final char[] dfa_159 = DFA.unpackEncodedStringToUnsignedChars(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[] dfa_161 = DFA.unpackEncodedString(dfa_161s);
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);
    class DFA238 extends DFA {
        public DFA238(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = dfa_157;
            this.eof = dfa_157;
            this.min = dfa_158;
            this.max = dfa_159;
            this.accept = dfa_160;
            this.special = dfa_161;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "13027:2: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= norm1_BindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )? ( (lv_name_4_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA238_0 = input.LA(1);
                        int index238_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_0==LeftCurlyBracket) ) {s = 1;}
                        else if ( (LA238_0==LeftSquareBracket) && (synpred121_InternalN4JSParser())) {s = 2;}
                        else if ((LA238_0>=4 && LA238_0<=126 && (s=T2S.M_18[LA238_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA238_0==Default||LA238_0==This_1||LA238_0==Void||LA238_0==Tilde) ) {s = 29;}
                        input.seek(index238_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA238_1 = input.LA(1);
                        int index238_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA238_3 = input.LA(1);
                        int index238_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA238_4 = input.LA(1);
                        int index238_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA238_5 = input.LA(1);
                        int index238_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA238_6 = input.LA(1);
                        int index238_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA238_7 = input.LA(1);
                        int index238_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA238_8 = input.LA(1);
                        int index238_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA238_9 = input.LA(1);
                        int index238_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA238_10 = input.LA(1);
                        int index238_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA238_11 = input.LA(1);
                        int index238_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA238_12 = input.LA(1);
                        int index238_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA238_13 = input.LA(1);
                        int index238_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA238_14 = input.LA(1);
                        int index238_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA238_15 = input.LA(1);
                        int index238_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA238_16 = input.LA(1);
                        int index238_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA238_17 = input.LA(1);
                        int index238_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA238_18 = input.LA(1);
                        int index238_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA238_19 = input.LA(1);
                        int index238_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA238_20 = input.LA(1);
                        int index238_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA238_21 = input.LA(1);
                        int index238_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA238_22 = input.LA(1);
                        int index238_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA238_23 = input.LA(1);
                        int index238_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA238_24 = input.LA(1);
                        int index238_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA238_25 = input.LA(1);
                        int index238_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA238_26 = input.LA(1);
                        int index238_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA238_27 = input.LA(1);
                        int index238_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA238_28 = input.LA(1);
                        int index238_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index238_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 238, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_163s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\46\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_163 = unpackEncodedStringArray(dfa_163s);
    class DFA237 extends DFA {
        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_163;
        }
        public String getDescription() {
            return "13100:4: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_164s = "\52\uffff";
    static final String dfa_165s = "\4\uffff\1\3\45\uffff";
    static final String dfa_166s = "\1\4\3\uffff\1\6\1\4\14\uffff\11\4\2\uffff\3\4\1\10\11\4";
    static final String dfa_167s = "\1\u0095\3\uffff\1\u00a5\1\176\14\uffff\11\u00a5\2\uffff\6\176\7\u00a5";
    static final String dfa_168s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\7\11\uffff\1\4\1\5\15\uffff";
    static final String dfa_169s = "\4\uffff\1\0\45\uffff}>";
    static final String[] dfa_170s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\12\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\33\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\32\1\30\1\34\1\uffff\1\24\3\34\2\uffff\1\34\1\uffff\1\21\2\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\25\1\uffff\1\34\1\23\7\uffff\1\31\1\uffff\1\34\1\22\3\uffff\1\34\1\uffff\1\21\1\uffff\1\27\1\21\6\uffff\2\34\1\uffff\2\34\23\uffff\1\34\3\uffff\1\34\5\uffff\1\21\13\uffff\1\33\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\14\uffff\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\36",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\36",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\36",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\36",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\36",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\40\17\uffff\1\34\46\uffff\1\34",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\40\17\uffff\1\34\46\uffff\1\34",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\41\17\uffff\1\34\46\uffff\1\34",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\42\17\uffff\1\34\46\uffff\1\34",
            "",
            "",
            "\4\34\1\50\7\34\1\44\13\34\1\46\2\34\1\51\12\34\1\47\10\34\1\45\1\34\4\uffff\10\34\21\uffff\5\34\17\uffff\1\34\27\uffff\1\43",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34",
            "\3\21\1\uffff\4\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\21\1\uffff\2\21\7\uffff\1\21\1\uffff\2\21\3\uffff\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\23\uffff\1\21\3\uffff\1\21\17\uffff\1\34\7\uffff\1\34\17\uffff\1\21",
            "\1\21\7\uffff\1\21\13\uffff\1\21\2\uffff\1\21\12\uffff\1\21\5\uffff\1\21\2\uffff\1\21\2\uffff\1\34\62\uffff\1\21\24\uffff\1\21",
            "\2\21\2\uffff\1\21\7\uffff\1\21\13\uffff\1\21\2\uffff\1\21\7\uffff\1\21\2\uffff\1\21\5\uffff\1\21\1\uffff\2\21\2\uffff\1\34\45\uffff\1\21\14\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\14\uffff\1\21",
            "\2\21\2\uffff\1\21\7\uffff\1\21\13\uffff\1\21\2\uffff\1\21\7\uffff\1\21\2\uffff\1\21\5\uffff\1\21\1\uffff\2\21\2\uffff\1\34\45\uffff\1\21\14\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\14\uffff\1\21",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\21",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\21",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\21",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\21",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\21",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\21",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\2\34\2\uffff\1\21\1\uffff\1\37\1\21\1\uffff\1\21\2\uffff\1\34\1\21\16\uffff\1\34\46\uffff\1\21"
    };
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final short[] dfa_165 = DFA.unpackEncodedString(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final char[] dfa_167 = DFA.unpackEncodedStringToUnsignedChars(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);
    class DFA239 extends DFA {
        public DFA239(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = dfa_164;
            this.eof = dfa_165;
            this.min = dfa_166;
            this.max = dfa_167;
            this.accept = dfa_168;
            this.special = dfa_169;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "13292:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= ruleIdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= ruleImportCallExpression | this_ParameterizedCallExpression_6= ruleParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= ruleArrayLiteral | this_ObjectLiteral_9= ruleObjectLiteral | this_ParenExpression_10= ruleParenExpression | this_AnnotatedExpression_11= ruleAnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= ruleN4ClassExpression | this_TemplateLiteral_15= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA239_4 = input.LA(1);
                        int index239_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA239_4==EOF||(LA239_4>=Implements && LA239_4<=Instanceof)||LA239_4==ExclamationMarkEqualsSignEqualsSign||(LA239_4>=LessThanSignLessThanSignEqualsSign && LA239_4<=EqualsSignEqualsSignEqualsSign)||(LA239_4>=ExclamationMarkEqualsSign && LA239_4<=EqualsSignEqualsSign)||(LA239_4>=QuestionMarkFullStop && LA239_4<=QuestionMarkQuestionMark)||(LA239_4>=CircumflexAccentEqualsSign && LA239_4<=As)||(LA239_4>=In && LA239_4<=VerticalLineVerticalLine)||(LA239_4>=PercentSign && LA239_4<=QuestionMark)||(LA239_4>=LeftSquareBracket && LA239_4<=RightCurlyBracket)||(LA239_4>=RULE_TEMPLATE_HEAD && LA239_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA239_4==RULE_ML_COMMENT||LA239_4==RULE_EOL||LA239_4==RULE_VERSION) ) {s = 3;}
                        else if ( (LA239_4==RULE_NO_LINE_TERMINATOR) && (synpred126_InternalN4JSParser())) {s = 15;}
                        else if ( (LA239_4==Function) && (synpred126_InternalN4JSParser())) {s = 16;}
                        input.seek(index239_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 239, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_171s = "\1\4\3\uffff\1\6\1\4\14\uffff\1\4\1\uffff\10\4\1\uffff\3\4\1\10\11\4";
    static final String dfa_172s = "\1\u0095\3\uffff\1\u00a5\1\176\14\uffff\1\u00a5\1\uffff\10\u00a5\1\uffff\6\176\7\u00a5";
    static final String dfa_173s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\4\1\uffff\1\5\10\uffff\1\7\15\uffff";
    static final String[] dfa_174s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\12\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\33\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\30\1\24\1\23\1\uffff\1\32\3\23\2\uffff\1\23\1\uffff\1\34\2\uffff\2\23\3\uffff\1\23\1\uffff\1\23\1\uffff\1\25\1\uffff\1\23\1\33\7\uffff\1\27\1\uffff\1\23\1\31\3\uffff\1\23\1\uffff\1\34\1\uffff\1\26\1\34\6\uffff\2\23\1\uffff\2\23\23\uffff\1\23\3\uffff\1\23\5\uffff\1\34\13\uffff\1\21\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\35",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\40\17\uffff\1\23\46\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\35",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\40\17\uffff\1\23\46\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\41\17\uffff\1\23\46\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\42\17\uffff\1\23\46\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\35",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\35",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\35",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23",
            "\4\23\1\46\7\23\1\50\13\23\1\47\2\23\1\45\12\23\1\44\10\23\1\43\1\23\4\uffff\10\23\21\uffff\5\23\17\uffff\1\23\27\uffff\1\51",
            "\3\34\1\uffff\4\34\2\uffff\1\34\4\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\2\34\7\uffff\1\34\2\uffff\1\34\3\uffff\1\34\3\uffff\1\34\7\uffff\2\34\1\uffff\2\34\23\uffff\1\34\3\uffff\1\34\17\uffff\1\23\7\uffff\1\23\17\uffff\1\34",
            "\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\12\uffff\1\34\5\uffff\1\34\2\uffff\1\34\2\uffff\1\23\62\uffff\1\34\24\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\23\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\23\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\46\uffff\1\34"
    };
    static final char[] dfa_171 = DFA.unpackEncodedStringToUnsignedChars(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final short[] dfa_173 = DFA.unpackEncodedString(dfa_173s);
    static final short[][] dfa_174 = unpackEncodedStringArray(dfa_174s);
    class DFA240 extends DFA {
        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = dfa_164;
            this.eof = dfa_165;
            this.min = dfa_171;
            this.max = dfa_172;
            this.accept = dfa_173;
            this.special = dfa_169;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "13460:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= norm1_IdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= norm1_ImportCallExpression | this_ParameterizedCallExpression_6= norm1_ParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= norm1_ArrayLiteral | this_ObjectLiteral_9= norm1_ObjectLiteral | this_ParenExpression_10= norm1_ParenExpression | this_AnnotatedExpression_11= norm1_AnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= norm1_N4ClassExpression | this_TemplateLiteral_15= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA240_4 = input.LA(1);
                        int index240_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_4==EOF||(LA240_4>=Implements && LA240_4<=Instanceof)||LA240_4==ExclamationMarkEqualsSignEqualsSign||(LA240_4>=LessThanSignLessThanSignEqualsSign && LA240_4<=EqualsSignEqualsSignEqualsSign)||(LA240_4>=ExclamationMarkEqualsSign && LA240_4<=EqualsSignEqualsSign)||(LA240_4>=QuestionMarkFullStop && LA240_4<=QuestionMarkQuestionMark)||(LA240_4>=CircumflexAccentEqualsSign && LA240_4<=As)||(LA240_4>=In && LA240_4<=VerticalLineVerticalLine)||(LA240_4>=PercentSign && LA240_4<=QuestionMark)||(LA240_4>=LeftSquareBracket && LA240_4<=RightCurlyBracket)||(LA240_4>=RULE_TEMPLATE_HEAD && LA240_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA240_4==RULE_ML_COMMENT||LA240_4==RULE_EOL||LA240_4==RULE_VERSION) ) {s = 3;}
                        else if ( (LA240_4==RULE_NO_LINE_TERMINATOR) && (synpred127_InternalN4JSParser())) {s = 15;}
                        else if ( (LA240_4==Function) && (synpred127_InternalN4JSParser())) {s = 16;}
                        input.seek(index240_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 240, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_175s = "\34\4\2\uffff";
    static final String dfa_176s = "\1\176\33\u00a5\2\uffff";
    static final String[] dfa_177s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\47\uffff\1\1",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "",
            ""
    };
    static final char[] dfa_175 = DFA.unpackEncodedStringToUnsignedChars(dfa_175s);
    static final char[] dfa_176 = DFA.unpackEncodedStringToUnsignedChars(dfa_176s);
    static final short[][] dfa_177 = unpackEncodedStringArray(dfa_177s);
    class DFA241 extends DFA {
        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_175;
            this.max = dfa_176;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_177;
        }
        public String getDescription() {
            return "13720:2: ( ( ( ruleBindingIdentifier ) ) | ( () ( ( ruleBindingIdentifier ) ) this_VersionRequest_3= ruleVersionRequest[$current] ) )";
        }
    }
    static final String dfa_178s = "\1\uffff\32\34\2\uffff";
    static final String dfa_179s = "\1\4\32\6\2\uffff";
    static final String dfa_180s = "\1\176\32\u00a5\2\uffff";
    static final String dfa_181s = "\33\uffff\1\2\1\1";
    static final String dfa_182s = "\35\uffff}>";
    static final String[] dfa_183s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\47\uffff\1\1",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\33\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "",
            ""
    };
    static final short[] dfa_178 = DFA.unpackEncodedString(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final char[] dfa_180 = DFA.unpackEncodedStringToUnsignedChars(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[] dfa_182 = DFA.unpackEncodedString(dfa_182s);
    static final short[][] dfa_183 = unpackEncodedStringArray(dfa_183s);
    class DFA242 extends DFA {
        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = dfa_109;
            this.eof = dfa_178;
            this.min = dfa_179;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "13786:2: ( ( ( norm1_BindingIdentifier ) ) | ( () ( ( norm1_BindingIdentifier ) ) this_VersionRequest_3= ruleVersionRequest[$current] ) )";
        }
    }
    static final String dfa_184s = "\5\uffff";
    static final String dfa_185s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_186s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_187s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_188s = "\5\uffff}>";
    static final String[] dfa_189s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\7\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\7\uffff\1\4",
            ""
    };
    static final short[] dfa_184 = DFA.unpackEncodedString(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final char[] dfa_186 = DFA.unpackEncodedStringToUnsignedChars(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[] dfa_188 = DFA.unpackEncodedString(dfa_188s);
    static final short[][] dfa_189 = unpackEncodedStringArray(dfa_189s);
    class DFA245 extends DFA {
        public DFA245(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 245;
            this.eot = dfa_184;
            this.eof = dfa_184;
            this.min = dfa_185;
            this.max = dfa_186;
            this.accept = dfa_187;
            this.special = dfa_188;
            this.transition = dfa_189;
        }
        public String getDescription() {
            return "()* loopback of 13969:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= ruleArrayElement ) ) )*";
        }
    }
    class DFA251 extends DFA {
        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = dfa_184;
            this.eof = dfa_184;
            this.min = dfa_185;
            this.max = dfa_186;
            this.accept = dfa_187;
            this.special = dfa_188;
            this.transition = dfa_189;
        }
        public String getDescription() {
            return "()* loopback of 14116:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_190s = "\123\uffff";
    static final String dfa_191s = "\1\4\1\uffff\111\0\10\uffff";
    static final String dfa_192s = "\1\u0095\1\uffff\111\0\10\uffff";
    static final String dfa_193s = "\1\uffff\1\1\111\uffff\2\5\1\6\1\uffff\1\7\1\2\1\3\1\4";
    static final String dfa_194s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\10\uffff}>";
    static final String[] dfa_195s = {
            "\1\17\1\14\1\75\1\42\1\5\1\76\1\100\1\67\1\25\1\26\1\66\1\36\1\7\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\6\1\51\1\74\1\4\1\20\1\22\1\23\1\24\1\60\1\45\1\47\1\16\1\53\1\55\1\3\1\21\1\31\1\61\1\72\1\56\1\12\1\57\1\13\1\2\1\54\1\uffff\1\117\2\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\115\1\uffff\1\114\7\uffff\1\113\2\uffff\1\115\1\1\1\112\2\uffff\1\15\2\uffff\1\11\3\uffff\1\104\1\uffff\1\110\1\106\1\107\2\uffff\1\111\1\uffff\1\10\2\uffff\1\103\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_190 = DFA.unpackEncodedString(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final char[] dfa_192 = DFA.unpackEncodedStringToUnsignedChars(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[] dfa_194 = DFA.unpackEncodedString(dfa_194s);
    static final short[][] dfa_195 = unpackEncodedStringArray(dfa_195s);
    class DFA263 extends DFA {
        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = dfa_190;
            this.eof = dfa_190;
            this.min = dfa_191;
            this.max = dfa_192;
            this.accept = dfa_193;
            this.special = dfa_194;
            this.transition = dfa_195;
        }
        public String getDescription() {
            return "14526:2: (this_AnnotatedPropertyAssignment_0= ruleAnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= rulePropertyNameValuePair ) | ( ( ( () ruleGetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= rulePropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= rulePropertySetterDeclaration ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= rulePropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= rulePropertyNameValuePairSingleName | this_PropertySpread_6= rulePropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA263_0 = input.LA(1);
                        int index263_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA263_0>=4 && LA263_0<=149 && (s=T2S.M_19[LA263_0-(4)])>=0)) { /* 74 cases */ }
                        else if ( (LA263_0==LessThanSign) && (synpred131_InternalN4JSParser())) {s = 75;}
                        else if ( (LA263_0==Asterisk) && (synpred131_InternalN4JSParser())) {s = 76;}
                        else if ( (LA263_0==LeftParenthesis||LA263_0==QuestionMark) ) {s = 77;}
                        else if ( (LA263_0==FullStopFullStopFullStop) ) {s = 79;}
                        input.seek(index263_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA263_2 = input.LA(1);
                        int index263_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA263_3 = input.LA(1);
                        int index263_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA263_4 = input.LA(1);
                        int index263_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA263_5 = input.LA(1);
                        int index263_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA263_6 = input.LA(1);
                        int index263_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA263_7 = input.LA(1);
                        int index263_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA263_8 = input.LA(1);
                        int index263_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA263_9 = input.LA(1);
                        int index263_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA263_10 = input.LA(1);
                        int index263_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA263_11 = input.LA(1);
                        int index263_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA263_12 = input.LA(1);
                        int index263_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA263_13 = input.LA(1);
                        int index263_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA263_14 = input.LA(1);
                        int index263_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA263_15 = input.LA(1);
                        int index263_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA263_16 = input.LA(1);
                        int index263_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA263_17 = input.LA(1);
                        int index263_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA263_18 = input.LA(1);
                        int index263_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA263_19 = input.LA(1);
                        int index263_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA263_20 = input.LA(1);
                        int index263_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA263_21 = input.LA(1);
                        int index263_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA263_22 = input.LA(1);
                        int index263_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA263_23 = input.LA(1);
                        int index263_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA263_24 = input.LA(1);
                        int index263_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA263_25 = input.LA(1);
                        int index263_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA263_26 = input.LA(1);
                        int index263_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA263_27 = input.LA(1);
                        int index263_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA263_28 = input.LA(1);
                        int index263_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA263_29 = input.LA(1);
                        int index263_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA263_30 = input.LA(1);
                        int index263_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA263_31 = input.LA(1);
                        int index263_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA263_32 = input.LA(1);
                        int index263_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA263_33 = input.LA(1);
                        int index263_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA263_34 = input.LA(1);
                        int index263_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA263_35 = input.LA(1);
                        int index263_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA263_36 = input.LA(1);
                        int index263_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA263_37 = input.LA(1);
                        int index263_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA263_38 = input.LA(1);
                        int index263_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA263_39 = input.LA(1);
                        int index263_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA263_40 = input.LA(1);
                        int index263_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA263_41 = input.LA(1);
                        int index263_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA263_42 = input.LA(1);
                        int index263_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA263_43 = input.LA(1);
                        int index263_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA263_44 = input.LA(1);
                        int index263_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA263_45 = input.LA(1);
                        int index263_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA263_46 = input.LA(1);
                        int index263_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA263_47 = input.LA(1);
                        int index263_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA263_48 = input.LA(1);
                        int index263_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA263_49 = input.LA(1);
                        int index263_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA263_50 = input.LA(1);
                        int index263_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred129_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA263_51 = input.LA(1);
                        int index263_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred130_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA263_52 = input.LA(1);
                        int index263_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA263_53 = input.LA(1);
                        int index263_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA263_54 = input.LA(1);
                        int index263_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA263_55 = input.LA(1);
                        int index263_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA263_56 = input.LA(1);
                        int index263_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA263_57 = input.LA(1);
                        int index263_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA263_58 = input.LA(1);
                        int index263_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA263_59 = input.LA(1);
                        int index263_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA263_60 = input.LA(1);
                        int index263_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA263_61 = input.LA(1);
                        int index263_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA263_62 = input.LA(1);
                        int index263_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA263_63 = input.LA(1);
                        int index263_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA263_64 = input.LA(1);
                        int index263_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA263_65 = input.LA(1);
                        int index263_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA263_66 = input.LA(1);
                        int index263_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA263_67 = input.LA(1);
                        int index263_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA263_68 = input.LA(1);
                        int index263_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA263_69 = input.LA(1);
                        int index263_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA263_70 = input.LA(1);
                        int index263_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA263_71 = input.LA(1);
                        int index263_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA263_72 = input.LA(1);
                        int index263_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA263_73 = input.LA(1);
                        int index263_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index263_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA263_74 = input.LA(1);
                        int index263_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index263_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 263, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA264 extends DFA {
        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = dfa_190;
            this.eof = dfa_190;
            this.min = dfa_191;
            this.max = dfa_192;
            this.accept = dfa_193;
            this.special = dfa_194;
            this.transition = dfa_195;
        }
        public String getDescription() {
            return "14823:2: (this_AnnotatedPropertyAssignment_0= norm1_AnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= norm1_PropertyNameValuePair ) | ( ( ( () norm1_GetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= norm1_PropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= norm1_PropertySetterDeclaration ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= norm1_PropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= norm1_PropertyNameValuePairSingleName | this_PropertySpread_6= norm1_PropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA264_0 = input.LA(1);
                        int index264_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA264_0>=4 && LA264_0<=149 && (s=T2S.M_19[LA264_0-(4)])>=0)) { /* 74 cases */ }
                        else if ( (LA264_0==LessThanSign) && (synpred135_InternalN4JSParser())) {s = 75;}
                        else if ( (LA264_0==Asterisk) && (synpred135_InternalN4JSParser())) {s = 76;}
                        else if ( (LA264_0==LeftParenthesis||LA264_0==QuestionMark) ) {s = 77;}
                        else if ( (LA264_0==FullStopFullStopFullStop) ) {s = 79;}
                        input.seek(index264_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA264_2 = input.LA(1);
                        int index264_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA264_3 = input.LA(1);
                        int index264_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA264_4 = input.LA(1);
                        int index264_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA264_5 = input.LA(1);
                        int index264_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA264_6 = input.LA(1);
                        int index264_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA264_7 = input.LA(1);
                        int index264_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA264_8 = input.LA(1);
                        int index264_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA264_9 = input.LA(1);
                        int index264_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA264_10 = input.LA(1);
                        int index264_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA264_11 = input.LA(1);
                        int index264_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA264_12 = input.LA(1);
                        int index264_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA264_13 = input.LA(1);
                        int index264_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA264_14 = input.LA(1);
                        int index264_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA264_15 = input.LA(1);
                        int index264_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA264_16 = input.LA(1);
                        int index264_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA264_17 = input.LA(1);
                        int index264_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA264_18 = input.LA(1);
                        int index264_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA264_19 = input.LA(1);
                        int index264_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA264_20 = input.LA(1);
                        int index264_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA264_21 = input.LA(1);
                        int index264_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA264_22 = input.LA(1);
                        int index264_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA264_23 = input.LA(1);
                        int index264_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA264_24 = input.LA(1);
                        int index264_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA264_25 = input.LA(1);
                        int index264_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA264_26 = input.LA(1);
                        int index264_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA264_27 = input.LA(1);
                        int index264_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA264_28 = input.LA(1);
                        int index264_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA264_29 = input.LA(1);
                        int index264_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA264_30 = input.LA(1);
                        int index264_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA264_31 = input.LA(1);
                        int index264_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA264_32 = input.LA(1);
                        int index264_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA264_33 = input.LA(1);
                        int index264_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA264_34 = input.LA(1);
                        int index264_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA264_35 = input.LA(1);
                        int index264_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA264_36 = input.LA(1);
                        int index264_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA264_37 = input.LA(1);
                        int index264_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA264_38 = input.LA(1);
                        int index264_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA264_39 = input.LA(1);
                        int index264_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA264_40 = input.LA(1);
                        int index264_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA264_41 = input.LA(1);
                        int index264_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA264_42 = input.LA(1);
                        int index264_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA264_43 = input.LA(1);
                        int index264_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA264_44 = input.LA(1);
                        int index264_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA264_45 = input.LA(1);
                        int index264_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA264_46 = input.LA(1);
                        int index264_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA264_47 = input.LA(1);
                        int index264_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA264_48 = input.LA(1);
                        int index264_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA264_49 = input.LA(1);
                        int index264_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA264_50 = input.LA(1);
                        int index264_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA264_51 = input.LA(1);
                        int index264_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred134_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA264_52 = input.LA(1);
                        int index264_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA264_53 = input.LA(1);
                        int index264_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA264_54 = input.LA(1);
                        int index264_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA264_55 = input.LA(1);
                        int index264_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA264_56 = input.LA(1);
                        int index264_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA264_57 = input.LA(1);
                        int index264_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA264_58 = input.LA(1);
                        int index264_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA264_59 = input.LA(1);
                        int index264_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA264_60 = input.LA(1);
                        int index264_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA264_61 = input.LA(1);
                        int index264_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA264_62 = input.LA(1);
                        int index264_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA264_63 = input.LA(1);
                        int index264_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA264_64 = input.LA(1);
                        int index264_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA264_65 = input.LA(1);
                        int index264_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA264_66 = input.LA(1);
                        int index264_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA264_67 = input.LA(1);
                        int index264_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA264_68 = input.LA(1);
                        int index264_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA264_69 = input.LA(1);
                        int index264_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA264_70 = input.LA(1);
                        int index264_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA264_71 = input.LA(1);
                        int index264_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA264_72 = input.LA(1);
                        int index264_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA264_73 = input.LA(1);
                        int index264_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index264_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA264_74 = input.LA(1);
                        int index264_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 77;}
                        input.seek(index264_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 264, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_196s = "\122\uffff";
    static final String dfa_197s = "\1\4\111\0\10\uffff";
    static final String dfa_198s = "\1\u0095\111\0\10\uffff";
    static final String dfa_199s = "\112\uffff\2\4\1\5\1\uffff\1\6\1\1\1\2\1\3";
    static final String dfa_200s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\10\uffff}>";
    static final String[] dfa_201s = {
            "\1\16\1\13\1\74\1\41\1\4\1\75\1\77\1\66\1\24\1\25\1\65\1\35\1\6\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\5\1\50\1\73\1\3\1\17\1\21\1\22\1\23\1\57\1\44\1\46\1\15\1\52\1\54\1\2\1\20\1\30\1\60\1\71\1\55\1\11\1\56\1\12\1\1\1\53\1\uffff\1\116\2\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\21\uffff\1\70\1\27\1\36\1\40\1\72\5\uffff\1\114\1\uffff\1\113\7\uffff\1\112\2\uffff\1\114\1\uffff\1\111\2\uffff\1\14\2\uffff\1\10\3\uffff\1\103\1\uffff\1\107\1\105\1\106\2\uffff\1\110\1\uffff\1\7\2\uffff\1\102\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[] dfa_199 = DFA.unpackEncodedString(dfa_199s);
    static final short[] dfa_200 = DFA.unpackEncodedString(dfa_200s);
    static final short[][] dfa_201 = unpackEncodedStringArray(dfa_201s);
    class DFA272 extends DFA {
        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_196;
            this.eof = dfa_196;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_199;
            this.special = dfa_200;
            this.transition = dfa_201;
        }
        public String getDescription() {
            return "15135:3: ( ( ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )? ( (lv_declaredName_3_0= ruleLiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( () ruleGetterHeader[null] ) )=> ( () this_GetterHeader_7= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= ruleFormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeVariables_18= ruleTypeVariables[$current] )? ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )? ( (lv_expression_28_0= rulePropertyNameValuePairSingleNamePart ) ) ) | ( () otherlv_30= FullStopFullStopFullStop ( (lv_expression_31_0= norm1_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA272_0 = input.LA(1);
                        int index272_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA272_0>=4 && LA272_0<=149 && (s=T2S.M_21[LA272_0-(4)])>=0)) { /* 73 cases */ }
                        else if ( (LA272_0==LessThanSign) && (synpred142_InternalN4JSParser())) {s = 74;}
                        else if ( (LA272_0==Asterisk) && (synpred142_InternalN4JSParser())) {s = 75;}
                        else if ( (LA272_0==LeftParenthesis||LA272_0==QuestionMark) ) {s = 76;}
                        else if ( (LA272_0==FullStopFullStopFullStop) ) {s = 78;}
                        input.seek(index272_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA272_1 = input.LA(1);
                        int index272_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA272_2 = input.LA(1);
                        int index272_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA272_3 = input.LA(1);
                        int index272_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA272_4 = input.LA(1);
                        int index272_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA272_5 = input.LA(1);
                        int index272_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA272_6 = input.LA(1);
                        int index272_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA272_7 = input.LA(1);
                        int index272_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA272_8 = input.LA(1);
                        int index272_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA272_9 = input.LA(1);
                        int index272_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA272_10 = input.LA(1);
                        int index272_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA272_11 = input.LA(1);
                        int index272_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA272_12 = input.LA(1);
                        int index272_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA272_13 = input.LA(1);
                        int index272_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA272_14 = input.LA(1);
                        int index272_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA272_15 = input.LA(1);
                        int index272_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA272_16 = input.LA(1);
                        int index272_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA272_17 = input.LA(1);
                        int index272_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA272_18 = input.LA(1);
                        int index272_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA272_19 = input.LA(1);
                        int index272_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA272_20 = input.LA(1);
                        int index272_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA272_21 = input.LA(1);
                        int index272_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA272_22 = input.LA(1);
                        int index272_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA272_23 = input.LA(1);
                        int index272_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA272_24 = input.LA(1);
                        int index272_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA272_25 = input.LA(1);
                        int index272_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA272_26 = input.LA(1);
                        int index272_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA272_27 = input.LA(1);
                        int index272_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA272_28 = input.LA(1);
                        int index272_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA272_29 = input.LA(1);
                        int index272_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA272_30 = input.LA(1);
                        int index272_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA272_31 = input.LA(1);
                        int index272_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA272_32 = input.LA(1);
                        int index272_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA272_33 = input.LA(1);
                        int index272_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA272_34 = input.LA(1);
                        int index272_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA272_35 = input.LA(1);
                        int index272_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA272_36 = input.LA(1);
                        int index272_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA272_37 = input.LA(1);
                        int index272_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA272_38 = input.LA(1);
                        int index272_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA272_39 = input.LA(1);
                        int index272_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA272_40 = input.LA(1);
                        int index272_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA272_41 = input.LA(1);
                        int index272_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA272_42 = input.LA(1);
                        int index272_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA272_43 = input.LA(1);
                        int index272_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA272_44 = input.LA(1);
                        int index272_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA272_45 = input.LA(1);
                        int index272_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA272_46 = input.LA(1);
                        int index272_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA272_47 = input.LA(1);
                        int index272_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA272_48 = input.LA(1);
                        int index272_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA272_49 = input.LA(1);
                        int index272_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA272_50 = input.LA(1);
                        int index272_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred139_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA272_51 = input.LA(1);
                        int index272_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA272_52 = input.LA(1);
                        int index272_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA272_53 = input.LA(1);
                        int index272_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA272_54 = input.LA(1);
                        int index272_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA272_55 = input.LA(1);
                        int index272_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA272_56 = input.LA(1);
                        int index272_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA272_57 = input.LA(1);
                        int index272_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA272_58 = input.LA(1);
                        int index272_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA272_59 = input.LA(1);
                        int index272_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA272_60 = input.LA(1);
                        int index272_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA272_61 = input.LA(1);
                        int index272_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA272_62 = input.LA(1);
                        int index272_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA272_63 = input.LA(1);
                        int index272_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA272_64 = input.LA(1);
                        int index272_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA272_65 = input.LA(1);
                        int index272_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA272_66 = input.LA(1);
                        int index272_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA272_67 = input.LA(1);
                        int index272_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA272_68 = input.LA(1);
                        int index272_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA272_69 = input.LA(1);
                        int index272_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA272_70 = input.LA(1);
                        int index272_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA272_71 = input.LA(1);
                        int index272_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA272_72 = input.LA(1);
                        int index272_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index272_72);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA272_73 = input.LA(1);
                        int index272_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred142_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index272_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 272, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_202s = "\17\uffff";
    static final String dfa_203s = "\10\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_204s = "\1\u0095\7\u00a5\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_205s = "\10\uffff\1\1\5\uffff\1\2";
    static final String dfa_206s = "\17\uffff}>";
    static final String[] dfa_207s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\23\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            ""
    };
    static final short[] dfa_202 = DFA.unpackEncodedString(dfa_202s);
    static final char[] dfa_203 = DFA.unpackEncodedStringToUnsignedChars(dfa_203s);
    static final char[] dfa_204 = DFA.unpackEncodedStringToUnsignedChars(dfa_204s);
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final short[] dfa_206 = DFA.unpackEncodedString(dfa_206s);
    static final short[][] dfa_207 = unpackEncodedStringArray(dfa_207s);
    class DFA265 extends DFA {
        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_203;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_207;
        }
        public String getDescription() {
            return "15162:7: ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_208s = "\10\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_209s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\7\uffff\1\16\14\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\23\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\11\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            ""
    };
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[][] dfa_209 = unpackEncodedStringArray(dfa_209s);
    class DFA268 extends DFA {
        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "15596:7: ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_210s = "\15\uffff";
    static final String dfa_211s = "\2\uffff\11\13\1\uffff\1\13";
    static final String dfa_212s = "\1\4\1\uffff\5\4\4\140\1\uffff\1\4";
    static final String dfa_213s = "\1\176\1\uffff\11\u00a5\1\uffff\1\176";
    static final String dfa_214s = "\1\uffff\1\1\11\uffff\1\2\1\uffff";
    static final String dfa_215s = "\15\uffff}>";
    static final String[] dfa_216s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[] dfa_211 = DFA.unpackEncodedString(dfa_211s);
    static final char[] dfa_212 = DFA.unpackEncodedStringToUnsignedChars(dfa_212s);
    static final char[] dfa_213 = DFA.unpackEncodedStringToUnsignedChars(dfa_213s);
    static final short[] dfa_214 = DFA.unpackEncodedString(dfa_214s);
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final short[][] dfa_216 = unpackEncodedStringArray(dfa_216s);
    class DFA271 extends DFA {
        public DFA271(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = dfa_210;
            this.eof = dfa_211;
            this.min = dfa_212;
            this.max = dfa_213;
            this.accept = dfa_214;
            this.special = dfa_215;
            this.transition = dfa_216;
        }
        public String getDescription() {
            return "15720:5: ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )?";
        }
    }
    class DFA280 extends DFA {
        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_196;
            this.eof = dfa_196;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_199;
            this.special = dfa_200;
            this.transition = dfa_201;
        }
        public String getDescription() {
            return "15814:3: ( ( ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )? ( (lv_declaredName_3_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( () norm1_GetterHeader[null] ) )=> ( () this_GetterHeader_7= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= norm1_FormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeVariables_18= ruleTypeVariables[$current] )? ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )? ( (lv_expression_28_0= norm1_PropertyNameValuePairSingleNamePart ) ) ) | ( () otherlv_30= FullStopFullStopFullStop ( (lv_expression_31_0= norm3_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA280_0 = input.LA(1);
                        int index280_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA280_0>=4 && LA280_0<=149 && (s=T2S.M_21[LA280_0-(4)])>=0)) { /* 73 cases */ }
                        else if ( (LA280_0==LessThanSign) && (synpred151_InternalN4JSParser())) {s = 74;}
                        else if ( (LA280_0==Asterisk) && (synpred151_InternalN4JSParser())) {s = 75;}
                        else if ( (LA280_0==LeftParenthesis||LA280_0==QuestionMark) ) {s = 76;}
                        else if ( (LA280_0==FullStopFullStopFullStop) ) {s = 78;}
                        input.seek(index280_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA280_1 = input.LA(1);
                        int index280_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA280_2 = input.LA(1);
                        int index280_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA280_3 = input.LA(1);
                        int index280_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA280_4 = input.LA(1);
                        int index280_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA280_5 = input.LA(1);
                        int index280_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA280_6 = input.LA(1);
                        int index280_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA280_7 = input.LA(1);
                        int index280_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA280_8 = input.LA(1);
                        int index280_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA280_9 = input.LA(1);
                        int index280_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA280_10 = input.LA(1);
                        int index280_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA280_11 = input.LA(1);
                        int index280_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA280_12 = input.LA(1);
                        int index280_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA280_13 = input.LA(1);
                        int index280_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA280_14 = input.LA(1);
                        int index280_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA280_15 = input.LA(1);
                        int index280_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA280_16 = input.LA(1);
                        int index280_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA280_17 = input.LA(1);
                        int index280_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA280_18 = input.LA(1);
                        int index280_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA280_19 = input.LA(1);
                        int index280_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA280_20 = input.LA(1);
                        int index280_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA280_21 = input.LA(1);
                        int index280_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA280_22 = input.LA(1);
                        int index280_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA280_23 = input.LA(1);
                        int index280_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA280_24 = input.LA(1);
                        int index280_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA280_25 = input.LA(1);
                        int index280_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA280_26 = input.LA(1);
                        int index280_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA280_27 = input.LA(1);
                        int index280_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA280_28 = input.LA(1);
                        int index280_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA280_29 = input.LA(1);
                        int index280_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA280_30 = input.LA(1);
                        int index280_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA280_31 = input.LA(1);
                        int index280_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA280_32 = input.LA(1);
                        int index280_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA280_33 = input.LA(1);
                        int index280_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA280_34 = input.LA(1);
                        int index280_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA280_35 = input.LA(1);
                        int index280_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA280_36 = input.LA(1);
                        int index280_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA280_37 = input.LA(1);
                        int index280_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA280_38 = input.LA(1);
                        int index280_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA280_39 = input.LA(1);
                        int index280_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA280_40 = input.LA(1);
                        int index280_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA280_41 = input.LA(1);
                        int index280_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA280_42 = input.LA(1);
                        int index280_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA280_43 = input.LA(1);
                        int index280_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA280_44 = input.LA(1);
                        int index280_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA280_45 = input.LA(1);
                        int index280_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA280_46 = input.LA(1);
                        int index280_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA280_47 = input.LA(1);
                        int index280_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA280_48 = input.LA(1);
                        int index280_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA280_49 = input.LA(1);
                        int index280_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred146_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA280_50 = input.LA(1);
                        int index280_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred148_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA280_51 = input.LA(1);
                        int index280_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA280_52 = input.LA(1);
                        int index280_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA280_53 = input.LA(1);
                        int index280_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA280_54 = input.LA(1);
                        int index280_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA280_55 = input.LA(1);
                        int index280_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA280_56 = input.LA(1);
                        int index280_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA280_57 = input.LA(1);
                        int index280_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA280_58 = input.LA(1);
                        int index280_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA280_59 = input.LA(1);
                        int index280_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA280_60 = input.LA(1);
                        int index280_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA280_61 = input.LA(1);
                        int index280_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA280_62 = input.LA(1);
                        int index280_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA280_63 = input.LA(1);
                        int index280_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA280_64 = input.LA(1);
                        int index280_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA280_65 = input.LA(1);
                        int index280_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA280_66 = input.LA(1);
                        int index280_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA280_67 = input.LA(1);
                        int index280_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA280_68 = input.LA(1);
                        int index280_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA280_69 = input.LA(1);
                        int index280_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA280_70 = input.LA(1);
                        int index280_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA280_71 = input.LA(1);
                        int index280_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA280_72 = input.LA(1);
                        int index280_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index280_72);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA280_73 = input.LA(1);
                        int index280_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred151_InternalN4JSParser()) ) {s = 75;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index280_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 280, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA273 extends DFA {
        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_203;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_207;
        }
        public String getDescription() {
            return "15841:7: ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA276 extends DFA {
        public DFA276(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "16275:7: ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_217s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };
    static final short[][] dfa_217 = unpackEncodedStringArray(dfa_217s);
    class DFA279 extends DFA {
        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = dfa_210;
            this.eof = dfa_210;
            this.min = dfa_212;
            this.max = dfa_213;
            this.accept = dfa_214;
            this.special = dfa_215;
            this.transition = dfa_217;
        }
        public String getDescription() {
            return "16399:5: ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )?";
        }
    }
    class DFA282 extends DFA {
        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "16551:5: ( (lv_returnTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA286 extends DFA {
        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "16749:5: ( (lv_returnTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_218s = "\20\uffff";
    static final String dfa_219s = "\10\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_220s = "\1\u0095\7\u00a5\1\uffff\1\u0095\4\156\1\uffff\1\u0095";
    static final String dfa_221s = "\10\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_222s = "\20\uffff}>";
    static final String[] dfa_223s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\23\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\15\uffff\1\16\6\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10"
    };
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final char[] dfa_219 = DFA.unpackEncodedStringToUnsignedChars(dfa_219s);
    static final char[] dfa_220 = DFA.unpackEncodedStringToUnsignedChars(dfa_220s);
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[][] dfa_223 = unpackEncodedStringArray(dfa_223s);
    class DFA289 extends DFA {
        public DFA289(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 289;
            this.eot = dfa_218;
            this.eof = dfa_218;
            this.min = dfa_219;
            this.max = dfa_220;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_223;
        }
        public String getDescription() {
            return "16923:5: ( (lv_declaredTypeRef_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA291 extends DFA {
        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_218;
            this.eof = dfa_218;
            this.min = dfa_219;
            this.max = dfa_220;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_223;
        }
        public String getDescription() {
            return "17043:5: ( (lv_declaredTypeRef_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA293 extends DFA {
        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = dfa_210;
            this.eof = dfa_211;
            this.min = dfa_212;
            this.max = dfa_213;
            this.accept = dfa_214;
            this.special = dfa_215;
            this.transition = dfa_216;
        }
        public String getDescription() {
            return "17139:3: ( (lv_declaredTypeRef_0_0= ruleTypeRef ) )?";
        }
    }
    class DFA294 extends DFA {
        public DFA294(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 294;
            this.eot = dfa_210;
            this.eof = dfa_210;
            this.min = dfa_212;
            this.max = dfa_213;
            this.accept = dfa_214;
            this.special = dfa_215;
            this.transition = dfa_217;
        }
        public String getDescription() {
            return "17190:3: ( (lv_declaredTypeRef_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_224s = "\71\uffff";
    static final String dfa_225s = "\2\4\67\uffff";
    static final String dfa_226s = "\2\u0095\67\uffff";
    static final String dfa_227s = "\2\uffff\1\3\65\2\1\1";
    static final String dfa_228s = "\1\uffff\1\0\67\uffff}>";
    static final String[] dfa_229s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\2\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\5\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\1\55\1\4\1\52\1\24\7\uffff\1\10\1\12\1\3\1\40\1\11\12\uffff\1\57\10\uffff\1\17\3\uffff\1\22\5\uffff\1\62\5\uffff\1\70\1\56\2\uffff\1\41\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\12\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final char[] dfa_225 = DFA.unpackEncodedStringToUnsignedChars(dfa_225s);
    static final char[] dfa_226 = DFA.unpackEncodedStringToUnsignedChars(dfa_226s);
    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final short[] dfa_228 = DFA.unpackEncodedString(dfa_228s);
    static final short[][] dfa_229 = unpackEncodedStringArray(dfa_229s);
    class DFA325 extends DFA {
        public DFA325(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 325;
            this.eot = dfa_224;
            this.eof = dfa_224;
            this.min = dfa_225;
            this.max = dfa_226;
            this.accept = dfa_227;
            this.special = dfa_228;
            this.transition = dfa_229;
        }
        public String getDescription() {
            return "19049:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= ruleMemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= ruleArguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= ruleTemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= rulePrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA325_1 = input.LA(1);
                        int index325_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA325_1>=4 && LA325_1<=149 && (s=T2S.M_23[LA325_1-(4)])>=0) && (synpred175_InternalN4JSParser())) { /* 53 cases */ }
                        else if ( (LA325_1==FullStop) && (synpred174_InternalN4JSParser())) {s = 56;}
                        input.seek(index325_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 325, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_230s = "\70\uffff";
    static final String dfa_231s = "\2\4\66\uffff";
    static final String dfa_232s = "\2\u0095\66\uffff";
    static final String dfa_233s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_234s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_235s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\2\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\12\uffff\1\57\10\uffff\1\17\3\uffff\1\22\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\41\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\12\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final char[] dfa_231 = DFA.unpackEncodedStringToUnsignedChars(dfa_231s);
    static final char[] dfa_232 = DFA.unpackEncodedStringToUnsignedChars(dfa_232s);
    static final short[] dfa_233 = DFA.unpackEncodedString(dfa_233s);
    static final short[] dfa_234 = DFA.unpackEncodedString(dfa_234s);
    static final short[][] dfa_235 = unpackEncodedStringArray(dfa_235s);
    class DFA333 extends DFA {
        public DFA333(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 333;
            this.eot = dfa_230;
            this.eof = dfa_230;
            this.min = dfa_231;
            this.max = dfa_232;
            this.accept = dfa_233;
            this.special = dfa_234;
            this.transition = dfa_235;
        }
        public String getDescription() {
            return "19371:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= norm1_Arguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= norm1_TemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= norm1_PrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA333_1 = input.LA(1);
                        int index333_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA333_1==FullStop) && (synpred178_InternalN4JSParser())) {s = 3;}
                        else if ((LA333_1>=4 && LA333_1<=149 && (s=T2S.M_24[LA333_1-(4)])>=0) && (synpred179_InternalN4JSParser())) { /* 53 cases */ }
                        input.seek(index333_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 333, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_236s = "\1\1\101\uffff";
    static final String dfa_237s = "\1\7\1\uffff\1\4\77\uffff";
    static final String dfa_238s = "\1\u0099\1\uffff\1\u0095\77\uffff";
    static final String dfa_239s = "\1\uffff\1\2\1\uffff\77\1";
    static final String dfa_240s = "\1\0\1\uffff\1\1\77\uffff}>";
    static final String[] dfa_241s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\65\3\uffff\1\36\1\14\1\71\1\uffff\1\43\1\40\1\uffff\1\17\1\uffff\1\24\1\73\1\33\1\32\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\56\1\5\1\53\1\25\1\72\6\uffff\1\11\1\13\1\4\1\41\1\12\7\uffff\1\74\1\uffff\1\75\1\60\10\uffff\1\20\3\uffff\1\23\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\42\1\1\2\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\7\2\uffff\1\55\12\uffff\1\70\1\67\7\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final char[] dfa_237 = DFA.unpackEncodedStringToUnsignedChars(dfa_237s);
    static final char[] dfa_238 = DFA.unpackEncodedStringToUnsignedChars(dfa_238s);
    static final short[] dfa_239 = DFA.unpackEncodedString(dfa_239s);
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[][] dfa_241 = unpackEncodedStringArray(dfa_241s);
    class DFA348 extends DFA {
        public DFA348(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 348;
            this.eot = dfa_19;
            this.eof = dfa_236;
            this.min = dfa_237;
            this.max = dfa_238;
            this.accept = dfa_239;
            this.special = dfa_240;
            this.transition = dfa_241;
        }
        public String getDescription() {
            return "()* loopback of 20516:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= ruleMultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA348_0 = input.LA(1);
                        int index348_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_0==EOF||LA348_0==Instanceof||LA348_0==ExclamationMarkEqualsSignEqualsSign||(LA348_0>=LessThanSignLessThanSignEqualsSign && LA348_0<=EqualsSignEqualsSignEqualsSign)||(LA348_0>=ExclamationMarkEqualsSign && LA348_0<=AsteriskEqualsSign)||LA348_0==PlusSignEqualsSign||(LA348_0>=SolidusEqualsSign && LA348_0<=EqualsSignEqualsSign)||LA348_0==QuestionMarkQuestionMark||LA348_0==CircumflexAccentEqualsSign||(LA348_0>=In && LA348_0<=VerticalLineVerticalLine)||LA348_0==Ampersand||LA348_0==RightParenthesis||LA348_0==Comma||(LA348_0>=Colon && LA348_0<=QuestionMark)||(LA348_0>=RightSquareBracket && LA348_0<=CircumflexAccent)||(LA348_0>=VerticalLine && LA348_0<=RightCurlyBracket)||LA348_0==RULE_ML_COMMENT||LA348_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA348_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA348_0==PlusSign) && (synpred188_InternalN4JSParser())) {s = 3;}
                        input.seek(index348_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA348_2 = input.LA(1);
                        int index348_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_2==EqualsSign) ) {s = 1;}
                        else if ((LA348_2>=4 && LA348_2<=149 && (s=T2S.M_25[LA348_2-(4)])>=0) && (synpred188_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index348_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 348, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_242s = "\101\uffff";
    static final String dfa_243s = "\1\1\100\uffff";
    static final String dfa_244s = "\1\7\1\uffff\1\4\76\uffff";
    static final String dfa_245s = "\1\u0099\1\uffff\1\u0095\76\uffff";
    static final String dfa_246s = "\1\uffff\1\2\1\uffff\76\1";
    static final String dfa_247s = "\1\1\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_248s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\1\70\1\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\72\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\1\71\6\uffff\1\10\1\12\1\4\1\40\1\11\7\uffff\1\73\1\uffff\1\74\1\57\10\uffff\1\17\3\uffff\1\22\2\uffff\1\100\2\uffff\1\62\2\uffff\1\75\1\uffff\1\76\1\uffff\1\56\2\uffff\1\41\1\1\2\uffff\1\63\1\60\2\uffff\1\61\2\uffff\1\77\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\12\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final short[] dfa_243 = DFA.unpackEncodedString(dfa_243s);
    static final char[] dfa_244 = DFA.unpackEncodedStringToUnsignedChars(dfa_244s);
    static final char[] dfa_245 = DFA.unpackEncodedStringToUnsignedChars(dfa_245s);
    static final short[] dfa_246 = DFA.unpackEncodedString(dfa_246s);
    static final short[] dfa_247 = DFA.unpackEncodedString(dfa_247s);
    static final short[][] dfa_248 = unpackEncodedStringArray(dfa_248s);
    class DFA349 extends DFA {
        public DFA349(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 349;
            this.eot = dfa_242;
            this.eof = dfa_243;
            this.min = dfa_244;
            this.max = dfa_245;
            this.accept = dfa_246;
            this.special = dfa_247;
            this.transition = dfa_248;
        }
        public String getDescription() {
            return "()* loopback of 20598:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= norm1_MultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA349_2 = input.LA(1);
                        int index349_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA349_2>=4 && LA349_2<=149 && (s=T2S.M_26[LA349_2-(4)])>=0) && (synpred189_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA349_2==EqualsSign) ) {s = 1;}
                        input.seek(index349_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA349_0 = input.LA(1);
                        int index349_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_0==EOF||LA349_0==Instanceof||LA349_0==ExclamationMarkEqualsSignEqualsSign||(LA349_0>=LessThanSignLessThanSignEqualsSign && LA349_0<=EqualsSignEqualsSignEqualsSign)||(LA349_0>=ExclamationMarkEqualsSign && LA349_0<=AsteriskEqualsSign)||LA349_0==PlusSignEqualsSign||(LA349_0>=SolidusEqualsSign && LA349_0<=EqualsSignEqualsSign)||LA349_0==QuestionMarkQuestionMark||LA349_0==CircumflexAccentEqualsSign||(LA349_0>=In && LA349_0<=VerticalLineVerticalLine)||LA349_0==Ampersand||LA349_0==RightParenthesis||LA349_0==Comma||(LA349_0>=Colon && LA349_0<=QuestionMark)||(LA349_0>=RightSquareBracket && LA349_0<=CircumflexAccent)||(LA349_0>=VerticalLine && LA349_0<=RightCurlyBracket)||LA349_0==RULE_ML_COMMENT||LA349_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA349_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA349_0==PlusSign) && (synpred189_InternalN4JSParser())) {s = 3;}
                        input.seek(index349_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 349, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_249s = "\104\uffff";
    static final String dfa_250s = "\1\1\103\uffff";
    static final String dfa_251s = "\1\7\1\uffff\1\4\1\uffff\2\4\76\uffff";
    static final String dfa_252s = "\1\u0099\1\uffff\1\u0095\1\uffff\2\u0095\76\uffff";
    static final String dfa_253s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\76\1";
    static final String dfa_254s = "\1\1\3\uffff\1\2\1\0\76\uffff}>";
    static final String[] dfa_255s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\12\uffff\2\1\7\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\1\5\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\12\uffff\1\72\1\71\7\uffff\1\47",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\2\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\12\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final char[] dfa_251 = DFA.unpackEncodedStringToUnsignedChars(dfa_251s);
    static final char[] dfa_252 = DFA.unpackEncodedStringToUnsignedChars(dfa_252s);
    static final short[] dfa_253 = DFA.unpackEncodedString(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final short[][] dfa_255 = unpackEncodedStringArray(dfa_255s);
    class DFA350 extends DFA {
        public DFA350(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 350;
            this.eot = dfa_249;
            this.eof = dfa_250;
            this.min = dfa_251;
            this.max = dfa_252;
            this.accept = dfa_253;
            this.special = dfa_254;
            this.transition = dfa_255;
        }
        public String getDescription() {
            return "()* loopback of 20686:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA350_5 = input.LA(1);
                        int index350_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_5==EqualsSign) ) {s = 1;}
                        else if ((LA350_5>=4 && LA350_5<=149 && (s=T2S.M_27[LA350_5-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index350_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA350_0 = input.LA(1);
                        int index350_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_0==EOF||LA350_0==Instanceof||LA350_0==ExclamationMarkEqualsSignEqualsSign||(LA350_0>=LessThanSignLessThanSignEqualsSign && LA350_0<=EqualsSignEqualsSignEqualsSign)||(LA350_0>=ExclamationMarkEqualsSign && LA350_0<=AsteriskEqualsSign)||LA350_0==PlusSignEqualsSign||LA350_0==SolidusEqualsSign||(LA350_0>=LessThanSignEqualsSign && LA350_0<=EqualsSignEqualsSign)||LA350_0==QuestionMarkQuestionMark||LA350_0==CircumflexAccentEqualsSign||(LA350_0>=In && LA350_0<=VerticalLineVerticalLine)||LA350_0==Ampersand||LA350_0==RightParenthesis||(LA350_0>=Comma && LA350_0<=HyphenMinus)||(LA350_0>=Colon && LA350_0<=EqualsSign)||LA350_0==QuestionMark||(LA350_0>=RightSquareBracket && LA350_0<=CircumflexAccent)||(LA350_0>=VerticalLine && LA350_0<=RightCurlyBracket)||LA350_0==RULE_ML_COMMENT||LA350_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA350_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA350_0==LessThanSignLessThanSign) && (synpred190_InternalN4JSParser())) {s = 3;}
                        input.seek(index350_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA350_4 = input.LA(1);
                        int index350_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA350_4==EqualsSign) ) {s = 1;}
                        else if ((LA350_4>=4 && LA350_4<=149 && (s=T2S.M_28[LA350_4-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index350_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 350, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_256s = "\1\1\102\uffff";
    static final String dfa_257s = "\1\7\1\uffff\1\4\1\uffff\2\4\75\uffff";
    static final String dfa_258s = "\1\u0099\1\uffff\1\u0095\1\uffff\2\u0095\75\uffff";
    static final String dfa_259s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\75\1";
    static final String dfa_260s = "\1\2\3\uffff\1\0\1\1\75\uffff}>";
    static final String[] dfa_261s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\12\uffff\2\1\7\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\12\uffff\1\71\1\70\7\uffff\1\46",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\2\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\12\uffff\1\71\1\70\7\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_256 = DFA.unpackEncodedString(dfa_256s);
    static final char[] dfa_257 = DFA.unpackEncodedStringToUnsignedChars(dfa_257s);
    static final char[] dfa_258 = DFA.unpackEncodedStringToUnsignedChars(dfa_258s);
    static final short[] dfa_259 = DFA.unpackEncodedString(dfa_259s);
    static final short[] dfa_260 = DFA.unpackEncodedString(dfa_260s);
    static final short[][] dfa_261 = unpackEncodedStringArray(dfa_261s);
    class DFA351 extends DFA {
        public DFA351(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 351;
            this.eot = dfa_122;
            this.eof = dfa_256;
            this.min = dfa_257;
            this.max = dfa_258;
            this.accept = dfa_259;
            this.special = dfa_260;
            this.transition = dfa_261;
        }
        public String getDescription() {
            return "()* loopback of 20892:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA351_4 = input.LA(1);
                        int index351_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA351_4==EqualsSign) ) {s = 1;}
                        else if ((LA351_4>=4 && LA351_4<=149 && (s=T2S.M_29[LA351_4-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 61 cases */ }
                        input.seek(index351_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA351_5 = input.LA(1);
                        int index351_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_5==EqualsSign) ) {s = 1;}
                        else if ((LA351_5>=4 && LA351_5<=149 && (s=T2S.M_30[LA351_5-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index351_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA351_0 = input.LA(1);
                        int index351_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_0==EOF||LA351_0==Instanceof||LA351_0==ExclamationMarkEqualsSignEqualsSign||(LA351_0>=LessThanSignLessThanSignEqualsSign && LA351_0<=EqualsSignEqualsSignEqualsSign)||(LA351_0>=ExclamationMarkEqualsSign && LA351_0<=AsteriskEqualsSign)||LA351_0==PlusSignEqualsSign||LA351_0==SolidusEqualsSign||(LA351_0>=LessThanSignEqualsSign && LA351_0<=EqualsSignEqualsSign)||LA351_0==QuestionMarkQuestionMark||LA351_0==CircumflexAccentEqualsSign||(LA351_0>=In && LA351_0<=VerticalLineVerticalLine)||LA351_0==Ampersand||LA351_0==RightParenthesis||(LA351_0>=Comma && LA351_0<=HyphenMinus)||(LA351_0>=Colon && LA351_0<=EqualsSign)||LA351_0==QuestionMark||(LA351_0>=RightSquareBracket && LA351_0<=CircumflexAccent)||(LA351_0>=VerticalLine && LA351_0<=RightCurlyBracket)||LA351_0==RULE_ML_COMMENT||LA351_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA351_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA351_0==LessThanSignLessThanSign) && (synpred192_InternalN4JSParser())) {s = 3;}
                        input.seek(index351_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 351, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_262s = "\105\uffff";
    static final String dfa_263s = "\1\1\104\uffff";
    static final String dfa_264s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_265s = "\1\160\1\uffff\1\u0095\102\uffff";
    static final String dfa_266s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_267s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_268s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\61\1\10\1\56\1\30\1\75\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\6\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\12\2\uffff\1\60\12\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_262 = DFA.unpackEncodedString(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final char[] dfa_264 = DFA.unpackEncodedStringToUnsignedChars(dfa_264s);
    static final char[] dfa_265 = DFA.unpackEncodedStringToUnsignedChars(dfa_265s);
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);
    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final short[][] dfa_268 = unpackEncodedStringArray(dfa_268s);
    class DFA354 extends DFA {
        public DFA354(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 354;
            this.eot = dfa_262;
            this.eof = dfa_263;
            this.min = dfa_264;
            this.max = dfa_265;
            this.accept = dfa_266;
            this.special = dfa_267;
            this.transition = dfa_268;
        }
        public String getDescription() {
            return "()* loopback of 21146:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA354_0 = input.LA(1);
                        int index354_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_0==EOF||LA354_0==ExclamationMarkEqualsSignEqualsSign||(LA354_0>=LessThanSignLessThanSignEqualsSign && LA354_0<=EqualsSignEqualsSignEqualsSign)||(LA354_0>=ExclamationMarkEqualsSign && LA354_0<=AsteriskEqualsSign)||LA354_0==PlusSignEqualsSign||LA354_0==SolidusEqualsSign||LA354_0==EqualsSignEqualsSign||LA354_0==QuestionMarkQuestionMark||LA354_0==CircumflexAccentEqualsSign||(LA354_0>=In && LA354_0<=VerticalLineVerticalLine)||LA354_0==Ampersand||(LA354_0>=Comma && LA354_0<=HyphenMinus)||LA354_0==Semicolon||LA354_0==EqualsSign||LA354_0==QuestionMark||LA354_0==CircumflexAccent||(LA354_0>=VerticalLine && LA354_0<=RightCurlyBracket)) ) {s = 1;}
                        else if ( (LA354_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA354_0==LessThanSign) && (synpred194_InternalN4JSParser())) {s = 3;}
                        else if ( (LA354_0==LessThanSignEqualsSign) && (synpred194_InternalN4JSParser())) {s = 4;}
                        else if ( (LA354_0==Instanceof) && (synpred194_InternalN4JSParser())) {s = 5;}
                        input.seek(index354_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA354_2 = input.LA(1);
                        int index354_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA354_2>=4 && LA354_2<=149 && (s=T2S.M_31[LA354_2-(4)])>=0) && (synpred194_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index354_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 354, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_269s = "\106\uffff";
    static final String dfa_270s = "\1\1\105\uffff";
    static final String dfa_271s = "\1\7\1\uffff\1\4\103\uffff";
    static final String dfa_272s = "\1\u0099\1\uffff\1\u0095\103\uffff";
    static final String dfa_273s = "\1\uffff\1\2\1\uffff\103\1";
    static final String dfa_274s = "\1\0\1\uffff\1\1\103\uffff}>";
    static final String[] dfa_275s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\71\3\uffff\1\42\1\20\1\75\1\uffff\1\47\1\44\1\uffff\1\23\1\uffff\1\30\1\77\1\37\1\36\2\uffff\1\72\1\uffff\1\60\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\62\1\11\1\57\1\31\1\76\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\100\1\uffff\1\101\1\64\10\uffff\1\24\3\uffff\1\27\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\7\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\3\uffff\1\50\1\uffff\1\55\1\52\1\53\1\54\1\uffff\1\56\1\uffff\1\13\2\uffff\1\61\12\uffff\1\74\1\73\7\uffff\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final char[] dfa_271 = DFA.unpackEncodedStringToUnsignedChars(dfa_271s);
    static final char[] dfa_272 = DFA.unpackEncodedStringToUnsignedChars(dfa_272s);
    static final short[] dfa_273 = DFA.unpackEncodedString(dfa_273s);
    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final short[][] dfa_275 = unpackEncodedStringArray(dfa_275s);
    class DFA355 extends DFA {
        public DFA355(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 355;
            this.eot = dfa_269;
            this.eof = dfa_270;
            this.min = dfa_271;
            this.max = dfa_272;
            this.accept = dfa_273;
            this.special = dfa_274;
            this.transition = dfa_275;
        }
        public String getDescription() {
            return "()* loopback of 21352:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA355_0 = input.LA(1);
                        int index355_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_0==EOF||LA355_0==ExclamationMarkEqualsSignEqualsSign||(LA355_0>=LessThanSignLessThanSignEqualsSign && LA355_0<=EqualsSignEqualsSignEqualsSign)||(LA355_0>=ExclamationMarkEqualsSign && LA355_0<=AsteriskEqualsSign)||LA355_0==PlusSignEqualsSign||LA355_0==SolidusEqualsSign||LA355_0==EqualsSignEqualsSign||LA355_0==QuestionMarkQuestionMark||LA355_0==CircumflexAccentEqualsSign||(LA355_0>=VerticalLineEqualsSign && LA355_0<=VerticalLineVerticalLine)||LA355_0==Ampersand||LA355_0==RightParenthesis||(LA355_0>=Comma && LA355_0<=HyphenMinus)||(LA355_0>=Colon && LA355_0<=Semicolon)||LA355_0==EqualsSign||LA355_0==QuestionMark||(LA355_0>=RightSquareBracket && LA355_0<=CircumflexAccent)||(LA355_0>=VerticalLine && LA355_0<=RightCurlyBracket)||LA355_0==RULE_ML_COMMENT||LA355_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA355_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA355_0==LessThanSign) && (synpred196_InternalN4JSParser())) {s = 3;}
                        else if ( (LA355_0==LessThanSignEqualsSign) && (synpred196_InternalN4JSParser())) {s = 4;}
                        else if ( (LA355_0==Instanceof) && (synpred196_InternalN4JSParser())) {s = 5;}
                        else if ( (LA355_0==In) && (synpred196_InternalN4JSParser())) {s = 6;}
                        input.seek(index355_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA355_2 = input.LA(1);
                        int index355_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA355_2>=4 && LA355_2<=149 && (s=T2S.M_32[LA355_2-(4)])>=0) && (synpred196_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index355_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 355, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_276s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_277s = "\1\157\1\uffff\1\u0095\101\uffff";
    static final String dfa_278s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_279s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_280s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\60\1\10\1\55\1\27\1\74\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\6\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\12\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final char[] dfa_277 = DFA.unpackEncodedStringToUnsignedChars(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[] dfa_279 = DFA.unpackEncodedString(dfa_279s);
    static final short[][] dfa_280 = unpackEncodedStringArray(dfa_280s);
    class DFA356 extends DFA {
        public DFA356(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 356;
            this.eot = dfa_249;
            this.eof = dfa_250;
            this.min = dfa_276;
            this.max = dfa_277;
            this.accept = dfa_278;
            this.special = dfa_279;
            this.transition = dfa_280;
        }
        public String getDescription() {
            return "()* loopback of 21558:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA356_0 = input.LA(1);
                        int index356_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA356_0==EOF||LA356_0==ExclamationMarkEqualsSignEqualsSign||(LA356_0>=LessThanSignLessThanSignEqualsSign && LA356_0<=EqualsSignEqualsSignEqualsSign)||(LA356_0>=ExclamationMarkEqualsSign && LA356_0<=AsteriskEqualsSign)||LA356_0==PlusSignEqualsSign||LA356_0==SolidusEqualsSign||LA356_0==EqualsSignEqualsSign||LA356_0==QuestionMarkQuestionMark||LA356_0==CircumflexAccentEqualsSign||(LA356_0>=In && LA356_0<=VerticalLineVerticalLine)||LA356_0==Ampersand||(LA356_0>=Comma && LA356_0<=HyphenMinus)||LA356_0==Semicolon||LA356_0==EqualsSign||LA356_0==QuestionMark||LA356_0==CircumflexAccent||LA356_0==VerticalLine) ) {s = 1;}
                        else if ( (LA356_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA356_0==LessThanSign) && (synpred198_InternalN4JSParser())) {s = 3;}
                        else if ( (LA356_0==LessThanSignEqualsSign) && (synpred198_InternalN4JSParser())) {s = 4;}
                        else if ( (LA356_0==Instanceof) && (synpred198_InternalN4JSParser())) {s = 5;}
                        input.seek(index356_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA356_2 = input.LA(1);
                        int index356_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA356_2>=4 && LA356_2<=149 && (s=T2S.M_33[LA356_2-(4)])>=0) && (synpred198_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA356_2==GreaterThanSign) ) {s = 1;}
                        input.seek(index356_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 356, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_281s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String[] dfa_282s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\61\1\11\1\56\1\30\1\75\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\7\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\12\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_281 = DFA.unpackEncodedStringToUnsignedChars(dfa_281s);
    static final short[][] dfa_282 = unpackEncodedStringArray(dfa_282s);
    class DFA357 extends DFA {
        public DFA357(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 357;
            this.eot = dfa_262;
            this.eof = dfa_263;
            this.min = dfa_264;
            this.max = dfa_281;
            this.accept = dfa_266;
            this.special = dfa_267;
            this.transition = dfa_282;
        }
        public String getDescription() {
            return "()* loopback of 21762:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA357_0 = input.LA(1);
                        int index357_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA357_0==EOF||LA357_0==ExclamationMarkEqualsSignEqualsSign||(LA357_0>=LessThanSignLessThanSignEqualsSign && LA357_0<=EqualsSignEqualsSignEqualsSign)||(LA357_0>=ExclamationMarkEqualsSign && LA357_0<=AsteriskEqualsSign)||LA357_0==PlusSignEqualsSign||LA357_0==SolidusEqualsSign||LA357_0==EqualsSignEqualsSign||LA357_0==QuestionMarkQuestionMark||LA357_0==CircumflexAccentEqualsSign||(LA357_0>=VerticalLineEqualsSign && LA357_0<=VerticalLineVerticalLine)||LA357_0==Ampersand||LA357_0==RightParenthesis||(LA357_0>=Comma && LA357_0<=HyphenMinus)||(LA357_0>=Colon && LA357_0<=Semicolon)||LA357_0==EqualsSign||LA357_0==QuestionMark||(LA357_0>=RightSquareBracket && LA357_0<=CircumflexAccent)||(LA357_0>=VerticalLine && LA357_0<=RightCurlyBracket)||LA357_0==RULE_ML_COMMENT||LA357_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA357_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA357_0==LessThanSign) && (synpred200_InternalN4JSParser())) {s = 3;}
                        else if ( (LA357_0==LessThanSignEqualsSign) && (synpred200_InternalN4JSParser())) {s = 4;}
                        else if ( (LA357_0==Instanceof) && (synpred200_InternalN4JSParser())) {s = 5;}
                        else if ( (LA357_0==In) && (synpred200_InternalN4JSParser())) {s = 6;}
                        input.seek(index357_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA357_2 = input.LA(1);
                        int index357_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA357_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA357_2>=4 && LA357_2<=149 && (s=T2S.M_34[LA357_2-(4)])>=0) && (synpred200_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index357_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 357, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_283s = "\1\4\35\0\44\uffff";
    static final String dfa_284s = "\1\u0095\35\0\44\uffff";
    static final String dfa_285s = "\36\uffff\1\4\40\uffff\1\1\1\3\1\2";
    static final String dfa_286s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\44\uffff}>";
    static final String[] dfa_287s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\1\uffff\1\36\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\2\36\10\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\12\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_283 = DFA.unpackEncodedStringToUnsignedChars(dfa_283s);
    static final char[] dfa_284 = DFA.unpackEncodedStringToUnsignedChars(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final short[] dfa_286 = DFA.unpackEncodedString(dfa_286s);
    static final short[][] dfa_287 = unpackEncodedStringArray(dfa_287s);
    class DFA395 extends DFA {
        public DFA395(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 395;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_283;
            this.max = dfa_284;
            this.accept = dfa_285;
            this.special = dfa_286;
            this.transition = dfa_287;
        }
        public String getDescription() {
            return "24787:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= ruleAwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= ruleArrowExpression ) | (this_ConditionalExpression_3= ruleConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA395_1 = input.LA(1);
                        int index395_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA395_2 = input.LA(1);
                        int index395_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA395_3 = input.LA(1);
                        int index395_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA395_4 = input.LA(1);
                        int index395_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA395_5 = input.LA(1);
                        int index395_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA395_6 = input.LA(1);
                        int index395_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA395_7 = input.LA(1);
                        int index395_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA395_8 = input.LA(1);
                        int index395_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA395_9 = input.LA(1);
                        int index395_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA395_10 = input.LA(1);
                        int index395_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA395_11 = input.LA(1);
                        int index395_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA395_12 = input.LA(1);
                        int index395_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA395_13 = input.LA(1);
                        int index395_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA395_14 = input.LA(1);
                        int index395_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA395_15 = input.LA(1);
                        int index395_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA395_16 = input.LA(1);
                        int index395_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA395_17 = input.LA(1);
                        int index395_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA395_18 = input.LA(1);
                        int index395_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA395_19 = input.LA(1);
                        int index395_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA395_20 = input.LA(1);
                        int index395_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA395_21 = input.LA(1);
                        int index395_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA395_22 = input.LA(1);
                        int index395_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA395_23 = input.LA(1);
                        int index395_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA395_24 = input.LA(1);
                        int index395_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA395_25 = input.LA(1);
                        int index395_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA395_26 = input.LA(1);
                        int index395_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA395_27 = input.LA(1);
                        int index395_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA395_28 = input.LA(1);
                        int index395_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA395_29 = input.LA(1);
                        int index395_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 395, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_288s = "\1\14\15\uffff";
    static final String dfa_289s = "\1\67\13\0\2\uffff";
    static final String dfa_290s = "\1\160\13\0\2\uffff";
    static final String dfa_291s = "\14\uffff\1\2\1\1";
    static final String dfa_292s = "\1\uffff\1\7\1\5\1\1\1\0\1\10\1\4\1\2\1\12\1\11\1\6\1\3\2\uffff}>";
    static final String[] dfa_293s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final char[] dfa_289 = DFA.unpackEncodedStringToUnsignedChars(dfa_289s);
    static final char[] dfa_290 = DFA.unpackEncodedStringToUnsignedChars(dfa_290s);
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[][] dfa_293 = unpackEncodedStringArray(dfa_293s);
    class DFA394 extends DFA {
        public DFA394(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 394;
            this.eot = dfa_7;
            this.eof = dfa_288;
            this.min = dfa_289;
            this.max = dfa_290;
            this.accept = dfa_291;
            this.special = dfa_292;
            this.transition = dfa_293;
        }
        public String getDescription() {
            return "24891:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA394_4 = input.LA(1);
                        int index394_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA394_3 = input.LA(1);
                        int index394_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA394_7 = input.LA(1);
                        int index394_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA394_11 = input.LA(1);
                        int index394_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA394_6 = input.LA(1);
                        int index394_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA394_2 = input.LA(1);
                        int index394_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA394_10 = input.LA(1);
                        int index394_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA394_1 = input.LA(1);
                        int index394_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_1);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA394_5 = input.LA(1);
                        int index394_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA394_9 = input.LA(1);
                        int index394_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA394_8 = input.LA(1);
                        int index394_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 394, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA397 extends DFA {
        public DFA397(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 397;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_283;
            this.max = dfa_284;
            this.accept = dfa_285;
            this.special = dfa_286;
            this.transition = dfa_287;
        }
        public String getDescription() {
            return "24965:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm1_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm1_ArrowExpression ) | (this_ConditionalExpression_3= norm1_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA397_1 = input.LA(1);
                        int index397_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA397_2 = input.LA(1);
                        int index397_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA397_3 = input.LA(1);
                        int index397_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA397_4 = input.LA(1);
                        int index397_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA397_5 = input.LA(1);
                        int index397_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA397_6 = input.LA(1);
                        int index397_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA397_7 = input.LA(1);
                        int index397_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA397_8 = input.LA(1);
                        int index397_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA397_9 = input.LA(1);
                        int index397_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA397_10 = input.LA(1);
                        int index397_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA397_11 = input.LA(1);
                        int index397_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA397_12 = input.LA(1);
                        int index397_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA397_13 = input.LA(1);
                        int index397_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA397_14 = input.LA(1);
                        int index397_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA397_15 = input.LA(1);
                        int index397_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA397_16 = input.LA(1);
                        int index397_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA397_17 = input.LA(1);
                        int index397_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA397_18 = input.LA(1);
                        int index397_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA397_19 = input.LA(1);
                        int index397_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA397_20 = input.LA(1);
                        int index397_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA397_21 = input.LA(1);
                        int index397_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA397_22 = input.LA(1);
                        int index397_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA397_23 = input.LA(1);
                        int index397_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA397_24 = input.LA(1);
                        int index397_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA397_25 = input.LA(1);
                        int index397_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA397_26 = input.LA(1);
                        int index397_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA397_27 = input.LA(1);
                        int index397_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA397_28 = input.LA(1);
                        int index397_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA397_29 = input.LA(1);
                        int index397_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 397, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_294s = "\1\u0099\13\0\2\uffff";
    static final String dfa_295s = "\1\uffff\1\0\1\10\1\5\1\3\1\1\1\4\1\6\1\12\1\2\1\11\1\7\2\uffff}>";
    static final String[] dfa_296s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\1\6\2\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_294 = DFA.unpackEncodedStringToUnsignedChars(dfa_294s);
    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final short[][] dfa_296 = unpackEncodedStringArray(dfa_296s);
    class DFA396 extends DFA {
        public DFA396(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 396;
            this.eot = dfa_7;
            this.eof = dfa_288;
            this.min = dfa_289;
            this.max = dfa_294;
            this.accept = dfa_291;
            this.special = dfa_295;
            this.transition = dfa_296;
        }
        public String getDescription() {
            return "25069:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA396_1 = input.LA(1);
                        int index396_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA396_5 = input.LA(1);
                        int index396_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA396_9 = input.LA(1);
                        int index396_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA396_4 = input.LA(1);
                        int index396_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA396_6 = input.LA(1);
                        int index396_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA396_3 = input.LA(1);
                        int index396_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA396_7 = input.LA(1);
                        int index396_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA396_11 = input.LA(1);
                        int index396_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA396_2 = input.LA(1);
                        int index396_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_2);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA396_10 = input.LA(1);
                        int index396_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA396_8 = input.LA(1);
                        int index396_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 396, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_297s = "\1\4\34\0\45\uffff";
    static final String dfa_298s = "\1\u0095\34\0\45\uffff";
    static final String dfa_299s = "\35\uffff\1\4\1\5\40\uffff\1\1\1\3\1\2";
    static final String dfa_300s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\45\uffff}>";
    static final String[] dfa_301s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\1\uffff\1\36\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\2\36\10\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\12\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_297 = DFA.unpackEncodedStringToUnsignedChars(dfa_297s);
    static final char[] dfa_298 = DFA.unpackEncodedStringToUnsignedChars(dfa_298s);
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final short[] dfa_300 = DFA.unpackEncodedString(dfa_300s);
    static final short[][] dfa_301 = unpackEncodedStringArray(dfa_301s);
    class DFA399 extends DFA {
        public DFA399(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 399;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_297;
            this.max = dfa_298;
            this.accept = dfa_299;
            this.special = dfa_300;
            this.transition = dfa_301;
        }
        public String getDescription() {
            return "25143:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm2_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm2_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm2_ArrowExpression ) | this_YieldExpression_3= ruleYieldExpression | (this_ConditionalExpression_4= norm2_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA399_1 = input.LA(1);
                        int index399_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA399_2 = input.LA(1);
                        int index399_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA399_3 = input.LA(1);
                        int index399_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA399_4 = input.LA(1);
                        int index399_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA399_5 = input.LA(1);
                        int index399_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA399_6 = input.LA(1);
                        int index399_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA399_7 = input.LA(1);
                        int index399_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA399_8 = input.LA(1);
                        int index399_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA399_9 = input.LA(1);
                        int index399_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA399_10 = input.LA(1);
                        int index399_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA399_11 = input.LA(1);
                        int index399_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA399_12 = input.LA(1);
                        int index399_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA399_13 = input.LA(1);
                        int index399_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA399_14 = input.LA(1);
                        int index399_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA399_15 = input.LA(1);
                        int index399_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA399_16 = input.LA(1);
                        int index399_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA399_17 = input.LA(1);
                        int index399_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA399_18 = input.LA(1);
                        int index399_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA399_19 = input.LA(1);
                        int index399_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA399_20 = input.LA(1);
                        int index399_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA399_21 = input.LA(1);
                        int index399_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA399_22 = input.LA(1);
                        int index399_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA399_23 = input.LA(1);
                        int index399_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA399_24 = input.LA(1);
                        int index399_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA399_25 = input.LA(1);
                        int index399_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA399_26 = input.LA(1);
                        int index399_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA399_27 = input.LA(1);
                        int index399_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA399_28 = input.LA(1);
                        int index399_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 399, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_302s = "\1\150\13\0\2\uffff";
    static final String dfa_303s = "\1\uffff\1\0\1\7\1\1\1\10\1\2\1\12\1\3\1\6\1\4\1\11\1\5\2\uffff}>";
    static final String[] dfa_304s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_302 = DFA.unpackEncodedStringToUnsignedChars(dfa_302s);
    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[][] dfa_304 = unpackEncodedStringArray(dfa_304s);
    class DFA398 extends DFA {
        public DFA398(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 398;
            this.eot = dfa_7;
            this.eof = dfa_288;
            this.min = dfa_289;
            this.max = dfa_302;
            this.accept = dfa_291;
            this.special = dfa_303;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "25256:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA398_1 = input.LA(1);
                        int index398_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA398_3 = input.LA(1);
                        int index398_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA398_5 = input.LA(1);
                        int index398_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA398_7 = input.LA(1);
                        int index398_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA398_9 = input.LA(1);
                        int index398_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA398_11 = input.LA(1);
                        int index398_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA398_8 = input.LA(1);
                        int index398_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA398_2 = input.LA(1);
                        int index398_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA398_4 = input.LA(1);
                        int index398_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA398_10 = input.LA(1);
                        int index398_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA398_6 = input.LA(1);
                        int index398_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 398, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA401 extends DFA {
        public DFA401(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 401;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_297;
            this.max = dfa_298;
            this.accept = dfa_299;
            this.special = dfa_300;
            this.transition = dfa_301;
        }
        public String getDescription() {
            return "25330:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm3_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm3_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm3_ArrowExpression ) | this_YieldExpression_3= norm1_YieldExpression | (this_ConditionalExpression_4= norm3_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA401_1 = input.LA(1);
                        int index401_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA401_2 = input.LA(1);
                        int index401_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA401_3 = input.LA(1);
                        int index401_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA401_4 = input.LA(1);
                        int index401_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA401_5 = input.LA(1);
                        int index401_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA401_6 = input.LA(1);
                        int index401_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA401_7 = input.LA(1);
                        int index401_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA401_8 = input.LA(1);
                        int index401_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA401_9 = input.LA(1);
                        int index401_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA401_10 = input.LA(1);
                        int index401_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA401_11 = input.LA(1);
                        int index401_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA401_12 = input.LA(1);
                        int index401_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA401_13 = input.LA(1);
                        int index401_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA401_14 = input.LA(1);
                        int index401_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA401_15 = input.LA(1);
                        int index401_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA401_16 = input.LA(1);
                        int index401_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA401_17 = input.LA(1);
                        int index401_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA401_18 = input.LA(1);
                        int index401_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA401_19 = input.LA(1);
                        int index401_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA401_20 = input.LA(1);
                        int index401_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA401_21 = input.LA(1);
                        int index401_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA401_22 = input.LA(1);
                        int index401_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA401_23 = input.LA(1);
                        int index401_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA401_24 = input.LA(1);
                        int index401_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA401_25 = input.LA(1);
                        int index401_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA401_26 = input.LA(1);
                        int index401_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA401_27 = input.LA(1);
                        int index401_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA401_28 = input.LA(1);
                        int index401_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 401, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_305s = "\1\uffff\1\7\1\3\1\10\1\4\1\11\1\12\1\0\1\6\1\1\1\5\1\2\2\uffff}>";
    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    class DFA400 extends DFA {
        public DFA400(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 400;
            this.eot = dfa_7;
            this.eof = dfa_288;
            this.min = dfa_289;
            this.max = dfa_294;
            this.accept = dfa_291;
            this.special = dfa_305;
            this.transition = dfa_296;
        }
        public String getDescription() {
            return "25443:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA400_7 = input.LA(1);
                        int index400_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA400_9 = input.LA(1);
                        int index400_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA400_11 = input.LA(1);
                        int index400_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA400_2 = input.LA(1);
                        int index400_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA400_4 = input.LA(1);
                        int index400_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA400_10 = input.LA(1);
                        int index400_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA400_8 = input.LA(1);
                        int index400_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA400_1 = input.LA(1);
                        int index400_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_1);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA400_3 = input.LA(1);
                        int index400_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA400_5 = input.LA(1);
                        int index400_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA400_6 = input.LA(1);
                        int index400_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 400, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_306s = "\114\uffff";
    static final String dfa_307s = "\1\77\113\uffff";
    static final String dfa_308s = "\1\4\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_309s = "\1\u0095\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_310s = "\1\uffff\17\1\1\uffff\36\1\1\uffff\14\1\1\uffff\2\1\1\2\14\uffff";
    static final String dfa_311s = "\1\0\17\uffff\1\1\36\uffff\1\2\14\uffff\1\3\17\uffff}>";
    static final String[] dfa_312s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\2\uffff\1\77\1\20\1\77\1\uffff\1\76\2\uffff\1\3\2\uffff\1\73\1\77\1\74\1\uffff\1\56\1\uffff\1\77\1\41\2\77\1\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_306 = DFA.unpackEncodedString(dfa_306s);
    static final short[] dfa_307 = DFA.unpackEncodedString(dfa_307s);
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final char[] dfa_309 = DFA.unpackEncodedStringToUnsignedChars(dfa_309s);
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[] dfa_311 = DFA.unpackEncodedString(dfa_311s);
    static final short[][] dfa_312 = unpackEncodedStringArray(dfa_312s);
    class DFA403 extends DFA {
        public DFA403(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 403;
            this.eot = dfa_306;
            this.eof = dfa_307;
            this.min = dfa_308;
            this.max = dfa_309;
            this.accept = dfa_310;
            this.special = dfa_311;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "25553:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA403_0 = input.LA(1);
                        int index403_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA403_0>=5 && LA403_0<=126 && (s=T2S.M_35[LA403_0-(5)])>=0) && (synpred259_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA403_0==Of) ) {s = 16;}
                        else if ((LA403_0>=4 && LA403_0<=149 && (s=T2S.M_36[LA403_0-(4)])>=0) && (synpred259_InternalN4JSParser())) { /* 31 cases */ }
                        else if ( (LA403_0==SolidusEqualsSign) ) {s = 47;}
                        else if ((LA403_0>=15 && LA403_0<=141 && (s=T2S.M_37[LA403_0-(15)])>=0) && (synpred259_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA403_0==HyphenMinus) ) {s = 60;}
                        else if ( (LA403_0==Tilde) && (synpred259_InternalN4JSParser())) {s = 61;}
                        else if ( (LA403_0==ExclamationMark) && (synpred259_InternalN4JSParser())) {s = 62;}
                        else if ( (LA403_0==EOF||LA403_0==LessThanSignLessThanSignEqualsSign||LA403_0==PercentSignEqualsSign||(LA403_0>=AmpersandEqualsSign && LA403_0<=AsteriskEqualsSign)||LA403_0==PlusSignEqualsSign||LA403_0==CircumflexAccentEqualsSign||LA403_0==In||LA403_0==VerticalLineEqualsSign||LA403_0==Comma||LA403_0==Semicolon||(LA403_0>=EqualsSign && LA403_0<=GreaterThanSign)) ) {s = 63;}
                        input.seek(index403_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA403_16 = input.LA(1);
                        int index403_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index403_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA403_47 = input.LA(1);
                        int index403_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index403_47);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA403_60 = input.LA(1);
                        int index403_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index403_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 403, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_313s = "\120\uffff";
    static final String dfa_314s = "\1\77\117\uffff";
    static final String dfa_315s = "\1\4\56\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_316s = "\1\u0099\56\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_317s = "\1\uffff\56\1\1\uffff\14\1\1\uffff\2\1\1\2\20\uffff";
    static final String dfa_318s = "\1\0\56\uffff\1\1\14\uffff\1\2\23\uffff}>";
    static final String[] dfa_319s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\3\uffff\1\20\1\77\1\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\77\1\74\1\uffff\1\56\2\77\1\41\2\77\1\uffff\1\2\1\60\1\77\1\uffff\1\61\1\uffff\1\77\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44\1\uffff\1\77\1\uffff\1\77",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_313 = DFA.unpackEncodedString(dfa_313s);
    static final short[] dfa_314 = DFA.unpackEncodedString(dfa_314s);
    static final char[] dfa_315 = DFA.unpackEncodedStringToUnsignedChars(dfa_315s);
    static final char[] dfa_316 = DFA.unpackEncodedStringToUnsignedChars(dfa_316s);
    static final short[] dfa_317 = DFA.unpackEncodedString(dfa_317s);
    static final short[] dfa_318 = DFA.unpackEncodedString(dfa_318s);
    static final short[][] dfa_319 = unpackEncodedStringArray(dfa_319s);
    class DFA405 extends DFA {
        public DFA405(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 405;
            this.eot = dfa_313;
            this.eof = dfa_314;
            this.min = dfa_315;
            this.max = dfa_316;
            this.accept = dfa_317;
            this.special = dfa_318;
            this.transition = dfa_319;
        }
        public String getDescription() {
            return "25615:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA405_0 = input.LA(1);
                        int index405_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA405_0>=4 && LA405_0<=149 && (s=T2S.M_38[LA405_0-(4)])>=0) && (synpred261_InternalN4JSParser())) { /* 46 cases */ }
                        else if ( (LA405_0==SolidusEqualsSign) ) {s = 47;}
                        else if ((LA405_0>=15 && LA405_0<=141 && (s=T2S.M_37[LA405_0-(15)])>=0) && (synpred261_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA405_0==HyphenMinus) ) {s = 60;}
                        else if ( (LA405_0==Tilde) && (synpred261_InternalN4JSParser())) {s = 61;}
                        else if ( (LA405_0==ExclamationMark) && (synpred261_InternalN4JSParser())) {s = 62;}
                        else if ( (LA405_0==EOF||LA405_0==LessThanSignLessThanSignEqualsSign||LA405_0==PercentSignEqualsSign||(LA405_0>=AmpersandEqualsSign && LA405_0<=AsteriskEqualsSign)||LA405_0==PlusSignEqualsSign||LA405_0==CircumflexAccentEqualsSign||LA405_0==VerticalLineEqualsSign||LA405_0==RightParenthesis||LA405_0==Comma||(LA405_0>=Colon && LA405_0<=Semicolon)||(LA405_0>=EqualsSign && LA405_0<=GreaterThanSign)||LA405_0==RightSquareBracket||LA405_0==RightCurlyBracket||LA405_0==RULE_ML_COMMENT||LA405_0==RULE_EOL) ) {s = 63;}
                        input.seek(index405_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA405_47 = input.LA(1);
                        int index405_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index405_47);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA405_60 = input.LA(1);
                        int index405_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index405_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 405, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_320s = "\136\uffff";
    static final String dfa_321s = "\1\2\135\uffff";
    static final String dfa_322s = "\1\4\1\0\134\uffff";
    static final String dfa_323s = "\1\u0095\1\0\134\uffff";
    static final String dfa_324s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_325s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_326s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_320 = DFA.unpackEncodedString(dfa_320s);
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final char[] dfa_322 = DFA.unpackEncodedStringToUnsignedChars(dfa_322s);
    static final char[] dfa_323 = DFA.unpackEncodedStringToUnsignedChars(dfa_323s);
    static final short[] dfa_324 = DFA.unpackEncodedString(dfa_324s);
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final short[][] dfa_326 = unpackEncodedStringArray(dfa_326s);
    class DFA437 extends DFA {
        public DFA437(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 437;
            this.eot = dfa_320;
            this.eof = dfa_321;
            this.min = dfa_322;
            this.max = dfa_323;
            this.accept = dfa_324;
            this.special = dfa_325;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "27990:3: ( ( ( LeftParenthesis )=>otherlv_1= LeftParenthesis ) ( ( (lv_args_2_0= ruleAnnotationArgument ) ) (otherlv_3= Comma ( (lv_args_4_0= ruleAnnotationArgument ) ) )* )? otherlv_5= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA437_1 = input.LA(1);
                        int index437_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 93;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index437_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 437, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_327s = "\12\uffff";
    static final String dfa_328s = "\1\uffff\7\11\2\uffff";
    static final String dfa_329s = "\1\10\7\4\2\uffff";
    static final String dfa_330s = "\1\176\7\u00a5\2\uffff";
    static final String dfa_331s = "\10\uffff\1\1\1\2";
    static final String dfa_332s = "\12\uffff}>";
    static final String[] dfa_333s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\12\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\12\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\12\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\12\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\12\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\12\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\12\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "",
            ""
    };
    static final short[] dfa_327 = DFA.unpackEncodedString(dfa_327s);
    static final short[] dfa_328 = DFA.unpackEncodedString(dfa_328s);
    static final char[] dfa_329 = DFA.unpackEncodedStringToUnsignedChars(dfa_329s);
    static final char[] dfa_330 = DFA.unpackEncodedStringToUnsignedChars(dfa_330s);
    static final short[] dfa_331 = DFA.unpackEncodedString(dfa_331s);
    static final short[] dfa_332 = DFA.unpackEncodedString(dfa_332s);
    static final short[][] dfa_333 = unpackEncodedStringArray(dfa_333s);
    class DFA443 extends DFA {
        public DFA443(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 443;
            this.eot = dfa_327;
            this.eof = dfa_328;
            this.min = dfa_329;
            this.max = dfa_330;
            this.accept = dfa_331;
            this.special = dfa_332;
            this.transition = dfa_333;
        }
        public String getDescription() {
            return "28391:3: ( ( ( ruleTypeReferenceName ) ) otherlv_1= FullStop )?";
        }
    }
    static final String dfa_334s = "\1\4\1\uffff\30\0\1\uffff\1\0\1\uffff\60\0\4\uffff";
    static final String dfa_335s = "\1\u0095\1\uffff\30\0\1\uffff\1\0\1\uffff\60\0\4\uffff";
    static final String dfa_336s = "\1\uffff\1\1\30\uffff\1\4\1\uffff\1\4\60\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_337s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\uffff\1\31\1\uffff\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\4\uffff}>";
    static final String[] dfa_338s = {
            "\1\27\1\24\1\102\1\56\1\15\1\103\1\4\1\7\1\41\1\42\1\6\1\52\1\17\1\47\1\50\1\2\1\3\1\43\1\46\1\54\1\5\1\60\1\10\1\62\1\16\1\65\1\33\1\14\1\35\1\37\1\40\1\11\1\74\1\61\1\63\1\26\1\67\1\71\1\13\1\36\1\45\1\75\1\100\1\72\1\22\1\73\1\23\1\12\1\70\4\uffff\1\51\1\30\1\76\1\57\1\104\1\31\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\5\uffff\1\115\1\uffff\1\34\7\uffff\1\32\3\uffff\1\1\1\114\2\uffff\1\25\2\uffff\1\21\3\uffff\1\106\1\uffff\1\112\1\110\1\111\2\uffff\1\113\1\uffff\1\20\2\uffff\1\105\23\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_334 = DFA.unpackEncodedStringToUnsignedChars(dfa_334s);
    static final char[] dfa_335 = DFA.unpackEncodedStringToUnsignedChars(dfa_335s);
    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final short[] dfa_337 = DFA.unpackEncodedString(dfa_337s);
    static final short[][] dfa_338 = unpackEncodedStringArray(dfa_338s);
    class DFA480 extends DFA {
        public DFA480(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 480;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_334;
            this.max = dfa_335;
            this.accept = dfa_336;
            this.special = dfa_337;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "29647:2: (this_AnnotatedN4MemberDeclaration_0= ruleAnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=>this_N4GetterDeclaration_1= ruleN4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= ruleN4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= ruleN4MethodDeclaration ) | this_N4FieldDeclaration_4= ruleN4FieldDeclaration | this_N4CallableConstructorDeclaration_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA480_0 = input.LA(1);
                        int index480_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA480_0>=4 && LA480_0<=126 && (s=T2S.M_40[LA480_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA480_0==LessThanSign) && (synpred280_InternalN4JSParser())) {s = 26;}
                        else if ( (LA480_0==Async) ) {s = 27;}
                        else if ( (LA480_0==Asterisk) && (synpred280_InternalN4JSParser())) {s = 28;}
                        else if ((LA480_0>=6 && LA480_0<=149 && (s=T2S.M_41[LA480_0-(6)])>=0)) { /* 50 cases */ }
                        input.seek(index480_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA480_2 = input.LA(1);
                        int index480_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA480_3 = input.LA(1);
                        int index480_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA480_4 = input.LA(1);
                        int index480_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA480_5 = input.LA(1);
                        int index480_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA480_6 = input.LA(1);
                        int index480_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA480_7 = input.LA(1);
                        int index480_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA480_8 = input.LA(1);
                        int index480_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA480_9 = input.LA(1);
                        int index480_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA480_10 = input.LA(1);
                        int index480_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA480_11 = input.LA(1);
                        int index480_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA480_12 = input.LA(1);
                        int index480_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA480_13 = input.LA(1);
                        int index480_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA480_14 = input.LA(1);
                        int index480_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA480_15 = input.LA(1);
                        int index480_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA480_16 = input.LA(1);
                        int index480_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA480_17 = input.LA(1);
                        int index480_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA480_18 = input.LA(1);
                        int index480_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA480_19 = input.LA(1);
                        int index480_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA480_20 = input.LA(1);
                        int index480_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA480_21 = input.LA(1);
                        int index480_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA480_22 = input.LA(1);
                        int index480_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA480_23 = input.LA(1);
                        int index480_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA480_24 = input.LA(1);
                        int index480_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA480_25 = input.LA(1);
                        int index480_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA480_27 = input.LA(1);
                        int index480_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA480_29 = input.LA(1);
                        int index480_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA480_30 = input.LA(1);
                        int index480_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA480_31 = input.LA(1);
                        int index480_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA480_32 = input.LA(1);
                        int index480_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA480_33 = input.LA(1);
                        int index480_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA480_34 = input.LA(1);
                        int index480_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA480_35 = input.LA(1);
                        int index480_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA480_36 = input.LA(1);
                        int index480_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA480_37 = input.LA(1);
                        int index480_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA480_38 = input.LA(1);
                        int index480_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA480_39 = input.LA(1);
                        int index480_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA480_40 = input.LA(1);
                        int index480_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA480_41 = input.LA(1);
                        int index480_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA480_42 = input.LA(1);
                        int index480_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA480_43 = input.LA(1);
                        int index480_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA480_44 = input.LA(1);
                        int index480_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA480_45 = input.LA(1);
                        int index480_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA480_46 = input.LA(1);
                        int index480_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA480_47 = input.LA(1);
                        int index480_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA480_48 = input.LA(1);
                        int index480_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA480_49 = input.LA(1);
                        int index480_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA480_50 = input.LA(1);
                        int index480_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA480_51 = input.LA(1);
                        int index480_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA480_52 = input.LA(1);
                        int index480_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA480_53 = input.LA(1);
                        int index480_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA480_54 = input.LA(1);
                        int index480_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA480_55 = input.LA(1);
                        int index480_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA480_56 = input.LA(1);
                        int index480_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA480_57 = input.LA(1);
                        int index480_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA480_58 = input.LA(1);
                        int index480_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA480_59 = input.LA(1);
                        int index480_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA480_60 = input.LA(1);
                        int index480_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA480_61 = input.LA(1);
                        int index480_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA480_62 = input.LA(1);
                        int index480_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA480_63 = input.LA(1);
                        int index480_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA480_64 = input.LA(1);
                        int index480_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA480_65 = input.LA(1);
                        int index480_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA480_66 = input.LA(1);
                        int index480_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA480_67 = input.LA(1);
                        int index480_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA480_68 = input.LA(1);
                        int index480_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA480_69 = input.LA(1);
                        int index480_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA480_70 = input.LA(1);
                        int index480_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA480_71 = input.LA(1);
                        int index480_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA480_72 = input.LA(1);
                        int index480_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA480_73 = input.LA(1);
                        int index480_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA480_74 = input.LA(1);
                        int index480_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA480_75 = input.LA(1);
                        int index480_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_75);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA480_76 = input.LA(1);
                        int index480_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index480_76);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 480, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA481 extends DFA {
        public DFA481(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 481;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_334;
            this.max = dfa_335;
            this.accept = dfa_336;
            this.special = dfa_337;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "29922:2: (this_AnnotatedN4MemberDeclaration_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=>this_N4GetterDeclaration_1= norm1_N4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= norm1_N4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= norm1_N4MethodDeclaration ) | this_N4FieldDeclaration_4= norm1_N4FieldDeclaration | this_N4CallableConstructorDeclaration_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA481_0 = input.LA(1);
                        int index481_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA481_0>=4 && LA481_0<=126 && (s=T2S.M_40[LA481_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA481_0==LessThanSign) && (synpred283_InternalN4JSParser())) {s = 26;}
                        else if ( (LA481_0==Async) ) {s = 27;}
                        else if ( (LA481_0==Asterisk) && (synpred283_InternalN4JSParser())) {s = 28;}
                        else if ((LA481_0>=6 && LA481_0<=149 && (s=T2S.M_41[LA481_0-(6)])>=0)) { /* 50 cases */ }
                        input.seek(index481_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA481_2 = input.LA(1);
                        int index481_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA481_3 = input.LA(1);
                        int index481_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA481_4 = input.LA(1);
                        int index481_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA481_5 = input.LA(1);
                        int index481_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA481_6 = input.LA(1);
                        int index481_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA481_7 = input.LA(1);
                        int index481_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA481_8 = input.LA(1);
                        int index481_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA481_9 = input.LA(1);
                        int index481_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA481_10 = input.LA(1);
                        int index481_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA481_11 = input.LA(1);
                        int index481_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA481_12 = input.LA(1);
                        int index481_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA481_13 = input.LA(1);
                        int index481_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA481_14 = input.LA(1);
                        int index481_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA481_15 = input.LA(1);
                        int index481_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA481_16 = input.LA(1);
                        int index481_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA481_17 = input.LA(1);
                        int index481_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA481_18 = input.LA(1);
                        int index481_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA481_19 = input.LA(1);
                        int index481_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA481_20 = input.LA(1);
                        int index481_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA481_21 = input.LA(1);
                        int index481_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA481_22 = input.LA(1);
                        int index481_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA481_23 = input.LA(1);
                        int index481_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA481_24 = input.LA(1);
                        int index481_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA481_25 = input.LA(1);
                        int index481_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA481_27 = input.LA(1);
                        int index481_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA481_29 = input.LA(1);
                        int index481_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA481_30 = input.LA(1);
                        int index481_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA481_31 = input.LA(1);
                        int index481_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA481_32 = input.LA(1);
                        int index481_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA481_33 = input.LA(1);
                        int index481_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA481_34 = input.LA(1);
                        int index481_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA481_35 = input.LA(1);
                        int index481_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA481_36 = input.LA(1);
                        int index481_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA481_37 = input.LA(1);
                        int index481_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA481_38 = input.LA(1);
                        int index481_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA481_39 = input.LA(1);
                        int index481_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA481_40 = input.LA(1);
                        int index481_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA481_41 = input.LA(1);
                        int index481_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA481_42 = input.LA(1);
                        int index481_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA481_43 = input.LA(1);
                        int index481_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA481_44 = input.LA(1);
                        int index481_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA481_45 = input.LA(1);
                        int index481_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA481_46 = input.LA(1);
                        int index481_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA481_47 = input.LA(1);
                        int index481_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA481_48 = input.LA(1);
                        int index481_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA481_49 = input.LA(1);
                        int index481_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA481_50 = input.LA(1);
                        int index481_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA481_51 = input.LA(1);
                        int index481_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA481_52 = input.LA(1);
                        int index481_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA481_53 = input.LA(1);
                        int index481_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA481_54 = input.LA(1);
                        int index481_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA481_55 = input.LA(1);
                        int index481_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA481_56 = input.LA(1);
                        int index481_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA481_57 = input.LA(1);
                        int index481_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA481_58 = input.LA(1);
                        int index481_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA481_59 = input.LA(1);
                        int index481_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA481_60 = input.LA(1);
                        int index481_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA481_61 = input.LA(1);
                        int index481_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA481_62 = input.LA(1);
                        int index481_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA481_63 = input.LA(1);
                        int index481_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA481_64 = input.LA(1);
                        int index481_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA481_65 = input.LA(1);
                        int index481_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA481_66 = input.LA(1);
                        int index481_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA481_67 = input.LA(1);
                        int index481_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA481_68 = input.LA(1);
                        int index481_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA481_69 = input.LA(1);
                        int index481_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA481_70 = input.LA(1);
                        int index481_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA481_71 = input.LA(1);
                        int index481_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA481_72 = input.LA(1);
                        int index481_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA481_73 = input.LA(1);
                        int index481_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA481_74 = input.LA(1);
                        int index481_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA481_75 = input.LA(1);
                        int index481_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_75);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA481_76 = input.LA(1);
                        int index481_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 28;}
                        else if ( (true) ) {s = 80;}
                        input.seek(index481_76);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 481, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_339s = "\1\4\30\0\2\uffff\61\0\3\uffff";
    static final String dfa_340s = "\1\u0095\30\0\2\uffff\61\0\3\uffff";
    static final String dfa_341s = "\31\uffff\2\3\61\uffff\1\1\1\2\1\4";
    static final String dfa_342s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\3\uffff}>";
    static final String[] dfa_343s = {
            "\1\26\1\23\1\101\1\55\1\14\1\102\1\3\1\6\1\40\1\41\1\5\1\51\1\16\1\46\1\47\1\1\1\2\1\42\1\45\1\53\1\4\1\57\1\7\1\61\1\15\1\64\1\33\1\13\1\34\1\36\1\37\1\10\1\73\1\60\1\62\1\25\1\66\1\70\1\12\1\35\1\44\1\74\1\77\1\71\1\21\1\72\1\22\1\11\1\67\4\uffff\1\50\1\27\1\75\1\56\1\103\1\30\1\63\1\65\21\uffff\1\76\1\43\1\52\1\54\1\100\7\uffff\1\32\7\uffff\1\31\4\uffff\1\113\2\uffff\1\24\2\uffff\1\20\3\uffff\1\105\1\uffff\1\111\1\107\1\110\2\uffff\1\112\1\uffff\1\17\2\uffff\1\104\23\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_339 = DFA.unpackEncodedStringToUnsignedChars(dfa_339s);
    static final char[] dfa_340 = DFA.unpackEncodedStringToUnsignedChars(dfa_340s);
    static final short[] dfa_341 = DFA.unpackEncodedString(dfa_341s);
    static final short[] dfa_342 = DFA.unpackEncodedString(dfa_342s);
    static final short[][] dfa_343 = unpackEncodedStringArray(dfa_343s);
    class DFA494 extends DFA {
        public DFA494(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 494;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_339;
            this.max = dfa_340;
            this.accept = dfa_341;
            this.special = dfa_342;
            this.transition = dfa_343;
        }
        public String getDescription() {
            return "30212:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= ruleFormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeVariables_18= ruleTypeVariables[$current] )? (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_22= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_23= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_24_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_25= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_26= Semicolon )? ) | ( () this_FieldDeclarationImpl_28= ruleFieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA494_0 = input.LA(1);
                        int index494_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA494_0>=4 && LA494_0<=126 && (s=T2S.M_44[LA494_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA494_0==LessThanSign) && (synpred289_InternalN4JSParser())) {s = 25;}
                        else if ( (LA494_0==Asterisk) && (synpred289_InternalN4JSParser())) {s = 26;}
                        else if ((LA494_0>=6 && LA494_0<=149 && (s=T2S.M_45[LA494_0-(6)])>=0)) { /* 49 cases */ }
                        input.seek(index494_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA494_1 = input.LA(1);
                        int index494_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA494_2 = input.LA(1);
                        int index494_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA494_3 = input.LA(1);
                        int index494_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA494_4 = input.LA(1);
                        int index494_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA494_5 = input.LA(1);
                        int index494_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA494_6 = input.LA(1);
                        int index494_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA494_7 = input.LA(1);
                        int index494_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA494_8 = input.LA(1);
                        int index494_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA494_9 = input.LA(1);
                        int index494_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA494_10 = input.LA(1);
                        int index494_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA494_11 = input.LA(1);
                        int index494_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA494_12 = input.LA(1);
                        int index494_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA494_13 = input.LA(1);
                        int index494_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA494_14 = input.LA(1);
                        int index494_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA494_15 = input.LA(1);
                        int index494_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA494_16 = input.LA(1);
                        int index494_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA494_17 = input.LA(1);
                        int index494_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA494_18 = input.LA(1);
                        int index494_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA494_19 = input.LA(1);
                        int index494_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA494_20 = input.LA(1);
                        int index494_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA494_21 = input.LA(1);
                        int index494_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA494_22 = input.LA(1);
                        int index494_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA494_23 = input.LA(1);
                        int index494_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA494_24 = input.LA(1);
                        int index494_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA494_27 = input.LA(1);
                        int index494_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA494_28 = input.LA(1);
                        int index494_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA494_29 = input.LA(1);
                        int index494_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA494_30 = input.LA(1);
                        int index494_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA494_31 = input.LA(1);
                        int index494_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA494_32 = input.LA(1);
                        int index494_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA494_33 = input.LA(1);
                        int index494_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA494_34 = input.LA(1);
                        int index494_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA494_35 = input.LA(1);
                        int index494_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA494_36 = input.LA(1);
                        int index494_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA494_37 = input.LA(1);
                        int index494_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA494_38 = input.LA(1);
                        int index494_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA494_39 = input.LA(1);
                        int index494_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA494_40 = input.LA(1);
                        int index494_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA494_41 = input.LA(1);
                        int index494_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA494_42 = input.LA(1);
                        int index494_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA494_43 = input.LA(1);
                        int index494_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA494_44 = input.LA(1);
                        int index494_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA494_45 = input.LA(1);
                        int index494_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA494_46 = input.LA(1);
                        int index494_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA494_47 = input.LA(1);
                        int index494_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA494_48 = input.LA(1);
                        int index494_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA494_49 = input.LA(1);
                        int index494_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA494_50 = input.LA(1);
                        int index494_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA494_51 = input.LA(1);
                        int index494_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA494_52 = input.LA(1);
                        int index494_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA494_53 = input.LA(1);
                        int index494_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA494_54 = input.LA(1);
                        int index494_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA494_55 = input.LA(1);
                        int index494_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA494_56 = input.LA(1);
                        int index494_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA494_57 = input.LA(1);
                        int index494_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA494_58 = input.LA(1);
                        int index494_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA494_59 = input.LA(1);
                        int index494_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA494_60 = input.LA(1);
                        int index494_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA494_61 = input.LA(1);
                        int index494_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA494_62 = input.LA(1);
                        int index494_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA494_63 = input.LA(1);
                        int index494_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA494_64 = input.LA(1);
                        int index494_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA494_65 = input.LA(1);
                        int index494_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA494_66 = input.LA(1);
                        int index494_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA494_67 = input.LA(1);
                        int index494_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA494_68 = input.LA(1);
                        int index494_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA494_69 = input.LA(1);
                        int index494_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA494_70 = input.LA(1);
                        int index494_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA494_71 = input.LA(1);
                        int index494_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA494_72 = input.LA(1);
                        int index494_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA494_73 = input.LA(1);
                        int index494_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA494_74 = input.LA(1);
                        int index494_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_74);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA494_75 = input.LA(1);
                        int index494_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index494_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 494, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_344s = "\1\2\121\uffff";
    static final String dfa_345s = "\1\4\1\0\120\uffff";
    static final String dfa_346s = "\1\u0095\1\0\120\uffff";
    static final String dfa_347s = "\2\uffff\1\2\116\uffff\1\1";
    static final String dfa_348s = "\1\uffff\1\0\120\uffff}>";
    static final String[] dfa_349s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_344 = DFA.unpackEncodedString(dfa_344s);
    static final char[] dfa_345 = DFA.unpackEncodedStringToUnsignedChars(dfa_345s);
    static final char[] dfa_346 = DFA.unpackEncodedStringToUnsignedChars(dfa_346s);
    static final short[] dfa_347 = DFA.unpackEncodedString(dfa_347s);
    static final short[] dfa_348 = DFA.unpackEncodedString(dfa_348s);
    static final short[][] dfa_349 = unpackEncodedStringArray(dfa_349s);
    class DFA483 extends DFA {
        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_196;
            this.eof = dfa_344;
            this.min = dfa_345;
            this.max = dfa_346;
            this.accept = dfa_347;
            this.special = dfa_348;
            this.transition = dfa_349;
        }
        public String getDescription() {
            return "30266:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA483_1 = input.LA(1);
                        int index483_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index483_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 483, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA487 extends DFA {
        public DFA487(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 487;
            this.eot = dfa_196;
            this.eof = dfa_344;
            this.min = dfa_345;
            this.max = dfa_346;
            this.accept = dfa_347;
            this.special = dfa_348;
            this.transition = dfa_349;
        }
        public String getDescription() {
            return "30549:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA487_1 = input.LA(1);
                        int index487_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index487_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 487, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_350s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_351s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_352s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_353s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_350 = DFA.unpackEncodedStringToUnsignedChars(dfa_350s);
    static final char[] dfa_351 = DFA.unpackEncodedStringToUnsignedChars(dfa_351s);
    static final short[] dfa_352 = DFA.unpackEncodedString(dfa_352s);
    static final short[][] dfa_353 = unpackEncodedStringArray(dfa_353s);
    class DFA489 extends DFA {
        public DFA489(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 489;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_353;
        }
        public String getDescription() {
            return "()* loopback of 30633:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }
    class DFA491 extends DFA {
        public DFA491(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 491;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "30665:7: (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    class DFA507 extends DFA {
        public DFA507(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 507;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_339;
            this.max = dfa_340;
            this.accept = dfa_341;
            this.special = dfa_342;
            this.transition = dfa_343;
        }
        public String getDescription() {
            return "30828:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= norm1_FormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeVariables_18= ruleTypeVariables[$current] )? (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_22= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_23= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_24_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_25= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_26= Semicolon )? ) | ( () this_FieldDeclarationImpl_28= norm1_FieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA507_0 = input.LA(1);
                        int index507_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA507_0>=4 && LA507_0<=126 && (s=T2S.M_44[LA507_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA507_0==LessThanSign) && (synpred297_InternalN4JSParser())) {s = 25;}
                        else if ( (LA507_0==Asterisk) && (synpred297_InternalN4JSParser())) {s = 26;}
                        else if ((LA507_0>=6 && LA507_0<=149 && (s=T2S.M_45[LA507_0-(6)])>=0)) { /* 49 cases */ }
                        input.seek(index507_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA507_1 = input.LA(1);
                        int index507_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA507_2 = input.LA(1);
                        int index507_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA507_3 = input.LA(1);
                        int index507_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA507_4 = input.LA(1);
                        int index507_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA507_5 = input.LA(1);
                        int index507_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA507_6 = input.LA(1);
                        int index507_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA507_7 = input.LA(1);
                        int index507_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA507_8 = input.LA(1);
                        int index507_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA507_9 = input.LA(1);
                        int index507_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA507_10 = input.LA(1);
                        int index507_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA507_11 = input.LA(1);
                        int index507_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA507_12 = input.LA(1);
                        int index507_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA507_13 = input.LA(1);
                        int index507_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA507_14 = input.LA(1);
                        int index507_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA507_15 = input.LA(1);
                        int index507_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA507_16 = input.LA(1);
                        int index507_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA507_17 = input.LA(1);
                        int index507_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA507_18 = input.LA(1);
                        int index507_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA507_19 = input.LA(1);
                        int index507_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA507_20 = input.LA(1);
                        int index507_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA507_21 = input.LA(1);
                        int index507_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA507_22 = input.LA(1);
                        int index507_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA507_23 = input.LA(1);
                        int index507_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA507_24 = input.LA(1);
                        int index507_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA507_27 = input.LA(1);
                        int index507_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA507_28 = input.LA(1);
                        int index507_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA507_29 = input.LA(1);
                        int index507_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA507_30 = input.LA(1);
                        int index507_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA507_31 = input.LA(1);
                        int index507_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA507_32 = input.LA(1);
                        int index507_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA507_33 = input.LA(1);
                        int index507_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA507_34 = input.LA(1);
                        int index507_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA507_35 = input.LA(1);
                        int index507_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA507_36 = input.LA(1);
                        int index507_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA507_37 = input.LA(1);
                        int index507_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA507_38 = input.LA(1);
                        int index507_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA507_39 = input.LA(1);
                        int index507_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA507_40 = input.LA(1);
                        int index507_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA507_41 = input.LA(1);
                        int index507_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA507_42 = input.LA(1);
                        int index507_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA507_43 = input.LA(1);
                        int index507_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA507_44 = input.LA(1);
                        int index507_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA507_45 = input.LA(1);
                        int index507_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA507_46 = input.LA(1);
                        int index507_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA507_47 = input.LA(1);
                        int index507_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA507_48 = input.LA(1);
                        int index507_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA507_49 = input.LA(1);
                        int index507_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA507_50 = input.LA(1);
                        int index507_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA507_51 = input.LA(1);
                        int index507_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA507_52 = input.LA(1);
                        int index507_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA507_53 = input.LA(1);
                        int index507_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA507_54 = input.LA(1);
                        int index507_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA507_55 = input.LA(1);
                        int index507_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA507_56 = input.LA(1);
                        int index507_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA507_57 = input.LA(1);
                        int index507_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA507_58 = input.LA(1);
                        int index507_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA507_59 = input.LA(1);
                        int index507_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA507_60 = input.LA(1);
                        int index507_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA507_61 = input.LA(1);
                        int index507_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA507_62 = input.LA(1);
                        int index507_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA507_63 = input.LA(1);
                        int index507_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA507_64 = input.LA(1);
                        int index507_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA507_65 = input.LA(1);
                        int index507_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA507_66 = input.LA(1);
                        int index507_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA507_67 = input.LA(1);
                        int index507_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA507_68 = input.LA(1);
                        int index507_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA507_69 = input.LA(1);
                        int index507_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA507_70 = input.LA(1);
                        int index507_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA507_71 = input.LA(1);
                        int index507_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA507_72 = input.LA(1);
                        int index507_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA507_73 = input.LA(1);
                        int index507_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA507_74 = input.LA(1);
                        int index507_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_74);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA507_75 = input.LA(1);
                        int index507_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index507_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 507, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_354s = "\1\4\1\0\117\uffff";
    static final String dfa_355s = "\1\u0095\1\0\117\uffff";
    static final String dfa_356s = "\2\uffff\1\2\115\uffff\1\1";
    static final String dfa_357s = "\1\uffff\1\0\117\uffff}>";
    static final String[] dfa_358s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_354 = DFA.unpackEncodedStringToUnsignedChars(dfa_354s);
    static final char[] dfa_355 = DFA.unpackEncodedStringToUnsignedChars(dfa_355s);
    static final short[] dfa_356 = DFA.unpackEncodedString(dfa_356s);
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[][] dfa_358 = unpackEncodedStringArray(dfa_358s);
    class DFA496 extends DFA {
        public DFA496(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 496;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "30882:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA496_1 = input.LA(1);
                        int index496_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index496_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 496, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA500 extends DFA {
        public DFA500(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 500;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "31165:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA500_1 = input.LA(1);
                        int index500_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index500_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 500, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA502 extends DFA {
        public DFA502(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 502;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_353;
        }
        public String getDescription() {
            return "()* loopback of 31249:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }
    class DFA504 extends DFA {
        public DFA504(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 504;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "31281:7: (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_359s = "\2\uffff\10\1\1\uffff";
    static final String dfa_360s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_361s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\24\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_359 = DFA.unpackEncodedString(dfa_359s);
    static final char[] dfa_360 = DFA.unpackEncodedStringToUnsignedChars(dfa_360s);
    static final short[][] dfa_361 = unpackEncodedStringArray(dfa_361s);
    class DFA508 extends DFA {
        public DFA508(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 508;
            this.eot = dfa_13;
            this.eof = dfa_359;
            this.min = dfa_350;
            this.max = dfa_360;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_361;
        }
        public String getDescription() {
            return "()* loopback of 31436:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_362s = "\1\uffff\7\16\1\uffff\5\16\1\uffff\1\16";
    static final String dfa_363s = "\1\u0095\7\u00a5\1\uffff\5\u0099\1\uffff\1\u0099";
    static final String[] dfa_364s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\23\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\2\16\1\uffff\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\15\uffff\2\16\1\uffff\1\16\3\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\1\uffff\1\16\1\uffff\1\16"
    };
    static final short[] dfa_362 = DFA.unpackEncodedString(dfa_362s);
    static final char[] dfa_363 = DFA.unpackEncodedStringToUnsignedChars(dfa_363s);
    static final short[][] dfa_364 = unpackEncodedStringArray(dfa_364s);
    class DFA509 extends DFA {
        public DFA509(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 509;
            this.eot = dfa_218;
            this.eof = dfa_362;
            this.min = dfa_219;
            this.max = dfa_363;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_364;
        }
        public String getDescription() {
            return "31455:3: (this_BogusTypeRefFragment_1= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    class DFA513 extends DFA {
        public DFA513(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 513;
            this.eot = dfa_13;
            this.eof = dfa_359;
            this.min = dfa_350;
            this.max = dfa_360;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_361;
        }
        public String getDescription() {
            return "()* loopback of 31559:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    class DFA514 extends DFA {
        public DFA514(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 514;
            this.eot = dfa_218;
            this.eof = dfa_362;
            this.min = dfa_219;
            this.max = dfa_363;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_364;
        }
        public String getDescription() {
            return "31578:3: (this_BogusTypeRefFragment_1= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String[] dfa_365s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\11\uffff\1\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final short[][] dfa_365 = unpackEncodedStringArray(dfa_365s);
    class DFA518 extends DFA {
        public DFA518(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 518;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "()* loopback of 31803:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    class DFA522 extends DFA {
        public DFA522(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 522;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "()* loopback of 32001:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    class DFA531 extends DFA {
        public DFA531(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 531;
            this.eot = dfa_196;
            this.eof = dfa_344;
            this.min = dfa_345;
            this.max = dfa_346;
            this.accept = dfa_347;
            this.special = dfa_348;
            this.transition = dfa_349;
        }
        public String getDescription() {
            return "32340:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA531_1 = input.LA(1);
                        int index531_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index531_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 531, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA533 extends DFA {
        public DFA533(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 533;
            this.eot = dfa_196;
            this.eof = dfa_344;
            this.min = dfa_345;
            this.max = dfa_346;
            this.accept = dfa_347;
            this.special = dfa_348;
            this.transition = dfa_349;
        }
        public String getDescription() {
            return "32402:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA533_1 = input.LA(1);
                        int index533_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index533_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 533, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA535 extends DFA {
        public DFA535(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 535;
            this.eot = dfa_196;
            this.eof = dfa_344;
            this.min = dfa_345;
            this.max = dfa_346;
            this.accept = dfa_347;
            this.special = dfa_348;
            this.transition = dfa_349;
        }
        public String getDescription() {
            return "32498:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_3_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA535_1 = input.LA(1);
                        int index535_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index535_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 535, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA538 extends DFA {
        public DFA538(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 538;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "32594:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_3_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA538_1 = input.LA(1);
                        int index538_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index538_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 538, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA548 extends DFA {
        public DFA548(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 548;
            this.eot = dfa_196;
            this.eof = dfa_344;
            this.min = dfa_345;
            this.max = dfa_346;
            this.accept = dfa_347;
            this.special = dfa_348;
            this.transition = dfa_349;
        }
        public String getDescription() {
            return "33063:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA548_1 = input.LA(1);
                        int index548_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index548_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 548, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA552 extends DFA {
        public DFA552(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 552;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "33356:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA552_1 = input.LA(1);
                        int index552_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index552_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 552, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_366s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_367s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_366 = DFA.unpackEncodedStringToUnsignedChars(dfa_366s);
    static final short[][] dfa_367 = unpackEncodedStringArray(dfa_367s);
    class DFA562 extends DFA {
        public DFA562(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 562;
            this.eot = dfa_184;
            this.eof = dfa_184;
            this.min = dfa_185;
            this.max = dfa_366;
            this.accept = dfa_187;
            this.special = dfa_188;
            this.transition = dfa_367;
        }
        public String getDescription() {
            return "()* loopback of 33676:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_368s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_368 = unpackEncodedStringArray(dfa_368s);
    class DFA568 extends DFA {
        public DFA568(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 568;
            this.eot = dfa_184;
            this.eof = dfa_184;
            this.min = dfa_185;
            this.max = dfa_366;
            this.accept = dfa_187;
            this.special = dfa_188;
            this.transition = dfa_368;
        }
        public String getDescription() {
            return "()* loopback of 33813:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_369s = "\112\uffff";
    static final String dfa_370s = "\1\uffff\1\110\40\uffff\1\110\4\uffff\31\110\12\uffff";
    static final String dfa_371s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\12\uffff";
    static final String dfa_372s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\12\uffff";
    static final String dfa_373s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\10\1\1\2\1\1";
    static final String dfa_374s = "\1\25\1\15\40\uffff\1\6\4\uffff\1\21\1\26\1\31\1\0\1\3\1\7\1\12\1\16\1\22\1\27\1\32\1\1\1\4\1\10\1\13\1\17\1\23\1\30\1\33\1\2\1\5\1\11\1\14\1\20\1\24\12\uffff}>";
    static final String[] dfa_375s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\110\1\107\11\uffff\1\101\1\uffff\1\105\1\103\1\104\2\uffff\1\106\1\uffff\1\1\2\uffff\1\100\23\uffff\1\102",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "",
            "",
            "",
            "",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_369 = DFA.unpackEncodedString(dfa_369s);
    static final short[] dfa_370 = DFA.unpackEncodedString(dfa_370s);
    static final char[] dfa_371 = DFA.unpackEncodedStringToUnsignedChars(dfa_371s);
    static final char[] dfa_372 = DFA.unpackEncodedStringToUnsignedChars(dfa_372s);
    static final short[] dfa_373 = DFA.unpackEncodedString(dfa_373s);
    static final short[] dfa_374 = DFA.unpackEncodedString(dfa_374s);
    static final short[][] dfa_375 = unpackEncodedStringArray(dfa_375s);
    class DFA572 extends DFA {
        public DFA572(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 572;
            this.eot = dfa_369;
            this.eof = dfa_370;
            this.min = dfa_371;
            this.max = dfa_372;
            this.accept = dfa_373;
            this.special = dfa_374;
            this.transition = dfa_375;
        }
        public String getDescription() {
            return "33905:2: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= ruleLiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= ruleBindingElement ) ) ) | ( (lv_value_3_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA572_42 = input.LA(1);
                        int index572_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_42==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_42==EOF||LA572_42==Comma||LA572_42==EqualsSign||LA572_42==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_42);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA572_50 = input.LA(1);
                        int index572_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_50==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_50==EOF||LA572_50==Comma||LA572_50==EqualsSign||LA572_50==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_50);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA572_58 = input.LA(1);
                        int index572_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_58==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_58==EOF||LA572_58==Comma||LA572_58==EqualsSign||LA572_58==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_58);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA572_43 = input.LA(1);
                        int index572_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_43==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_43==EOF||LA572_43==Comma||LA572_43==EqualsSign||LA572_43==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA572_51 = input.LA(1);
                        int index572_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_51==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_51==EOF||LA572_51==Comma||LA572_51==EqualsSign||LA572_51==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_51);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA572_59 = input.LA(1);
                        int index572_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_59==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_59==EOF||LA572_59==Comma||LA572_59==EqualsSign||LA572_59==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_59);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA572_34 = input.LA(1);
                        int index572_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_34==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_34==EOF||LA572_34==Comma||LA572_34==EqualsSign||LA572_34==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_34);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA572_44 = input.LA(1);
                        int index572_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_44==EOF||LA572_44==Comma||LA572_44==EqualsSign||LA572_44==RightCurlyBracket) ) {s = 72;}
                        else if ( (LA572_44==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        input.seek(index572_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA572_52 = input.LA(1);
                        int index572_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_52==EOF||LA572_52==Comma||LA572_52==EqualsSign||LA572_52==RightCurlyBracket) ) {s = 72;}
                        else if ( (LA572_52==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        input.seek(index572_52);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA572_60 = input.LA(1);
                        int index572_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_60==EOF||LA572_60==Comma||LA572_60==EqualsSign||LA572_60==RightCurlyBracket) ) {s = 72;}
                        else if ( (LA572_60==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        input.seek(index572_60);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA572_45 = input.LA(1);
                        int index572_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_45==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_45==EOF||LA572_45==Comma||LA572_45==EqualsSign||LA572_45==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_45);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA572_53 = input.LA(1);
                        int index572_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_53==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_53==EOF||LA572_53==Comma||LA572_53==EqualsSign||LA572_53==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA572_61 = input.LA(1);
                        int index572_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_61==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_61==EOF||LA572_61==Comma||LA572_61==EqualsSign||LA572_61==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_61);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA572_1 = input.LA(1);
                        int index572_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_1==EOF||LA572_1==Comma||LA572_1==EqualsSign||LA572_1==RightCurlyBracket) ) {s = 72;}
                        else if ( (LA572_1==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        input.seek(index572_1);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA572_46 = input.LA(1);
                        int index572_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_46==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_46==EOF||LA572_46==Comma||LA572_46==EqualsSign||LA572_46==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_46);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA572_54 = input.LA(1);
                        int index572_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_54==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_54==EOF||LA572_54==Comma||LA572_54==EqualsSign||LA572_54==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA572_62 = input.LA(1);
                        int index572_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_62==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_62==EOF||LA572_62==Comma||LA572_62==EqualsSign||LA572_62==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_62);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA572_39 = input.LA(1);
                        int index572_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_39==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_39==EOF||LA572_39==Comma||LA572_39==EqualsSign||LA572_39==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_39);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA572_47 = input.LA(1);
                        int index572_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_47==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_47==EOF||LA572_47==Comma||LA572_47==EqualsSign||LA572_47==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_47);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA572_55 = input.LA(1);
                        int index572_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_55==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_55==EOF||LA572_55==Comma||LA572_55==EqualsSign||LA572_55==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_55);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA572_63 = input.LA(1);
                        int index572_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_63==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_63==EOF||LA572_63==Comma||LA572_63==EqualsSign||LA572_63==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_63);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA572_0 = input.LA(1);
                        int index572_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA572_0>=7 && LA572_0<=126 && (s=T2S.M_48[LA572_0-(7)])>=0) && (synpred322_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA572_0==Yield) ) {s = 34;}
                        else if ( (LA572_0==Null) && (synpred322_InternalN4JSParser())) {s = 35;}
                        else if ( (LA572_0==True) && (synpred322_InternalN4JSParser())) {s = 36;}
                        else if ( (LA572_0==False) && (synpred322_InternalN4JSParser())) {s = 37;}
                        else if ( (LA572_0==Enum) && (synpred322_InternalN4JSParser())) {s = 38;}
                        else if ((LA572_0>=4 && LA572_0<=86 && (s=T2S.M_49[LA572_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA572_0==RULE_STRING) && (synpred322_InternalN4JSParser())) {s = 64;}
                        else if ( (LA572_0==RULE_DOUBLE) && (synpred322_InternalN4JSParser())) {s = 65;}
                        else if ( (LA572_0==RULE_INT) && (synpred322_InternalN4JSParser())) {s = 66;}
                        else if ( (LA572_0==RULE_BINARY_INT) && (synpred322_InternalN4JSParser())) {s = 67;}
                        else if ( (LA572_0==RULE_OCTAL_INT) && (synpred322_InternalN4JSParser())) {s = 68;}
                        else if ( (LA572_0==RULE_HEX_INT) && (synpred322_InternalN4JSParser())) {s = 69;}
                        else if ( (LA572_0==RULE_SCIENTIFIC_INT) && (synpred322_InternalN4JSParser())) {s = 70;}
                        else if ( (LA572_0==LeftSquareBracket) && (synpred322_InternalN4JSParser())) {s = 71;}
                        else if ( (LA572_0==CommercialAt) ) {s = 72;}
                        input.seek(index572_0);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA572_40 = input.LA(1);
                        int index572_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_40==EOF||LA572_40==Comma||LA572_40==EqualsSign||LA572_40==RightCurlyBracket) ) {s = 72;}
                        else if ( (LA572_40==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        input.seek(index572_40);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA572_48 = input.LA(1);
                        int index572_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_48==EOF||LA572_48==Comma||LA572_48==EqualsSign||LA572_48==RightCurlyBracket) ) {s = 72;}
                        else if ( (LA572_48==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        input.seek(index572_48);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA572_56 = input.LA(1);
                        int index572_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_56==EOF||LA572_56==Comma||LA572_56==EqualsSign||LA572_56==RightCurlyBracket) ) {s = 72;}
                        else if ( (LA572_56==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        input.seek(index572_56);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA572_41 = input.LA(1);
                        int index572_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_41==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_41==EOF||LA572_41==Comma||LA572_41==EqualsSign||LA572_41==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_41);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA572_49 = input.LA(1);
                        int index572_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_49==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_49==EOF||LA572_49==Comma||LA572_49==EqualsSign||LA572_49==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_49);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA572_57 = input.LA(1);
                        int index572_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA572_57==Colon) && (synpred322_InternalN4JSParser())) {s = 73;}
                        else if ( (LA572_57==EOF||LA572_57==Comma||LA572_57==EqualsSign||LA572_57==RightCurlyBracket) ) {s = 72;}
                        input.seek(index572_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 572, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_376s = "\1\4\1\140\45\uffff\31\140\12\uffff";
    static final String dfa_377s = "\1\u0095\1\160\45\uffff\31\160\12\uffff";
    static final String dfa_378s = "\2\uffff\45\1\31\uffff\10\1\1\2\1\1";
    static final String dfa_379s = "\1\21\1\11\45\uffff\1\12\1\16\1\22\1\25\1\30\1\0\1\3\1\6\1\13\1\17\1\23\1\26\1\31\1\1\1\4\1\7\1\14\1\20\1\24\1\27\1\32\1\2\1\5\1\10\1\15\12\uffff}>";
    static final String[] dfa_380s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\110\1\107\11\uffff\1\101\1\uffff\1\105\1\103\1\104\2\uffff\1\106\1\uffff\1\1\2\uffff\1\100\23\uffff\1\102",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "\1\110\3\uffff\1\111\2\uffff\1\110\10\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_376 = DFA.unpackEncodedStringToUnsignedChars(dfa_376s);
    static final char[] dfa_377 = DFA.unpackEncodedStringToUnsignedChars(dfa_377s);
    static final short[] dfa_378 = DFA.unpackEncodedString(dfa_378s);
    static final short[] dfa_379 = DFA.unpackEncodedString(dfa_379s);
    static final short[][] dfa_380 = unpackEncodedStringArray(dfa_380s);
    class DFA573 extends DFA {
        public DFA573(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 573;
            this.eot = dfa_369;
            this.eof = dfa_369;
            this.min = dfa_376;
            this.max = dfa_377;
            this.accept = dfa_378;
            this.special = dfa_379;
            this.transition = dfa_380;
        }
        public String getDescription() {
            return "33995:2: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= norm1_BindingElement ) ) ) | ( (lv_value_3_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA573_44 = input.LA(1);
                        int index573_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_44==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_44==Comma||LA573_44==EqualsSign||LA573_44==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA573_52 = input.LA(1);
                        int index573_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_52==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_52==Comma||LA573_52==EqualsSign||LA573_52==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_52);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA573_60 = input.LA(1);
                        int index573_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_60==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_60==Comma||LA573_60==EqualsSign||LA573_60==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_60);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA573_45 = input.LA(1);
                        int index573_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_45==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_45==Comma||LA573_45==EqualsSign||LA573_45==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_45);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA573_53 = input.LA(1);
                        int index573_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_53==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_53==Comma||LA573_53==EqualsSign||LA573_53==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_53);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA573_61 = input.LA(1);
                        int index573_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_61==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_61==Comma||LA573_61==EqualsSign||LA573_61==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_61);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA573_46 = input.LA(1);
                        int index573_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_46==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_46==Comma||LA573_46==EqualsSign||LA573_46==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA573_54 = input.LA(1);
                        int index573_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_54==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_54==Comma||LA573_54==EqualsSign||LA573_54==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_54);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA573_62 = input.LA(1);
                        int index573_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_62==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_62==Comma||LA573_62==EqualsSign||LA573_62==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_62);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA573_1 = input.LA(1);
                        int index573_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_1==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_1==Comma||LA573_1==EqualsSign||LA573_1==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_1);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA573_39 = input.LA(1);
                        int index573_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_39==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_39==Comma||LA573_39==EqualsSign||LA573_39==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_39);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA573_47 = input.LA(1);
                        int index573_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_47==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_47==Comma||LA573_47==EqualsSign||LA573_47==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_47);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA573_55 = input.LA(1);
                        int index573_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_55==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_55==Comma||LA573_55==EqualsSign||LA573_55==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA573_63 = input.LA(1);
                        int index573_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_63==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_63==Comma||LA573_63==EqualsSign||LA573_63==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_63);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA573_40 = input.LA(1);
                        int index573_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_40==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_40==Comma||LA573_40==EqualsSign||LA573_40==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_40);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA573_48 = input.LA(1);
                        int index573_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_48==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_48==Comma||LA573_48==EqualsSign||LA573_48==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA573_56 = input.LA(1);
                        int index573_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_56==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_56==Comma||LA573_56==EqualsSign||LA573_56==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA573_0 = input.LA(1);
                        int index573_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA573_0>=7 && LA573_0<=126 && (s=T2S.M_50[LA573_0-(7)])>=0) && (synpred323_InternalN4JSParser())) { /* 38 cases */ }
                        else if ((LA573_0>=4 && LA573_0<=86 && (s=T2S.M_49[LA573_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA573_0==RULE_STRING) && (synpred323_InternalN4JSParser())) {s = 64;}
                        else if ( (LA573_0==RULE_DOUBLE) && (synpred323_InternalN4JSParser())) {s = 65;}
                        else if ( (LA573_0==RULE_INT) && (synpred323_InternalN4JSParser())) {s = 66;}
                        else if ( (LA573_0==RULE_BINARY_INT) && (synpred323_InternalN4JSParser())) {s = 67;}
                        else if ( (LA573_0==RULE_OCTAL_INT) && (synpred323_InternalN4JSParser())) {s = 68;}
                        else if ( (LA573_0==RULE_HEX_INT) && (synpred323_InternalN4JSParser())) {s = 69;}
                        else if ( (LA573_0==RULE_SCIENTIFIC_INT) && (synpred323_InternalN4JSParser())) {s = 70;}
                        else if ( (LA573_0==LeftSquareBracket) && (synpred323_InternalN4JSParser())) {s = 71;}
                        else if ( (LA573_0==CommercialAt) ) {s = 72;}
                        input.seek(index573_0);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA573_41 = input.LA(1);
                        int index573_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_41==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_41==Comma||LA573_41==EqualsSign||LA573_41==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_41);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA573_49 = input.LA(1);
                        int index573_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_49==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_49==Comma||LA573_49==EqualsSign||LA573_49==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_49);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA573_57 = input.LA(1);
                        int index573_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_57==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_57==Comma||LA573_57==EqualsSign||LA573_57==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA573_42 = input.LA(1);
                        int index573_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_42==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_42==Comma||LA573_42==EqualsSign||LA573_42==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_42);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA573_50 = input.LA(1);
                        int index573_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_50==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_50==Comma||LA573_50==EqualsSign||LA573_50==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_50);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA573_58 = input.LA(1);
                        int index573_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_58==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_58==Comma||LA573_58==EqualsSign||LA573_58==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_58);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA573_43 = input.LA(1);
                        int index573_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_43==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_43==Comma||LA573_43==EqualsSign||LA573_43==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA573_51 = input.LA(1);
                        int index573_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_51==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_51==Comma||LA573_51==EqualsSign||LA573_51==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_51);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA573_59 = input.LA(1);
                        int index573_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA573_59==Colon) && (synpred323_InternalN4JSParser())) {s = 73;}
                        else if ( (LA573_59==Comma||LA573_59==EqualsSign||LA573_59==RightCurlyBracket) ) {s = 72;}
                        input.seek(index573_59);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 573, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_381s = "\107\uffff";
    static final String dfa_382s = "\1\106\106\uffff";
    static final String dfa_383s = "\1\4\6\uffff\77\0\1\uffff";
    static final String dfa_384s = "\1\u0095\6\uffff\77\0\1\uffff";
    static final String dfa_385s = "\1\uffff\6\1\77\uffff\1\2";
    static final String dfa_386s = "\1\57\6\uffff\1\3\1\64\1\53\1\42\1\33\1\22\1\13\1\5\1\74\1\63\1\52\1\43\1\34\1\23\1\14\1\4\1\75\1\65\1\54\1\44\1\32\1\24\1\15\1\6\1\76\1\66\1\55\1\45\1\35\1\25\1\16\1\7\1\77\1\67\1\56\1\46\1\36\1\26\1\70\1\60\1\47\1\37\1\27\1\17\1\10\1\0\1\71\1\61\1\50\1\40\1\30\1\20\1\11\1\1\1\72\1\62\1\51\1\41\1\31\1\21\1\12\1\2\1\73\1\uffff}>";
    static final String[] dfa_387s = {
            "\1\73\1\66\1\100\1\33\1\75\1\101\1\103\1\62\1\15\1\16\1\61\1\27\1\17\1\24\1\25\1\102\1\60\1\20\1\23\1\31\1\104\1\35\1\63\1\37\1\70\1\43\1\77\1\76\1\10\1\12\1\13\1\14\1\53\1\36\1\41\1\72\1\46\1\50\1\74\1\11\1\22\1\54\1\65\1\51\1\40\1\52\1\71\1\45\1\47\4\uffff\1\26\1\55\1\57\1\34\1\105\1\56\1\42\1\44\7\uffff\1\106\11\uffff\1\64\1\21\1\30\1\32\1\67\12\uffff\1\106\1\uffff\1\106\3\uffff\2\106\5\uffff\1\106\10\uffff\1\2\1\3\1\4\1\6\1\uffff\1\5\1\uffff\1\7\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_381 = DFA.unpackEncodedString(dfa_381s);
    static final short[] dfa_382 = DFA.unpackEncodedString(dfa_382s);
    static final char[] dfa_383 = DFA.unpackEncodedStringToUnsignedChars(dfa_383s);
    static final char[] dfa_384 = DFA.unpackEncodedStringToUnsignedChars(dfa_384s);
    static final short[] dfa_385 = DFA.unpackEncodedString(dfa_385s);
    static final short[] dfa_386 = DFA.unpackEncodedString(dfa_386s);
    static final short[][] dfa_387 = unpackEncodedStringArray(dfa_387s);
    class DFA591 extends DFA {
        public DFA591(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 591;
            this.eot = dfa_381;
            this.eof = dfa_382;
            this.min = dfa_383;
            this.max = dfa_384;
            this.accept = dfa_385;
            this.special = dfa_386;
            this.transition = dfa_387;
        }
        public String getDescription() {
            return "35241:4: ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | RULE_IDENTIFIER )=> (this_INT_3= RULE_INT | this_HEX_INT_4= RULE_HEX_INT | this_BINARY_INT_5= RULE_BINARY_INT | this_OCTAL_INT_6= RULE_OCTAL_INT | this_SCIENTIFIC_INT_7= RULE_SCIENTIFIC_INT | this_LEGACY_OCTAL_INT_8= RULE_LEGACY_OCTAL_INT | this_IdentifierName_9= ruleIdentifierName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA591_52 = input.LA(1);
                        int index591_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_52);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA591_60 = input.LA(1);
                        int index591_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_60);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA591_68 = input.LA(1);
                        int index591_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_68);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA591_7 = input.LA(1);
                        int index591_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA591_22 = input.LA(1);
                        int index591_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA591_14 = input.LA(1);
                        int index591_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA591_30 = input.LA(1);
                        int index591_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_30);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA591_38 = input.LA(1);
                        int index591_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_38);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA591_51 = input.LA(1);
                        int index591_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_51);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA591_59 = input.LA(1);
                        int index591_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_59);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA591_67 = input.LA(1);
                        int index591_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_67);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA591_13 = input.LA(1);
                        int index591_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA591_21 = input.LA(1);
                        int index591_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_21);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA591_29 = input.LA(1);
                        int index591_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA591_37 = input.LA(1);
                        int index591_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_37);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA591_50 = input.LA(1);
                        int index591_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_50);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA591_58 = input.LA(1);
                        int index591_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA591_66 = input.LA(1);
                        int index591_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_66);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA591_12 = input.LA(1);
                        int index591_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_12);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA591_20 = input.LA(1);
                        int index591_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA591_28 = input.LA(1);
                        int index591_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_28);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA591_36 = input.LA(1);
                        int index591_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_36);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA591_44 = input.LA(1);
                        int index591_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_44);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA591_49 = input.LA(1);
                        int index591_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_49);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA591_57 = input.LA(1);
                        int index591_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_57);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA591_65 = input.LA(1);
                        int index591_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_65);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA591_27 = input.LA(1);
                        int index591_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA591_11 = input.LA(1);
                        int index591_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_11);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA591_19 = input.LA(1);
                        int index591_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_19);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA591_35 = input.LA(1);
                        int index591_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_35);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA591_43 = input.LA(1);
                        int index591_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_43);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA591_48 = input.LA(1);
                        int index591_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_48);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA591_56 = input.LA(1);
                        int index591_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_56);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA591_64 = input.LA(1);
                        int index591_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_64);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA591_10 = input.LA(1);
                        int index591_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_10);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA591_18 = input.LA(1);
                        int index591_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_18);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA591_26 = input.LA(1);
                        int index591_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_26);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA591_34 = input.LA(1);
                        int index591_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_34);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA591_42 = input.LA(1);
                        int index591_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_42);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA591_47 = input.LA(1);
                        int index591_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_47);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA591_55 = input.LA(1);
                        int index591_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_55);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA591_63 = input.LA(1);
                        int index591_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_63);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA591_17 = input.LA(1);
                        int index591_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_17);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA591_9 = input.LA(1);
                        int index591_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_9);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA591_25 = input.LA(1);
                        int index591_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_25);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA591_33 = input.LA(1);
                        int index591_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_33);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA591_41 = input.LA(1);
                        int index591_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_41);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA591_0 = input.LA(1);
                        int index591_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA591_0==RULE_INT) && (synpred326_InternalN4JSParser())) {s = 1;}
                        else if ( (LA591_0==RULE_HEX_INT) && (synpred326_InternalN4JSParser())) {s = 2;}
                        else if ( (LA591_0==RULE_BINARY_INT) && (synpred326_InternalN4JSParser())) {s = 3;}
                        else if ( (LA591_0==RULE_OCTAL_INT) && (synpred326_InternalN4JSParser())) {s = 4;}
                        else if ( (LA591_0==RULE_SCIENTIFIC_INT) && (synpred326_InternalN4JSParser())) {s = 5;}
                        else if ( (LA591_0==RULE_LEGACY_OCTAL_INT) && (synpred326_InternalN4JSParser())) {s = 6;}
                        else if ((LA591_0>=4 && LA591_0<=126 && (s=T2S.M_52[LA591_0-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA591_0==EOF||LA591_0==HyphenMinusHyphenMinus||LA591_0==HyphenMinus||LA591_0==Solidus||(LA591_0>=EqualsSign && LA591_0<=GreaterThanSign)||LA591_0==LeftCurlyBracket) ) {s = 70;}
                        input.seek(index591_0);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA591_46 = input.LA(1);
                        int index591_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_46);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA591_54 = input.LA(1);
                        int index591_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_54);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA591_62 = input.LA(1);
                        int index591_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_62);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA591_16 = input.LA(1);
                        int index591_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_16);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA591_8 = input.LA(1);
                        int index591_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_8);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA591_24 = input.LA(1);
                        int index591_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_24);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA591_32 = input.LA(1);
                        int index591_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_32);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA591_40 = input.LA(1);
                        int index591_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_40);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA591_45 = input.LA(1);
                        int index591_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_45);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA591_53 = input.LA(1);
                        int index591_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_53);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA591_61 = input.LA(1);
                        int index591_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA591_69 = input.LA(1);
                        int index591_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_69);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA591_15 = input.LA(1);
                        int index591_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_15);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA591_23 = input.LA(1);
                        int index591_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_23);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA591_31 = input.LA(1);
                        int index591_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_31);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA591_39 = input.LA(1);
                        int index591_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index591_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 591, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_388s = "\23\uffff";
    static final String dfa_389s = "\1\4\1\0\21\uffff";
    static final String dfa_390s = "\1\176\1\0\21\uffff";
    static final String dfa_391s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_392s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_393s = {
            "\2\3\2\uffff\1\3\7\uffff\1\3\13\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\16\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_388 = DFA.unpackEncodedString(dfa_388s);
    static final char[] dfa_389 = DFA.unpackEncodedStringToUnsignedChars(dfa_389s);
    static final char[] dfa_390 = DFA.unpackEncodedStringToUnsignedChars(dfa_390s);
    static final short[] dfa_391 = DFA.unpackEncodedString(dfa_391s);
    static final short[] dfa_392 = DFA.unpackEncodedString(dfa_392s);
    static final short[][] dfa_393 = unpackEncodedStringArray(dfa_393s);
    class DFA603 extends DFA {
        public DFA603(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 603;
            this.eot = dfa_388;
            this.eof = dfa_388;
            this.min = dfa_389;
            this.max = dfa_390;
            this.accept = dfa_391;
            this.special = dfa_392;
            this.transition = dfa_393;
        }
        public String getDescription() {
            return "35857:2: ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_0= ruleArrowFunctionTypeExpression ) | this_IterableTypeExpression_1= ruleIterableTypeExpression | this_TypeRefWithModifiers_2= ruleTypeRefWithModifiers | (otherlv_3= LeftParenthesis this_TypeRef_4= ruleTypeRef otherlv_5= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA603_1 = input.LA(1);
                        int index603_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index603_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 603, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_394s = "\173\uffff";
    static final String dfa_395s = "\1\2\172\uffff";
    static final String dfa_396s = "\1\4\1\0\171\uffff";
    static final String dfa_397s = "\1\u0099\1\0\171\uffff";
    static final String dfa_398s = "\2\uffff\1\2\167\uffff\1\1";
    static final String dfa_399s = "\1\uffff\1\0\171\uffff}>";
    static final String[] dfa_400s = {
            "\112\2\1\uffff\23\2\1\uffff\6\2\1\1\10\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_394 = DFA.unpackEncodedString(dfa_394s);
    static final short[] dfa_395 = DFA.unpackEncodedString(dfa_395s);
    static final char[] dfa_396 = DFA.unpackEncodedStringToUnsignedChars(dfa_396s);
    static final char[] dfa_397 = DFA.unpackEncodedStringToUnsignedChars(dfa_397s);
    static final short[] dfa_398 = DFA.unpackEncodedString(dfa_398s);
    static final short[] dfa_399 = DFA.unpackEncodedString(dfa_399s);
    static final short[][] dfa_400 = unpackEncodedStringArray(dfa_400s);
    class DFA604 extends DFA {
        public DFA604(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 604;
            this.eot = dfa_394;
            this.eof = dfa_395;
            this.min = dfa_396;
            this.max = dfa_397;
            this.accept = dfa_398;
            this.special = dfa_399;
            this.transition = dfa_400;
        }
        public String getDescription() {
            return "35941:3: ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA604_1 = input.LA(1);
                        int index604_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index604_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 604, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_401s = {
            "\112\2\1\uffff\20\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_401 = unpackEncodedStringArray(dfa_401s);
    class DFA606 extends DFA {
        public DFA606(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 606;
            this.eot = dfa_394;
            this.eof = dfa_395;
            this.min = dfa_396;
            this.max = dfa_397;
            this.accept = dfa_398;
            this.special = dfa_399;
            this.transition = dfa_401;
        }
        public String getDescription() {
            return "35998:4: ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA606_1 = input.LA(1);
                        int index606_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index606_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 606, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_402s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_403s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_404s = "\1\176\1\u00a5\12\uffff\1\156\1\uffff\1\u00a5\3\156\3\u00a5\11\uffff";
    static final String dfa_405s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_406s = "\1\0\1\6\12\uffff\1\7\1\uffff\1\4\1\3\1\11\1\10\1\5\1\2\1\1\11\uffff}>";
    static final String[] dfa_407s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\1\uffff\1\34\2\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_402 = DFA.unpackEncodedString(dfa_402s);
    static final char[] dfa_403 = DFA.unpackEncodedStringToUnsignedChars(dfa_403s);
    static final char[] dfa_404 = DFA.unpackEncodedStringToUnsignedChars(dfa_404s);
    static final short[] dfa_405 = DFA.unpackEncodedString(dfa_405s);
    static final short[] dfa_406 = DFA.unpackEncodedString(dfa_406s);
    static final short[][] dfa_407 = unpackEncodedStringArray(dfa_407s);
    class DFA619 extends DFA {
        public DFA619(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 619;
            this.eot = dfa_46;
            this.eof = dfa_402;
            this.min = dfa_403;
            this.max = dfa_404;
            this.accept = dfa_405;
            this.special = dfa_406;
            this.transition = dfa_407;
        }
        public String getDescription() {
            return "36626:3: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA619_0 = input.LA(1);
                        int index619_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA619_0>=11 && LA619_0<=126 && (s=T2S.M_53[LA619_0-(11)])>=0) && (synpred335_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA619_0==Constructor) ) {s = 12;}
                        else if ( (LA619_0==Of) && (synpred335_InternalN4JSParser())) {s = 13;}
                        else if ( (LA619_0==Target) ) {s = 14;}
                        else if ( (LA619_0==Type) ) {s = 15;}
                        else if ( (LA619_0==Union) ) {s = 16;}
                        else if ( (LA619_0==Intersection) ) {s = 17;}
                        else if ( (LA619_0==This) ) {s = 18;}
                        else if ( (LA619_0==Promisify) ) {s = 19;}
                        else if ( (LA619_0==Await) ) {s = 20;}
                        else if ( (LA619_0==Async) && (synpred335_InternalN4JSParser())) {s = 21;}
                        else if ( (LA619_0==Implements) && (synpred335_InternalN4JSParser())) {s = 22;}
                        else if ( (LA619_0==Interface) && (synpred335_InternalN4JSParser())) {s = 23;}
                        else if ( (LA619_0==Private) && (synpred335_InternalN4JSParser())) {s = 24;}
                        else if ( (LA619_0==Protected) && (synpred335_InternalN4JSParser())) {s = 25;}
                        else if ( (LA619_0==Public) && (synpred335_InternalN4JSParser())) {s = 26;}
                        else if ( (LA619_0==Out) && (synpred335_InternalN4JSParser())) {s = 27;}
                        else if ( (LA619_0==Default||LA619_0==This_1||LA619_0==Void||LA619_0==LeftParenthesis||LA619_0==QuestionMark||LA619_0==LeftSquareBracket||LA619_0==LeftCurlyBracket||LA619_0==Tilde) ) {s = 28;}
                        input.seek(index619_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA619_20 = input.LA(1);
                        int index619_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_20==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        else if ( (LA619_20==EOF||LA619_20==Ampersand||LA619_20==RightParenthesis||(LA619_20>=PlusSign && LA619_20<=Comma)||LA619_20==FullStop||(LA619_20>=LessThanSign && LA619_20<=EqualsSign)||LA619_20==QuestionMark||LA619_20==LeftSquareBracket||LA619_20==VerticalLine||LA619_20==RULE_VERSION) ) {s = 28;}
                        input.seek(index619_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA619_19 = input.LA(1);
                        int index619_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_19==EOF||LA619_19==Ampersand||LA619_19==RightParenthesis||(LA619_19>=PlusSign && LA619_19<=Comma)||LA619_19==FullStop||(LA619_19>=LessThanSign && LA619_19<=EqualsSign)||LA619_19==QuestionMark||LA619_19==LeftSquareBracket||LA619_19==VerticalLine||LA619_19==RULE_VERSION) ) {s = 28;}
                        else if ( (LA619_19==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index619_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA619_15 = input.LA(1);
                        int index619_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_15==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA619_15==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index619_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA619_14 = input.LA(1);
                        int index619_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_14==EOF||LA619_14==Ampersand||LA619_14==RightParenthesis||(LA619_14>=PlusSign && LA619_14<=Comma)||LA619_14==FullStop||(LA619_14>=LessThanSign && LA619_14<=EqualsSign)||LA619_14==QuestionMark||LA619_14==LeftSquareBracket||LA619_14==VerticalLine||LA619_14==RULE_VERSION) ) {s = 28;}
                        else if ( (LA619_14==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index619_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA619_18 = input.LA(1);
                        int index619_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_18==EOF||LA619_18==Ampersand||LA619_18==RightParenthesis||(LA619_18>=PlusSign && LA619_18<=Comma)||LA619_18==FullStop||(LA619_18>=LessThanSign && LA619_18<=EqualsSign)||LA619_18==QuestionMark||LA619_18==LeftSquareBracket||LA619_18==VerticalLine||LA619_18==RULE_VERSION) ) {s = 28;}
                        else if ( (LA619_18==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index619_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA619_1 = input.LA(1);
                        int index619_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_1==EOF||LA619_1==Ampersand||LA619_1==RightParenthesis||(LA619_1>=PlusSign && LA619_1<=Comma)||LA619_1==FullStop||(LA619_1>=LessThanSign && LA619_1<=EqualsSign)||LA619_1==QuestionMark||LA619_1==LeftSquareBracket||LA619_1==VerticalLine||LA619_1==RULE_VERSION) ) {s = 28;}
                        else if ( (LA619_1==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        input.seek(index619_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA619_12 = input.LA(1);
                        int index619_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_12==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        else if ( (LA619_12==LeftCurlyBracket) ) {s = 28;}
                        input.seek(index619_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA619_17 = input.LA(1);
                        int index619_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_17==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        else if ( (LA619_17==LeftCurlyBracket) ) {s = 28;}
                        input.seek(index619_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA619_16 = input.LA(1);
                        int index619_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA619_16==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}
                        else if ( (LA619_16==LeftCurlyBracket) ) {s = 28;}
                        input.seek(index619_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 619, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_408s = "\22\uffff";
    static final String dfa_409s = "\1\uffff\7\12\3\uffff\7\12";
    static final String dfa_410s = "\1\10\7\4\1\10\2\uffff\7\4";
    static final String dfa_411s = "\1\176\7\u00a5\1\176\2\uffff\7\u00a5";
    static final String dfa_412s = "\11\uffff\1\2\1\1\7\uffff";
    static final String dfa_413s = "\22\uffff}>";
    static final String[] dfa_414s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\1\16\7\uffff\1\20\13\uffff\1\17\2\uffff\1\15\12\uffff\1\14\10\uffff\1\13\112\uffff\1\21",
            "",
            "",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11"
    };
    static final short[] dfa_408 = DFA.unpackEncodedString(dfa_408s);
    static final short[] dfa_409 = DFA.unpackEncodedString(dfa_409s);
    static final char[] dfa_410 = DFA.unpackEncodedStringToUnsignedChars(dfa_410s);
    static final char[] dfa_411 = DFA.unpackEncodedStringToUnsignedChars(dfa_411s);
    static final short[] dfa_412 = DFA.unpackEncodedString(dfa_412s);
    static final short[] dfa_413 = DFA.unpackEncodedString(dfa_413s);
    static final short[][] dfa_414 = unpackEncodedStringArray(dfa_414s);
    class DFA625 extends DFA {
        public DFA625(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 625;
            this.eot = dfa_408;
            this.eof = dfa_409;
            this.min = dfa_410;
            this.max = dfa_411;
            this.accept = dfa_412;
            this.special = dfa_413;
            this.transition = dfa_414;
        }
        public String getDescription() {
            return "36970:3: (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) )";
        }
    }
    static final String[] dfa_415s = {
            "\112\2\1\uffff\23\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_415 = unpackEncodedStringArray(dfa_415s);
    class DFA626 extends DFA {
        public DFA626(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 626;
            this.eot = dfa_394;
            this.eof = dfa_395;
            this.min = dfa_396;
            this.max = dfa_397;
            this.accept = dfa_398;
            this.special = dfa_399;
            this.transition = dfa_415;
        }
        public String getDescription() {
            return "37015:3: ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA626_1 = input.LA(1);
                        int index626_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index626_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 626, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_416s = "\25\uffff";
    static final String dfa_417s = "\4\uffff\7\14\3\uffff\7\14";
    static final String dfa_418s = "\1\161\3\10\7\4\1\10\2\uffff\7\4";
    static final String dfa_419s = "\1\161\1\u0093\2\176\7\u00a5\1\176\2\uffff\7\u00a5";
    static final String dfa_420s = "\14\uffff\1\1\1\2\7\uffff";
    static final String dfa_421s = "\25\uffff}>";
    static final String[] dfa_422s = {
            "\1\1",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\75\uffff\1\2\14\uffff\1\12\24\uffff\1\3",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\1\21\7\uffff\1\23\13\uffff\1\22\2\uffff\1\20\12\uffff\1\17\10\uffff\1\16\112\uffff\1\24",
            "",
            "",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15"
    };
    static final short[] dfa_416 = DFA.unpackEncodedString(dfa_416s);
    static final short[] dfa_417 = DFA.unpackEncodedString(dfa_417s);
    static final char[] dfa_418 = DFA.unpackEncodedStringToUnsignedChars(dfa_418s);
    static final char[] dfa_419 = DFA.unpackEncodedStringToUnsignedChars(dfa_419s);
    static final short[] dfa_420 = DFA.unpackEncodedString(dfa_420s);
    static final short[] dfa_421 = DFA.unpackEncodedString(dfa_421s);
    static final short[][] dfa_422 = unpackEncodedStringArray(dfa_422s);
    class DFA627 extends DFA {
        public DFA627(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 627;
            this.eot = dfa_416;
            this.eof = dfa_417;
            this.min = dfa_418;
            this.max = dfa_419;
            this.accept = dfa_420;
            this.special = dfa_421;
            this.transition = dfa_422;
        }
        public String getDescription() {
            return "37048:3: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) )";
        }
    }
    class DFA628 extends DFA {
        public DFA628(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 628;
            this.eot = dfa_394;
            this.eof = dfa_395;
            this.min = dfa_396;
            this.max = dfa_397;
            this.accept = dfa_398;
            this.special = dfa_399;
            this.transition = dfa_415;
        }
        public String getDescription() {
            return "37133:3: ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA628_1 = input.LA(1);
                        int index628_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index628_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 628, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_423s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_424s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_425s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_426s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_427s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_423 = DFA.unpackEncodedStringToUnsignedChars(dfa_423s);
    static final char[] dfa_424 = DFA.unpackEncodedStringToUnsignedChars(dfa_424s);
    static final short[] dfa_425 = DFA.unpackEncodedString(dfa_425s);
    static final short[] dfa_426 = DFA.unpackEncodedString(dfa_426s);
    static final short[][] dfa_427 = unpackEncodedStringArray(dfa_427s);
    class DFA635 extends DFA {
        public DFA635(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 635;
            this.eot = dfa_249;
            this.eof = dfa_249;
            this.min = dfa_423;
            this.max = dfa_424;
            this.accept = dfa_425;
            this.special = dfa_426;
            this.transition = dfa_427;
        }
        public String getDescription() {
            return "37464:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA635_0 = input.LA(1);
                        int index635_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA635_0==Get) ) {s = 1;}
                        else if ( (LA635_0==Set) ) {s = 2;}
                        else if ( (LA635_0==LessThanSign) && (synpred341_InternalN4JSParser())) {s = 3;}
                        else if ((LA635_0>=4 && LA635_0<=126 && (s=T2S.M_54[LA635_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index635_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA635_1 = input.LA(1);
                        int index635_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_InternalN4JSParser()) ) {s = 65;}
                        else if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA635_2 = input.LA(1);
                        int index635_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_InternalN4JSParser()) ) {s = 67;}
                        else if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA635_4 = input.LA(1);
                        int index635_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA635_5 = input.LA(1);
                        int index635_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA635_6 = input.LA(1);
                        int index635_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA635_7 = input.LA(1);
                        int index635_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA635_8 = input.LA(1);
                        int index635_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA635_9 = input.LA(1);
                        int index635_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA635_10 = input.LA(1);
                        int index635_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA635_11 = input.LA(1);
                        int index635_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA635_12 = input.LA(1);
                        int index635_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA635_13 = input.LA(1);
                        int index635_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA635_14 = input.LA(1);
                        int index635_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA635_15 = input.LA(1);
                        int index635_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA635_16 = input.LA(1);
                        int index635_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA635_17 = input.LA(1);
                        int index635_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA635_18 = input.LA(1);
                        int index635_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA635_19 = input.LA(1);
                        int index635_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA635_20 = input.LA(1);
                        int index635_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA635_21 = input.LA(1);
                        int index635_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA635_22 = input.LA(1);
                        int index635_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA635_23 = input.LA(1);
                        int index635_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA635_24 = input.LA(1);
                        int index635_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA635_25 = input.LA(1);
                        int index635_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA635_26 = input.LA(1);
                        int index635_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA635_27 = input.LA(1);
                        int index635_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA635_28 = input.LA(1);
                        int index635_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA635_29 = input.LA(1);
                        int index635_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA635_30 = input.LA(1);
                        int index635_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA635_31 = input.LA(1);
                        int index635_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA635_32 = input.LA(1);
                        int index635_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA635_33 = input.LA(1);
                        int index635_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA635_34 = input.LA(1);
                        int index635_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA635_35 = input.LA(1);
                        int index635_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA635_36 = input.LA(1);
                        int index635_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA635_37 = input.LA(1);
                        int index635_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA635_38 = input.LA(1);
                        int index635_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA635_39 = input.LA(1);
                        int index635_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA635_40 = input.LA(1);
                        int index635_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA635_41 = input.LA(1);
                        int index635_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA635_42 = input.LA(1);
                        int index635_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA635_43 = input.LA(1);
                        int index635_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA635_44 = input.LA(1);
                        int index635_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA635_45 = input.LA(1);
                        int index635_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA635_46 = input.LA(1);
                        int index635_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA635_47 = input.LA(1);
                        int index635_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA635_48 = input.LA(1);
                        int index635_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA635_49 = input.LA(1);
                        int index635_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA635_50 = input.LA(1);
                        int index635_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA635_51 = input.LA(1);
                        int index635_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA635_52 = input.LA(1);
                        int index635_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA635_53 = input.LA(1);
                        int index635_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA635_54 = input.LA(1);
                        int index635_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA635_55 = input.LA(1);
                        int index635_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA635_56 = input.LA(1);
                        int index635_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA635_57 = input.LA(1);
                        int index635_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA635_58 = input.LA(1);
                        int index635_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA635_59 = input.LA(1);
                        int index635_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA635_60 = input.LA(1);
                        int index635_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA635_61 = input.LA(1);
                        int index635_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA635_62 = input.LA(1);
                        int index635_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA635_63 = input.LA(1);
                        int index635_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA635_64 = input.LA(1);
                        int index635_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index635_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 635, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA710 extends DFA {
        public DFA710(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 710;
            this.eot = dfa_218;
            this.eof = dfa_218;
            this.min = dfa_219;
            this.max = dfa_220;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_223;
        }
        public String getDescription() {
            return "14540:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA713 extends DFA {
        public DFA713(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 713;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "14752:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA715 extends DFA {
        public DFA715(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 715;
            this.eot = dfa_218;
            this.eof = dfa_218;
            this.min = dfa_219;
            this.max = dfa_220;
            this.accept = dfa_221;
            this.special = dfa_222;
            this.transition = dfa_223;
        }
        public String getDescription() {
            return "14837:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA718 extends DFA {
        public DFA718(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 718;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "15049:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA720 extends DFA {
        public DFA720(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 720;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_203;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_207;
        }
        public String getDescription() {
            return "15141:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA722 extends DFA {
        public DFA722(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 722;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "15544:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA724 extends DFA {
        public DFA724(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 724;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_203;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_207;
        }
        public String getDescription() {
            return "15820:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA726 extends DFA {
        public DFA726(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 726;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "16223:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA763 extends DFA {
        public DFA763(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 763;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "()* loopback of 29848:5: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA768 extends DFA {
        public DFA768(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 768;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "()* loopback of 30123:5: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA773 extends DFA {
        public DFA773(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 773;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_353;
        }
        public String getDescription() {
            return "()* loopback of 30587:7: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA775 extends DFA {
        public DFA775(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 775;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "30595:7: ( ruleBogusTypeRefFragment[null] )?";
        }
    }
    class DFA779 extends DFA {
        public DFA779(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 779;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_17;
            this.transition = dfa_353;
        }
        public String getDescription() {
            return "()* loopback of 31203:7: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA781 extends DFA {
        public DFA781(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 781;
            this.eot = dfa_202;
            this.eof = dfa_202;
            this.min = dfa_208;
            this.max = dfa_204;
            this.accept = dfa_205;
            this.special = dfa_206;
            this.transition = dfa_209;
        }
        public String getDescription() {
            return "31211:7: ( ruleBogusTypeRefFragment[null] )?";
        }
    }
    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000000000203002L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x7C0FE6BCF5B8CF70L,0x57A24C4A92440341L,0x0000000000203002L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000010440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000001000002000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000000000203002L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000002000040000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000002000203002L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024C0020440000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024C0000440000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000002000203002L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x000D048090010130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x4002440000440000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_18;
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000000000203002L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000002000203002L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000080000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000000000203002L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000002000203002L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000000002A03002L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000002002A03002L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x6C0D4680D5194F70L,0x4002480000440000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A24A40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24800407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x6C0D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000000010004000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x7C07C6B4D598CF72L,0x57A04C4C10444200L,0x0000000000203002L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x7C07C6B4D598CF70L,0x57A04C4810440200L,0x0000000000203002L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000400L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000082L,0x0000014000000800L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000082L,0x0000014000200800L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0120000000000002L,0x0000000000001002L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0080000000000002L,0x00000182008202B4L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4AD2440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0830000200L,0x0000000000200002L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0810000200L,0x0000000000200002L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0008040090010100L,0x4000000000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A34C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x7C0FC6B4D599CF70L,0x57A04C4810440200L,0x0000000000203002L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24840407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x040D048895194D30L,0x4002400000000000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A34C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004108007C0001L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000000000000002L,0x0000000400004000L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000100L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF2L,0x57800002007C0101L,0x0000000000200000L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_188 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_189 = new BitSet(new long[]{0x2000000000000000L,0x0000020000200000L});
    public static final BitSet FOLLOW_190 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_191 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_192 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_193 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_194 = new BitSet(new long[]{0x000D048090010130L,0x4002480000000000L});
    public static final BitSet FOLLOW_195 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_196 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_197 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_198 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_199 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_200 = new BitSet(new long[]{0x0008040090010102L,0x4000000000000000L});
    public static final BitSet FOLLOW_201 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_202 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_203 = new BitSet(new long[]{0x200D048090010130L,0x40025A0010200000L});
    public static final BitSet FOLLOW_204 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_205 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_206 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_207 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_208 = new BitSet(new long[]{0x0009040090010100L,0x4000020000000000L});
    public static final BitSet FOLLOW_209 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_210 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_211 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_213 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_214 = new BitSet(new long[]{0x7C0FC4B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000203002L});
}
final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 6, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 79, 86, 13, 24, 89, -1, -1, 9, 10, 66, 21, 20, 12, 81, 15, 83, 36, 68, 23, 42, 80, -1, 17, 16, 58, 48, 84, 38, 77, 29, 40, 90, 88, 19, 33, 60, 47, 57, 37, 67, 82, -1, -1, -1, -1, 78, 30, 26, 46, 44, 31, 85, 25, -1, -1, -1, -1, -1, 69, -1, 70, 62, -1, -1, -1, -1, -1, -1, 7, -1, 32, 76, 75, -1, 35, -1, -1, 74, -1, -1, 45, -1, -1, 71, -1, 72, -1, 61, -1, 27, 49, -1, -1, -1, 8, 63, -1, -1, 22, -1, 87, 73, -1, -1, -1, 50, -1, 55, 52, 53, 54, -1, 56, -1, 28, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 64, -1, -1, -1, -1, -1, -1, -1, 51};
	final static int[] M_2 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_3 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_5 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_6 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_8 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_15 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 50, -1, -1, -1, 26, 10, 54, -1, 34, 28, -1, 13, -1, 18, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 45, 31, 42, 19, 55, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_16 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 50, -1, -1, -1, 25, 9, 54, -1, 34, 27, -1, 12, -1, 17, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, 55, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_17 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_18 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_19 = { 15, 12, 61, 34, 5, 62, 64, 55, 21, 22, 54, 30, 7, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 6, 41, 60, 4, 16, 18, 19, 20, 48, 37, 39, 14, 43, 45, 3, 17, 25, 49, 58, 46, 10, 47, 11, 2, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 74, -1, -1, 13, -1, -1, 9, -1, -1, -1, 68, -1, 72, 70, 71, -1, -1, 73, -1, 8, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_21 = { 14, 11, 60, 33, 4, 61, 63, 54, 20, 21, 53, 29, 6, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 5, 40, 59, 3, 15, 17, 18, 19, 47, 36, 38, 13, 42, 44, 2, 16, 24, 48, 57, 45, 9, 46, 10, 1, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, 12, -1, -1, 8, -1, -1, -1, 67, -1, 71, 69, 70, -1, -1, 72, -1, 7, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68};
	final static int[] M_23 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, -1, -1, 34, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 53, -1, 43, 5, -1, 21, -1, 7, 23, -1, -1, -1, 16, 45, 4, 42, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 3, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_24 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, -1, -1, 34, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_25 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 53, -1, -1, -1, 30, 12, 57, -1, 35, 32, -1, 15, -1, 20, 59, 27, 26, -1, -1, 54, -1, 44, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 46, 5, 43, 21, 58, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, 48, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 34, 1, -1, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 7, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_26 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, 56, -1, 34, 31, -1, 14, -1, 19, 58, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, 57, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, 59, -1, 60, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 64, -1, -1, 50, -1, -1, 61, -1, 62, -1, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, 63, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_27 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_28 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_29 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_30 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, 1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_31 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 49, 8, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 6, 1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 10, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_32 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 57, -1, -1, -1, 34, 16, 61, -1, 39, 36, -1, 19, -1, 24, 63, 31, 30, -1, -1, 58, -1, 48, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 50, 9, 47, 25, 62, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 7, 1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, 40, -1, 45, 42, 43, 44, -1, 46, -1, 11, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, 41};
	final static int[] M_33 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 48, 8, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 6, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_34 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 49, 9, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 7, 1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_35 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_36 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 34, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_37 = { 50, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52};
	final static int[] M_38 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, 34, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_40 = { 23, 20, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, 15, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 22, -1, -1, 11, -1, -1, -1, -1, -1, 18, -1, 19, 10, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 21, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16};
	final static int[] M_41 = { 66, 46, -1, 67, -1, -1, 33, 34, -1, 42, -1, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, -1, -1, 29, 31, 32, -1, 60, 49, 51, -1, 55, 57, -1, 30, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, 77, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, 74, 72, 73, -1, -1, 75, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71};
	final static int[] M_44 = { 22, 19, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, 14, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 21, -1, -1, 10, -1, -1, -1, -1, -1, 17, -1, 18, 9, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_45 = { 65, 45, -1, 66, -1, -1, 32, 33, -1, 41, -1, 38, 39, -1, -1, 34, 37, 43, -1, 47, -1, 49, -1, 52, 27, -1, 28, 30, 31, -1, 59, 48, 50, -1, 54, 56, -1, 29, 36, 60, 63, 57, -1, 58, -1, -1, 55, -1, -1, -1, -1, 40, -1, 61, 46, 67, -1, 51, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 35, 42, 44, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, 73, 71, 72, -1, -1, 74, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_48 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_49 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_50 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_52 = { 59, 54, 64, 27, 61, 65, 67, 50, 13, 14, 49, 23, 15, 20, 21, 66, 48, 16, 19, 25, 68, 29, 51, 31, 56, 35, 63, 62, 8, 10, 11, 12, 43, 30, 33, 58, 38, 40, 60, 9, 18, 44, 53, 41, 32, 42, 57, 37, 39, -1, -1, -1, -1, 22, 45, 47, 28, 69, 46, 34, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 17, 24, 26, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
	final static int[] M_53 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_54 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}